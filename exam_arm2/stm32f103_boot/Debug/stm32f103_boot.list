
stm32f103_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a04  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003b10  08003b10  00004b10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc8  08003bc8  000050e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003bc8  08003bc8  00004bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bd0  08003bd0  000050e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bd0  08003bd0  00004bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bd4  08003bd4  00004bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  08003bd8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f14  200000e8  08003cbc  000050e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ffc  08003cbc  00005ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e50  00000000  00000000  0000510d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b4c  00000000  00000000  00017f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000075db  00000000  00000000  0001caa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  00024088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101e  00000000  00000000  00024e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bc9d  00000000  00000000  00025eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d3cc  00000000  00000000  00041b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087cd7  00000000  00000000  0005ef17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e6bee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ed0  00000000  00000000  000e6c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000e8b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e8 	.word	0x200000e8
 8000128:	00000000 	.word	0x00000000
 800012c:	08003af8 	.word	0x08003af8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ec 	.word	0x200000ec
 8000148:	08003af8 	.word	0x08003af8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <apInit>:


void apInit(void)
{

}
 800015c:	4770      	bx	lr

0800015e <apMain>:

void apMain(void)
{
 800015e:	b510      	push	{r4, lr}
	uint32_t pre_time;

	pre_time = millis();
 8000160:	f000 f80f 	bl	8000182 <millis>
 8000164:	4604      	mov	r4, r0
	while(1)
	{
		if(millis() - pre_time >= 100)
 8000166:	f000 f80c 	bl	8000182 <millis>
 800016a:	1b00      	subs	r0, r0, r4
 800016c:	2863      	cmp	r0, #99	@ 0x63
 800016e:	d9fa      	bls.n	8000166 <apMain+0x8>
		{
			pre_time = millis();
 8000170:	f000 f807 	bl	8000182 <millis>
 8000174:	4604      	mov	r4, r0
			ledToggle(_DEF_LED1);
 8000176:	2000      	movs	r0, #0
 8000178:	f000 f990 	bl	800049c <ledToggle>
 800017c:	e7f3      	b.n	8000166 <apMain+0x8>

0800017e <delay>:

}

void delay(uint32_t ms)
{
	HAL_Delay(ms);
 800017e:	f000 babd 	b.w	80006fc <HAL_Delay>

08000182 <millis>:
}

uint32_t millis(void)
{
	return HAL_GetTick();
 8000182:	f000 bab5 	b.w	80006f0 <HAL_GetTick>

08000186 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 8000186:	b510      	push	{r4, lr}
 8000188:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018a:	2214      	movs	r2, #20
 800018c:	2100      	movs	r1, #0
 800018e:	a80c      	add	r0, sp, #48	@ 0x30
 8000190:	f003 fc85 	bl	8003a9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000194:	2214      	movs	r2, #20
 8000196:	2100      	movs	r1, #0
 8000198:	eb0d 0002 	add.w	r0, sp, r2
 800019c:	f003 fc7f 	bl	8003a9e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a0:	2210      	movs	r2, #16
 80001a2:	2100      	movs	r1, #0
 80001a4:	a801      	add	r0, sp, #4
 80001a6:	f003 fc7a 	bl	8003a9e <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001aa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001b0:	2105      	movs	r1, #5
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80001b2:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b4:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b8:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001bc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c0:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c2:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c8:	f001 fc14 	bl	80019f4 <HAL_RCC_OscConfig>
 80001cc:	b108      	cbz	r0, 80001d2 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001ce:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001d0:	e7fe      	b.n	80001d0 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d4:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001dc:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e2:	4621      	mov	r1, r4
 80001e4:	a805      	add	r0, sp, #20
 80001e6:	f001 fdc7 	bl	8001d78 <HAL_RCC_ClockConfig>
 80001ea:	b108      	cbz	r0, 80001f0 <SystemClock_Config+0x6a>
 80001ec:	b672      	cpsid	i
  while (1)
 80001ee:	e7fe      	b.n	80001ee <SystemClock_Config+0x68>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80001f0:	2211      	movs	r2, #17
 80001f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001f6:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001f8:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80001fa:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001fe:	f001 fe67 	bl	8001ed0 <HAL_RCCEx_PeriphCLKConfig>
 8000202:	b108      	cbz	r0, 8000208 <SystemClock_Config+0x82>
 8000204:	b672      	cpsid	i
  while (1)
 8000206:	e7fe      	b.n	8000206 <SystemClock_Config+0x80>
}
 8000208:	b014      	add	sp, #80	@ 0x50
 800020a:	bd10      	pop	{r4, pc}

0800020c <bspInit>:
{
 800020c:	b570      	push	{r4, r5, r6, lr}
 800020e:	b086      	sub	sp, #24
	 HAL_Init();
 8000210:	f000 fa50 	bl	80006b4 <HAL_Init>
	 SystemClock_Config();
 8000214:	f7ff ffb7 	bl	8000186 <SystemClock_Config>
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 8000218:	4b13      	ldr	r3, [pc, #76]	@ (8000268 <bspInit+0x5c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  //open drain
 800021a:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 800021e:	699a      	ldr	r2, [r3, #24]
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000220:	2600      	movs	r6, #0
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 8000222:	f042 0220 	orr.w	r2, r2, #32
 8000226:	619a      	str	r2, [r3, #24]
 8000228:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800022a:	4c10      	ldr	r4, [pc, #64]	@ (800026c <bspInit+0x60>)
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 800022c:	f002 0220 	and.w	r2, r2, #32
 8000230:	9200      	str	r2, [sp, #0]
 8000232:	9a00      	ldr	r2, [sp, #0]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000234:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000236:	4620      	mov	r0, r4
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000238:	f042 0204 	orr.w	r2, r2, #4
 800023c:	619a      	str	r2, [r3, #24]
 800023e:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000240:	a902      	add	r1, sp, #8
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	f003 0304 	and.w	r3, r3, #4
 8000246:	9301      	str	r3, [sp, #4]
 8000248:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  //open drain
 800024a:	2311      	movs	r3, #17
 800024c:	e9cd 5302 	strd	r5, r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000250:	2302      	movs	r3, #2
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000252:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000254:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000256:	f000 fbed 	bl	8000a34 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET); //회로에 풀업이
 800025a:	4632      	mov	r2, r6
 800025c:	4629      	mov	r1, r5
 800025e:	4620      	mov	r0, r4
 8000260:	f000 fcbc 	bl	8000bdc <HAL_GPIO_WritePin>
}
 8000264:	b006      	add	sp, #24
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	40021000 	.word	0x40021000
 800026c:	40010800 	.word	0x40010800

08000270 <Error_Handler>:
 8000270:	b672      	cpsid	i
  while (1)
 8000272:	e7fe      	b.n	8000272 <Error_Handler+0x2>

08000274 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000274:	4b0e      	ldr	r3, [pc, #56]	@ (80002b0 <HAL_MspInit+0x3c>)
{
 8000276:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000278:	699a      	ldr	r2, [r3, #24]
 800027a:	f042 0201 	orr.w	r2, r2, #1
 800027e:	619a      	str	r2, [r3, #24]
 8000280:	699a      	ldr	r2, [r3, #24]
 8000282:	f002 0201 	and.w	r2, r2, #1
 8000286:	9200      	str	r2, [sp, #0]
 8000288:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800028a:	69da      	ldr	r2, [r3, #28]
 800028c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000290:	61da      	str	r2, [r3, #28]
 8000292:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000294:	4a07      	ldr	r2, [pc, #28]	@ (80002b4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800029a:	9301      	str	r3, [sp, #4]
 800029c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800029e:	6853      	ldr	r3, [r2, #4]
 80002a0:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80002a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002aa:	b002      	add	sp, #8
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40021000 	.word	0x40021000
 80002b4:	40010000 	.word	0x40010000

080002b8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002b8:	e7fe      	b.n	80002b8 <NMI_Handler>

080002ba <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ba:	e7fe      	b.n	80002ba <HardFault_Handler>

080002bc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002bc:	e7fe      	b.n	80002bc <MemManage_Handler>

080002be <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002be:	e7fe      	b.n	80002be <BusFault_Handler>

080002c0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002c0:	e7fe      	b.n	80002c0 <UsageFault_Handler>

080002c2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002c2:	4770      	bx	lr

080002c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80002c4:	4770      	bx	lr

080002c6 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002c8:	f000 ba06 	b.w	80006d8 <HAL_IncTick>

080002cc <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80002cc:	4801      	ldr	r0, [pc, #4]	@ (80002d4 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80002ce:	f000 bd3b 	b.w	8000d48 <HAL_PCD_IRQHandler>
 80002d2:	bf00      	nop
 80002d4:	20000d24 	.word	0x20000d24

080002d8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002d8:	4770      	bx	lr
	...

080002dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002dc:	f7ff fffc 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e0:	480b      	ldr	r0, [pc, #44]	@ (8000310 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80002e2:	490c      	ldr	r1, [pc, #48]	@ (8000314 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80002e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000318 <LoopFillZerobss+0x16>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a09      	ldr	r2, [pc, #36]	@ (800031c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80002f8:	4c09      	ldr	r4, [pc, #36]	@ (8000320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000306:	f003 fbd3 	bl	8003ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030a:	f003 fbbf 	bl	8003a8c <main>
  bx lr
 800030e:	4770      	bx	lr
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8000318:	08003bd8 	.word	0x08003bd8
  ldr r2, =_sbss
 800031c:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000320:	20000ffc 	.word	0x20000ffc

08000324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC1_2_IRQHandler>
	...

08000328 <flashInit>:
static flash_tbl_t flash_tbl[FLASH_SECTOR_MAX];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 8000328:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
	for (int i=0;i<FLASH_SECTOR_MAX;i++)
	{
		flash_tbl[i].addr =0x8000000 + i*1024;   //테이블 시트에 나와있은 시작 주소 0x8000000 에 sector 크기 1024(0x800U)
		flash_tbl[i].length = 1024;
 800032c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000330:	4a05      	ldr	r2, [pc, #20]	@ (8000348 <flashInit+0x20>)
	for (int i=0;i<FLASH_SECTOR_MAX;i++)
 8000332:	4906      	ldr	r1, [pc, #24]	@ (800034c <flashInit+0x24>)
		flash_tbl[i].addr =0x8000000 + i*1024;   //테이블 시트에 나와있은 시작 주소 0x8000000 에 sector 크기 1024(0x800U)
 8000334:	6013      	str	r3, [r2, #0]
	for (int i=0;i<FLASH_SECTOR_MAX;i++)
 8000336:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800033a:	428b      	cmp	r3, r1
		flash_tbl[i].length = 1024;
 800033c:	8090      	strh	r0, [r2, #4]
	for (int i=0;i<FLASH_SECTOR_MAX;i++)
 800033e:	f102 0208 	add.w	r2, r2, #8
 8000342:	d1f7      	bne.n	8000334 <flashInit+0xc>
	}

	return true;
}
 8000344:	2001      	movs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	20000104 	.word	0x20000104
 800034c:	08010000 	.word	0x08010000

08000350 <flashErase>:

	int16_t start_sector_num = -1;
	uint32_t sector_count = 0 ;


	for(int i=0;i<FLASH_SECTOR_MAX;i++)
 8000350:	f04f 0c00 	mov.w	ip, #0
{
 8000354:	b5f0      	push	{r4, r5, r6, r7, lr}
	int16_t start_sector_num = -1;
 8000356:	f04f 36ff 	mov.w	r6, #4294967295
 800035a:	f8df e09c 	ldr.w	lr, [pc, #156]	@ 80003f8 <flashErase+0xa8>
	uint32_t sector_count = 0 ;
 800035e:	4664      	mov	r4, ip
 8000360:	4677      	mov	r7, lr
	uint32_t flash_end;

	sector_start = flash_tbl[sector_num].addr;
	sector_end = flash_tbl[sector_num].addr + flash_tbl[sector_num].length -1;
	flash_start = addr;      //지워야 할 주소
	flash_end = addr + length -1;
 8000362:	4431      	add	r1, r6
{
 8000364:	b087      	sub	sp, #28
	flash_end = addr + length -1;
 8000366:	4401      	add	r1, r0
	sector_start = flash_tbl[sector_num].addr;
 8000368:	f8de 2000 	ldr.w	r2, [lr]
	sector_end = flash_tbl[sector_num].addr + flash_tbl[sector_num].length -1;
 800036c:	f8be 5004 	ldrh.w	r5, [lr, #4]
 8000370:	1e53      	subs	r3, r2, #1

	if(sector_start >=flash_start && sector_start <=flash_end)
 8000372:	4290      	cmp	r0, r2
	sector_end = flash_tbl[sector_num].addr + flash_tbl[sector_num].length -1;
 8000374:	442b      	add	r3, r5
	if(sector_start >=flash_start && sector_start <=flash_end)
 8000376:	d834      	bhi.n	80003e2 <flashErase+0x92>
 8000378:	428a      	cmp	r2, r1
 800037a:	bf8c      	ite	hi
 800037c:	2500      	movhi	r5, #0
 800037e:	2501      	movls	r5, #1
	{
		ret = true;
	}
	if (sector_end >= flash_start && sector_end <= flash_end)
 8000380:	4298      	cmp	r0, r3
 8000382:	d802      	bhi.n	800038a <flashErase+0x3a>
	{
		ret =true;
 8000384:	428b      	cmp	r3, r1
 8000386:	bf98      	it	ls
 8000388:	2501      	movls	r5, #1
	}

	if(flash_start >=sector_start && flash_start <= sector_end)
 800038a:	4290      	cmp	r0, r2
 800038c:	d301      	bcc.n	8000392 <flashErase+0x42>
 800038e:	4298      	cmp	r0, r3
 8000390:	d904      	bls.n	800039c <flashErase+0x4c>
	{
		ret =true;
	}

	if(flash_end >=sector_start && flash_end <= sector_end)
 8000392:	428a      	cmp	r2, r1
 8000394:	d801      	bhi.n	800039a <flashErase+0x4a>
 8000396:	428b      	cmp	r3, r1
 8000398:	d200      	bcs.n	800039c <flashErase+0x4c>
		if(flashInSector(i,addr,length) == true)
 800039a:	b125      	cbz	r5, 80003a6 <flashErase+0x56>
			if(start_sector_num < 0)
 800039c:	2e00      	cmp	r6, #0
				start_sector_num = i;  //처음 검출되는 sector가 첫 넘버
 800039e:	bfb8      	it	lt
 80003a0:	fa0f f68c 	sxthlt.w	r6, ip
			sector_count++;  //몇개의 sector를 지워야하는지
 80003a4:	3401      	adds	r4, #1
	for(int i=0;i<FLASH_SECTOR_MAX;i++)
 80003a6:	f10c 0c01 	add.w	ip, ip, #1
 80003aa:	f1bc 0f40 	cmp.w	ip, #64	@ 0x40
 80003ae:	f10e 0e08 	add.w	lr, lr, #8
 80003b2:	d1d9      	bne.n	8000368 <flashErase+0x18>
	if(sector_count >0)
 80003b4:	b194      	cbz	r4, 80003dc <flashErase+0x8c>
		HAL_FLASH_Unlock();
 80003b6:	f000 fa3f 	bl	8000838 <HAL_FLASH_Unlock>
		init.Banks = FLASH_BANK_1;  // //FLASH_EraseInitTypeDef 타고 들어가서 찾음
 80003ba:	2200      	movs	r2, #0
 80003bc:	2301      	movs	r3, #1
 80003be:	e9cd 2302 	strd	r2, r3, [sp, #8]
		init.PageAddress = flash_tbl[start_sector_num].addr;
 80003c2:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
		status =  HAL_FLASHEx_Erase(&init,&page_error);
 80003c6:	a901      	add	r1, sp, #4
 80003c8:	a802      	add	r0, sp, #8
		init.NbPages    = sector_count;
 80003ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
		status =  HAL_FLASHEx_Erase(&init,&page_error);
 80003ce:	f000 fadd 	bl	800098c <HAL_FLASHEx_Erase>
		if(status == HAL_OK)
 80003d2:	fab0 f480 	clz	r4, r0
 80003d6:	0964      	lsrs	r4, r4, #5
		HAL_FLASH_Lock();
 80003d8:	f000 fa40 	bl	800085c <HAL_FLASH_Lock>
}
 80003dc:	4620      	mov	r0, r4
 80003de:	b007      	add	sp, #28
 80003e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sector_end >= flash_start && sector_end <= flash_end)
 80003e2:	4298      	cmp	r0, r3
 80003e4:	d903      	bls.n	80003ee <flashErase+0x9e>
	if(flash_end >=sector_start && flash_end <= sector_end)
 80003e6:	428a      	cmp	r2, r1
 80003e8:	d8dd      	bhi.n	80003a6 <flashErase+0x56>
	bool ret = false;
 80003ea:	2500      	movs	r5, #0
 80003ec:	e7d3      	b.n	8000396 <flashErase+0x46>
	if (sector_end >= flash_start && sector_end <= flash_end)
 80003ee:	428b      	cmp	r3, r1
 80003f0:	d9d4      	bls.n	800039c <flashErase+0x4c>
	bool ret = false;
 80003f2:	2500      	movs	r5, #0
 80003f4:	e7c9      	b.n	800038a <flashErase+0x3a>
 80003f6:	bf00      	nop
 80003f8:	20000104 	.word	0x20000104

080003fc <flashWrite>:
{
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(addr%2 != 0)   //ALIGN 되지 않았으면 리턴
 80003fe:	f010 0501 	ands.w	r5, r0, #1
{
 8000402:	4606      	mov	r6, r0
 8000404:	460c      	mov	r4, r1
 8000406:	4617      	mov	r7, r2
	if(addr%2 != 0)   //ALIGN 되지 않았으면 리턴
 8000408:	d119      	bne.n	800043e <flashWrite+0x42>
	HAL_FLASH_Unlock();
 800040a:	f000 fa15 	bl	8000838 <HAL_FLASH_Unlock>
	for(int i=0;i<length; i+=2)
 800040e:	3401      	adds	r4, #1
 8000410:	42af      	cmp	r7, r5
 8000412:	d804      	bhi.n	800041e <flashWrite+0x22>
	bool ret =true;
 8000414:	2401      	movs	r4, #1
	HAL_FLASH_Lock();
 8000416:	f000 fa21 	bl	800085c <HAL_FLASH_Lock>
}
 800041a:	4620      	mov	r0, r4
 800041c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data |= p_data[i+1] << 8 ;   //16bit 변수로 만들어 준다?
 800041e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8000422:	7822      	ldrb	r2, [r4, #0]
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr +i , (uint64_t)data);
 8000424:	2001      	movs	r0, #1
 8000426:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800042a:	1971      	adds	r1, r6, r5
 800042c:	2300      	movs	r3, #0
 800042e:	f000 fa49 	bl	80008c4 <HAL_FLASH_Program>
		if(status != HAL_OK)
 8000432:	3402      	adds	r4, #2
 8000434:	b908      	cbnz	r0, 800043a <flashWrite+0x3e>
	for(int i=0;i<length; i+=2)
 8000436:	3502      	adds	r5, #2
 8000438:	e7ea      	b.n	8000410 <flashWrite+0x14>
			ret =false;
 800043a:	2400      	movs	r4, #0
 800043c:	e7eb      	b.n	8000416 <flashWrite+0x1a>
		return false;
 800043e:	2400      	movs	r4, #0
 8000440:	e7eb      	b.n	800041a <flashWrite+0x1e>
	...

08000444 <ledOff.part.0>:
	 HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state); // Reset이 0
}
void ledOff(uint8_t ch)
{
	if(ch >=LED_MAX_CH) return;
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000444:	4b02      	ldr	r3, [pc, #8]	@ (8000450 <ledOff.part.0+0xc>)
 8000446:	79da      	ldrb	r2, [r3, #7]
 8000448:	8899      	ldrh	r1, [r3, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	f000 bbc6 	b.w	8000bdc <HAL_GPIO_WritePin>
 8000450:	20000004 	.word	0x20000004

08000454 <ledInit>:
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000454:	2300      	movs	r3, #0
{
 8000456:	b510      	push	{r4, lr}
 8000458:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045a:	9304      	str	r3, [sp, #16]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 800045c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000460:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000464:	699a      	ldr	r2, [r3, #24]
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000466:	2401      	movs	r4, #1
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	f042 0208 	orr.w	r2, r2, #8
 800046c:	619a      	str	r2, [r3, #24]
 800046e:	699b      	ldr	r3, [r3, #24]
		 HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000470:	a902      	add	r1, sp, #8
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	f003 0308 	and.w	r3, r3, #8
 8000476:	9301      	str	r3, [sp, #4]
 8000478:	9b01      	ldr	r3, [sp, #4]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047a:	2302      	movs	r3, #2
 800047c:	9305      	str	r3, [sp, #20]
		 GPIO_InitStruct.Pin = led_tbl[i].pin;
 800047e:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <ledInit+0x44>)
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000480:	9403      	str	r4, [sp, #12]
		 GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000482:	889a      	ldrh	r2, [r3, #4]
		 HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000484:	6818      	ldr	r0, [r3, #0]
		 GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000486:	9202      	str	r2, [sp, #8]
		 HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000488:	f000 fad4 	bl	8000a34 <HAL_GPIO_Init>
	if(ch >=LED_MAX_CH) return;
 800048c:	f7ff ffda 	bl	8000444 <ledOff.part.0>
}
 8000490:	4620      	mov	r0, r4
 8000492:	b006      	add	sp, #24
 8000494:	bd10      	pop	{r4, pc}
 8000496:	bf00      	nop
 8000498:	20000004 	.word	0x20000004

0800049c <ledToggle>:

}
void ledToggle(uint8_t ch)
{
	if(ch >=LED_MAX_CH) return;
 800049c:	b920      	cbnz	r0, 80004a8 <ledToggle+0xc>
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 800049e:	4b03      	ldr	r3, [pc, #12]	@ (80004ac <ledToggle+0x10>)
 80004a0:	8899      	ldrh	r1, [r3, #4]
 80004a2:	6818      	ldr	r0, [r3, #0]
 80004a4:	f000 bb9f 	b.w	8000be6 <HAL_GPIO_TogglePin>
}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000004 	.word	0x20000004

080004b0 <resetInit>:
{
	bool ret = true;

	//만약 Reset 핀이 눌렸다면
	//delay 500ms 안에 다시 빠르게 누르면 레지스터 값이 증가
	if(RCC->CSR == (1<<26))
 80004b0:	4b1e      	ldr	r3, [pc, #120]	@ (800052c <resetInit+0x7c>)
{
 80004b2:	b510      	push	{r4, lr}
	if(RCC->CSR == (1<<26))
 80004b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004b6:	4c1e      	ldr	r4, [pc, #120]	@ (8000530 <resetInit+0x80>)
 80004b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80004bc:	d10e      	bne.n	80004dc <resetInit+0x2c>
	{
		rtcBackupRegWrite(1,rtcBackupRegRead(1)+1);
 80004be:	2001      	movs	r0, #1
 80004c0:	f000 f860 	bl	8000584 <rtcBackupRegRead>
 80004c4:	1c41      	adds	r1, r0, #1
 80004c6:	2001      	movs	r0, #1
 80004c8:	f000 f862 	bl	8000590 <rtcBackupRegWrite>
		delay(500);
 80004cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004d0:	f7ff fe55 	bl	800017e <delay>
		reset_count = rtcBackupRegRead(1);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f000 f855 	bl	8000584 <rtcBackupRegRead>
 80004da:	6020      	str	r0, [r4, #0]
	}

	rtcBackupRegWrite(1,0);
 80004dc:	2100      	movs	r1, #0
 80004de:	2001      	movs	r0, #1
 80004e0:	f000 f856 	bl	8000590 <rtcBackupRegWrite>


	if(reset_count != 2)
 80004e4:	6823      	ldr	r3, [r4, #0]
 80004e6:	2b02      	cmp	r3, #2
 80004e8:	d01d      	beq.n	8000526 <resetInit+0x76>
	{
		void (**jump_func)() = (void (**)())(0x8005000 + 4);               //Reset_Handler 주소


		if((uint32_t)*jump_func != 0xFFFFFFFF)
 80004ea:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <resetInit+0x84>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	3301      	adds	r3, #1
 80004f0:	d019      	beq.n	8000526 <resetInit+0x76>
		{
			HAL_RCC_DeInit();  //clock 초기화
 80004f2:	f001 fa13 	bl	800191c <HAL_RCC_DeInit>
			HAL_DeInit();   //버스의 패리패럴 리셋
 80004f6:	f000 f8a9 	bl	800064c <HAL_DeInit>

			for(int i=0;i<8;i++)
 80004fa:	2300      	movs	r3, #0
			{
				//인터럽트 끄기
				NVIC->ICER[i] = 0xFFFFFFFF;
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000500:	4a0d      	ldr	r2, [pc, #52]	@ (8000538 <resetInit+0x88>)
 8000502:	f103 0120 	add.w	r1, r3, #32
 8000506:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800050a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800050e:	f3bf 8f6f 	isb	sy
			for(int i=0;i<8;i++)
 8000512:	3301      	adds	r3, #1
 8000514:	2b08      	cmp	r3, #8
 8000516:	d1f4      	bne.n	8000502 <resetInit+0x52>
				//명령어 싱크
				__DSB();
				__ISB();
			}
			SysTick->CTRL = 0;
 8000518:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]

			(*jump_func)();
 8000520:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <resetInit+0x84>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	4798      	blx	r3
	}



	return ret;
}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000
 8000530:	20000304 	.word	0x20000304
 8000534:	08005000 	.word	0x08005000
 8000538:	e000e100 	.word	0xe000e100

0800053c <rtcInit>:

bool rtcInit(void)
{
	bool ret = true;

	__HAL_RCC_GPIOC_CLK_ENABLE();
 800053c:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <rtcInit+0x3c>)
{
 800053e:	b507      	push	{r0, r1, r2, lr}
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000540:	699a      	ldr	r2, [r3, #24]

	hrtc.Instance = RTC;
 8000542:	480e      	ldr	r0, [pc, #56]	@ (800057c <rtcInit+0x40>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000544:	f042 0210 	orr.w	r2, r2, #16
 8000548:	619a      	str	r2, [r3, #24]
 800054a:	699b      	ldr	r3, [r3, #24]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800054c:	4a0c      	ldr	r2, [pc, #48]	@ (8000580 <rtcInit+0x44>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800054e:	f003 0310 	and.w	r3, r3, #16
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	9b01      	ldr	r3, [sp, #4]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
 800055a:	e9c0 2300 	strd	r2, r3, [r0]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800055e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000562:	6083      	str	r3, [r0, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000564:	f001 fdd6 	bl	8002114 <HAL_RTC_Init>
 8000568:	b108      	cbz	r0, 800056e <rtcInit+0x32>
	{
	   Error_Handler();
 800056a:	f7ff fe81 	bl	8000270 <Error_Handler>
	}


	return ret;
}
 800056e:	2001      	movs	r0, #1
 8000570:	b003      	add	sp, #12
 8000572:	f85d fb04 	ldr.w	pc, [sp], #4
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	20000308 	.word	0x20000308
 8000580:	40002800 	.word	0x40002800

08000584 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8000584:	4601      	mov	r1, r0
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000586:	4801      	ldr	r0, [pc, #4]	@ (800058c <rtcBackupRegRead+0x8>)
 8000588:	f001 be12 	b.w	80021b0 <HAL_RTCEx_BKUPRead>
 800058c:	20000308 	.word	0x20000308

08000590 <rtcBackupRegWrite>:
}


void rtcBackupRegWrite(uint32_t index,uint32_t data)
{
 8000590:	460a      	mov	r2, r1
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000592:	4601      	mov	r1, r0
 8000594:	4801      	ldr	r0, [pc, #4]	@ (800059c <rtcBackupRegWrite+0xc>)
 8000596:	f001 be03 	b.w	80021a0 <HAL_RTCEx_BKUPWrite>
 800059a:	bf00      	nop
 800059c:	20000308 	.word	0x20000308

080005a0 <HAL_RTC_MspInit>:




void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80005a0:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <HAL_RTC_MspInit+0x30>)
 80005a4:	6802      	ldr	r2, [r0, #0]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d10f      	bne.n	80005ca <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80005aa:	f001 f9b1 	bl	8001910 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <HAL_RTC_MspInit+0x34>)
 80005b0:	69da      	ldr	r2, [r3, #28]
 80005b2:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80005b6:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80005b8:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 80005ba:	69db      	ldr	r3, [r3, #28]
 80005bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 80005c4:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <HAL_RTC_MspInit+0x38>)
 80005c6:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80005ca:	b003      	add	sp, #12
 80005cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80005d0:	40002800 	.word	0x40002800
 80005d4:	40021000 	.word	0x40021000
 80005d8:	42420000 	.word	0x42420000

080005dc <usbInit>:

#include "usb_device.h"


bool usbInit(void)
{
 80005dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	bool ret = true;

	GPIO_InitTypeDef GPIO_InitStruct = {0};

	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  //open drain
 80005de:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 80005e2:	2311      	movs	r3, #17
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	2500      	movs	r5, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  //open drain
 80005e6:	e9cd 6300 	strd	r6, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	4c0e      	ldr	r4, [pc, #56]	@ (8000628 <usbInit+0x4c>)
 80005ee:	4669      	mov	r1, sp
 80005f0:	4620      	mov	r0, r4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	9303      	str	r3, [sp, #12]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f000 fa1d 	bl	8000a34 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET); //회로에 풀업이
 80005fa:	462a      	mov	r2, r5
 80005fc:	4631      	mov	r1, r6
 80005fe:	4620      	mov	r0, r4
 8000600:	f000 faec 	bl	8000bdc <HAL_GPIO_WritePin>
	delay(200);
 8000604:	20c8      	movs	r0, #200	@ 0xc8
 8000606:	f7ff fdba 	bl	800017e <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	4631      	mov	r1, r6
 800060e:	4620      	mov	r0, r4
 8000610:	f000 fae4 	bl	8000bdc <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	4620      	mov	r0, r4
 8000616:	4669      	mov	r1, sp
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000618:	9501      	str	r5, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	f000 fa0b 	bl	8000a34 <HAL_GPIO_Init>


 MX_USB_DEVICE_Init();
 800061e:	f003 f879 	bl	8003714 <MX_USB_DEVICE_Init>

	return ret;
}
 8000622:	2001      	movs	r0, #1
 8000624:	b004      	add	sp, #16
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	40010800 	.word	0x40010800

0800062c <hwInit>:




void hwInit(void)
{
 800062c:	b508      	push	{r3, lr}
	bspInit();
 800062e:	f7ff fded 	bl	800020c <bspInit>
	rtcInit();
 8000632:	f7ff ff83 	bl	800053c <rtcInit>

	resetInit();
 8000636:	f7ff ff3b 	bl	80004b0 <resetInit>
	ledInit();
 800063a:	f7ff ff0b 	bl	8000454 <ledInit>
	usbInit();
 800063e:	f7ff ffcd 	bl	80005dc <usbInit>
	flashInit();

}
 8000642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	flashInit();
 8000646:	f7ff be6f 	b.w	8000328 <flashInit>

0800064a <HAL_MspDeInit>:

/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
 800064a:	4770      	bx	lr

0800064c <HAL_DeInit>:
{
 800064c:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 800064e:	f04f 32ff 	mov.w	r2, #4294967295
  __HAL_RCC_APB1_RELEASE_RESET();
 8000652:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 8000654:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <HAL_DeInit+0x1c>)
 8000656:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000658:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 800065a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800065c:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 800065e:	f7ff fff4 	bl	800064a <HAL_MspDeInit>
}
 8000662:	4620      	mov	r0, r4
 8000664:	bd10      	pop	{r4, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000

0800066c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800066c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800066e:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <HAL_InitTick+0x3c>)
{
 8000670:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000672:	781a      	ldrb	r2, [r3, #0]
 8000674:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000678:	fbb3 f3f2 	udiv	r3, r3, r2
 800067c:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <HAL_InitTick+0x40>)
 800067e:	6810      	ldr	r0, [r2, #0]
 8000680:	fbb0 f0f3 	udiv	r0, r0, r3
 8000684:	f000 f89c 	bl	80007c0 <HAL_SYSTICK_Config>
 8000688:	4604      	mov	r4, r0
 800068a:	b958      	cbnz	r0, 80006a4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068c:	2d0f      	cmp	r5, #15
 800068e:	d809      	bhi.n	80006a4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000690:	4602      	mov	r2, r0
 8000692:	4629      	mov	r1, r5
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f000 f854 	bl	8000744 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800069c:	4620      	mov	r0, r4
 800069e:	4b04      	ldr	r3, [pc, #16]	@ (80006b0 <HAL_InitTick+0x44>)
 80006a0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006a2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80006a4:	2001      	movs	r0, #1
 80006a6:	e7fc      	b.n	80006a2 <HAL_InitTick+0x36>
 80006a8:	2000000c 	.word	0x2000000c
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000010 	.word	0x20000010

080006b4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b4:	4a07      	ldr	r2, [pc, #28]	@ (80006d4 <HAL_Init+0x20>)
{
 80006b6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ba:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006bc:	f043 0310 	orr.w	r3, r3, #16
 80006c0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c2:	f000 f82d 	bl	8000720 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c6:	200f      	movs	r0, #15
 80006c8:	f7ff ffd0 	bl	800066c <HAL_InitTick>
  HAL_MspInit();
 80006cc:	f7ff fdd2 	bl	8000274 <HAL_MspInit>
}
 80006d0:	2000      	movs	r0, #0
 80006d2:	bd08      	pop	{r3, pc}
 80006d4:	40022000 	.word	0x40022000

080006d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006d8:	4a03      	ldr	r2, [pc, #12]	@ (80006e8 <HAL_IncTick+0x10>)
 80006da:	4b04      	ldr	r3, [pc, #16]	@ (80006ec <HAL_IncTick+0x14>)
 80006dc:	6811      	ldr	r1, [r2, #0]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	440b      	add	r3, r1
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	2000031c 	.word	0x2000031c
 80006ec:	2000000c 	.word	0x2000000c

080006f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006f0:	4b01      	ldr	r3, [pc, #4]	@ (80006f8 <HAL_GetTick+0x8>)
 80006f2:	6818      	ldr	r0, [r3, #0]
}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	2000031c 	.word	0x2000031c

080006fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006fc:	b538      	push	{r3, r4, r5, lr}
 80006fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000700:	f7ff fff6 	bl	80006f0 <HAL_GetTick>
 8000704:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000706:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000708:	bf1e      	ittt	ne
 800070a:	4b04      	ldrne	r3, [pc, #16]	@ (800071c <HAL_Delay+0x20>)
 800070c:	781b      	ldrbne	r3, [r3, #0]
 800070e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000710:	f7ff ffee 	bl	80006f0 <HAL_GetTick>
 8000714:	1b43      	subs	r3, r0, r5
 8000716:	42a3      	cmp	r3, r4
 8000718:	d3fa      	bcc.n	8000710 <HAL_Delay+0x14>
  {
  }
}
 800071a:	bd38      	pop	{r3, r4, r5, pc}
 800071c:	2000000c 	.word	0x2000000c

08000720 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000720:	4907      	ldr	r1, [pc, #28]	@ (8000740 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000722:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000724:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000726:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800072e:	0412      	lsls	r2, r2, #16
 8000730:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000734:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800073c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000744:	4b15      	ldr	r3, [pc, #84]	@ (800079c <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000746:	b530      	push	{r4, r5, lr}
 8000748:	68dc      	ldr	r4, [r3, #12]
 800074a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800074e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000754:	2b04      	cmp	r3, #4
 8000756:	bf28      	it	cs
 8000758:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800075c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000760:	bf94      	ite	ls
 8000762:	2400      	movls	r4, #0
 8000764:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000766:	fa05 f303 	lsl.w	r3, r5, r3
 800076a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076e:	40a5      	lsls	r5, r4
 8000770:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000776:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	bfac      	ite	ge
 800077e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	4a07      	ldrlt	r2, [pc, #28]	@ (80007a0 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000788:	b2db      	uxtb	r3, r3
 800078a:	bfab      	itete	ge
 800078c:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800079a:	bd30      	pop	{r4, r5, pc}
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	e000ed14 	.word	0xe000ed14

080007a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80007a4:	2800      	cmp	r0, #0
 80007a6:	db07      	blt.n	80007b8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a8:	2301      	movs	r3, #1
 80007aa:	0941      	lsrs	r1, r0, #5
 80007ac:	4a03      	ldr	r2, [pc, #12]	@ (80007bc <HAL_NVIC_EnableIRQ+0x18>)
 80007ae:	f000 001f 	and.w	r0, r0, #31
 80007b2:	4083      	lsls	r3, r0
 80007b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000e100 	.word	0xe000e100

080007c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c0:	3801      	subs	r0, #1
 80007c2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007c6:	d20b      	bcs.n	80007e0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	21f0      	movs	r1, #240	@ 0xf0
 80007ce:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007da:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007dc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007de:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007e0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007e2:	4770      	bx	lr
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80007e8:	4a11      	ldr	r2, [pc, #68]	@ (8000830 <FLASH_SetErrorCode+0x48>)
 80007ea:	68d3      	ldr	r3, [r2, #12]
 80007ec:	f013 0310 	ands.w	r3, r3, #16
 80007f0:	d005      	beq.n	80007fe <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80007f2:	4910      	ldr	r1, [pc, #64]	@ (8000834 <FLASH_SetErrorCode+0x4c>)
 80007f4:	69cb      	ldr	r3, [r1, #28]
 80007f6:	f043 0302 	orr.w	r3, r3, #2
 80007fa:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80007fc:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80007fe:	68d2      	ldr	r2, [r2, #12]
 8000800:	0750      	lsls	r0, r2, #29
 8000802:	d506      	bpl.n	8000812 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000804:	490b      	ldr	r1, [pc, #44]	@ (8000834 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000806:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800080a:	69ca      	ldr	r2, [r1, #28]
 800080c:	f042 0201 	orr.w	r2, r2, #1
 8000810:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000812:	4a07      	ldr	r2, [pc, #28]	@ (8000830 <FLASH_SetErrorCode+0x48>)
 8000814:	69d1      	ldr	r1, [r2, #28]
 8000816:	07c9      	lsls	r1, r1, #31
 8000818:	d508      	bpl.n	800082c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800081a:	4806      	ldr	r0, [pc, #24]	@ (8000834 <FLASH_SetErrorCode+0x4c>)
 800081c:	69c1      	ldr	r1, [r0, #28]
 800081e:	f041 0104 	orr.w	r1, r1, #4
 8000822:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000824:	69d1      	ldr	r1, [r2, #28]
 8000826:	f021 0101 	bic.w	r1, r1, #1
 800082a:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800082c:	60d3      	str	r3, [r2, #12]
}  
 800082e:	4770      	bx	lr
 8000830:	40022000 	.word	0x40022000
 8000834:	20000320 	.word	0x20000320

08000838 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <HAL_FLASH_Unlock+0x1c>)
 800083a:	6918      	ldr	r0, [r3, #16]
 800083c:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8000840:	d007      	beq.n	8000852 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000842:	4a05      	ldr	r2, [pc, #20]	@ (8000858 <HAL_FLASH_Unlock+0x20>)
 8000844:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000846:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800084a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800084c:	6918      	ldr	r0, [r3, #16]
 800084e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000852:	4770      	bx	lr
 8000854:	40022000 	.word	0x40022000
 8000858:	45670123 	.word	0x45670123

0800085c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800085c:	4a03      	ldr	r2, [pc, #12]	@ (800086c <HAL_FLASH_Lock+0x10>)
}
 800085e:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000860:	6913      	ldr	r3, [r2, #16]
 8000862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000866:	6113      	str	r3, [r2, #16]
}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40022000 	.word	0x40022000

08000870 <FLASH_WaitForLastOperation>:
{
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8000874:	f7ff ff3c 	bl	80006f0 <HAL_GetTick>
 8000878:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800087a:	4c11      	ldr	r4, [pc, #68]	@ (80008c0 <FLASH_WaitForLastOperation+0x50>)
 800087c:	68e3      	ldr	r3, [r4, #12]
 800087e:	07d8      	lsls	r0, r3, #31
 8000880:	d412      	bmi.n	80008a8 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000882:	68e3      	ldr	r3, [r4, #12]
 8000884:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000886:	bf44      	itt	mi
 8000888:	2320      	movmi	r3, #32
 800088a:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800088c:	68e3      	ldr	r3, [r4, #12]
 800088e:	06da      	lsls	r2, r3, #27
 8000890:	d406      	bmi.n	80008a0 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000892:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000894:	07db      	lsls	r3, r3, #31
 8000896:	d403      	bmi.n	80008a0 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000898:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800089a:	f010 0004 	ands.w	r0, r0, #4
 800089e:	d007      	beq.n	80008b0 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 80008a0:	f7ff ffa2 	bl	80007e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80008a4:	2001      	movs	r0, #1
 80008a6:	e003      	b.n	80008b0 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 80008a8:	1c6b      	adds	r3, r5, #1
 80008aa:	d0e7      	beq.n	800087c <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80008ac:	b90d      	cbnz	r5, 80008b2 <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 80008ae:	2003      	movs	r0, #3
}
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80008b2:	f7ff ff1d 	bl	80006f0 <HAL_GetTick>
 80008b6:	1b80      	subs	r0, r0, r6
 80008b8:	42a8      	cmp	r0, r5
 80008ba:	d9df      	bls.n	800087c <FLASH_WaitForLastOperation+0xc>
 80008bc:	e7f7      	b.n	80008ae <FLASH_WaitForLastOperation+0x3e>
 80008be:	bf00      	nop
 80008c0:	40022000 	.word	0x40022000

080008c4 <HAL_FLASH_Program>:
{
 80008c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80008c8:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8000960 <HAL_FLASH_Program+0x9c>
{
 80008cc:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80008ce:	f89a 3018 	ldrb.w	r3, [sl, #24]
{
 80008d2:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80008d4:	2b01      	cmp	r3, #1
{
 80008d6:	4688      	mov	r8, r1
 80008d8:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 80008da:	d03f      	beq.n	800095c <HAL_FLASH_Program+0x98>
 80008dc:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80008de:	f24c 3050 	movw	r0, #50000	@ 0xc350
  __HAL_LOCK(&pFlash);
 80008e2:	f88a 3018 	strb.w	r3, [sl, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80008e6:	f7ff ffc3 	bl	8000870 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80008ea:	bb90      	cbnz	r0, 8000952 <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80008ec:	2d01      	cmp	r5, #1
 80008ee:	d003      	beq.n	80008f8 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 80008f0:	2d02      	cmp	r5, #2
 80008f2:	bf14      	ite	ne
 80008f4:	2504      	movne	r5, #4
 80008f6:	2502      	moveq	r5, #2
      nbiterations = 4U;
 80008f8:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80008fa:	4633      	mov	r3, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008fc:	f8df b064 	ldr.w	fp, [pc, #100]	@ 8000964 <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000900:	0134      	lsls	r4, r6, #4
 8000902:	f1c4 0120 	rsb	r1, r4, #32
 8000906:	f1a4 0220 	sub.w	r2, r4, #32
 800090a:	fa07 f101 	lsl.w	r1, r7, r1
 800090e:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000912:	f8ca 301c 	str.w	r3, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000916:	430c      	orrs	r4, r1
 8000918:	fa27 f202 	lsr.w	r2, r7, r2
 800091c:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800091e:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000922:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000924:	f042 0201 	orr.w	r2, r2, #1
 8000928:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800092c:	f24c 3050 	movw	r0, #50000	@ 0xc350
  *(__IO uint16_t*)Address = Data;
 8000930:	f828 4016 	strh.w	r4, [r8, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000934:	f7ff ff9c 	bl	8000870 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000938:	f8db 2010 	ldr.w	r2, [fp, #16]
 800093c:	f022 0201 	bic.w	r2, r2, #1
 8000940:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 8000944:	b928      	cbnz	r0, 8000952 <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 8000946:	3601      	adds	r6, #1
 8000948:	b2f2      	uxtb	r2, r6
 800094a:	4295      	cmp	r5, r2
 800094c:	f04f 0300 	mov.w	r3, #0
 8000950:	d8d6      	bhi.n	8000900 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 8000952:	2300      	movs	r3, #0
 8000954:	f88a 3018 	strb.w	r3, [sl, #24]
}
 8000958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 800095c:	2002      	movs	r0, #2
 800095e:	e7fb      	b.n	8000958 <HAL_FLASH_Program+0x94>
 8000960:	20000320 	.word	0x20000320
 8000964:	40022000 	.word	0x40022000

08000968 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000968:	2200      	movs	r2, #0
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <FLASH_PageErase+0x1c>)
 800096c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <FLASH_PageErase+0x20>)
 8000970:	691a      	ldr	r2, [r3, #16]
 8000972:	f042 0202 	orr.w	r2, r2, #2
 8000976:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000978:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800097a:	691a      	ldr	r2, [r3, #16]
 800097c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000980:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000982:	4770      	bx	lr
 8000984:	20000320 	.word	0x20000320
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_FLASHEx_Erase>:
{
 800098c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000990:	4f26      	ldr	r7, [pc, #152]	@ (8000a2c <HAL_FLASHEx_Erase+0xa0>)
{
 8000992:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000994:	7e3b      	ldrb	r3, [r7, #24]
{
 8000996:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000998:	2b01      	cmp	r3, #1
 800099a:	d044      	beq.n	8000a26 <HAL_FLASHEx_Erase+0x9a>
 800099c:	2401      	movs	r4, #1
 800099e:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80009a0:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80009a2:	f24c 3050 	movw	r0, #50000	@ 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d11a      	bne.n	80009e0 <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80009aa:	f7ff ff61 	bl	8000870 <FLASH_WaitForLastOperation>
 80009ae:	b120      	cbz	r0, 80009ba <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80009b0:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80009b2:	2300      	movs	r3, #0
 80009b4:	763b      	strb	r3, [r7, #24]
}
 80009b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80009ba:	4c1d      	ldr	r4, [pc, #116]	@ (8000a30 <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80009bc:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80009be:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009c0:	f24c 3050 	movw	r0, #50000	@ 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80009ca:	6923      	ldr	r3, [r4, #16]
 80009cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009d0:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009d2:	f7ff ff4d 	bl	8000870 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80009d6:	6923      	ldr	r3, [r4, #16]
 80009d8:	f023 0304 	bic.w	r3, r3, #4
 80009dc:	6123      	str	r3, [r4, #16]
 80009de:	e7e8      	b.n	80009b2 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80009e0:	f7ff ff46 	bl	8000870 <FLASH_WaitForLastOperation>
 80009e4:	2800      	cmp	r0, #0
 80009e6:	d1e3      	bne.n	80009b0 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80009e8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ec:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80009f0:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80009f2:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80009f4:	4c0e      	ldr	r4, [pc, #56]	@ (8000a30 <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80009f6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80009fa:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 80009fe:	42b3      	cmp	r3, r6
 8000a00:	d9d7      	bls.n	80009b2 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000a02:	4630      	mov	r0, r6
 8000a04:	f7ff ffb0 	bl	8000968 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a08:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000a0c:	f7ff ff30 	bl	8000870 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000a10:	6923      	ldr	r3, [r4, #16]
 8000a12:	f023 0302 	bic.w	r3, r3, #2
 8000a16:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000a18:	b110      	cbz	r0, 8000a20 <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 8000a1a:	f8c8 6000 	str.w	r6, [r8]
            break;
 8000a1e:	e7c8      	b.n	80009b2 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8000a20:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8000a24:	e7e7      	b.n	80009f6 <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 8000a26:	2002      	movs	r0, #2
 8000a28:	e7c5      	b.n	80009b6 <HAL_FLASHEx_Erase+0x2a>
 8000a2a:	bf00      	nop
 8000a2c:	20000320 	.word	0x20000320
 8000a30:	40022000 	.word	0x40022000

08000a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a38:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a3a:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 8000a3e:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a40:	f8df c184 	ldr.w	ip, [pc, #388]	@ 8000bc8 <HAL_GPIO_Init+0x194>
 8000a44:	4b61      	ldr	r3, [pc, #388]	@ (8000bcc <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a46:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4a:	680a      	ldr	r2, [r1, #0]
 8000a4c:	fa32 f506 	lsrs.w	r5, r2, r6
 8000a50:	d102      	bne.n	8000a58 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8000a52:	b003      	add	sp, #12
 8000a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000a58:	2501      	movs	r5, #1
 8000a5a:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a5e:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8000a62:	ea37 0202 	bics.w	r2, r7, r2
 8000a66:	d176      	bne.n	8000b56 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8000a68:	684a      	ldr	r2, [r1, #4]
 8000a6a:	2a03      	cmp	r2, #3
 8000a6c:	d807      	bhi.n	8000a7e <HAL_GPIO_Init+0x4a>
 8000a6e:	3a01      	subs	r2, #1
 8000a70:	2a02      	cmp	r2, #2
 8000a72:	f200 8083 	bhi.w	8000b7c <HAL_GPIO_Init+0x148>
 8000a76:	e8df f002 	tbb	[pc, r2]
 8000a7a:	9691      	.short	0x9691
 8000a7c:	9c          	.byte	0x9c
 8000a7d:	00          	.byte	0x00
 8000a7e:	2a12      	cmp	r2, #18
 8000a80:	f000 8094 	beq.w	8000bac <HAL_GPIO_Init+0x178>
 8000a84:	d869      	bhi.n	8000b5a <HAL_GPIO_Init+0x126>
 8000a86:	2a11      	cmp	r2, #17
 8000a88:	f000 808a 	beq.w	8000ba0 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a8c:	2dff      	cmp	r5, #255	@ 0xff
 8000a8e:	bf94      	ite	ls
 8000a90:	4681      	movls	r9, r0
 8000a92:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a94:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a98:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a9c:	bf88      	it	hi
 8000a9e:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aa0:	fa0e fa02 	lsl.w	sl, lr, r2
 8000aa4:	ea27 070a 	bic.w	r7, r7, sl
 8000aa8:	fa04 f202 	lsl.w	r2, r4, r2
 8000aac:	4317      	orrs	r7, r2
 8000aae:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ab2:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000ab6:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8000aba:	d04c      	beq.n	8000b56 <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000abc:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8000ac0:	f026 0703 	bic.w	r7, r6, #3
 8000ac4:	f042 0201 	orr.w	r2, r2, #1
 8000ac8:	f8cc 2018 	str.w	r2, [ip, #24]
 8000acc:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8000ad0:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8000ad4:	f002 0201 	and.w	r2, r2, #1
 8000ad8:	9201      	str	r2, [sp, #4]
 8000ada:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ade:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae2:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ae4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000ae8:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aea:	fa0e fb0a 	lsl.w	fp, lr, sl
 8000aee:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000af2:	4a37      	ldr	r2, [pc, #220]	@ (8000bd0 <HAL_GPIO_Init+0x19c>)
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d060      	beq.n	8000bba <HAL_GPIO_Init+0x186>
 8000af8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000afc:	4290      	cmp	r0, r2
 8000afe:	d05e      	beq.n	8000bbe <HAL_GPIO_Init+0x18a>
 8000b00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d05c      	beq.n	8000bc2 <HAL_GPIO_Init+0x18e>
 8000b08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000b0c:	4290      	cmp	r0, r2
 8000b0e:	bf14      	ite	ne
 8000b10:	2204      	movne	r2, #4
 8000b12:	2203      	moveq	r2, #3
 8000b14:	fa02 f20a 	lsl.w	r2, r2, sl
 8000b18:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8000b1c:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b1e:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b20:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b24:	bf14      	ite	ne
 8000b26:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b28:	43aa      	biceq	r2, r5
 8000b2a:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b2c:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2e:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b32:	bf14      	ite	ne
 8000b34:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b36:	43aa      	biceq	r2, r5
 8000b38:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8000b3a:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b3c:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000b40:	bf14      	ite	ne
 8000b42:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b44:	43aa      	biceq	r2, r5
 8000b46:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8000b48:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b4a:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000b4e:	bf14      	ite	ne
 8000b50:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b52:	43aa      	biceq	r2, r5
 8000b54:	601a      	str	r2, [r3, #0]
	position++;
 8000b56:	3601      	adds	r6, #1
 8000b58:	e777      	b.n	8000a4a <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8000b5a:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8000bd4 <HAL_GPIO_Init+0x1a0>
 8000b5e:	454a      	cmp	r2, r9
 8000b60:	d00c      	beq.n	8000b7c <HAL_GPIO_Init+0x148>
 8000b62:	d814      	bhi.n	8000b8e <HAL_GPIO_Init+0x15a>
 8000b64:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8000b68:	454a      	cmp	r2, r9
 8000b6a:	d007      	beq.n	8000b7c <HAL_GPIO_Init+0x148>
 8000b6c:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 8000b70:	454a      	cmp	r2, r9
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x148>
 8000b74:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8000b78:	454a      	cmp	r2, r9
 8000b7a:	d187      	bne.n	8000a8c <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b7c:	688a      	ldr	r2, [r1, #8]
 8000b7e:	b1d2      	cbz	r2, 8000bb6 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b80:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b82:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8000b86:	bf0c      	ite	eq
 8000b88:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8000b8a:	6147      	strne	r7, [r0, #20]
 8000b8c:	e77e      	b.n	8000a8c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000b8e:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 8000bd8 <HAL_GPIO_Init+0x1a4>
 8000b92:	454a      	cmp	r2, r9
 8000b94:	d0f2      	beq.n	8000b7c <HAL_GPIO_Init+0x148>
 8000b96:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8000b9a:	e7ed      	b.n	8000b78 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b9c:	68cc      	ldr	r4, [r1, #12]
          break;
 8000b9e:	e775      	b.n	8000a8c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ba0:	68cc      	ldr	r4, [r1, #12]
 8000ba2:	3404      	adds	r4, #4
          break;
 8000ba4:	e772      	b.n	8000a8c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ba6:	68cc      	ldr	r4, [r1, #12]
 8000ba8:	3408      	adds	r4, #8
          break;
 8000baa:	e76f      	b.n	8000a8c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bac:	68cc      	ldr	r4, [r1, #12]
 8000bae:	340c      	adds	r4, #12
          break;
 8000bb0:	e76c      	b.n	8000a8c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000bb2:	2400      	movs	r4, #0
 8000bb4:	e76a      	b.n	8000a8c <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bb6:	2404      	movs	r4, #4
 8000bb8:	e768      	b.n	8000a8c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bba:	2200      	movs	r2, #0
 8000bbc:	e7aa      	b.n	8000b14 <HAL_GPIO_Init+0xe0>
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	e7a8      	b.n	8000b14 <HAL_GPIO_Init+0xe0>
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	e7a6      	b.n	8000b14 <HAL_GPIO_Init+0xe0>
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010400 	.word	0x40010400
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	10220000 	.word	0x10220000
 8000bd8:	10310000 	.word	0x10310000

08000bdc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bdc:	b10a      	cbz	r2, 8000be2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bde:	6101      	str	r1, [r0, #16]
  }
}
 8000be0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000be2:	0409      	lsls	r1, r1, #16
 8000be4:	e7fb      	b.n	8000bde <HAL_GPIO_WritePin+0x2>

08000be6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000be6:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000be8:	ea01 0203 	and.w	r2, r1, r3
 8000bec:	ea21 0103 	bic.w	r1, r1, r3
 8000bf0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000bf4:	6101      	str	r1, [r0, #16]
}
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	b1e0      	cbz	r0, 8000c38 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000bfe:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8000c02:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000c06:	b91b      	cbnz	r3, 8000c10 <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c08:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c0c:	f002 fe50 	bl	80038b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c10:	2303      	movs	r3, #3
 8000c12:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000c16:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c18:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 8000c1a:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8000c1c:	f855 0b04 	ldr.w	r0, [r5], #4
 8000c20:	f001 fade 	bl	80021e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c24:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000c28:	6820      	ldr	r0, [r4, #0]
 8000c2a:	f001 fac9 	bl	80021c0 <USB_CoreInit>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	b128      	cbz	r0, 8000c3e <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c32:	2302      	movs	r3, #2
 8000c34:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8000c38:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000c3a:	4628      	mov	r0, r5
 8000c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000c3e:	6820      	ldr	r0, [r4, #0]
 8000c40:	f001 fad8 	bl	80021f4 <USB_SetCurrentMode>
 8000c44:	2800      	cmp	r0, #0
 8000c46:	d1f4      	bne.n	8000c32 <HAL_PCD_Init+0x3a>
 8000c48:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 8000c4a:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c4c:	7926      	ldrb	r6, [r4, #4]
 8000c4e:	f104 0310 	add.w	r3, r4, #16
 8000c52:	b2c1      	uxtb	r1, r0
 8000c54:	428e      	cmp	r6, r1
 8000c56:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8000c5a:	d818      	bhi.n	8000c8e <HAL_PCD_Init+0x96>
 8000c5c:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8000c5e:	460a      	mov	r2, r1
 8000c60:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 8000c64:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c66:	4286      	cmp	r6, r0
 8000c68:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8000c6c:	d81b      	bhi.n	8000ca6 <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c6e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000c72:	6820      	ldr	r0, [r4, #0]
 8000c74:	f001 fac0 	bl	80021f8 <USB_DevInit>
 8000c78:	4605      	mov	r5, r0
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	d1d9      	bne.n	8000c32 <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 8000c7e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000c80:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 8000c82:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8000c84:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8000c88:	f001 fc99 	bl	80025be <USB_DevDisconnect>
  return HAL_OK;
 8000c8c:	e7d5      	b.n	8000c3a <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c8e:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 8000c92:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 8000c96:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c9a:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c9e:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca2:	3001      	adds	r0, #1
 8000ca4:	e7d5      	b.n	8000c52 <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ca6:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 8000caa:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 8000cae:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cb2:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cb6:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cba:	3101      	adds	r1, #1
 8000cbc:	e7d2      	b.n	8000c64 <HAL_PCD_Init+0x6c>

08000cbe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000cbe:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8000cc0:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 8000cc4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d010      	beq.n	8000cec <HAL_PCD_Start+0x2e>
 8000cca:	2501      	movs	r5, #1
 8000ccc:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000cd0:	6800      	ldr	r0, [r0, #0]
 8000cd2:	f001 fa7c 	bl	80021ce <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000cd6:	4629      	mov	r1, r5
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f002 fed6 	bl	8003a8a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000cde:	6820      	ldr	r0, [r4, #0]
 8000ce0:	f001 fc6b 	bl	80025ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8000cea:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000cec:	2002      	movs	r0, #2
 8000cee:	e7fc      	b.n	8000cea <HAL_PCD_Start+0x2c>

08000cf0 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8000cf0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000cf2:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 8000cf6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d010      	beq.n	8000d1e <HAL_PCD_Stop+0x2e>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8000d02:	6800      	ldr	r0, [r0, #0]
 8000d04:	f001 fa6c 	bl	80021e0 <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	f002 febd 	bl	8003a8a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 8000d10:	6820      	ldr	r0, [r4, #0]
 8000d12:	f001 fc54 	bl	80025be <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8000d1c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d1e:	2002      	movs	r0, #2
 8000d20:	e7fc      	b.n	8000d1c <HAL_PCD_Stop+0x2c>

08000d22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000d22:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000d24:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 8000d28:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d2a:	2a01      	cmp	r2, #1
 8000d2c:	d00a      	beq.n	8000d44 <HAL_PCD_SetAddress+0x22>
 8000d2e:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8000d30:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 8000d32:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000d36:	6800      	ldr	r0, [r0, #0]
 8000d38:	f001 fc39 	bl	80025ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8000d42:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d44:	2002      	movs	r0, #2
 8000d46:	e7fc      	b.n	8000d42 <HAL_PCD_SetAddress+0x20>

08000d48 <HAL_PCD_IRQHandler>:
{
 8000d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000d50:	6800      	ldr	r0, [r0, #0]
 8000d52:	f001 fc36 	bl	80025c2 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000d56:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 8000d5a:	f000 844f 	beq.w	80015fc <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 8000d5e:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000d60:	4ec6      	ldr	r6, [pc, #792]	@ (800107c <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000d62:	6820      	ldr	r0, [r4, #0]
 8000d64:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8000d68:	041f      	lsls	r7, r3, #16
 8000d6a:	d402      	bmi.n	8000d72 <HAL_PCD_IRQHandler+0x2a>
}
 8000d6c:	b005      	add	sp, #20
 8000d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8000d72:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8000d76:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 8000d7a:	b299      	uxth	r1, r3
    if (epindex == 0U)
 8000d7c:	f040 80c0 	bne.w	8000f00 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000d80:	f011 0110 	ands.w	r1, r1, #16
 8000d84:	d126      	bne.n	8000dd4 <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d86:	8803      	ldrh	r3, [r0, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	4033      	ands	r3, r6
 8000d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d90:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d92:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000d96:	7c22      	ldrb	r2, [r4, #16]
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000d9e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000da2:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8000da6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8000dac:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000dae:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000db0:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8000db2:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000db4:	f002 fdab 	bl	800390e <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000db8:	7b63      	ldrb	r3, [r4, #13]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0d1      	beq.n	8000d62 <HAL_PCD_IRQHandler+0x1a>
 8000dbe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000dc0:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d1cd      	bne.n	8000d62 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000dc6:	7b63      	ldrb	r3, [r4, #13]
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dcc:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8000dd0:	7362      	strb	r2, [r4, #13]
 8000dd2:	e7c6      	b.n	8000d62 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000dd4:	8807      	ldrh	r7, [r0, #0]
 8000dd6:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000dd8:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 8000ddc:	d021      	beq.n	8000e22 <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000dde:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000de2:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000dec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000df0:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000df4:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8000df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000dfc:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000e00:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8000e04:	f001 fe28 	bl	8002a58 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e08:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000e0a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e0c:	8813      	ldrh	r3, [r2, #0]
 8000e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e12:	051b      	lsls	r3, r3, #20
 8000e14:	0d1b      	lsrs	r3, r3, #20
 8000e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e1a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000e1c:	f002 fd68 	bl	80038f0 <HAL_PCD_SetupStageCallback>
 8000e20:	e79f      	b.n	8000d62 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000e22:	0419      	lsls	r1, r3, #16
 8000e24:	d59d      	bpl.n	8000d62 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e26:	8803      	ldrh	r3, [r0, #0]
 8000e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e2c:	051b      	lsls	r3, r3, #20
 8000e2e:	0d1b      	lsrs	r3, r3, #20
 8000e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e34:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e36:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000e3a:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000e44:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000e48:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8000e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e50:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000e54:	b18b      	cbz	r3, 8000e7a <HAL_PCD_IRQHandler+0x132>
 8000e56:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8000e5a:	b171      	cbz	r1, 8000e7a <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000e5c:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8000e60:	f001 fdfa 	bl	8002a58 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000e64:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8000e68:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000e6c:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 8000e6e:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000e70:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8000e72:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000e76:	f002 fd41 	bl	80038fc <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000e7a:	6821      	ldr	r1, [r4, #0]
 8000e7c:	880a      	ldrh	r2, [r1, #0]
 8000e7e:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8000e80:	0512      	lsls	r2, r2, #20
 8000e82:	f53f af6e 	bmi.w	8000d62 <HAL_PCD_IRQHandler+0x1a>
 8000e86:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8000e8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8000e8e:	f43f af68 	beq.w	8000d62 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000e92:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8000e96:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 8000e9a:	b292      	uxth	r2, r2
 8000e9c:	5a83      	ldrh	r3, [r0, r2]
 8000e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ea2:	5283      	strh	r3, [r0, r2]
 8000ea4:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 8000ea8:	2b3e      	cmp	r3, #62	@ 0x3e
 8000eaa:	d91d      	bls.n	8000ee8 <HAL_PCD_IRQHandler+0x1a0>
 8000eac:	095f      	lsrs	r7, r3, #5
 8000eae:	06db      	lsls	r3, r3, #27
 8000eb0:	5a83      	ldrh	r3, [r0, r2]
 8000eb2:	bf08      	it	eq
 8000eb4:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8000ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000eca:	880b      	ldrh	r3, [r1, #0]
 8000ecc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000ed4:	041b      	lsls	r3, r3, #16
 8000ed6:	0c1b      	lsrs	r3, r3, #16
 8000ed8:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8000edc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ee4:	800b      	strh	r3, [r1, #0]
 8000ee6:	e73c      	b.n	8000d62 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000ee8:	b90b      	cbnz	r3, 8000eee <HAL_PCD_IRQHandler+0x1a6>
 8000eea:	5a83      	ldrh	r3, [r0, r2]
 8000eec:	e7e7      	b.n	8000ebe <HAL_PCD_IRQHandler+0x176>
 8000eee:	085f      	lsrs	r7, r3, #1
 8000ef0:	07db      	lsls	r3, r3, #31
 8000ef2:	5a83      	ldrh	r3, [r0, r2]
 8000ef4:	bf48      	it	mi
 8000ef6:	3701      	addmi	r7, #1
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8000efe:	e7e2      	b.n	8000ec6 <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000f00:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000f04:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000f06:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000f0a:	f140 80f6 	bpl.w	80010fa <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000f0e:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8000f12:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f1a:	051b      	lsls	r3, r3, #20
 8000f1c:	0d1b      	lsrs	r3, r3, #20
 8000f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f22:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8000f26:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8000f2a:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 8000f2e:	b9bb      	cbnz	r3, 8000f60 <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f30:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000f34:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	3306      	adds	r3, #6
 8000f3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f40:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8000f44:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8000f48:	f1b9 0f00 	cmp.w	r9, #0
 8000f4c:	f000 80ba 	beq.w	80010c4 <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000f50:	464b      	mov	r3, r9
 8000f52:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000f56:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8000f5a:	f001 fd7d 	bl	8002a58 <USB_ReadPMA>
 8000f5e:	e0b1      	b.n	80010c4 <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 8000f60:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f64:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	f040 8089 	bne.w	8001080 <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f6e:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 8000f72:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8000f76:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000f7a:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 8000f7e:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f82:	44d9      	add	r9, fp
 8000f84:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000f88:	d03c      	beq.n	8001004 <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f8a:	f109 0902 	add.w	r9, r9, #2
 8000f8e:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8000f92:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 8000f96:	4599      	cmp	r9, r3
 8000f98:	d913      	bls.n	8000fc2 <HAL_PCD_IRQHandler+0x27a>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000fa0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000fa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000fac:	041b      	lsls	r3, r3, #16
 8000fae:	0c1b      	lsrs	r3, r3, #16
 8000fb0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000fb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fbc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8000fc0:	e005      	b.n	8000fce <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 8000fc2:	eba3 0309 	sub.w	r3, r3, r9
 8000fc6:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0e8      	beq.n	8000fa0 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000fce:	f1bc 0f00 	cmp.w	ip, #0
 8000fd2:	d00d      	beq.n	8000ff0 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000fd4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000fd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000fdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000fe0:	041b      	lsls	r3, r3, #16
 8000fe2:	0c1b      	lsrs	r3, r3, #16
 8000fe4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fe8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000fec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8000ff0:	f1b9 0f00 	cmp.w	r9, #0
 8000ff4:	d066      	beq.n	80010c4 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000ff6:	2128      	movs	r1, #40	@ 0x28
 8000ff8:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000ffc:	464b      	mov	r3, r9
 8000ffe:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8001002:	e7a8      	b.n	8000f56 <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001004:	f109 0906 	add.w	r9, r9, #6
 8001008:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 800100c:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 8001010:	4599      	cmp	r9, r3
 8001012:	d912      	bls.n	800103a <HAL_PCD_IRQHandler+0x2f2>
 8001014:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001018:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800101c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001024:	041b      	lsls	r3, r3, #16
 8001026:	0c1b      	lsrs	r3, r3, #16
 8001028:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800102c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001034:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001038:	e005      	b.n	8001046 <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 800103a:	eba3 0309 	sub.w	r3, r3, r9
 800103e:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0e8      	beq.n	8001018 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001046:	f1bc 0f00 	cmp.w	ip, #0
 800104a:	d10d      	bne.n	8001068 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800104c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001058:	041b      	lsls	r3, r3, #16
 800105a:	0c1b      	lsrs	r3, r3, #16
 800105c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001060:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001064:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8001068:	f1b9 0f00 	cmp.w	r9, #0
 800106c:	d02a      	beq.n	80010c4 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800106e:	2128      	movs	r1, #40	@ 0x28
 8001070:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001074:	464b      	mov	r3, r9
 8001076:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 800107a:	e76c      	b.n	8000f56 <HAL_PCD_IRQHandler+0x20e>
 800107c:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001080:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800108c:	041b      	lsls	r3, r3, #16
 800108e:	0c1b      	lsrs	r3, r3, #16
 8001090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001094:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001098:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800109c:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 80010a0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80010aa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80010ae:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80010b0:	d054      	beq.n	800115c <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80010b2:	3202      	adds	r2, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 80010ba:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 80010be:	f1b9 0f00 	cmp.w	r9, #0
 80010c2:	d19b      	bne.n	8000ffc <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 80010c4:	fb05 f107 	mul.w	r1, r5, r7
 80010c8:	1863      	adds	r3, r4, r1
 80010ca:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 80010ce:	444a      	add	r2, r9
 80010d0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 80010d4:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 80010d8:	444a      	add	r2, r9
 80010da:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80010de:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 80010e2:	b11a      	cbz	r2, 80010ec <HAL_PCD_IRQHandler+0x3a4>
 80010e4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80010e8:	4599      	cmp	r9, r3
 80010ea:	d241      	bcs.n	8001170 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80010ec:	fb05 4307 	mla	r3, r5, r7, r4
 80010f0:	4620      	mov	r0, r4
 80010f2:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 80010f6:	f002 fc01 	bl	80038fc <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80010fa:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80010fe:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001100:	f43f ae2f 	beq.w	8000d62 <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001104:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8001108:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800110c:	b29b      	uxth	r3, r3
 800110e:	4033      	ands	r3, r6
 8001110:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001114:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8001118:	eb04 030c 	add.w	r3, r4, ip
 800111c:	7cda      	ldrb	r2, [r3, #19]
 800111e:	2a01      	cmp	r2, #1
 8001120:	d156      	bne.n	80011d0 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8001122:	2100      	movs	r1, #0
 8001124:	fb07 5205 	mla	r2, r7, r5, r5
 8001128:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 800112a:	7f1a      	ldrb	r2, [r3, #28]
 800112c:	b392      	cbz	r2, 8001194 <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800112e:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001132:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001134:	d036      	beq.n	80011a4 <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001136:	bb12      	cbnz	r2, 800117e <HAL_PCD_IRQHandler+0x436>
 8001138:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800113c:	7c1b      	ldrb	r3, [r3, #16]
 800113e:	b292      	uxth	r2, r2
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001146:	4410      	add	r0, r2
 8001148:	5a1a      	ldrh	r2, [r3, r0]
 800114a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800114e:	521a      	strh	r2, [r3, r0]
 8001150:	5a1a      	ldrh	r2, [r3, r0]
 8001152:	b292      	uxth	r2, r2
 8001154:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001158:	521a      	strh	r2, [r3, r0]
 800115a:	e01b      	b.n	8001194 <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800115c:	3206      	adds	r2, #6
 800115e:	4413      	add	r3, r2
 8001160:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8001164:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8001168:	f1b9 0f00 	cmp.w	r9, #0
 800116c:	d0aa      	beq.n	80010c4 <HAL_PCD_IRQHandler+0x37c>
 800116e:	e781      	b.n	8001074 <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 8001170:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001174:	6820      	ldr	r0, [r4, #0]
 8001176:	4421      	add	r1, r4
 8001178:	f001 fa39 	bl	80025ee <USB_EPStartXfer>
 800117c:	e7bd      	b.n	80010fa <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800117e:	2a01      	cmp	r2, #1
 8001180:	d108      	bne.n	8001194 <HAL_PCD_IRQHandler+0x44c>
 8001182:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8001186:	7c1b      	ldrb	r3, [r3, #16]
 8001188:	b292      	uxth	r2, r2
 800118a:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	4410      	add	r0, r2
 8001192:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001194:	2328      	movs	r3, #40	@ 0x28
 8001196:	fb03 4307 	mla	r3, r3, r7, r4
 800119a:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800119c:	4620      	mov	r0, r4
 800119e:	f002 fbb6 	bl	800390e <HAL_PCD_DataInStageCallback>
 80011a2:	e5de      	b.n	8000d62 <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80011a4:	b93a      	cbnz	r2, 80011b6 <HAL_PCD_IRQHandler+0x46e>
 80011a6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80011aa:	7c1b      	ldrb	r3, [r3, #16]
 80011ac:	b292      	uxth	r2, r2
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80011b4:	e7c7      	b.n	8001146 <HAL_PCD_IRQHandler+0x3fe>
 80011b6:	2a01      	cmp	r2, #1
 80011b8:	d1ec      	bne.n	8001194 <HAL_PCD_IRQHandler+0x44c>
 80011ba:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80011be:	7c1b      	ldrb	r3, [r3, #16]
 80011c0:	b292      	uxth	r2, r2
 80011c2:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4410      	add	r0, r2
 80011ca:	f823 8000 	strh.w	r8, [r3, r0]
 80011ce:	e7e1      	b.n	8001194 <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011d0:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 80011d2:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 80011d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011d8:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 80011dc:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 80011e0:	d11b      	bne.n	800121a <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011e2:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 80011e6:	b2bf      	uxth	r7, r7
 80011e8:	4457      	add	r7, sl
 80011ea:	3702      	adds	r7, #2
 80011ec:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 80011f0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80011f4:	4297      	cmp	r7, r2
 80011f6:	d302      	bcc.n	80011fe <HAL_PCD_IRQHandler+0x4b6>
 80011f8:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 80011fc:	e7ce      	b.n	800119c <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 80011fe:	1bd2      	subs	r2, r2, r7
 8001200:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 8001202:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8001204:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8001208:	443a      	add	r2, r7
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 800120c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800120e:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 8001210:	443a      	add	r2, r7
 8001212:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001214:	f001 f9eb 	bl	80025ee <USB_EPStartXfer>
 8001218:	e5a3      	b.n	8000d62 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800121a:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800121e:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001222:	fa1f fc8c 	uxth.w	ip, ip
 8001226:	44d4      	add	ip, sl
 8001228:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800122c:	f000 80f4 	beq.w	8001418 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001230:	f10c 0c02 	add.w	ip, ip, #2
 8001234:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8001238:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 800123c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001240:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8001242:	bf2c      	ite	cs
 8001244:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 8001246:	eba2 020c 	subcc.w	r2, r2, ip
 800124a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800124c:	2a00      	cmp	r2, #0
 800124e:	d15b      	bne.n	8001308 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001250:	2328      	movs	r3, #40	@ 0x28
 8001252:	fb03 4307 	mla	r3, r3, r7, r4
 8001256:	7c5b      	ldrb	r3, [r3, #17]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d141      	bne.n	80012e0 <HAL_PCD_IRQHandler+0x598>
 800125c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8001260:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8001264:	b292      	uxth	r2, r2
 8001266:	010b      	lsls	r3, r1, #4
 8001268:	4494      	add	ip, r2
 800126a:	f83c 2003 	ldrh.w	r2, [ip, r3]
 800126e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001272:	f82c 2003 	strh.w	r2, [ip, r3]
 8001276:	f83c 2003 	ldrh.w	r2, [ip, r3]
 800127a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800127e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001282:	b292      	uxth	r2, r2
 8001284:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001288:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800128c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8001290:	b292      	uxth	r2, r2
 8001292:	4410      	add	r0, r2
 8001294:	5ac2      	ldrh	r2, [r0, r3]
 8001296:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800129a:	52c2      	strh	r2, [r0, r3]
 800129c:	5ac2      	ldrh	r2, [r0, r3]
 800129e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80012a2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80012a6:	b292      	uxth	r2, r2
 80012a8:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80012aa:	4620      	mov	r0, r4
 80012ac:	f002 fb2f 	bl	800390e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80012b0:	f1b8 0f00 	cmp.w	r8, #0
 80012b4:	f000 80f4 	beq.w	80014a0 <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80012b8:	2328      	movs	r3, #40	@ 0x28
 80012ba:	fb03 4307 	mla	r3, r3, r7, r4
 80012be:	6822      	ldr	r2, [r4, #0]
 80012c0:	7c19      	ldrb	r1, [r3, #16]
 80012c2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80012c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80012ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80012ce:	041b      	lsls	r3, r3, #16
 80012d0:	0c1b      	lsrs	r3, r3, #16
 80012d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012da:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80012de:	e0df      	b.n	80014a0 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d1e2      	bne.n	80012aa <HAL_PCD_IRQHandler+0x562>
 80012e4:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 80012e8:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80012ec:	fa1f fe8e 	uxth.w	lr, lr
 80012f0:	44f4      	add	ip, lr
 80012f2:	010b      	lsls	r3, r1, #4
 80012f4:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80012f8:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 80012fc:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8001300:	fa1f fc8c 	uxth.w	ip, ip
 8001304:	4460      	add	r0, ip
 8001306:	e7cf      	b.n	80012a8 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001308:	f1b8 0f00 	cmp.w	r8, #0
 800130c:	d00d      	beq.n	800132a <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800130e:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8001312:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001316:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800131a:	0412      	lsls	r2, r2, #16
 800131c:	0c12      	lsrs	r2, r2, #16
 800131e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001322:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001326:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800132a:	f04f 0828 	mov.w	r8, #40	@ 0x28
 800132e:	fb08 4807 	mla	r8, r8, r7, r4
 8001332:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8001336:	2a01      	cmp	r2, #1
 8001338:	f040 80b2 	bne.w	80014a0 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 800133c:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8001340:	eb02 0e0c 	add.w	lr, r2, ip
 8001344:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8001348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800134a:	4462      	add	r2, ip
 800134c:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 800134e:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8001352:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8001356:	4293      	cmp	r3, r2
 8001358:	d335      	bcc.n	80013c6 <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001360:	2328      	movs	r3, #40	@ 0x28
 8001362:	fb03 4307 	mla	r3, r3, r7, r4
 8001366:	f893 c011 	ldrb.w	ip, [r3, #17]
 800136a:	b293      	uxth	r3, r2
 800136c:	f1bc 0f00 	cmp.w	ip, #0
 8001370:	d145      	bne.n	80013fe <HAL_PCD_IRQHandler+0x6b6>
 8001372:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8001376:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 800137a:	fa1f f888 	uxth.w	r8, r8
 800137e:	44c4      	add	ip, r8
 8001380:	0109      	lsls	r1, r1, #4
 8001382:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8001386:	2a3e      	cmp	r2, #62	@ 0x3e
 8001388:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800138c:	f82c 8001 	strh.w	r8, [ip, r1]
 8001390:	d925      	bls.n	80013de <HAL_PCD_IRQHandler+0x696>
 8001392:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8001396:	06d2      	lsls	r2, r2, #27
 8001398:	f83c 2001 	ldrh.w	r2, [ip, r1]
 800139c:	bf08      	it	eq
 800139e:	f108 38ff 	addeq.w	r8, r8, #4294967295
 80013a2:	b292      	uxth	r2, r2
 80013a4:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80013a8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80013ac:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80013b0:	b292      	uxth	r2, r2
 80013b2:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80013b6:	2228      	movs	r2, #40	@ 0x28
 80013b8:	fb02 4207 	mla	r2, r2, r7, r4
 80013bc:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80013be:	4671      	mov	r1, lr
 80013c0:	f001 f905 	bl	80025ce <USB_WritePMA>
 80013c4:	e06c      	b.n	80014a0 <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 80013c6:	b91b      	cbnz	r3, 80013d0 <HAL_PCD_IRQHandler+0x688>
          len = TxPctSize;
 80013c8:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80013ca:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 80013ce:	e7c7      	b.n	8001360 <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 80013d0:	2200      	movs	r2, #0
 80013d2:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 80013d6:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          len = ep->xfer_len_db;
 80013da:	461a      	mov	r2, r3
 80013dc:	e7c0      	b.n	8001360 <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80013de:	b912      	cbnz	r2, 80013e6 <HAL_PCD_IRQHandler+0x69e>
 80013e0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80013e4:	e7e0      	b.n	80013a8 <HAL_PCD_IRQHandler+0x660>
 80013e6:	ea4f 0852 	mov.w	r8, r2, lsr #1
 80013ea:	07d2      	lsls	r2, r2, #31
 80013ec:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80013f0:	bf48      	it	mi
 80013f2:	f108 0801 	addmi.w	r8, r8, #1
 80013f6:	b292      	uxth	r2, r2
 80013f8:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80013fc:	e7d8      	b.n	80013b0 <HAL_PCD_IRQHandler+0x668>
 80013fe:	f1bc 0f01 	cmp.w	ip, #1
 8001402:	d1d8      	bne.n	80013b6 <HAL_PCD_IRQHandler+0x66e>
 8001404:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8001408:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800140c:	fa1f fc8c 	uxth.w	ip, ip
 8001410:	4462      	add	r2, ip
 8001412:	0109      	lsls	r1, r1, #4
 8001414:	5253      	strh	r3, [r2, r1]
 8001416:	e7ce      	b.n	80013b6 <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001418:	f10c 0c06 	add.w	ip, ip, #6
 800141c:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8001420:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 8001424:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001428:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 800142a:	bf8c      	ite	hi
 800142c:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 800142e:	eba2 020c 	subls.w	r2, r2, ip
 8001432:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8001434:	2a00      	cmp	r2, #0
 8001436:	d15d      	bne.n	80014f4 <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001438:	2328      	movs	r3, #40	@ 0x28
 800143a:	fb03 4307 	mla	r3, r3, r7, r4
 800143e:	7c5b      	ldrb	r3, [r3, #17]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d143      	bne.n	80014cc <HAL_PCD_IRQHandler+0x784>
 8001444:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8001448:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 800144c:	b292      	uxth	r2, r2
 800144e:	010b      	lsls	r3, r1, #4
 8001450:	4494      	add	ip, r2
 8001452:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8001456:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800145a:	f82c 2003 	strh.w	r2, [ip, r3]
 800145e:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8001462:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001466:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800146a:	b292      	uxth	r2, r2
 800146c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001470:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8001474:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8001478:	b292      	uxth	r2, r2
 800147a:	4410      	add	r0, r2
 800147c:	5ac2      	ldrh	r2, [r0, r3]
 800147e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001482:	52c2      	strh	r2, [r0, r3]
 8001484:	5ac2      	ldrh	r2, [r0, r3]
 8001486:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800148a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800148e:	b292      	uxth	r2, r2
 8001490:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001492:	4620      	mov	r0, r4
 8001494:	f002 fa3b 	bl	800390e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001498:	f1b8 0f00 	cmp.w	r8, #0
 800149c:	f43f af0c 	beq.w	80012b8 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80014a0:	2328      	movs	r3, #40	@ 0x28
 80014a2:	fb03 4307 	mla	r3, r3, r7, r4
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	7c19      	ldrb	r1, [r3, #16]
 80014aa:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80014ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80014b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80014b6:	041b      	lsls	r3, r3, #16
 80014b8:	0c1b      	lsrs	r3, r3, #16
 80014ba:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80014be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80014ca:	e44a      	b.n	8000d62 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d1e0      	bne.n	8001492 <HAL_PCD_IRQHandler+0x74a>
 80014d0:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 80014d4:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80014d8:	fa1f fe8e 	uxth.w	lr, lr
 80014dc:	44f4      	add	ip, lr
 80014de:	010b      	lsls	r3, r1, #4
 80014e0:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80014e4:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 80014e8:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80014ec:	fa1f fc8c 	uxth.w	ip, ip
 80014f0:	4460      	add	r0, ip
 80014f2:	e7cd      	b.n	8001490 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80014f4:	f1b8 0f00 	cmp.w	r8, #0
 80014f8:	d10d      	bne.n	8001516 <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80014fa:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80014fe:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001502:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001506:	0412      	lsls	r2, r2, #16
 8001508:	0c12      	lsrs	r2, r2, #16
 800150a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800150e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001512:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001516:	f04f 0828 	mov.w	r8, #40	@ 0x28
 800151a:	fb08 4807 	mla	r8, r8, r7, r4
 800151e:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8001522:	2a01      	cmp	r2, #1
 8001524:	d1bc      	bne.n	80014a0 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8001526:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 800152a:	eb02 0e0c 	add.w	lr, r2, ip
 800152e:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8001532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001534:	4462      	add	r2, ip
 8001536:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001538:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800153c:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8001540:	4293      	cmp	r3, r2
 8001542:	d332      	bcc.n	80015aa <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800154a:	2328      	movs	r3, #40	@ 0x28
 800154c:	fb03 4307 	mla	r3, r3, r7, r4
 8001550:	f893 c011 	ldrb.w	ip, [r3, #17]
 8001554:	b293      	uxth	r3, r2
 8001556:	f1bc 0f00 	cmp.w	ip, #0
 800155a:	d142      	bne.n	80015e2 <HAL_PCD_IRQHandler+0x89a>
 800155c:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8001560:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8001564:	fa1f f888 	uxth.w	r8, r8
 8001568:	44c4      	add	ip, r8
 800156a:	0109      	lsls	r1, r1, #4
 800156c:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8001570:	2a3e      	cmp	r2, #62	@ 0x3e
 8001572:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8001576:	f82c 8001 	strh.w	r8, [ip, r1]
 800157a:	d922      	bls.n	80015c2 <HAL_PCD_IRQHandler+0x87a>
 800157c:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8001580:	06d2      	lsls	r2, r2, #27
 8001582:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8001586:	bf08      	it	eq
 8001588:	f108 38ff 	addeq.w	r8, r8, #4294967295
 800158c:	b292      	uxth	r2, r2
 800158e:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8001592:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001596:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800159a:	b292      	uxth	r2, r2
 800159c:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80015a0:	2228      	movs	r2, #40	@ 0x28
 80015a2:	fb02 4207 	mla	r2, r2, r7, r4
 80015a6:	8b52      	ldrh	r2, [r2, #26]
 80015a8:	e709      	b.n	80013be <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 80015aa:	b91b      	cbnz	r3, 80015b4 <HAL_PCD_IRQHandler+0x86c>
          len = TxPctSize;
 80015ac:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80015ae:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 80015b2:	e7ca      	b.n	800154a <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 80015b4:	2200      	movs	r2, #0
 80015b6:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 80015ba:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          len = ep->xfer_len_db;
 80015be:	461a      	mov	r2, r3
 80015c0:	e7c3      	b.n	800154a <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80015c2:	b912      	cbnz	r2, 80015ca <HAL_PCD_IRQHandler+0x882>
 80015c4:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80015c8:	e7e3      	b.n	8001592 <HAL_PCD_IRQHandler+0x84a>
 80015ca:	ea4f 0852 	mov.w	r8, r2, lsr #1
 80015ce:	07d2      	lsls	r2, r2, #31
 80015d0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80015d4:	bf48      	it	mi
 80015d6:	f108 0801 	addmi.w	r8, r8, #1
 80015da:	b292      	uxth	r2, r2
 80015dc:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80015e0:	e7db      	b.n	800159a <HAL_PCD_IRQHandler+0x852>
 80015e2:	f1bc 0f01 	cmp.w	ip, #1
 80015e6:	d1db      	bne.n	80015a0 <HAL_PCD_IRQHandler+0x858>
 80015e8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80015ec:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 80015f0:	b292      	uxth	r2, r2
 80015f2:	4494      	add	ip, r2
 80015f4:	010a      	lsls	r2, r1, #4
 80015f6:	f82c 3002 	strh.w	r3, [ip, r2]
 80015fa:	e7d1      	b.n	80015a0 <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80015fc:	0546      	lsls	r6, r0, #21
 80015fe:	d512      	bpl.n	8001626 <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001600:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001602:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001604:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001608:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800160c:	041b      	lsls	r3, r3, #16
 800160e:	0c1b      	lsrs	r3, r3, #16
 8001610:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001614:	f002 f987 	bl	8003926 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001618:	4629      	mov	r1, r5
 800161a:	4620      	mov	r0, r4
}
 800161c:	b005      	add	sp, #20
 800161e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001622:	f7ff bb7e 	b.w	8000d22 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001626:	0441      	lsls	r1, r0, #17
 8001628:	d50a      	bpl.n	8001640 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800162a:	6822      	ldr	r2, [r4, #0]
 800162c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001630:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001634:	041b      	lsls	r3, r3, #16
 8001636:	0c1b      	lsrs	r3, r3, #16
 8001638:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 800163c:	f7ff bb96 	b.w	8000d6c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001640:	0482      	lsls	r2, r0, #18
 8001642:	d505      	bpl.n	8001650 <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001644:	6822      	ldr	r2, [r4, #0]
 8001646:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800164a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800164e:	e7f1      	b.n	8001634 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001650:	04c3      	lsls	r3, r0, #19
 8001652:	d519      	bpl.n	8001688 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001654:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8001656:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001658:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 800165c:	f023 0304 	bic.w	r3, r3, #4
 8001660:	041b      	lsls	r3, r3, #16
 8001662:	0c1b      	lsrs	r3, r3, #16
 8001664:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001668:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 800166c:	f023 0308 	bic.w	r3, r3, #8
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	0c1b      	lsrs	r3, r3, #16
 8001674:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001678:	f002 f978 	bl	800396c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800167c:	6822      	ldr	r2, [r4, #0]
 800167e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001682:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001686:	e7d5      	b.n	8001634 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001688:	0507      	lsls	r7, r0, #20
 800168a:	d548      	bpl.n	800171e <HAL_PCD_IRQHandler+0x9d6>
 800168c:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	4606      	mov	r6, r0
 8001692:	4619      	mov	r1, r3
 8001694:	461a      	mov	r2, r3
 8001696:	f103 0520 	add.w	r5, r3, #32
 800169a:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 800169e:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80016a0:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 80016a4:	d1f9      	bne.n	800169a <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80016a6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80016aa:	b292      	uxth	r2, r2
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80016b4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	0412      	lsls	r2, r2, #16
 80016be:	0c12      	lsrs	r2, r2, #16
 80016c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80016c4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80016c8:	0556      	lsls	r6, r2, #21
 80016ca:	d5fb      	bpl.n	80016c4 <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016cc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80016d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016d4:	0412      	lsls	r2, r2, #16
 80016d6:	0c12      	lsrs	r2, r2, #16
 80016d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80016dc:	f830 2b02 	ldrh.w	r2, [r0], #2
 80016e0:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 80016e4:	428d      	cmp	r5, r1
 80016e6:	d1f9      	bne.n	80016dc <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016e8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80016ec:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016ee:	b292      	uxth	r2, r2
 80016f0:	f042 0208 	orr.w	r2, r2, #8
 80016f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016f8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80016fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001700:	0412      	lsls	r2, r2, #16
 8001702:	0c12      	lsrs	r2, r2, #16
 8001704:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001708:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800170c:	b292      	uxth	r2, r2
 800170e:	f042 0204 	orr.w	r2, r2, #4
 8001712:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001716:	f002 f919 	bl	800394c <HAL_PCD_SuspendCallback>
    return;
 800171a:	f7ff bb27 	b.w	8000d6c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800171e:	0582      	lsls	r2, r0, #22
 8001720:	d50d      	bpl.n	800173e <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001722:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001724:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001726:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800172a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800172e:	041b      	lsls	r3, r3, #16
 8001730:	0c1b      	lsrs	r3, r3, #16
 8001732:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001736:	f002 f8f2 	bl	800391e <HAL_PCD_SOFCallback>
    return;
 800173a:	f7ff bb17 	b.w	8000d6c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800173e:	05c3      	lsls	r3, r0, #23
 8001740:	f57f ab14 	bpl.w	8000d6c <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001744:	6822      	ldr	r2, [r4, #0]
 8001746:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800174a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800174e:	e771      	b.n	8001634 <HAL_PCD_IRQHandler+0x8ec>

08001750 <HAL_PCD_EP_Open>:
{
 8001750:	b570      	push	{r4, r5, r6, lr}
 8001752:	2428      	movs	r4, #40	@ 0x28
 8001754:	4605      	mov	r5, r0
 8001756:	f001 0007 	and.w	r0, r1, #7
 800175a:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800175c:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001760:	bf14      	ite	ne
 8001762:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001766:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 800176a:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 800176e:	bf15      	itete	ne
 8001770:	2401      	movne	r4, #1
    ep->is_in = 0U;
 8001772:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 8001774:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 8001776:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800177a:	bf14      	ite	ne
 800177c:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800177e:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 8001780:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8001782:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8001784:	bf08      	it	eq
 8001786:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001788:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 800178a:	bf08      	it	eq
 800178c:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 800178e:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8001790:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 8001794:	2b01      	cmp	r3, #1
 8001796:	d009      	beq.n	80017ac <HAL_PCD_EP_Open+0x5c>
 8001798:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800179a:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 800179c:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017a0:	f000 fd3c 	bl	800221c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 80017aa:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80017ac:	2002      	movs	r0, #2
 80017ae:	e7fc      	b.n	80017aa <HAL_PCD_EP_Open+0x5a>

080017b0 <HAL_PCD_EP_Receive>:
{
 80017b0:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 80017b2:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 80017b4:	2600      	movs	r6, #0
 80017b6:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80017ba:	434c      	muls	r4, r1
 80017bc:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 80017be:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017c2:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017c6:	4401      	add	r1, r0
  ep->xfer_len = len;
 80017c8:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 80017cc:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 80017d0:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017d4:	6800      	ldr	r0, [r0, #0]
 80017d6:	f000 ff0a 	bl	80025ee <USB_EPStartXfer>
}
 80017da:	4630      	mov	r0, r6
 80017dc:	bd70      	pop	{r4, r5, r6, pc}

080017de <HAL_PCD_EP_Transmit>:
{
 80017de:	b570      	push	{r4, r5, r6, lr}
 80017e0:	2528      	movs	r5, #40	@ 0x28
 80017e2:	f001 0107 	and.w	r1, r1, #7
 80017e6:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 80017e8:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 80017ea:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80017ec:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 80017f0:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80017f2:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017f4:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017f8:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 80017fa:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 80017fe:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 8001800:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 8001802:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001804:	6800      	ldr	r0, [r0, #0]
 8001806:	f000 fef2 	bl	80025ee <USB_EPStartXfer>
}
 800180a:	4630      	mov	r0, r6
 800180c:	bd70      	pop	{r4, r5, r6, pc}

0800180e <HAL_PCD_EP_SetStall>:
{
 800180e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001810:	7903      	ldrb	r3, [r0, #4]
 8001812:	f001 0507 	and.w	r5, r1, #7
 8001816:	42ab      	cmp	r3, r5
{
 8001818:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800181a:	d32a      	bcc.n	8001872 <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 800181c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001820:	f04f 0328 	mov.w	r3, #40	@ 0x28
 8001824:	d01c      	beq.n	8001860 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 8001826:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001828:	436b      	muls	r3, r5
 800182a:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 800182e:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001830:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001832:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 8001834:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001836:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001838:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800183a:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 800183e:	429a      	cmp	r2, r3
 8001840:	d019      	beq.n	8001876 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001842:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001844:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001848:	f000 fe48 	bl	80024dc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800184c:	b925      	cbnz	r5, 8001858 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800184e:	6820      	ldr	r0, [r4, #0]
 8001850:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8001854:	f000 feb9 	bl	80025ca <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001858:	2000      	movs	r0, #0
 800185a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800185e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8001860:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001862:	434b      	muls	r3, r1
 8001864:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8001868:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800186a:	4401      	add	r1, r0
    ep->is_in = 0U;
 800186c:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 8001870:	e7e0      	b.n	8001834 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 8001872:	2001      	movs	r0, #1
 8001874:	e7f3      	b.n	800185e <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 8001876:	2002      	movs	r0, #2
 8001878:	e7f1      	b.n	800185e <HAL_PCD_EP_SetStall+0x50>

0800187a <HAL_PCD_EP_ClrStall>:
{
 800187a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800187c:	7902      	ldrb	r2, [r0, #4]
 800187e:	f001 030f 	and.w	r3, r1, #15
 8001882:	429a      	cmp	r2, r3
{
 8001884:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001886:	d326      	bcc.n	80018d6 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8001888:	2328      	movs	r3, #40	@ 0x28
 800188a:	f001 0207 	and.w	r2, r1, #7
 800188e:	4353      	muls	r3, r2
 8001890:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001894:	bf14      	ite	ne
 8001896:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800189a:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 800189e:	4418      	add	r0, r3
  ep->is_stall = 0U;
 80018a0:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80018a4:	bf15      	itete	ne
 80018a6:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80018a8:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018aa:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ac:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80018ae:	bf14      	ite	ne
 80018b0:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 80018b2:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 80018b6:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018b8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80018ba:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d00b      	beq.n	80018da <HAL_PCD_EP_ClrStall+0x60>
 80018c2:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018c4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80018c6:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018ca:	f000 fe27 	bl	800251c <USB_EPClearStall>
  return HAL_OK;
 80018ce:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80018d0:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 80018d4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80018d6:	2001      	movs	r0, #1
 80018d8:	e7fc      	b.n	80018d4 <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 80018da:	2002      	movs	r0, #2
 80018dc:	e7fa      	b.n	80018d4 <HAL_PCD_EP_ClrStall+0x5a>

080018de <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80018de:	b510      	push	{r4, lr}
 80018e0:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80018e2:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018e6:	bf1b      	ittet	ne
 80018e8:	f001 0107 	andne.w	r1, r1, #7
 80018ec:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018f0:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018f4:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 80018f6:	bf08      	it	eq
 80018f8:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80018fc:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80018fe:	b91a      	cbnz	r2, 8001908 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8001900:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8001902:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8001904:	2000      	movs	r0, #0
 8001906:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8001908:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800190a:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 800190c:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800190e:	e7f9      	b.n	8001904 <HAL_PCDEx_PMAConfig+0x26>

08001910 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001910:	2201      	movs	r2, #1
 8001912:	4b01      	ldr	r3, [pc, #4]	@ (8001918 <HAL_PWR_EnableBkUpAccess+0x8>)
 8001914:	621a      	str	r2, [r3, #32]
}
 8001916:	4770      	bx	lr
 8001918:	420e0000 	.word	0x420e0000

0800191c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800191c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800191e:	f7fe fee7 	bl	80006f0 <HAL_GetTick>
 8001922:	4605      	mov	r5, r0

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001924:	4c2f      	ldr	r4, [pc, #188]	@ (80019e4 <HAL_RCC_DeInit+0xc8>)
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	079b      	lsls	r3, r3, #30
 8001932:	d53b      	bpl.n	80019ac <HAL_RCC_DeInit+0x90>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001934:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001936:	f241 3688 	movw	r6, #5000	@ 0x1388
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 800193a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800193e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001942:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001944:	f7fe fed4 	bl	80006f0 <HAL_GetTick>
  CLEAR_REG(RCC->CFGR);
 8001948:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 800194a:	4605      	mov	r5, r0
  CLEAR_REG(RCC->CFGR);
 800194c:	6063      	str	r3, [r4, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800194e:	6863      	ldr	r3, [r4, #4]
 8001950:	f013 0f0c 	tst.w	r3, #12
 8001954:	d132      	bne.n	80019bc <HAL_RCC_DeInit+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001956:	4b24      	ldr	r3, [pc, #144]	@ (80019e8 <HAL_RCC_DeInit+0xcc>)
 8001958:	4a24      	ldr	r2, [pc, #144]	@ (80019ec <HAL_RCC_DeInit+0xd0>)
 800195a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800195c:	4b24      	ldr	r3, [pc, #144]	@ (80019f0 <HAL_RCC_DeInit+0xd4>)
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	f7fe fe84 	bl	800066c <HAL_InitTick>
 8001964:	4605      	mov	r5, r0
 8001966:	2800      	cmp	r0, #0
 8001968:	d13a      	bne.n	80019e0 <HAL_RCC_DeInit+0xc4>
  {
    return HAL_ERROR;
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800196a:	f7fe fec1 	bl	80006f0 <HAL_GetTick>
 800196e:	4606      	mov	r6, r0

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001976:	6023      	str	r3, [r4, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 800197e:	d123      	bne.n	80019c8 <HAL_RCC_DeInit+0xac>
      return HAL_TIMEOUT;
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8001980:	6063      	str	r3, [r4, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001982:	f7fe feb5 	bl	80006f0 <HAL_GetTick>
 8001986:	4606      	mov	r6, r0

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800198e:	6023      	str	r3, [r4, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8001996:	d11d      	bne.n	80019d4 <HAL_RCC_DeInit+0xb8>
      return HAL_TIMEOUT;
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001998:	6822      	ldr	r2, [r4, #0]
 800199a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800199e:	6022      	str	r2, [r4, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80019a0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80019a2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80019a6:	6262      	str	r2, [r4, #36]	@ 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 80019a8:	60a3      	str	r3, [r4, #8]

  return HAL_OK;
 80019aa:	e005      	b.n	80019b8 <HAL_RCC_DeInit+0x9c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ac:	f7fe fea0 	bl	80006f0 <HAL_GetTick>
 80019b0:	1b40      	subs	r0, r0, r5
 80019b2:	2802      	cmp	r0, #2
 80019b4:	d9bb      	bls.n	800192e <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 80019b6:	2503      	movs	r5, #3
}
 80019b8:	4628      	mov	r0, r5
 80019ba:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7fe fe98 	bl	80006f0 <HAL_GetTick>
 80019c0:	1b40      	subs	r0, r0, r5
 80019c2:	42b0      	cmp	r0, r6
 80019c4:	d9c3      	bls.n	800194e <HAL_RCC_DeInit+0x32>
 80019c6:	e7f6      	b.n	80019b6 <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7fe fe92 	bl	80006f0 <HAL_GetTick>
 80019cc:	1b80      	subs	r0, r0, r6
 80019ce:	2802      	cmp	r0, #2
 80019d0:	d9d2      	bls.n	8001978 <HAL_RCC_DeInit+0x5c>
 80019d2:	e7f0      	b.n	80019b6 <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d4:	f7fe fe8c 	bl	80006f0 <HAL_GetTick>
 80019d8:	1b80      	subs	r0, r0, r6
 80019da:	2864      	cmp	r0, #100	@ 0x64
 80019dc:	d9d8      	bls.n	8001990 <HAL_RCC_DeInit+0x74>
 80019de:	e7ea      	b.n	80019b6 <HAL_RCC_DeInit+0x9a>
    return HAL_ERROR;
 80019e0:	2501      	movs	r5, #1
 80019e2:	e7e9      	b.n	80019b8 <HAL_RCC_DeInit+0x9c>
 80019e4:	40021000 	.word	0x40021000
 80019e8:	20000000 	.word	0x20000000
 80019ec:	007a1200 	.word	0x007a1200
 80019f0:	20000010 	.word	0x20000010

080019f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f8:	4605      	mov	r5, r0
 80019fa:	b338      	cbz	r0, 8001a4c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fc:	6803      	ldr	r3, [r0, #0]
 80019fe:	07db      	lsls	r3, r3, #31
 8001a00:	d410      	bmi.n	8001a24 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	079f      	lsls	r7, r3, #30
 8001a06:	d45e      	bmi.n	8001ac6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a08:	682b      	ldr	r3, [r5, #0]
 8001a0a:	0719      	lsls	r1, r3, #28
 8001a0c:	f100 8095 	bmi.w	8001b3a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a10:	682b      	ldr	r3, [r5, #0]
 8001a12:	075a      	lsls	r2, r3, #29
 8001a14:	f100 80c1 	bmi.w	8001b9a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a18:	69eb      	ldr	r3, [r5, #28]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 812c 	bne.w	8001c78 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001a20:	2000      	movs	r0, #0
 8001a22:	e029      	b.n	8001a78 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a24:	4c90      	ldr	r4, [pc, #576]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001a26:	6863      	ldr	r3, [r4, #4]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d007      	beq.n	8001a40 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a30:	6863      	ldr	r3, [r4, #4]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d10a      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5c>
 8001a3a:	6863      	ldr	r3, [r4, #4]
 8001a3c:	03de      	lsls	r6, r3, #15
 8001a3e:	d507      	bpl.n	8001a50 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	039c      	lsls	r4, r3, #14
 8001a44:	d5dd      	bpl.n	8001a02 <HAL_RCC_OscConfig+0xe>
 8001a46:	686b      	ldr	r3, [r5, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1da      	bne.n	8001a02 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	e013      	b.n	8001a78 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a50:	686b      	ldr	r3, [r5, #4]
 8001a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a56:	d112      	bne.n	8001a7e <HAL_RCC_OscConfig+0x8a>
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a5e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a60:	f7fe fe46 	bl	80006f0 <HAL_GetTick>
 8001a64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	0398      	lsls	r0, r3, #14
 8001a6a:	d4ca      	bmi.n	8001a02 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7fe fe40 	bl	80006f0 <HAL_GetTick>
 8001a70:	1b80      	subs	r0, r0, r6
 8001a72:	2864      	cmp	r0, #100	@ 0x64
 8001a74:	d9f7      	bls.n	8001a66 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001a76:	2003      	movs	r0, #3
}
 8001a78:	b002      	add	sp, #8
 8001a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7e:	b99b      	cbnz	r3, 8001aa8 <HAL_RCC_OscConfig+0xb4>
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a86:	6023      	str	r3, [r4, #0]
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a8e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a90:	f7fe fe2e 	bl	80006f0 <HAL_GetTick>
 8001a94:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	0399      	lsls	r1, r3, #14
 8001a9a:	d5b2      	bpl.n	8001a02 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7fe fe28 	bl	80006f0 <HAL_GetTick>
 8001aa0:	1b80      	subs	r0, r0, r6
 8001aa2:	2864      	cmp	r0, #100	@ 0x64
 8001aa4:	d9f7      	bls.n	8001a96 <HAL_RCC_OscConfig+0xa2>
 8001aa6:	e7e6      	b.n	8001a76 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	d103      	bne.n	8001ab8 <HAL_RCC_OscConfig+0xc4>
 8001ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ab4:	6023      	str	r3, [r4, #0]
 8001ab6:	e7cf      	b.n	8001a58 <HAL_RCC_OscConfig+0x64>
 8001ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001abc:	6023      	str	r3, [r4, #0]
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ac4:	e7cb      	b.n	8001a5e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ac6:	4c68      	ldr	r4, [pc, #416]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	6863      	ldr	r3, [r4, #4]
 8001aca:	f013 0f0c 	tst.w	r3, #12
 8001ace:	d007      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ad0:	6863      	ldr	r3, [r4, #4]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d110      	bne.n	8001afc <HAL_RCC_OscConfig+0x108>
 8001ada:	6863      	ldr	r3, [r4, #4]
 8001adc:	03da      	lsls	r2, r3, #15
 8001ade:	d40d      	bmi.n	8001afc <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	079b      	lsls	r3, r3, #30
 8001ae4:	d502      	bpl.n	8001aec <HAL_RCC_OscConfig+0xf8>
 8001ae6:	692b      	ldr	r3, [r5, #16]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d1af      	bne.n	8001a4c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	696a      	ldr	r2, [r5, #20]
 8001af0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001af4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001af8:	6023      	str	r3, [r4, #0]
 8001afa:	e785      	b.n	8001a08 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001afc:	692a      	ldr	r2, [r5, #16]
 8001afe:	4b5b      	ldr	r3, [pc, #364]	@ (8001c6c <HAL_RCC_OscConfig+0x278>)
 8001b00:	b16a      	cbz	r2, 8001b1e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b06:	f7fe fdf3 	bl	80006f0 <HAL_GetTick>
 8001b0a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	079f      	lsls	r7, r3, #30
 8001b10:	d4ec      	bmi.n	8001aec <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b12:	f7fe fded 	bl	80006f0 <HAL_GetTick>
 8001b16:	1b80      	subs	r0, r0, r6
 8001b18:	2802      	cmp	r0, #2
 8001b1a:	d9f7      	bls.n	8001b0c <HAL_RCC_OscConfig+0x118>
 8001b1c:	e7ab      	b.n	8001a76 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001b1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b20:	f7fe fde6 	bl	80006f0 <HAL_GetTick>
 8001b24:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	0798      	lsls	r0, r3, #30
 8001b2a:	f57f af6d 	bpl.w	8001a08 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2e:	f7fe fddf 	bl	80006f0 <HAL_GetTick>
 8001b32:	1b80      	subs	r0, r0, r6
 8001b34:	2802      	cmp	r0, #2
 8001b36:	d9f6      	bls.n	8001b26 <HAL_RCC_OscConfig+0x132>
 8001b38:	e79d      	b.n	8001a76 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b3a:	69aa      	ldr	r2, [r5, #24]
 8001b3c:	4e4a      	ldr	r6, [pc, #296]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c6c <HAL_RCC_OscConfig+0x278>)
 8001b40:	b1e2      	cbz	r2, 8001b7c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001b42:	2201      	movs	r2, #1
 8001b44:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001b48:	f7fe fdd2 	bl	80006f0 <HAL_GetTick>
 8001b4c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001b50:	079b      	lsls	r3, r3, #30
 8001b52:	d50d      	bpl.n	8001b70 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b54:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001b58:	4b45      	ldr	r3, [pc, #276]	@ (8001c70 <HAL_RCC_OscConfig+0x27c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b60:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001b62:	bf00      	nop
  }
  while (Delay --);
 8001b64:	9b01      	ldr	r3, [sp, #4]
 8001b66:	1e5a      	subs	r2, r3, #1
 8001b68:	9201      	str	r2, [sp, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f9      	bne.n	8001b62 <HAL_RCC_OscConfig+0x16e>
 8001b6e:	e74f      	b.n	8001a10 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b70:	f7fe fdbe 	bl	80006f0 <HAL_GetTick>
 8001b74:	1b00      	subs	r0, r0, r4
 8001b76:	2802      	cmp	r0, #2
 8001b78:	d9e9      	bls.n	8001b4e <HAL_RCC_OscConfig+0x15a>
 8001b7a:	e77c      	b.n	8001a76 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001b7c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001b80:	f7fe fdb6 	bl	80006f0 <HAL_GetTick>
 8001b84:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b86:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001b88:	079f      	lsls	r7, r3, #30
 8001b8a:	f57f af41 	bpl.w	8001a10 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8e:	f7fe fdaf 	bl	80006f0 <HAL_GetTick>
 8001b92:	1b00      	subs	r0, r0, r4
 8001b94:	2802      	cmp	r0, #2
 8001b96:	d9f6      	bls.n	8001b86 <HAL_RCC_OscConfig+0x192>
 8001b98:	e76d      	b.n	8001a76 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9a:	4c33      	ldr	r4, [pc, #204]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	69e3      	ldr	r3, [r4, #28]
 8001b9e:	00d8      	lsls	r0, r3, #3
 8001ba0:	d424      	bmi.n	8001bec <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001ba2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba4:	69e3      	ldr	r3, [r4, #28]
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	61e3      	str	r3, [r4, #28]
 8001bac:	69e3      	ldr	r3, [r4, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb6:	4e2f      	ldr	r6, [pc, #188]	@ (8001c74 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	6833      	ldr	r3, [r6, #0]
 8001bba:	05d9      	lsls	r1, r3, #23
 8001bbc:	d518      	bpl.n	8001bf0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bbe:	68eb      	ldr	r3, [r5, #12]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d126      	bne.n	8001c12 <HAL_RCC_OscConfig+0x21e>
 8001bc4:	6a23      	ldr	r3, [r4, #32]
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001bcc:	f7fe fd90 	bl	80006f0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd0:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001bd4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd6:	6a23      	ldr	r3, [r4, #32]
 8001bd8:	079b      	lsls	r3, r3, #30
 8001bda:	d53f      	bpl.n	8001c5c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001bdc:	2f00      	cmp	r7, #0
 8001bde:	f43f af1b 	beq.w	8001a18 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be2:	69e3      	ldr	r3, [r4, #28]
 8001be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001be8:	61e3      	str	r3, [r4, #28]
 8001bea:	e715      	b.n	8001a18 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001bec:	2700      	movs	r7, #0
 8001bee:	e7e2      	b.n	8001bb6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf0:	6833      	ldr	r3, [r6, #0]
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001bf8:	f7fe fd7a 	bl	80006f0 <HAL_GetTick>
 8001bfc:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	6833      	ldr	r3, [r6, #0]
 8001c00:	05da      	lsls	r2, r3, #23
 8001c02:	d4dc      	bmi.n	8001bbe <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c04:	f7fe fd74 	bl	80006f0 <HAL_GetTick>
 8001c08:	eba0 0008 	sub.w	r0, r0, r8
 8001c0c:	2864      	cmp	r0, #100	@ 0x64
 8001c0e:	d9f6      	bls.n	8001bfe <HAL_RCC_OscConfig+0x20a>
 8001c10:	e731      	b.n	8001a76 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c12:	b9ab      	cbnz	r3, 8001c40 <HAL_RCC_OscConfig+0x24c>
 8001c14:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c16:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	6223      	str	r3, [r4, #32]
 8001c20:	6a23      	ldr	r3, [r4, #32]
 8001c22:	f023 0304 	bic.w	r3, r3, #4
 8001c26:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001c28:	f7fe fd62 	bl	80006f0 <HAL_GetTick>
 8001c2c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2e:	6a23      	ldr	r3, [r4, #32]
 8001c30:	0798      	lsls	r0, r3, #30
 8001c32:	d5d3      	bpl.n	8001bdc <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7fe fd5c 	bl	80006f0 <HAL_GetTick>
 8001c38:	1b80      	subs	r0, r0, r6
 8001c3a:	4540      	cmp	r0, r8
 8001c3c:	d9f7      	bls.n	8001c2e <HAL_RCC_OscConfig+0x23a>
 8001c3e:	e71a      	b.n	8001a76 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c40:	2b05      	cmp	r3, #5
 8001c42:	6a23      	ldr	r3, [r4, #32]
 8001c44:	d103      	bne.n	8001c4e <HAL_RCC_OscConfig+0x25a>
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6223      	str	r3, [r4, #32]
 8001c4c:	e7ba      	b.n	8001bc4 <HAL_RCC_OscConfig+0x1d0>
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	6223      	str	r3, [r4, #32]
 8001c54:	6a23      	ldr	r3, [r4, #32]
 8001c56:	f023 0304 	bic.w	r3, r3, #4
 8001c5a:	e7b6      	b.n	8001bca <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7fe fd48 	bl	80006f0 <HAL_GetTick>
 8001c60:	1b80      	subs	r0, r0, r6
 8001c62:	4540      	cmp	r0, r8
 8001c64:	d9b7      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x1e2>
 8001c66:	e706      	b.n	8001a76 <HAL_RCC_OscConfig+0x82>
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	42420000 	.word	0x42420000
 8001c70:	20000000 	.word	0x20000000
 8001c74:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c78:	4c2a      	ldr	r4, [pc, #168]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001c7a:	6862      	ldr	r2, [r4, #4]
 8001c7c:	f002 020c 	and.w	r2, r2, #12
 8001c80:	2a08      	cmp	r2, #8
 8001c82:	d03e      	beq.n	8001d02 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c84:	2200      	movs	r2, #0
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	4b27      	ldr	r3, [pc, #156]	@ (8001d28 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8c:	d12c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001c8e:	f7fe fd2f 	bl	80006f0 <HAL_GetTick>
 8001c92:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	0199      	lsls	r1, r3, #6
 8001c98:	d420      	bmi.n	8001cdc <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c9a:	6a2b      	ldr	r3, [r5, #32]
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca0:	d105      	bne.n	8001cae <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ca2:	6862      	ldr	r2, [r4, #4]
 8001ca4:	68a9      	ldr	r1, [r5, #8]
 8001ca6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001caa:	430a      	orrs	r2, r1
 8001cac:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cae:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001cb0:	6862      	ldr	r2, [r4, #4]
 8001cb2:	430b      	orrs	r3, r1
 8001cb4:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8001cb8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001cba:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cbc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d28 <HAL_RCC_OscConfig+0x334>)
 8001cc0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001cc2:	f7fe fd15 	bl	80006f0 <HAL_GetTick>
 8001cc6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	019a      	lsls	r2, r3, #6
 8001ccc:	f53f aea8 	bmi.w	8001a20 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd0:	f7fe fd0e 	bl	80006f0 <HAL_GetTick>
 8001cd4:	1b40      	subs	r0, r0, r5
 8001cd6:	2802      	cmp	r0, #2
 8001cd8:	d9f6      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x2d4>
 8001cda:	e6cc      	b.n	8001a76 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7fe fd08 	bl	80006f0 <HAL_GetTick>
 8001ce0:	1b80      	subs	r0, r0, r6
 8001ce2:	2802      	cmp	r0, #2
 8001ce4:	d9d6      	bls.n	8001c94 <HAL_RCC_OscConfig+0x2a0>
 8001ce6:	e6c6      	b.n	8001a76 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001ce8:	f7fe fd02 	bl	80006f0 <HAL_GetTick>
 8001cec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	019b      	lsls	r3, r3, #6
 8001cf2:	f57f ae95 	bpl.w	8001a20 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7fe fcfb 	bl	80006f0 <HAL_GetTick>
 8001cfa:	1b40      	subs	r0, r0, r5
 8001cfc:	2802      	cmp	r0, #2
 8001cfe:	d9f6      	bls.n	8001cee <HAL_RCC_OscConfig+0x2fa>
 8001d00:	e6b9      	b.n	8001a76 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	f43f aea2 	beq.w	8001a4c <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8001d08:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	6a2b      	ldr	r3, [r5, #32]
 8001d0c:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8001d10:	429a      	cmp	r2, r3
 8001d12:	f47f ae9b 	bne.w	8001a4c <HAL_RCC_OscConfig+0x58>
 8001d16:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d18:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1c:	1ac0      	subs	r0, r0, r3
 8001d1e:	bf18      	it	ne
 8001d20:	2001      	movne	r0, #1
 8001d22:	e6a9      	b.n	8001a78 <HAL_RCC_OscConfig+0x84>
 8001d24:	40021000 	.word	0x40021000
 8001d28:	42420000 	.word	0x42420000

08001d2c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x38>)
 8001d2e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d30:	f003 010c 	and.w	r1, r3, #12
 8001d34:	2908      	cmp	r1, #8
 8001d36:	d112      	bne.n	8001d5e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d38:	480b      	ldr	r0, [pc, #44]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d3a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d3e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d40:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d42:	d509      	bpl.n	8001d58 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d44:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d46:	4a09      	ldr	r2, [pc, #36]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d48:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d4c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d4e:	4a08      	ldr	r2, [pc, #32]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x44>)
 8001d50:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d52:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d56:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x48>)
 8001d5a:	4358      	muls	r0, r3
 8001d5c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001d5e:	4803      	ldr	r0, [pc, #12]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	08003b2a 	.word	0x08003b2a
 8001d6c:	007a1200 	.word	0x007a1200
 8001d70:	08003b28 	.word	0x08003b28
 8001d74:	003d0900 	.word	0x003d0900

08001d78 <HAL_RCC_ClockConfig>:
{
 8001d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d7c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001d7e:	4604      	mov	r4, r0
 8001d80:	b910      	cbnz	r0, 8001d88 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d82:	2001      	movs	r0, #1
}
 8001d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d88:	4a44      	ldr	r2, [pc, #272]	@ (8001e9c <HAL_RCC_ClockConfig+0x124>)
 8001d8a:	6813      	ldr	r3, [r2, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	428b      	cmp	r3, r1
 8001d92:	d328      	bcc.n	8001de6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	6821      	ldr	r1, [r4, #0]
 8001d96:	078e      	lsls	r6, r1, #30
 8001d98:	d430      	bmi.n	8001dfc <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9a:	07ca      	lsls	r2, r1, #31
 8001d9c:	d443      	bmi.n	8001e26 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e9c <HAL_RCC_ClockConfig+0x124>)
 8001da0:	6813      	ldr	r3, [r2, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	42ab      	cmp	r3, r5
 8001da8:	d865      	bhi.n	8001e76 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001daa:	6822      	ldr	r2, [r4, #0]
 8001dac:	4d3c      	ldr	r5, [pc, #240]	@ (8001ea0 <HAL_RCC_ClockConfig+0x128>)
 8001dae:	f012 0f04 	tst.w	r2, #4
 8001db2:	d16c      	bne.n	8001e8e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db4:	0713      	lsls	r3, r2, #28
 8001db6:	d506      	bpl.n	8001dc6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001db8:	686b      	ldr	r3, [r5, #4]
 8001dba:	6922      	ldr	r2, [r4, #16]
 8001dbc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001dc0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001dc4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dc6:	f7ff ffb1 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8001dca:	686b      	ldr	r3, [r5, #4]
 8001dcc:	4a35      	ldr	r2, [pc, #212]	@ (8001ea4 <HAL_RCC_ClockConfig+0x12c>)
 8001dce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001dd2:	5cd3      	ldrb	r3, [r2, r3]
 8001dd4:	40d8      	lsrs	r0, r3
 8001dd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <HAL_RCC_ClockConfig+0x130>)
 8001dd8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001dda:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <HAL_RCC_ClockConfig+0x134>)
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	f7fe fc45 	bl	800066c <HAL_InitTick>
  return HAL_OK;
 8001de2:	2000      	movs	r0, #0
 8001de4:	e7ce      	b.n	8001d84 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	6813      	ldr	r3, [r2, #0]
 8001de8:	f023 0307 	bic.w	r3, r3, #7
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df0:	6813      	ldr	r3, [r2, #0]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	428b      	cmp	r3, r1
 8001df8:	d1c3      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xa>
 8001dfa:	e7cb      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfc:	4b28      	ldr	r3, [pc, #160]	@ (8001ea0 <HAL_RCC_ClockConfig+0x128>)
 8001dfe:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e02:	bf1e      	ittt	ne
 8001e04:	685a      	ldrne	r2, [r3, #4]
 8001e06:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8001e0a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e0e:	bf42      	ittt	mi
 8001e10:	685a      	ldrmi	r2, [r3, #4]
 8001e12:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001e16:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	68a0      	ldr	r0, [r4, #8]
 8001e1c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001e20:	4302      	orrs	r2, r0
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	e7b9      	b.n	8001d9a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	6862      	ldr	r2, [r4, #4]
 8001e28:	4e1d      	ldr	r6, [pc, #116]	@ (8001ea0 <HAL_RCC_ClockConfig+0x128>)
 8001e2a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2e:	d11a      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e30:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	d0a5      	beq.n	8001d82 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3c:	f023 0303 	bic.w	r3, r3, #3
 8001e40:	4313      	orrs	r3, r2
 8001e42:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001e44:	f7fe fc54 	bl	80006f0 <HAL_GetTick>
 8001e48:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	6873      	ldr	r3, [r6, #4]
 8001e4c:	6862      	ldr	r2, [r4, #4]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e56:	d0a2      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e58:	f7fe fc4a 	bl	80006f0 <HAL_GetTick>
 8001e5c:	1bc0      	subs	r0, r0, r7
 8001e5e:	4540      	cmp	r0, r8
 8001e60:	d9f3      	bls.n	8001e4a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001e62:	2003      	movs	r0, #3
 8001e64:	e78e      	b.n	8001d84 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e66:	2a02      	cmp	r2, #2
 8001e68:	d102      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001e6e:	e7e1      	b.n	8001e34 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	f013 0f02 	tst.w	r3, #2
 8001e74:	e7de      	b.n	8001e34 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	6813      	ldr	r3, [r2, #0]
 8001e78:	f023 0307 	bic.w	r3, r3, #7
 8001e7c:	432b      	orrs	r3, r5
 8001e7e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e80:	6813      	ldr	r3, [r2, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	42ab      	cmp	r3, r5
 8001e88:	f47f af7b 	bne.w	8001d82 <HAL_RCC_ClockConfig+0xa>
 8001e8c:	e78d      	b.n	8001daa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e8e:	686b      	ldr	r3, [r5, #4]
 8001e90:	68e1      	ldr	r1, [r4, #12]
 8001e92:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e96:	430b      	orrs	r3, r1
 8001e98:	606b      	str	r3, [r5, #4]
 8001e9a:	e78b      	b.n	8001db4 <HAL_RCC_ClockConfig+0x3c>
 8001e9c:	40022000 	.word	0x40022000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08003b18 	.word	0x08003b18
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	20000010 	.word	0x20000010

08001eb0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eb0:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001eb2:	4a05      	ldr	r2, [pc, #20]	@ (8001ec8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
 8001ebc:	4a03      	ldr	r2, [pc, #12]	@ (8001ecc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ebe:	6810      	ldr	r0, [r2, #0]
}
 8001ec0:	40d8      	lsrs	r0, r3
 8001ec2:	4770      	bx	lr
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08003b10 	.word	0x08003b10
 8001ecc:	20000000 	.word	0x20000000

08001ed0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ed0:	6803      	ldr	r3, [r0, #0]
{
 8001ed2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001ed6:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ed8:	07d8      	lsls	r0, r3, #31
 8001eda:	d521      	bpl.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001edc:	4c36      	ldr	r4, [pc, #216]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001ede:	69e3      	ldr	r3, [r4, #28]
 8001ee0:	00d9      	lsls	r1, r3, #3
 8001ee2:	d42b      	bmi.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001ee4:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	69e3      	ldr	r3, [r4, #28]
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	61e3      	str	r3, [r4, #28]
 8001eee:	69e3      	ldr	r3, [r4, #28]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4f30      	ldr	r7, [pc, #192]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	05da      	lsls	r2, r3, #23
 8001efe:	d51f      	bpl.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f00:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f02:	686a      	ldr	r2, [r5, #4]
 8001f04:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8001f08:	d12e      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f0a:	6a23      	ldr	r3, [r4, #32]
 8001f0c:	686a      	ldr	r2, [r5, #4]
 8001f0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f12:	4313      	orrs	r3, r2
 8001f14:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f16:	b11e      	cbz	r6, 8001f20 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f18:	69e3      	ldr	r3, [r4, #28]
 8001f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f20:	682a      	ldr	r2, [r5, #0]
 8001f22:	0791      	lsls	r1, r2, #30
 8001f24:	d506      	bpl.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f26:	4924      	ldr	r1, [pc, #144]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001f28:	68a8      	ldr	r0, [r5, #8]
 8001f2a:	684b      	ldr	r3, [r1, #4]
 8001f2c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f30:	4303      	orrs	r3, r0
 8001f32:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f34:	06d3      	lsls	r3, r2, #27
 8001f36:	d436      	bmi.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f38:	2000      	movs	r0, #0
 8001f3a:	e012      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8001f3c:	2600      	movs	r6, #0
 8001f3e:	e7db      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f46:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001f48:	f7fe fbd2 	bl	80006f0 <HAL_GetTick>
 8001f4c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	05db      	lsls	r3, r3, #23
 8001f52:	d4d5      	bmi.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7fe fbcc 	bl	80006f0 <HAL_GetTick>
 8001f58:	eba0 0008 	sub.w	r0, r0, r8
 8001f5c:	2864      	cmp	r0, #100	@ 0x64
 8001f5e:	d9f6      	bls.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8001f60:	2003      	movs	r0, #3
}
 8001f62:	b002      	add	sp, #8
 8001f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f68:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d0cc      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f70:	2001      	movs	r0, #1
 8001f72:	4a13      	ldr	r2, [pc, #76]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f74:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f76:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f7a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f7c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f80:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f82:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8001f86:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f88:	d5bf      	bpl.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8001f8a:	f7fe fbb1 	bl	80006f0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8001f92:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f94:	6a23      	ldr	r3, [r4, #32]
 8001f96:	0798      	lsls	r0, r3, #30
 8001f98:	d4b7      	bmi.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7fe fba9 	bl	80006f0 <HAL_GetTick>
 8001f9e:	1bc0      	subs	r0, r0, r7
 8001fa0:	4540      	cmp	r0, r8
 8001fa2:	d9f7      	bls.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8001fa4:	e7dc      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fa6:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001fa8:	68e9      	ldr	r1, [r5, #12]
 8001faa:	6853      	ldr	r3, [r2, #4]
 8001fac:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	6053      	str	r3, [r2, #4]
 8001fb4:	e7c0      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	42420000 	.word	0x42420000

08001fc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001fc4:	2802      	cmp	r0, #2
{
 8001fc6:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8001fc8:	d044      	beq.n	8002054 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8001fca:	2810      	cmp	r0, #16
 8001fcc:	d003      	beq.n	8001fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8001fce:	2801      	cmp	r0, #1
 8001fd0:	d022      	beq.n	8002018 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	e034      	b.n	8002040 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8001fd6:	4b25      	ldr	r3, [pc, #148]	@ (800206c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8001fd8:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8001fe0:	d02e      	beq.n	8002040 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fe2:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8001fe6:	4822      	ldr	r0, [pc, #136]	@ (8002070 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe8:	03d2      	lsls	r2, r2, #15
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fea:	bf48      	it	mi
 8001fec:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fee:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ff0:	bf41      	itttt	mi
 8001ff2:	4920      	ldrmi	r1, [pc, #128]	@ (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8001ff4:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001ff8:	5c89      	ldrbmi	r1, [r1, r2]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001ffa:	4a1f      	ldrmi	r2, [pc, #124]	@ (8002078 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001ffc:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001ffe:	bf4c      	ite	mi
 8002000:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002004:	4a1d      	ldrpl	r2, [pc, #116]	@ (800207c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002006:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002008:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800200c:	d418      	bmi.n	8002040 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 800200e:	2303      	movs	r3, #3
 8002010:	0040      	lsls	r0, r0, #1
      }
      break;
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002012:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002016:	e013      	b.n	8002040 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002018:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 800201c:	4a13      	ldr	r2, [pc, #76]	@ (800206c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800201e:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002020:	4019      	ands	r1, r3
 8002022:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 8002026:	d01e      	beq.n	8002066 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002028:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800202c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002030:	d107      	bne.n	8002042 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002032:	f649 4040 	movw	r0, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002036:	6a53      	ldr	r3, [r2, #36]	@ 0x24
  uint32_t temp_reg = 0U, frequency = 0U;
 8002038:	f013 0f02 	tst.w	r3, #2
 800203c:	bf08      	it	eq
 800203e:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8002040:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002042:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002046:	d1c4      	bne.n	8001fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8002048:	6813      	ldr	r3, [r2, #0]
  uint32_t temp_reg = 0U, frequency = 0U;
 800204a:	f24f 4024 	movw	r0, #62500	@ 0xf424
 800204e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002052:	e7f3      	b.n	800203c <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002054:	f7ff ff2c 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 8002058:	4b04      	ldr	r3, [pc, #16]	@ (800206c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002060:	3301      	adds	r3, #1
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	e7d5      	b.n	8002012 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 8002066:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800206a:	e7e9      	b.n	8002040 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800206c:	40021000 	.word	0x40021000
 8002070:	08003b3c 	.word	0x08003b3c
 8002074:	08003b3a 	.word	0x08003b3a
 8002078:	007a1200 	.word	0x007a1200
 800207c:	003d0900 	.word	0x003d0900

08002080 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8002084:	f7fe fb34 	bl	80006f0 <HAL_GetTick>
 8002088:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	0692      	lsls	r2, r2, #26
 8002090:	d505      	bpl.n	800209e <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 8002092:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	f042 0210 	orr.w	r2, r2, #16
 800209a:	605a      	str	r2, [r3, #4]
}
 800209c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800209e:	f7fe fb27 	bl	80006f0 <HAL_GetTick>
 80020a2:	1b40      	subs	r0, r0, r5
 80020a4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80020a8:	d9ef      	bls.n	800208a <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80020aa:	2003      	movs	r0, #3
 80020ac:	e7f6      	b.n	800209c <RTC_EnterInitMode+0x1c>

080020ae <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ae:	6802      	ldr	r2, [r0, #0]
{
 80020b0:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020b2:	6853      	ldr	r3, [r2, #4]
{
 80020b4:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020b6:	f023 0310 	bic.w	r3, r3, #16
 80020ba:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 80020bc:	f7fe fb18 	bl	80006f0 <HAL_GetTick>
 80020c0:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80020c2:	6823      	ldr	r3, [r4, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	069b      	lsls	r3, r3, #26
 80020c8:	d501      	bpl.n	80020ce <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80020ca:	2000      	movs	r0, #0
}
 80020cc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80020ce:	f7fe fb0f 	bl	80006f0 <HAL_GetTick>
 80020d2:	1b40      	subs	r0, r0, r5
 80020d4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80020d8:	d9f3      	bls.n	80020c2 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80020da:	2003      	movs	r0, #3
 80020dc:	e7f6      	b.n	80020cc <RTC_ExitInitMode+0x1e>

080020de <HAL_RTC_WaitForSynchro>:
{
 80020de:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80020e0:	4604      	mov	r4, r0
 80020e2:	b1a8      	cbz	r0, 8002110 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80020e4:	6802      	ldr	r2, [r0, #0]
 80020e6:	6853      	ldr	r3, [r2, #4]
 80020e8:	f023 0308 	bic.w	r3, r3, #8
 80020ec:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80020ee:	f7fe faff 	bl	80006f0 <HAL_GetTick>
 80020f2:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	071b      	lsls	r3, r3, #28
 80020fa:	d501      	bpl.n	8002100 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 80020fc:	2000      	movs	r0, #0
}
 80020fe:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002100:	f7fe faf6 	bl	80006f0 <HAL_GetTick>
 8002104:	1b40      	subs	r0, r0, r5
 8002106:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800210a:	d9f3      	bls.n	80020f4 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 800210c:	2003      	movs	r0, #3
 800210e:	e7f6      	b.n	80020fe <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8002110:	2001      	movs	r0, #1
 8002112:	e7f4      	b.n	80020fe <HAL_RTC_WaitForSynchro+0x20>

08002114 <HAL_RTC_Init>:
{
 8002114:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8002116:	4604      	mov	r4, r0
 8002118:	b170      	cbz	r0, 8002138 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800211a:	7c43      	ldrb	r3, [r0, #17]
 800211c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002120:	b913      	cbnz	r3, 8002128 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8002122:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8002124:	f7fe fa3c 	bl	80005a0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002128:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800212a:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 800212c:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800212e:	f7ff ffd6 	bl	80020de <HAL_RTC_WaitForSynchro>
 8002132:	b118      	cbz	r0, 800213c <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002134:	2304      	movs	r3, #4
 8002136:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8002138:	2001      	movs	r0, #1
}
 800213a:	bd10      	pop	{r4, pc}
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800213c:	4620      	mov	r0, r4
 800213e:	f7ff ff9f 	bl	8002080 <RTC_EnterInitMode>
 8002142:	2800      	cmp	r0, #0
 8002144:	d1f6      	bne.n	8002134 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002146:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002148:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800214a:	6853      	ldr	r3, [r2, #4]
 800214c:	f023 0307 	bic.w	r3, r3, #7
 8002150:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002152:	4a12      	ldr	r2, [pc, #72]	@ (800219c <HAL_RTC_Init+0x88>)
 8002154:	b119      	cbz	r1, 800215e <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002156:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	@ 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800215e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002160:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 8002164:	430b      	orrs	r3, r1
 8002166:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002168:	6860      	ldr	r0, [r4, #4]
 800216a:	1c43      	adds	r3, r0, #1
 800216c:	d105      	bne.n	800217a <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800216e:	2001      	movs	r0, #1
 8002170:	f7ff ff28 	bl	8001fc4 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8002174:	2800      	cmp	r0, #0
 8002176:	d0dd      	beq.n	8002134 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8002178:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002180:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002182:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002184:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002186:	4620      	mov	r0, r4
 8002188:	f7ff ff91 	bl	80020ae <RTC_ExitInitMode>
 800218c:	2800      	cmp	r0, #0
 800218e:	d1d1      	bne.n	8002134 <HAL_RTC_Init+0x20>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002190:	2301      	movs	r3, #1
 8002192:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002194:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8002196:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8002198:	e7cf      	b.n	800213a <HAL_RTC_Init+0x26>
 800219a:	bf00      	nop
 800219c:	40006c00 	.word	0x40006c00

080021a0 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 80021a0:	0089      	lsls	r1, r1, #2
 80021a2:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80021a6:	f501 41d8 	add.w	r1, r1, #27648	@ 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80021aa:	b292      	uxth	r2, r2
 80021ac:	600a      	str	r2, [r1, #0]
}
 80021ae:	4770      	bx	lr

080021b0 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 80021b0:	0089      	lsls	r1, r1, #2
 80021b2:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80021b6:	f501 41d8 	add.w	r1, r1, #27648	@ 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80021ba:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 80021bc:	b280      	uxth	r0, r0
 80021be:	4770      	bx	lr

080021c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80021c0:	b084      	sub	sp, #16
 80021c2:	a804      	add	r0, sp, #16
 80021c4:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80021c8:	2000      	movs	r0, #0
 80021ca:	b004      	add	sp, #16
 80021cc:	4770      	bx	lr

080021ce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80021ce:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80021d0:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 80021d4:	2000      	movs	r0, #0
 80021d6:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 80021da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 80021de:	4770      	bx	lr

080021e0 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80021e0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80021e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80021e8:	045b      	lsls	r3, r3, #17
 80021ea:	0c5b      	lsrs	r3, r3, #17
 80021ec:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 80021f0:	2000      	movs	r0, #0
 80021f2:	4770      	bx	lr

080021f4 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80021f4:	2000      	movs	r0, #0
 80021f6:	4770      	bx	lr

080021f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80021f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80021fa:	4604      	mov	r4, r0
 80021fc:	a804      	add	r0, sp, #16
 80021fe:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002202:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002204:	2301      	movs	r3, #1
 8002206:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 800220a:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800220e:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002212:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 8002216:	b004      	add	sp, #16
 8002218:	bd10      	pop	{r4, pc}
	...

0800221c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800221c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800221e:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8002220:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002222:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8002226:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002228:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 800222c:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8002230:	0424      	lsls	r4, r4, #16
 8002232:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8002234:	2d03      	cmp	r5, #3
 8002236:	d803      	bhi.n	8002240 <USB_ActivateEndpoint+0x24>
 8002238:	e8df f005 	tbb	[pc, r5]
 800223c:	45474941 	.word	0x45474941
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8002240:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002242:	f248 0680 	movw	r6, #32896	@ 0x8080
 8002246:	4334      	orrs	r4, r6
 8002248:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800224c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002250:	4f9f      	ldr	r7, [pc, #636]	@ (80024d0 <USB_ActivateEndpoint+0x2b4>)
 8002252:	b2a4      	uxth	r4, r4
 8002254:	403c      	ands	r4, r7
 8002256:	4314      	orrs	r4, r2
 8002258:	4334      	orrs	r4, r6
 800225a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800225e:	7b0c      	ldrb	r4, [r1, #12]
 8002260:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8002264:	2c00      	cmp	r4, #0
 8002266:	f040 808d 	bne.w	8002384 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800226a:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 800226c:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800226e:	0864      	lsrs	r4, r4, #1
 8002270:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8002272:	b37e      	cbz	r6, 80022d4 <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002274:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8002278:	b289      	uxth	r1, r1
 800227a:	4461      	add	r1, ip
 800227c:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002280:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002284:	0649      	lsls	r1, r1, #25
 8002286:	d509      	bpl.n	800229c <USB_ActivateEndpoint+0x80>
 8002288:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800228c:	b289      	uxth	r1, r1
 800228e:	4039      	ands	r1, r7
 8002290:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002294:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8002298:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800229c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80022a0:	4c8c      	ldr	r4, [pc, #560]	@ (80024d4 <USB_ActivateEndpoint+0x2b8>)
 80022a2:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 80022a4:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80022a6:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 80022aa:	d001      	beq.n	80022b0 <USB_ActivateEndpoint+0x94>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80022ac:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80022b0:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80022b4:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80022b8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 80022bc:	e04c      	b.n	8002358 <USB_ActivateEndpoint+0x13c>
  HAL_StatusTypeDef ret = HAL_OK;
 80022be:	4628      	mov	r0, r5
      wEpRegVal |= USB_EP_CONTROL;
 80022c0:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
      break;
 80022c4:	e7bd      	b.n	8002242 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 80022c6:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  switch (ep->type)
 80022ca:	2000      	movs	r0, #0
 80022cc:	e7b9      	b.n	8002242 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80022ce:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 80022d2:	e7fa      	b.n	80022ca <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022d4:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80022d8:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022da:	b2ad      	uxth	r5, r5
 80022dc:	4465      	add	r5, ip
 80022de:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80022e2:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80022e6:	293e      	cmp	r1, #62	@ 0x3e
 80022e8:	b2a4      	uxth	r4, r4
 80022ea:	4464      	add	r4, ip
 80022ec:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 80022f0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80022f4:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 80022f8:	d92f      	bls.n	800235a <USB_ActivateEndpoint+0x13e>
 80022fa:	094d      	lsrs	r5, r1, #5
 80022fc:	06ce      	lsls	r6, r1, #27
 80022fe:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8002302:	bf08      	it	eq
 8002304:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8002308:	b289      	uxth	r1, r1
 800230a:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 800230e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002312:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002316:	b289      	uxth	r1, r1
 8002318:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800231c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002320:	044f      	lsls	r7, r1, #17
 8002322:	d50d      	bpl.n	8002340 <USB_ActivateEndpoint+0x124>
 8002324:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002328:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800232c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002330:	0409      	lsls	r1, r1, #16
 8002332:	0c09      	lsrs	r1, r1, #16
 8002334:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8002338:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800233c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8002340:	4c65      	ldr	r4, [pc, #404]	@ (80024d8 <USB_ActivateEndpoint+0x2bc>)
 8002342:	b9c2      	cbnz	r2, 8002376 <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002344:	881a      	ldrh	r2, [r3, #0]
 8002346:	b292      	uxth	r2, r2
 8002348:	4022      	ands	r2, r4
 800234a:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 800234e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002352:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002356:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8002358:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800235a:	b911      	cbnz	r1, 8002362 <USB_ActivateEndpoint+0x146>
 800235c:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8002360:	e7d5      	b.n	800230e <USB_ActivateEndpoint+0xf2>
 8002362:	084d      	lsrs	r5, r1, #1
 8002364:	07c9      	lsls	r1, r1, #31
 8002366:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 800236a:	bf48      	it	mi
 800236c:	3501      	addmi	r5, #1
 800236e:	b289      	uxth	r1, r1
 8002370:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8002374:	e7cf      	b.n	8002316 <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002376:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800237a:	b289      	uxth	r1, r1
 800237c:	4021      	ands	r1, r4
 800237e:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 8002382:	e795      	b.n	80022b0 <USB_ActivateEndpoint+0x94>
    if (ep->type == EP_TYPE_BULK)
 8002384:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002386:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 800238a:	d15b      	bne.n	8002444 <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800238c:	b2a4      	uxth	r4, r4
 800238e:	403c      	ands	r4, r7
 8002390:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 8002394:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8002398:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800239c:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80023a0:	890e      	ldrh	r6, [r1, #8]
 80023a2:	b2a4      	uxth	r4, r4
 80023a4:	0876      	lsrs	r6, r6, #1
 80023a6:	4464      	add	r4, ip
 80023a8:	0076      	lsls	r6, r6, #1
 80023aa:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 80023ae:	894e      	ldrh	r6, [r1, #10]
 80023b0:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80023b4:	0876      	lsrs	r6, r6, #1
 80023b6:	b2a4      	uxth	r4, r4
 80023b8:	4464      	add	r4, ip
 80023ba:	0076      	lsls	r6, r6, #1
 80023bc:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 80023c0:	7849      	ldrb	r1, [r1, #1]
 80023c2:	2900      	cmp	r1, #0
 80023c4:	d148      	bne.n	8002458 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023c6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023ca:	044e      	lsls	r6, r1, #17
 80023cc:	d50d      	bpl.n	80023ea <USB_ActivateEndpoint+0x1ce>
 80023ce:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023d2:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80023d6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80023da:	0409      	lsls	r1, r1, #16
 80023dc:	0c09      	lsrs	r1, r1, #16
 80023de:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80023e2:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80023e6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023ea:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023ee:	064d      	lsls	r5, r1, #25
 80023f0:	d50d      	bpl.n	800240e <USB_ActivateEndpoint+0x1f2>
 80023f2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023f6:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80023fa:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80023fe:	0409      	lsls	r1, r1, #16
 8002400:	0c09      	lsrs	r1, r1, #16
 8002402:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002406:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 800240a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800240e:	f248 0480 	movw	r4, #32896	@ 0x8080
 8002412:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002416:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800241a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800241e:	0409      	lsls	r1, r1, #16
 8002420:	0c09      	lsrs	r1, r1, #16
 8002422:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8002426:	4321      	orrs	r1, r4
 8002428:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800242c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002430:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8002434:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8002438:	0409      	lsls	r1, r1, #16
 800243a:	0c09      	lsrs	r1, r1, #16
 800243c:	430c      	orrs	r4, r1
 800243e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8002442:	e789      	b.n	8002358 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002444:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8002448:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 800244c:	0424      	lsls	r4, r4, #16
 800244e:	0c24      	lsrs	r4, r4, #16
 8002450:	4326      	orrs	r6, r4
 8002452:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8002456:	e7a1      	b.n	800239c <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002458:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800245c:	044c      	lsls	r4, r1, #17
 800245e:	d50d      	bpl.n	800247c <USB_ActivateEndpoint+0x260>
 8002460:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002464:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8002468:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800246c:	0409      	lsls	r1, r1, #16
 800246e:	0c09      	lsrs	r1, r1, #16
 8002470:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8002474:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8002478:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800247c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002480:	0649      	lsls	r1, r1, #25
 8002482:	d50d      	bpl.n	80024a0 <USB_ActivateEndpoint+0x284>
 8002484:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002488:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800248c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002490:	0409      	lsls	r1, r1, #16
 8002492:	0c09      	lsrs	r1, r1, #16
 8002494:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002498:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 800249c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80024a0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80024a4:	4c0b      	ldr	r4, [pc, #44]	@ (80024d4 <USB_ActivateEndpoint+0x2b8>)
 80024a6:	b289      	uxth	r1, r1
 80024a8:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 80024aa:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80024ac:	bf18      	it	ne
 80024ae:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80024b2:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80024b6:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80024ba:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80024be:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80024c2:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80024c6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80024ca:	0409      	lsls	r1, r1, #16
 80024cc:	0c09      	lsrs	r1, r1, #16
 80024ce:	e6ef      	b.n	80022b0 <USB_ActivateEndpoint+0x94>
 80024d0:	ffff8f8f 	.word	0xffff8f8f
 80024d4:	ffff8fbf 	.word	0xffff8fbf
 80024d8:	ffffbf8f 	.word	0xffffbf8f

080024dc <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80024dc:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80024de:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80024e0:	b18b      	cbz	r3, 8002506 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80024e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80024f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8002502:	2000      	movs	r0, #0
 8002504:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002506:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800250a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800250e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002512:	041b      	lsls	r3, r3, #16
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800251a:	e7ec      	b.n	80024f6 <USB_EPSetStall+0x1a>

0800251c <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800251c:	7b0b      	ldrb	r3, [r1, #12]
 800251e:	bb3b      	cbnz	r3, 8002570 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8002520:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002522:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8002524:	b333      	cbz	r3, 8002574 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002526:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800252a:	065b      	lsls	r3, r3, #25
 800252c:	d50d      	bpl.n	800254a <USB_EPClearStall+0x2e>
 800252e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002542:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002546:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800254a:	78cb      	ldrb	r3, [r1, #3]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d00f      	beq.n	8002570 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002550:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002554:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002558:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800255c:	041b      	lsls	r3, r3, #16
 800255e:	0c1b      	lsrs	r3, r3, #16
 8002560:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002564:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800256c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8002570:	2000      	movs	r0, #0
 8002572:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002574:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002578:	045b      	lsls	r3, r3, #17
 800257a:	d50d      	bpl.n	8002598 <USB_EPClearStall+0x7c>
 800257c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002580:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	0c1b      	lsrs	r3, r3, #16
 800258c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002594:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002598:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800259c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025a4:	041b      	lsls	r3, r3, #16
 80025a6:	0c1b      	lsrs	r3, r3, #16
 80025a8:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80025ac:	e7da      	b.n	8002564 <USB_EPClearStall+0x48>

080025ae <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80025ae:	b911      	cbnz	r1, 80025b6 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 80025b6:	2000      	movs	r0, #0
 80025b8:	4770      	bx	lr

080025ba <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 80025ba:	2000      	movs	r0, #0
 80025bc:	4770      	bx	lr

080025be <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 80025be:	2000      	movs	r0, #0
 80025c0:	4770      	bx	lr

080025c2 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80025c2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 80025c6:	b280      	uxth	r0, r0
 80025c8:	4770      	bx	lr

080025ca <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80025ca:	2000      	movs	r0, #0
 80025cc:	4770      	bx	lr

080025ce <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80025ce:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80025d2:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80025d4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 80025de:	4283      	cmp	r3, r0
 80025e0:	d100      	bne.n	80025e4 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 80025e2:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 80025e4:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 80025e8:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 80025ec:	e7f7      	b.n	80025de <USB_WritePMA+0x10>

080025ee <USB_EPStartXfer>:
{
 80025ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 80025f2:	784b      	ldrb	r3, [r1, #1]
{
 80025f4:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 80025f6:	2b01      	cmp	r3, #1
{
 80025f8:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 80025fa:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 80025fc:	f040 8118 	bne.w	8002830 <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 8002600:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8002604:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002606:	6949      	ldr	r1, [r1, #20]
    if (ep->xfer_len > ep->maxpacket)
 8002608:	454f      	cmp	r7, r9
 800260a:	bf28      	it	cs
 800260c:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 800260e:	bb0a      	cbnz	r2, 8002654 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002610:	b2bf      	uxth	r7, r7
 8002612:	88ea      	ldrh	r2, [r5, #6]
 8002614:	463b      	mov	r3, r7
 8002616:	f7ff ffda 	bl	80025ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800261a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800261e:	7829      	ldrb	r1, [r5, #0]
 8002620:	b280      	uxth	r0, r0
 8002622:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8002626:	0109      	lsls	r1, r1, #4
 8002628:	4402      	add	r2, r0
 800262a:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800262c:	782a      	ldrb	r2, [r5, #0]
 800262e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800263a:	041b      	lsls	r3, r3, #16
 800263c:	0c1b      	lsrs	r3, r3, #16
 800263e:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 8002642:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800264c:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8002650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 8002654:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002656:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 800265a:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 800265c:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800265e:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8002662:	f040 80d0 	bne.w	8002806 <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 8002666:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002668:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 800266c:	f080 80b4 	bcs.w	80027d8 <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002670:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002674:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002678:	0412      	lsls	r2, r2, #16
 800267a:	0c12      	lsrs	r2, r2, #16
 800267c:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8002680:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002684:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002688:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800268c:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8002690:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002692:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 8002696:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 8002698:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800269c:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800269e:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80026a2:	d04e      	beq.n	8002742 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80026a4:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80026a8:	4472      	add	r2, lr
 80026aa:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80026ae:	896a      	ldrh	r2, [r5, #10]
 80026b0:	f7ff ff8d 	bl	80025ce <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80026b4:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 80026b6:	bf36      	itet	cc
 80026b8:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 80026ba:	2300      	movcs	r3, #0
 80026bc:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80026be:	786a      	ldrb	r2, [r5, #1]
 80026c0:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 80026c2:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80026c6:	b2b3      	uxth	r3, r6
 80026c8:	bb7a      	cbnz	r2, 800272a <USB_EPStartXfer+0x13c>
 80026ca:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 80026ce:	7828      	ldrb	r0, [r5, #0]
 80026d0:	b292      	uxth	r2, r2
 80026d2:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 80026d6:	0100      	lsls	r0, r0, #4
 80026d8:	4411      	add	r1, r2
 80026da:	5a42      	ldrh	r2, [r0, r1]
 80026dc:	2e3e      	cmp	r6, #62	@ 0x3e
 80026de:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80026e2:	5242      	strh	r2, [r0, r1]
 80026e4:	d914      	bls.n	8002710 <USB_EPStartXfer+0x122>
 80026e6:	5a42      	ldrh	r2, [r0, r1]
 80026e8:	0977      	lsrs	r7, r6, #5
 80026ea:	06f6      	lsls	r6, r6, #27
 80026ec:	bf08      	it	eq
 80026ee:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80026f2:	b292      	uxth	r2, r2
 80026f4:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80026f8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80026fc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002700:	b292      	uxth	r2, r2
 8002702:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002704:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002706:	4651      	mov	r1, sl
 8002708:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800270a:	f7ff ff60 	bl	80025ce <USB_WritePMA>
 800270e:	e78d      	b.n	800262c <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002710:	b90e      	cbnz	r6, 8002716 <USB_EPStartXfer+0x128>
 8002712:	5a42      	ldrh	r2, [r0, r1]
 8002714:	e7f0      	b.n	80026f8 <USB_EPStartXfer+0x10a>
 8002716:	07f2      	lsls	r2, r6, #31
 8002718:	5a42      	ldrh	r2, [r0, r1]
 800271a:	ea4f 0756 	mov.w	r7, r6, lsr #1
 800271e:	bf48      	it	mi
 8002720:	3701      	addmi	r7, #1
 8002722:	b292      	uxth	r2, r2
 8002724:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8002728:	e7ea      	b.n	8002700 <USB_EPStartXfer+0x112>
 800272a:	2a01      	cmp	r2, #1
 800272c:	d1ea      	bne.n	8002704 <USB_EPStartXfer+0x116>
 800272e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8002732:	7829      	ldrb	r1, [r5, #0]
 8002734:	b280      	uxth	r0, r0
 8002736:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 800273a:	0109      	lsls	r1, r1, #4
 800273c:	4402      	add	r2, r0
 800273e:	528b      	strh	r3, [r1, r2]
 8002740:	e7e0      	b.n	8002704 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002742:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8002746:	4472      	add	r2, lr
 8002748:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800274c:	892a      	ldrh	r2, [r5, #8]
 800274e:	f7ff ff3e 	bl	80025ce <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8002752:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8002754:	bf36      	itet	cc
 8002756:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8002758:	4643      	movcs	r3, r8
 800275a:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800275c:	786a      	ldrb	r2, [r5, #1]
 800275e:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8002760:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002764:	b2b3      	uxth	r3, r6
 8002766:	bb5a      	cbnz	r2, 80027c0 <USB_EPStartXfer+0x1d2>
 8002768:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 800276c:	7828      	ldrb	r0, [r5, #0]
 800276e:	b292      	uxth	r2, r2
 8002770:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8002774:	0100      	lsls	r0, r0, #4
 8002776:	4411      	add	r1, r2
 8002778:	5a42      	ldrh	r2, [r0, r1]
 800277a:	2e3e      	cmp	r6, #62	@ 0x3e
 800277c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002780:	5242      	strh	r2, [r0, r1]
 8002782:	d910      	bls.n	80027a6 <USB_EPStartXfer+0x1b8>
 8002784:	5a42      	ldrh	r2, [r0, r1]
 8002786:	0977      	lsrs	r7, r6, #5
 8002788:	06f6      	lsls	r6, r6, #27
 800278a:	bf08      	it	eq
 800278c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002790:	b292      	uxth	r2, r2
 8002792:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8002796:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800279a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800279e:	b292      	uxth	r2, r2
 80027a0:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80027a2:	896a      	ldrh	r2, [r5, #10]
 80027a4:	e7af      	b.n	8002706 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027a6:	b90e      	cbnz	r6, 80027ac <USB_EPStartXfer+0x1be>
 80027a8:	5a42      	ldrh	r2, [r0, r1]
 80027aa:	e7f4      	b.n	8002796 <USB_EPStartXfer+0x1a8>
 80027ac:	07f2      	lsls	r2, r6, #31
 80027ae:	5a42      	ldrh	r2, [r0, r1]
 80027b0:	ea4f 0756 	mov.w	r7, r6, lsr #1
 80027b4:	bf48      	it	mi
 80027b6:	3701      	addmi	r7, #1
 80027b8:	b292      	uxth	r2, r2
 80027ba:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80027be:	e7ee      	b.n	800279e <USB_EPStartXfer+0x1b0>
 80027c0:	2a01      	cmp	r2, #1
 80027c2:	d1ee      	bne.n	80027a2 <USB_EPStartXfer+0x1b4>
 80027c4:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80027c8:	7829      	ldrb	r1, [r5, #0]
 80027ca:	b280      	uxth	r0, r0
 80027cc:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 80027d0:	0109      	lsls	r1, r1, #4
 80027d2:	4402      	add	r2, r0
 80027d4:	528b      	strh	r3, [r1, r2]
 80027d6:	e7e4      	b.n	80027a2 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80027d8:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 80027dc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80027e0:	0412      	lsls	r2, r2, #16
 80027e2:	0c12      	lsrs	r2, r2, #16
 80027e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027ec:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80027f0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80027f4:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	441a      	add	r2, r3
 80027fc:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80027fe:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002802:	892a      	ldrh	r2, [r5, #8]
 8002804:	e781      	b.n	800270a <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 8002806:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002808:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 800280c:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800280e:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002812:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002814:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002816:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002818:	d506      	bpl.n	8002828 <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800281a:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 800281e:	4432      	add	r2, r6
 8002820:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002824:	896a      	ldrh	r2, [r5, #10]
 8002826:	e770      	b.n	800270a <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002828:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800282c:	4432      	add	r2, r6
 800282e:	e7e6      	b.n	80027fe <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 8002830:	2a00      	cmp	r2, #0
 8002832:	d13b      	bne.n	80028ac <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 8002834:	698b      	ldr	r3, [r1, #24]
 8002836:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002838:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 800283c:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 800283e:	bf84      	itt	hi
 8002840:	1a5a      	subhi	r2, r3, r1
        len = ep->maxpacket;
 8002842:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002844:	7829      	ldrb	r1, [r5, #0]
 8002846:	61aa      	str	r2, [r5, #24]
 8002848:	b280      	uxth	r0, r0
 800284a:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 800284e:	0109      	lsls	r1, r1, #4
 8002850:	4402      	add	r2, r0
 8002852:	5a88      	ldrh	r0, [r1, r2]
 8002854:	2b3e      	cmp	r3, #62	@ 0x3e
 8002856:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800285a:	5288      	strh	r0, [r1, r2]
 800285c:	d91a      	bls.n	8002894 <USB_EPStartXfer+0x2a6>
 800285e:	0958      	lsrs	r0, r3, #5
 8002860:	06de      	lsls	r6, r3, #27
 8002862:	5a8b      	ldrh	r3, [r1, r2]
 8002864:	bf08      	it	eq
 8002866:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800286a:	b29b      	uxth	r3, r3
 800286c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8002870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002878:	b29b      	uxth	r3, r3
 800287a:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800287c:	782a      	ldrb	r2, [r5, #0]
 800287e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800288a:	041b      	lsls	r3, r3, #16
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8002892:	e6d6      	b.n	8002642 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002894:	b90b      	cbnz	r3, 800289a <USB_EPStartXfer+0x2ac>
 8002896:	5a8b      	ldrh	r3, [r1, r2]
 8002898:	e7ea      	b.n	8002870 <USB_EPStartXfer+0x282>
 800289a:	0858      	lsrs	r0, r3, #1
 800289c:	07db      	lsls	r3, r3, #31
 800289e:	5a8b      	ldrh	r3, [r1, r2]
 80028a0:	bf48      	it	mi
 80028a2:	3001      	addmi	r0, #1
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80028aa:	e7e5      	b.n	8002878 <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 80028ac:	78ca      	ldrb	r2, [r1, #3]
 80028ae:	2a02      	cmp	r2, #2
 80028b0:	d170      	bne.n	8002994 <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d138      	bne.n	8002928 <USB_EPStartXfer+0x33a>
 80028b6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80028ba:	780b      	ldrb	r3, [r1, #0]
 80028bc:	b292      	uxth	r2, r2
 80028be:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	4410      	add	r0, r2
 80028c6:	5ac2      	ldrh	r2, [r0, r3]
 80028c8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80028cc:	52c2      	strh	r2, [r0, r3]
 80028ce:	690a      	ldr	r2, [r1, #16]
 80028d0:	2a3e      	cmp	r2, #62	@ 0x3e
 80028d2:	d946      	bls.n	8002962 <USB_EPStartXfer+0x374>
 80028d4:	5ac1      	ldrh	r1, [r0, r3]
 80028d6:	0956      	lsrs	r6, r2, #5
 80028d8:	06d7      	lsls	r7, r2, #27
 80028da:	bf08      	it	eq
 80028dc:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80028e0:	b289      	uxth	r1, r1
 80028e2:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80028e6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80028ea:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80028ee:	b289      	uxth	r1, r1
 80028f0:	52c1      	strh	r1, [r0, r3]
 80028f2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80028f6:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80028fa:	b280      	uxth	r0, r0
 80028fc:	4401      	add	r1, r0
 80028fe:	5ac8      	ldrh	r0, [r1, r3]
 8002900:	2a3e      	cmp	r2, #62	@ 0x3e
 8002902:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002906:	52c8      	strh	r0, [r1, r3]
 8002908:	d938      	bls.n	800297c <USB_EPStartXfer+0x38e>
 800290a:	0950      	lsrs	r0, r2, #5
 800290c:	06d7      	lsls	r7, r2, #27
 800290e:	5aca      	ldrh	r2, [r1, r3]
 8002910:	bf08      	it	eq
 8002912:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002916:	b292      	uxth	r2, r2
 8002918:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800291c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002920:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002924:	b292      	uxth	r2, r2
 8002926:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8002928:	69eb      	ldr	r3, [r5, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0a6      	beq.n	800287c <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800292e:	f244 0340 	movw	r3, #16448	@ 0x4040
 8002932:	782a      	ldrb	r2, [r5, #0]
 8002934:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8002938:	ea03 0001 	and.w	r0, r3, r1
 800293c:	438b      	bics	r3, r1
 800293e:	d001      	beq.n	8002944 <USB_EPStartXfer+0x356>
 8002940:	2800      	cmp	r0, #0
 8002942:	d19b      	bne.n	800287c <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8002944:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002948:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800294c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	0c1b      	lsrs	r3, r3, #16
 8002954:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002958:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800295c:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8002960:	e78c      	b.n	800287c <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002962:	b90a      	cbnz	r2, 8002968 <USB_EPStartXfer+0x37a>
 8002964:	5ac1      	ldrh	r1, [r0, r3]
 8002966:	e7be      	b.n	80028e6 <USB_EPStartXfer+0x2f8>
 8002968:	07d1      	lsls	r1, r2, #31
 800296a:	5ac1      	ldrh	r1, [r0, r3]
 800296c:	ea4f 0652 	mov.w	r6, r2, lsr #1
 8002970:	bf48      	it	mi
 8002972:	3601      	addmi	r6, #1
 8002974:	b289      	uxth	r1, r1
 8002976:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800297a:	e7b8      	b.n	80028ee <USB_EPStartXfer+0x300>
 800297c:	b90a      	cbnz	r2, 8002982 <USB_EPStartXfer+0x394>
 800297e:	5aca      	ldrh	r2, [r1, r3]
 8002980:	e7cc      	b.n	800291c <USB_EPStartXfer+0x32e>
 8002982:	0850      	lsrs	r0, r2, #1
 8002984:	07d6      	lsls	r6, r2, #31
 8002986:	5aca      	ldrh	r2, [r1, r3]
 8002988:	bf48      	it	mi
 800298a:	3001      	addmi	r0, #1
 800298c:	b292      	uxth	r2, r2
 800298e:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002992:	e7c7      	b.n	8002924 <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 8002994:	2a01      	cmp	r2, #1
 8002996:	d15d      	bne.n	8002a54 <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 8002998:	698a      	ldr	r2, [r1, #24]
 800299a:	6909      	ldr	r1, [r1, #16]
 800299c:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 800299e:	bf94      	ite	ls
 80029a0:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 80029a2:	1a50      	subhi	r0, r2, r1
 80029a4:	61a8      	str	r0, [r5, #24]
          len = ep->maxpacket;
 80029a6:	bf88      	it	hi
 80029a8:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f47f af66 	bne.w	800287c <USB_EPStartXfer+0x28e>
 80029b0:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 80029b4:	782b      	ldrb	r3, [r5, #0]
 80029b6:	b289      	uxth	r1, r1
 80029b8:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	4408      	add	r0, r1
 80029c0:	5ac1      	ldrh	r1, [r0, r3]
 80029c2:	2a3e      	cmp	r2, #62	@ 0x3e
 80029c4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80029c8:	52c1      	strh	r1, [r0, r3]
 80029ca:	d92b      	bls.n	8002a24 <USB_EPStartXfer+0x436>
 80029cc:	06d1      	lsls	r1, r2, #27
 80029ce:	5ac1      	ldrh	r1, [r0, r3]
 80029d0:	ea4f 1652 	mov.w	r6, r2, lsr #5
 80029d4:	bf08      	it	eq
 80029d6:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80029da:	b289      	uxth	r1, r1
 80029dc:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80029e0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80029e4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80029e8:	b289      	uxth	r1, r1
 80029ea:	52c1      	strh	r1, [r0, r3]
 80029ec:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80029f0:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80029f4:	b280      	uxth	r0, r0
 80029f6:	4401      	add	r1, r0
 80029f8:	5ac8      	ldrh	r0, [r1, r3]
 80029fa:	2a3e      	cmp	r2, #62	@ 0x3e
 80029fc:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002a00:	52c8      	strh	r0, [r1, r3]
 8002a02:	d91b      	bls.n	8002a3c <USB_EPStartXfer+0x44e>
 8002a04:	0950      	lsrs	r0, r2, #5
 8002a06:	06d6      	lsls	r6, r2, #27
 8002a08:	5aca      	ldrh	r2, [r1, r3]
 8002a0a:	bf08      	it	eq
 8002a0c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002a10:	b292      	uxth	r2, r2
 8002a12:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002a16:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002a1a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a1e:	b292      	uxth	r2, r2
 8002a20:	52ca      	strh	r2, [r1, r3]
 8002a22:	e72b      	b.n	800287c <USB_EPStartXfer+0x28e>
 8002a24:	b90a      	cbnz	r2, 8002a2a <USB_EPStartXfer+0x43c>
 8002a26:	5ac1      	ldrh	r1, [r0, r3]
 8002a28:	e7da      	b.n	80029e0 <USB_EPStartXfer+0x3f2>
 8002a2a:	5ac1      	ldrh	r1, [r0, r3]
 8002a2c:	0856      	lsrs	r6, r2, #1
 8002a2e:	07d7      	lsls	r7, r2, #31
 8002a30:	bf48      	it	mi
 8002a32:	3601      	addmi	r6, #1
 8002a34:	b289      	uxth	r1, r1
 8002a36:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002a3a:	e7d5      	b.n	80029e8 <USB_EPStartXfer+0x3fa>
 8002a3c:	b90a      	cbnz	r2, 8002a42 <USB_EPStartXfer+0x454>
 8002a3e:	5aca      	ldrh	r2, [r1, r3]
 8002a40:	e7e9      	b.n	8002a16 <USB_EPStartXfer+0x428>
 8002a42:	0850      	lsrs	r0, r2, #1
 8002a44:	07d2      	lsls	r2, r2, #31
 8002a46:	5aca      	ldrh	r2, [r1, r3]
 8002a48:	bf48      	it	mi
 8002a4a:	3001      	addmi	r0, #1
 8002a4c:	b292      	uxth	r2, r2
 8002a4e:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002a52:	e7e4      	b.n	8002a1e <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 8002a54:	2001      	movs	r0, #1
 8002a56:	e5fb      	b.n	8002650 <USB_EPStartXfer+0x62>

08002a58 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002a58:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 8002a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002a5e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002a62:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8002a64:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002a66:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 8002a68:	462e      	mov	r6, r5
 8002a6a:	3402      	adds	r4, #2
 8002a6c:	b936      	cbnz	r6, 8002a7c <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8002a6e:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8002a70:	bf44      	itt	mi
 8002a72:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8002a76:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8002a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8002a7c:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 8002a80:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8002a82:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8002a84:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8002a88:	0a12      	lsrs	r2, r2, #8
 8002a8a:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8002a8e:	e7ec      	b.n	8002a6a <USB_ReadPMA+0x12>

08002a90 <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_CfgDesc);
 8002a90:	231b      	movs	r3, #27
 8002a92:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_CfgDesc;
}
 8002a94:	4800      	ldr	r0, [pc, #0]	@ (8002a98 <USBD_DFU_GetCfgDesc+0x8>)
 8002a96:	4770      	bx	lr
 8002a98:	20000020 	.word	0x20000020

08002a9c <USBD_DFU_DataIn>:
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{

  return USBD_OK;
}
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	4770      	bx	lr

08002aa0 <USBD_DFU_EP0_RxReady>:
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{

  return USBD_OK;
}
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	4770      	bx	lr

08002aa4 <USBD_DFU_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 8002aa4:	230a      	movs	r3, #10
 8002aa6:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_DeviceQualifierDesc;
}
 8002aa8:	4800      	ldr	r0, [pc, #0]	@ (8002aac <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 8002aaa:	4770      	bx	lr
 8002aac:	20000014 	.word	0x20000014

08002ab0 <USBD_DFU_EP0_TxReady>:
{
 8002ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002ab2:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
{
 8002ab6:	4605      	mov	r5, r0
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8002ab8:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d155      	bne.n	8002b6c <USBD_DFU_EP0_TxReady+0xbc>
    if (hdfu->wblock_num == 0U)
 8002ac0:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
 8002ac4:	2900      	cmp	r1, #0
 8002ac6:	d142      	bne.n	8002b4e <USBD_DFU_EP0_TxReady+0x9e>
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 8002ac8:	7823      	ldrb	r3, [r4, #0]
 8002aca:	b9a3      	cbnz	r3, 8002af6 <USBD_DFU_EP0_TxReady+0x46>
 8002acc:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d12d      	bne.n	8002b30 <USBD_DFU_EP0_TxReady+0x80>
    hdfu->wlength = 0U;
 8002ad4:	2300      	movs	r3, #0
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002ad6:	2203      	movs	r2, #3
    hdfu->wlength = 0U;
 8002ad8:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8002adc:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002ae0:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
    hdfu->dev_status[1] = 0U;
 8002ae4:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8002ae8:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
    hdfu->dev_status[4] = hdfu->dev_state;
 8002aec:	f884 2414 	strb.w	r2, [r4, #1044]	@ 0x414
    return USBD_OK;
 8002af0:	2000      	movs	r0, #0
}
 8002af2:	b003      	add	sp, #12
 8002af4:	bd30      	pop	{r4, r5, pc}
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 8002af6:	2b21      	cmp	r3, #33	@ 0x21
 8002af8:	d108      	bne.n	8002b0c <USBD_DFU_EP0_TxReady+0x5c>
 8002afa:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8002afe:	2b05      	cmp	r3, #5
 8002b00:	d116      	bne.n	8002b30 <USBD_DFU_EP0_TxReady+0x80>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002b02:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8002b06:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
 8002b0a:	e7e3      	b.n	8002ad4 <USBD_DFU_EP0_TxReady+0x24>
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 8002b0c:	2b41      	cmp	r3, #65	@ 0x41
 8002b0e:	d10f      	bne.n	8002b30 <USBD_DFU_EP0_TxReady+0x80>
 8002b10:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	d10b      	bne.n	8002b30 <USBD_DFU_EP0_TxReady+0x80>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002b18:	f8d4 0001 	ldr.w	r0, [r4, #1]
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8002b1c:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002b20:	f8c4 0408 	str.w	r0, [r4, #1032]	@ 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	4798      	blx	r3
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	d0d3      	beq.n	8002ad4 <USBD_DFU_EP0_TxReady+0x24>
          return USBD_FAIL;
 8002b2c:	2002      	movs	r0, #2
 8002b2e:	e7e0      	b.n	8002af2 <USBD_DFU_EP0_TxReady+0x42>
        hdfu->wlength = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8002b36:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
        req.bmRequest = 0U;
 8002b3a:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1U;
 8002b3e:	2301      	movs	r3, #1
        USBD_CtlError(pdev, &req);
 8002b40:	4669      	mov	r1, sp
 8002b42:	4628      	mov	r0, r5
        req.wLength = 1U;
 8002b44:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError(pdev, &req);
 8002b48:	f000 fd7d 	bl	8003646 <USBD_CtlError>
 8002b4c:	e7c2      	b.n	8002ad4 <USBD_DFU_EP0_TxReady+0x24>
      if (hdfu->wblock_num > 1U)
 8002b4e:	2901      	cmp	r1, #1
 8002b50:	d0c0      	beq.n	8002ad4 <USBD_DFU_EP0_TxReady+0x24>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002b52:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002b56:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002b5a:	3902      	subs	r1, #2
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002b5c:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	4620      	mov	r0, r4
 8002b64:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 8002b68:	4798      	blx	r3
 8002b6a:	e7dd      	b.n	8002b28 <USBD_DFU_EP0_TxReady+0x78>
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8002b6c:	2b07      	cmp	r3, #7
 8002b6e:	d1bf      	bne.n	8002af0 <USBD_DFU_EP0_TxReady+0x40>
{
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8002b70:	2200      	movs	r2, #0

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8002b72:	4b16      	ldr	r3, [pc, #88]	@ (8002bcc <USBD_DFU_EP0_TxReady+0x11c>)
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8002b74:	f884 2419 	strb.w	r2, [r4, #1049]	@ 0x419
  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8002b78:	7d1b      	ldrb	r3, [r3, #20]
 8002b7a:	f013 0304 	ands.w	r3, r3, #4
 8002b7e:	d009      	beq.n	8002b94 <USBD_DFU_EP0_TxReady+0xe4>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002b80:	2306      	movs	r3, #6

    hdfu->dev_status[1] = 0U;
 8002b82:	f884 2411 	strb.w	r2, [r4, #1041]	@ 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002b86:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
    hdfu->dev_status[2] = 0U;
 8002b8a:	f8a4 2412 	strh.w	r2, [r4, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
 8002b8e:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
    return;
 8002b92:	e7ad      	b.n	8002af0 <USBD_DFU_EP0_TxReady+0x40>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002b94:	2208      	movs	r2, #8

    hdfu->dev_status[1] = 0U;
 8002b96:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002b9a:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
    hdfu->dev_status[2] = 0U;
 8002b9e:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
 8002ba2:	f884 2414 	strb.w	r2, [r4, #1044]	@ 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 8002ba6:	f000 fa0b 	bl	8002fc0 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8002baa:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002bb2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002bb6:	4906      	ldr	r1, [pc, #24]	@ (8002bd0 <USBD_DFU_EP0_TxReady+0x120>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002bb8:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <USBD_DFU_EP0_TxReady+0x124>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002bba:	68ca      	ldr	r2, [r1, #12]
 8002bbc:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60cb      	str	r3, [r1, #12]
 8002bc4:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002bc8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002bca:	e7fd      	b.n	8002bc8 <USBD_DFU_EP0_TxReady+0x118>
 8002bcc:	20000020 	.word	0x20000020
 8002bd0:	e000ed00 	.word	0xe000ed00
 8002bd4:	05fa0004 	.word	0x05fa0004

08002bd8 <USBD_DFU_DeInit>:
{
 8002bd8:	b538      	push	{r3, r4, r5, lr}
  hdfu->dev_state = DFU_STATE_IDLE;
 8002bda:	2202      	movs	r2, #2
  hdfu->wblock_num = 0U;
 8002bdc:	2500      	movs	r5, #0
{
 8002bde:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002be0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  hdfu->dev_state = DFU_STATE_IDLE;
 8002be4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002be8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002bec:	f883 5410 	strb.w	r5, [r3, #1040]	@ 0x410
  hdfu->wblock_num = 0U;
 8002bf0:	f8c3 5400 	str.w	r5, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8002bf4:	f8c3 5404 	str.w	r5, [r3, #1028]	@ 0x404
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8002bf8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002c00:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8002c04:	f000 ff40 	bl	8003a88 <USBD_static_free>
}
 8002c08:	4628      	mov	r0, r5
    pdev->pClassData = NULL;
 8002c0a:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8002c0e:	bd38      	pop	{r3, r4, r5, pc}

08002c10 <USBD_DFU_Init>:
{
 8002c10:	b510      	push	{r4, lr}
 8002c12:	4604      	mov	r4, r0
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8002c14:	f240 401c 	movw	r0, #1052	@ 0x41c
 8002c18:	f000 ff32 	bl	8003a80 <USBD_static_malloc>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8002c22:	2002      	movs	r0, #2
 8002c24:	b1c3      	cbz	r3, 8002c58 <USBD_DFU_Init+0x48>
    hdfu->wblock_num = 0U;
 8002c26:	2200      	movs	r2, #0
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8002c28:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
    hdfu->dev_state = DFU_STATE_IDLE;
 8002c2c:	f8a3 0418 	strh.w	r0, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002c30:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002c34:	f8a3 0414 	strh.w	r0, [r3, #1044]	@ 0x414
    hdfu->wblock_num = 0U;
 8002c38:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8002c3c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8002c40:	f8c3 1408 	str.w	r1, [r3, #1032]	@ 0x408
    hdfu->alt_setting = 0U;
 8002c44:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8002c48:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4798      	blx	r3
 8002c50:	3800      	subs	r0, #0
 8002c52:	bf18      	it	ne
 8002c54:	2001      	movne	r0, #1
 8002c56:	0040      	lsls	r0, r0, #1
}
 8002c58:	bd10      	pop	{r4, pc}

08002c5a <USBD_DFU_IsoOutIncomplete>:
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	4770      	bx	lr
	...

08002c60 <USBD_DFU_GetUsrStringDesc>:
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8002c60:	2906      	cmp	r1, #6
{
 8002c62:	b508      	push	{r3, lr}
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8002c64:	d807      	bhi.n	8002c76 <USBD_DFU_GetUsrStringDesc+0x16>
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8002c66:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 8002c6a:	4904      	ldr	r1, [pc, #16]	@ (8002c7c <USBD_DFU_GetUsrStringDesc+0x1c>)
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	f000 fcf5 	bl	800365c <USBD_GetString>
 8002c72:	4802      	ldr	r0, [pc, #8]	@ (8002c7c <USBD_DFU_GetUsrStringDesc+0x1c>)
}
 8002c74:	bd08      	pop	{r3, pc}
    return NULL;
 8002c76:	2000      	movs	r0, #0
 8002c78:	e7fc      	b.n	8002c74 <USBD_DFU_GetUsrStringDesc+0x14>
 8002c7a:	bf00      	nop
 8002c7c:	20000340 	.word	0x20000340

08002c80 <USBD_DFU_Setup>:
  uint16_t status_info = 0U;
 8002c80:	2300      	movs	r3, #0
{
 8002c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint16_t status_info = 0U;
 8002c84:	f8ad 3006 	strh.w	r3, [sp, #6]
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002c88:	780b      	ldrb	r3, [r1, #0]
{
 8002c8a:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c8c:	f013 0360 	ands.w	r3, r3, #96	@ 0x60
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002c90:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c94:	f000 812c 	beq.w	8002ef0 <USBD_DFU_Setup+0x270>
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	f040 813c 	bne.w	8002f16 <USBD_DFU_Setup+0x296>
      switch (req->bRequest)
 8002c9e:	784b      	ldrb	r3, [r1, #1]
 8002ca0:	2b06      	cmp	r3, #6
 8002ca2:	f200 8138 	bhi.w	8002f16 <USBD_DFU_Setup+0x296>
 8002ca6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002caa:	00ff      	.short	0x00ff
 8002cac:	00300007 	.word	0x00300007
 8002cb0:	00d1008b 	.word	0x00d1008b
 8002cb4:	00e700e3 	.word	0x00e700e3
  if (req->wLength > 0U)
 8002cb8:	88ca      	ldrh	r2, [r1, #6]
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002cba:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
  if (req->wLength > 0U)
 8002cbe:	b19a      	cbz	r2, 8002ce8 <USBD_DFU_Setup+0x68>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d001      	beq.n	8002cc8 <USBD_DFU_Setup+0x48>
 8002cc4:	2b05      	cmp	r3, #5
 8002cc6:	d169      	bne.n	8002d9c <USBD_DFU_Setup+0x11c>
      hdfu->wblock_num = req->wValue;
 8002cc8:	884b      	ldrh	r3, [r1, #2]
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002cca:	4628      	mov	r0, r5
      hdfu->wblock_num = req->wValue;
 8002ccc:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002cd0:	2303      	movs	r3, #3
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002cd2:	4621      	mov	r1, r4
      hdfu->wlength = req->wLength;
 8002cd4:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002cd8:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8002cdc:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002ce0:	f000 fced 	bl	80036be <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	e11a      	b.n	8002f1e <USBD_DFU_Setup+0x29e>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d001      	beq.n	8002cf0 <USBD_DFU_Setup+0x70>
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d155      	bne.n	8002d9c <USBD_DFU_Setup+0x11c>
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002cf0:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002cf4:	f8a4 3418 	strh.w	r3, [r4, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 8002cfe:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
      hdfu->dev_status[4] = hdfu->dev_state;
 8002d02:	2306      	movs	r3, #6
    hdfu->dev_status[4] = hdfu->dev_state;
 8002d04:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
 8002d08:	e7ec      	b.n	8002ce4 <USBD_DFU_Setup+0x64>
  if (req->wLength > 0U)
 8002d0a:	88ca      	ldrh	r2, [r1, #6]
 8002d0c:	2a00      	cmp	r2, #0
 8002d0e:	d04f      	beq.n	8002db0 <USBD_DFU_Setup+0x130>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8002d10:	f894 0418 	ldrb.w	r0, [r4, #1048]	@ 0x418
 8002d14:	2802      	cmp	r0, #2
 8002d16:	d001      	beq.n	8002d1c <USBD_DFU_Setup+0x9c>
 8002d18:	2809      	cmp	r0, #9
 8002d1a:	d143      	bne.n	8002da4 <USBD_DFU_Setup+0x124>
      hdfu->wblock_num = req->wValue;
 8002d1c:	8848      	ldrh	r0, [r1, #2]
      hdfu->wlength = req->wLength;
 8002d1e:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
      hdfu->wblock_num = req->wValue;
 8002d22:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
      if (hdfu->wblock_num == 0U)
 8002d26:	b9a8      	cbnz	r0, 8002d54 <USBD_DFU_Setup+0xd4>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8002d28:	2a03      	cmp	r2, #3
 8002d2a:	bf98      	it	ls
 8002d2c:	2309      	movls	r3, #9
 8002d2e:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
        hdfu->dev_status[4] = hdfu->dev_state;
 8002d32:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8002d36:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8002d3a:	8023      	strh	r3, [r4, #0]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8002d3c:	2341      	movs	r3, #65	@ 0x41
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8002d3e:	2203      	movs	r2, #3
 8002d40:	4621      	mov	r1, r4
        hdfu->dev_status[1] = 0U;
 8002d42:	f884 0411 	strb.w	r0, [r4, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8002d46:	f8a4 0412 	strh.w	r0, [r4, #1042]	@ 0x412
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8002d4a:	70a3      	strb	r3, [r4, #2]
          USBD_CtlSendData(pdev, pbuf, len);
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	f000 fca1 	bl	8003694 <USBD_CtlSendData>
          break;
 8002d52:	e7c7      	b.n	8002ce4 <USBD_DFU_Setup+0x64>
      else if (hdfu->wblock_num > 1U)
 8002d54:	2801      	cmp	r0, #1
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	d016      	beq.n	8002d8a <USBD_DFU_Setup+0x10a>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8002d5c:	2109      	movs	r1, #9
        hdfu->dev_status[1] = 0U;
 8002d5e:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8002d62:	f884 1418 	strb.w	r1, [r4, #1048]	@ 0x418
        hdfu->dev_status[4] = hdfu->dev_state;
 8002d66:	f884 1414 	strb.w	r1, [r4, #1044]	@ 0x414
        hdfu->dev_status[2] = 0U;
 8002d6a:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8002d6e:	f8d4 6408 	ldr.w	r6, [r4, #1032]	@ 0x408
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002d72:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8002d76:	3802      	subs	r0, #2
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002d78:	4621      	mov	r1, r4
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	eb06 2080 	add.w	r0, r6, r0, lsl #10
 8002d80:	4798      	blx	r3
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8002d82:	f8b4 2404 	ldrh.w	r2, [r4, #1028]	@ 0x404
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002d86:	4601      	mov	r1, r0
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8002d88:	e7e0      	b.n	8002d4c <USBD_DFU_Setup+0xcc>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002d8a:	220f      	movs	r2, #15
        hdfu->dev_status[1] = 0U;
 8002d8c:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002d90:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
        hdfu->dev_status[2] = 0U;
 8002d94:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8002d98:	f884 2414 	strb.w	r2, [r4, #1044]	@ 0x414
      USBD_CtlError(pdev, req);
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	f000 fc52 	bl	8003646 <USBD_CtlError>
 8002da2:	e79f      	b.n	8002ce4 <USBD_DFU_Setup+0x64>
      hdfu->wlength = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8002daa:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
 8002dae:	e7f5      	b.n	8002d9c <USBD_DFU_Setup+0x11c>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002db0:	2302      	movs	r3, #2
    hdfu->dev_status[1] = 0U;
 8002db2:	f884 2411 	strb.w	r2, [r4, #1041]	@ 0x411
    hdfu->dev_state = DFU_STATE_IDLE;
 8002db6:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
    hdfu->dev_status[2] = 0U;
 8002dba:	f8a4 2412 	strh.w	r2, [r4, #1042]	@ 0x412
 8002dbe:	e7a1      	b.n	8002d04 <USBD_DFU_Setup+0x84>
  switch (hdfu->dev_state)
 8002dc0:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 8002dc4:	f504 6682 	add.w	r6, r4, #1040	@ 0x410
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d004      	beq.n	8002dd6 <USBD_DFU_Setup+0x156>
 8002dcc:	2b06      	cmp	r3, #6
 8002dce:	d026      	beq.n	8002e1e <USBD_DFU_Setup+0x19e>
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8002dd0:	2206      	movs	r2, #6
 8002dd2:	4631      	mov	r1, r6
 8002dd4:	e7ba      	b.n	8002d4c <USBD_DFU_Setup+0xcc>
      if (hdfu->wlength != 0U)
 8002dd6:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8002dda:	b1d3      	cbz	r3, 8002e12 <USBD_DFU_Setup+0x192>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002ddc:	2304      	movs	r3, #4
        hdfu->dev_status[1] = 0U;
 8002dde:	2200      	movs	r2, #0
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002de0:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8002de4:	f884 2411 	strb.w	r2, [r4, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8002de8:	f8a4 2412 	strh.w	r2, [r4, #1042]	@ 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8002dec:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002df0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8002df4:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8002dfe:	b929      	cbnz	r1, 8002e0c <USBD_DFU_Setup+0x18c>
 8002e00:	7822      	ldrb	r2, [r4, #0]
 8002e02:	2a41      	cmp	r2, #65	@ 0x41
 8002e04:	d102      	bne.n	8002e0c <USBD_DFU_Setup+0x18c>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002e06:	4632      	mov	r2, r6
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8002e08:	4798      	blx	r3
 8002e0a:	e7e1      	b.n	8002dd0 <USBD_DFU_Setup+0x150>
 8002e0c:	4632      	mov	r2, r6
 8002e0e:	2101      	movs	r1, #1
 8002e10:	e7fa      	b.n	8002e08 <USBD_DFU_Setup+0x188>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8002e12:	2205      	movs	r2, #5
          hdfu->dev_state = DFU_STATE_IDLE;
 8002e14:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 8002e18:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
 8002e1c:	e009      	b.n	8002e32 <USBD_DFU_Setup+0x1b2>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8002e1e:	f894 3419 	ldrb.w	r3, [r4, #1049]	@ 0x419
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d10a      	bne.n	8002e3c <USBD_DFU_Setup+0x1bc>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8002e26:	2207      	movs	r2, #7
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8002e28:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8002e2c:	2300      	movs	r3, #0
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8002e2e:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
          hdfu->dev_status[2] = 0U;
 8002e32:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
          hdfu->dev_status[4] = hdfu->dev_state;
 8002e36:	f884 2414 	strb.w	r2, [r4, #1044]	@ 0x414
 8002e3a:	e7c9      	b.n	8002dd0 <USBD_DFU_Setup+0x150>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1c7      	bne.n	8002dd0 <USBD_DFU_Setup+0x150>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 8002e40:	4a47      	ldr	r2, [pc, #284]	@ (8002f60 <USBD_DFU_Setup+0x2e0>)
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8002e42:	7d12      	ldrb	r2, [r2, #20]
 8002e44:	0750      	lsls	r0, r2, #29
 8002e46:	d5c3      	bpl.n	8002dd0 <USBD_DFU_Setup+0x150>
          hdfu->dev_state = DFU_STATE_IDLE;
 8002e48:	2202      	movs	r2, #2
 8002e4a:	e7e3      	b.n	8002e14 <USBD_DFU_Setup+0x194>
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8002e4c:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 8002e50:	2b0a      	cmp	r3, #10
    hdfu->dev_state = DFU_STATE_IDLE;
 8002e52:	bf0b      	itete	eq
 8002e54:	2302      	moveq	r3, #2
    hdfu->dev_state = DFU_STATE_ERROR;
 8002e56:	230a      	movne	r3, #10
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8002e58:	2200      	moveq	r2, #0
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8002e5a:	220e      	movne	r2, #14
    hdfu->dev_state = DFU_STATE_IDLE;
 8002e5c:	bf0c      	ite	eq
 8002e5e:	f884 3418 	strbeq.w	r3, [r4, #1048]	@ 0x418
    hdfu->dev_state = DFU_STATE_ERROR;
 8002e62:	f884 3418 	strbne.w	r3, [r4, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8002e66:	f8c4 2410 	str.w	r2, [r4, #1040]	@ 0x410
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8002e6a:	f8a4 3414 	strh.w	r3, [r4, #1044]	@ 0x414
 8002e6e:	e739      	b.n	8002ce4 <USBD_DFU_Setup+0x64>
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8002e70:	2201      	movs	r2, #1
 8002e72:	f504 6183 	add.w	r1, r4, #1048	@ 0x418
 8002e76:	e769      	b.n	8002d4c <USBD_DFU_Setup+0xcc>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8002e78:	f894 2418 	ldrb.w	r2, [r4, #1048]	@ 0x418
 8002e7c:	2a09      	cmp	r2, #9
 8002e7e:	f63f af31 	bhi.w	8002ce4 <USBD_DFU_Setup+0x64>
 8002e82:	f44f 731b 	mov.w	r3, #620	@ 0x26c
 8002e86:	40d3      	lsrs	r3, r2
 8002e88:	07d9      	lsls	r1, r3, #31
 8002e8a:	f57f af2b 	bpl.w	8002ce4 <USBD_DFU_Setup+0x64>
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002e8e:	2300      	movs	r3, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 8002e90:	2202      	movs	r2, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002e92:	f8c4 3410 	str.w	r3, [r4, #1040]	@ 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002e96:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
    hdfu->dev_status[4] = hdfu->dev_state;
 8002e9a:	f8a4 2414 	strh.w	r2, [r4, #1044]	@ 0x414
    hdfu->wblock_num = 0U;
 8002e9e:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8002ea2:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
 8002ea6:	e71d      	b.n	8002ce4 <USBD_DFU_Setup+0x64>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8002ea8:	f894 2418 	ldrb.w	r2, [r4, #1048]	@ 0x418
 8002eac:	2a09      	cmp	r2, #9
 8002eae:	d810      	bhi.n	8002ed2 <USBD_DFU_Setup+0x252>
 8002eb0:	f44f 731b 	mov.w	r3, #620	@ 0x26c
 8002eb4:	40d3      	lsrs	r3, r2
 8002eb6:	07da      	lsls	r2, r3, #31
 8002eb8:	d50b      	bpl.n	8002ed2 <USBD_DFU_Setup+0x252>
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002eba:	2300      	movs	r3, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 8002ebc:	2202      	movs	r2, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002ebe:	f8c4 3410 	str.w	r3, [r4, #1040]	@ 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002ec2:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
    hdfu->dev_status[4] = hdfu->dev_state;
 8002ec6:	f8a4 2414 	strh.w	r2, [r4, #1044]	@ 0x414
    hdfu->wblock_num = 0U;
 8002eca:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8002ece:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8002ed2:	4b23      	ldr	r3, [pc, #140]	@ (8002f60 <USBD_DFU_Setup+0x2e0>)
 8002ed4:	7d5b      	ldrb	r3, [r3, #21]
 8002ed6:	06db      	lsls	r3, r3, #27
 8002ed8:	d506      	bpl.n	8002ee8 <USBD_DFU_Setup+0x268>
    USBD_Stop(pdev);
 8002eda:	4628      	mov	r0, r5
 8002edc:	f000 f870 	bl	8002fc0 <USBD_Stop>
    USBD_Start(pdev);
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	f000 f868 	bl	8002fb6 <USBD_Start>
 8002ee6:	e6fd      	b.n	8002ce4 <USBD_DFU_Setup+0x64>
    USBD_Delay((uint32_t)req->wValue);
 8002ee8:	8848      	ldrh	r0, [r1, #2]
 8002eea:	f7fd fc07 	bl	80006fc <HAL_Delay>
 8002eee:	e6f9      	b.n	8002ce4 <USBD_DFU_Setup+0x64>
      switch (req->bRequest)
 8002ef0:	784b      	ldrb	r3, [r1, #1]
 8002ef2:	2b0b      	cmp	r3, #11
 8002ef4:	d80f      	bhi.n	8002f16 <USBD_DFU_Setup+0x296>
 8002ef6:	e8df f003 	tbb	[pc, r3]
 8002efa:	0e06      	.short	0x0e06
 8002efc:	0e0e0e0e 	.word	0x0e0e0e0e
 8002f00:	0e0e0e14 	.word	0x0e0e0e14
 8002f04:	2921      	.short	0x2921
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f06:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d103      	bne.n	8002f16 <USBD_DFU_Setup+0x296>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f10d 0106 	add.w	r1, sp, #6
 8002f14:	e71a      	b.n	8002d4c <USBD_DFU_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8002f16:	4628      	mov	r0, r5
 8002f18:	f000 fb95 	bl	8003646 <USBD_CtlError>
      ret = USBD_FAIL;
 8002f1c:	2002      	movs	r0, #2
}
 8002f1e:	b002      	add	sp, #8
 8002f20:	bd70      	pop	{r4, r5, r6, pc}
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8002f22:	884b      	ldrh	r3, [r1, #2]
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	2b21      	cmp	r3, #33	@ 0x21
 8002f28:	d105      	bne.n	8002f36 <USBD_DFU_Setup+0x2b6>
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8002f2a:	88ca      	ldrh	r2, [r1, #6]
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8002f2c:	490d      	ldr	r1, [pc, #52]	@ (8002f64 <USBD_DFU_Setup+0x2e4>)
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8002f2e:	2a09      	cmp	r2, #9
 8002f30:	bf28      	it	cs
 8002f32:	2209      	movcs	r2, #9
 8002f34:	e70a      	b.n	8002d4c <USBD_DFU_Setup+0xcc>
  uint16_t len = 0U;
 8002f36:	2200      	movs	r2, #0
  uint8_t *pbuf = 0U;
 8002f38:	4611      	mov	r1, r2
 8002f3a:	e707      	b.n	8002d4c <USBD_DFU_Setup+0xcc>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f3c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d1e8      	bne.n	8002f16 <USBD_DFU_Setup+0x296>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8002f44:	2201      	movs	r2, #1
 8002f46:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8002f4a:	e6ff      	b.n	8002d4c <USBD_DFU_Setup+0xcc>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8002f4c:	788b      	ldrb	r3, [r1, #2]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1e1      	bne.n	8002f16 <USBD_DFU_Setup+0x296>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f52:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002f56:	2a03      	cmp	r2, #3
 8002f58:	d1dd      	bne.n	8002f16 <USBD_DFU_Setup+0x296>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8002f5a:	f8c4 340c 	str.w	r3, [r4, #1036]	@ 0x40c
 8002f5e:	e6c1      	b.n	8002ce4 <USBD_DFU_Setup+0x64>
 8002f60:	20000020 	.word	0x20000020
 8002f64:	20000032 	.word	0x20000032

08002f68 <USBD_DFU_DataOut>:
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
 8002f68:	2000      	movs	r0, #0
 8002f6a:	4770      	bx	lr

08002f6c <USBD_DFU_IsoINIncomplete>:
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	4770      	bx	lr

08002f70 <USBD_DFU_SOF>:
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
 8002f70:	2000      	movs	r0, #0
 8002f72:	4770      	bx	lr

08002f74 <USBD_DFU_RegisterMedia>:
  if (fops != NULL)
 8002f74:	b109      	cbz	r1, 8002f7a <USBD_DFU_RegisterMedia+0x6>
    pdev->pUserData = fops;
 8002f76:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
}
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	4770      	bx	lr

08002f7e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002f7e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002f80:	b180      	cbz	r0, 8002fa4 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8002f82:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002f86:	b113      	cbz	r3, 8002f8e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002f8e:	b109      	cbz	r1, 8002f94 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002f90:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f94:	2301      	movs	r3, #1
  pdev->id = id;
 8002f96:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f98:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002f9c:	f000 fcea 	bl	8003974 <USBD_LL_Init>

  return USBD_OK;
 8002fa0:	2000      	movs	r0, #0
}
 8002fa2:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002fa4:	2002      	movs	r0, #2
 8002fa6:	e7fc      	b.n	8002fa2 <USBD_Init+0x24>

08002fa8 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8002fa8:	b119      	cbz	r1, 8002fb2 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002faa:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8002fae:	2000      	movs	r0, #0
 8002fb0:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002fb2:	2002      	movs	r0, #2
  }

  return status;
}
 8002fb4:	4770      	bx	lr

08002fb6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8002fb6:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002fb8:	f000 fd06 	bl	80039c8 <USBD_LL_Start>

  return USBD_OK;
}
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	bd08      	pop	{r3, pc}

08002fc0 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8002fc0:	b510      	push	{r4, lr}
 8002fc2:	4604      	mov	r4, r0
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002fc4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002fc8:	7901      	ldrb	r1, [r0, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f000 fd03 	bl	80039da <USBD_LL_Stop>

  return USBD_OK;
}
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	bd10      	pop	{r4, pc}

08002fd8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002fd8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002fda:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002fde:	b133      	cbz	r3, 8002fee <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4798      	blx	r3
 8002fe4:	3800      	subs	r0, #0
 8002fe6:	bf18      	it	ne
 8002fe8:	2001      	movne	r0, #1
 8002fea:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002fec:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002fee:	2002      	movs	r0, #2
 8002ff0:	e7fc      	b.n	8002fec <USBD_SetClassConfig+0x14>

08002ff2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002ff2:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002ff4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4798      	blx	r3

  return USBD_OK;
}
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	bd08      	pop	{r3, pc}

08003000 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003000:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003002:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 8003006:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003008:	4628      	mov	r0, r5
 800300a:	f000 fb11 	bl	8003630 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800300e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8003010:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8003014:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003018:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 800301c:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8003020:	f001 031f 	and.w	r3, r1, #31
 8003024:	2b01      	cmp	r3, #1
 8003026:	d008      	beq.n	800303a <USBD_LL_SetupStage+0x3a>
 8003028:	2b02      	cmp	r3, #2
 800302a:	d00b      	beq.n	8003044 <USBD_LL_SetupStage+0x44>
 800302c:	b97b      	cbnz	r3, 800304e <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800302e:	4629      	mov	r1, r5
 8003030:	4620      	mov	r0, r4
 8003032:	f000 f8fb 	bl	800322c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8003036:	2000      	movs	r0, #0
 8003038:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800303a:	4629      	mov	r1, r5
 800303c:	4620      	mov	r0, r4
 800303e:	f000 fa47 	bl	80034d0 <USBD_StdItfReq>
      break;
 8003042:	e7f8      	b.n	8003036 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8003044:	4629      	mov	r1, r5
 8003046:	4620      	mov	r0, r4
 8003048:	f000 fa66 	bl	8003518 <USBD_StdEPReq>
      break;
 800304c:	e7f3      	b.n	8003036 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800304e:	4620      	mov	r0, r4
 8003050:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8003054:	f000 fcd6 	bl	8003a04 <USBD_LL_StallEP>
      break;
 8003058:	e7ed      	b.n	8003036 <USBD_LL_SetupStage+0x36>

0800305a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800305a:	b570      	push	{r4, r5, r6, lr}
 800305c:	4604      	mov	r4, r0
 800305e:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003060:	bb39      	cbnz	r1, 80030b2 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003062:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8003066:	2a03      	cmp	r2, #3
 8003068:	d11c      	bne.n	80030a4 <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 800306a:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 800306e:	4295      	cmp	r5, r2
 8003070:	d90b      	bls.n	800308a <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 8003072:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 8003074:	42aa      	cmp	r2, r5
 8003076:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 8003078:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800307c:	bf8c      	ite	hi
 800307e:	b2aa      	uxthhi	r2, r5
 8003080:	b292      	uxthls	r2, r2
 8003082:	f000 fb29 	bl	80036d8 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003086:	2000      	movs	r0, #0
}
 8003088:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800308a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	b123      	cbz	r3, 800309c <USBD_LL_DataOutStage+0x42>
 8003092:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003096:	2a03      	cmp	r2, #3
 8003098:	d100      	bne.n	800309c <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 800309a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800309c:	4620      	mov	r0, r4
 800309e:	f000 fb23 	bl	80036e8 <USBD_CtlSendStatus>
 80030a2:	e7f0      	b.n	8003086 <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80030a4:	2a05      	cmp	r2, #5
 80030a6:	d1ee      	bne.n	8003086 <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 80030a8:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80030ac:	f000 fcaa 	bl	8003a04 <USBD_LL_StallEP>
 80030b0:	e7e9      	b.n	8003086 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 80030b2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	b12b      	cbz	r3, 80030c6 <USBD_LL_DataOutStage+0x6c>
 80030ba:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80030be:	2a03      	cmp	r2, #3
 80030c0:	d101      	bne.n	80030c6 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 80030c2:	4798      	blx	r3
 80030c4:	e7df      	b.n	8003086 <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 80030c6:	2002      	movs	r0, #2
 80030c8:	e7de      	b.n	8003088 <USBD_LL_DataOutStage+0x2e>

080030ca <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80030ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030cc:	4604      	mov	r4, r0
 80030ce:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80030d0:	460f      	mov	r7, r1
 80030d2:	2900      	cmp	r1, #0
 80030d4:	d149      	bne.n	800316a <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80030d6:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80030da:	2a02      	cmp	r2, #2
 80030dc:	d13a      	bne.n	8003154 <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 80030de:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 80030e2:	42b5      	cmp	r5, r6
 80030e4:	d911      	bls.n	800310a <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 80030e6:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80030e8:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 80030ea:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80030ec:	b2aa      	uxth	r2, r5
 80030ee:	f000 fade 	bl	80036ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80030f2:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80030f4:	461a      	mov	r2, r3
 80030f6:	4619      	mov	r1, r3
 80030f8:	4620      	mov	r0, r4
 80030fa:	f000 fcb8 	bl	8003a6e <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80030fe:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8003102:	2b01      	cmp	r3, #1
 8003104:	d02d      	beq.n	8003162 <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003106:	2000      	movs	r0, #0
}
 8003108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800310a:	69c3      	ldr	r3, [r0, #28]
 800310c:	fbb3 f5f6 	udiv	r5, r3, r6
 8003110:	fb06 3515 	mls	r5, r6, r5, r3
 8003114:	b965      	cbnz	r5, 8003130 <USBD_LL_DataInStage+0x66>
 8003116:	429e      	cmp	r6, r3
 8003118:	d80a      	bhi.n	8003130 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 800311a:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 800311e:	4293      	cmp	r3, r2
 8003120:	d206      	bcs.n	8003130 <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003122:	462a      	mov	r2, r5
 8003124:	f000 fac3 	bl	80036ae <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003128:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 800312a:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800312e:	e7e1      	b.n	80030f4 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003130:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	b12b      	cbz	r3, 8003144 <USBD_LL_DataInStage+0x7a>
 8003138:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 800313c:	2a03      	cmp	r2, #3
 800313e:	d101      	bne.n	8003144 <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 8003140:	4620      	mov	r0, r4
 8003142:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003144:	2180      	movs	r1, #128	@ 0x80
 8003146:	4620      	mov	r0, r4
 8003148:	f000 fc5c 	bl	8003a04 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800314c:	4620      	mov	r0, r4
 800314e:	f000 fad6 	bl	80036fe <USBD_CtlReceiveStatus>
 8003152:	e7d4      	b.n	80030fe <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003154:	f032 0304 	bics.w	r3, r2, #4
 8003158:	d1d1      	bne.n	80030fe <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800315a:	2180      	movs	r1, #128	@ 0x80
 800315c:	f000 fc52 	bl	8003a04 <USBD_LL_StallEP>
 8003160:	e7cd      	b.n	80030fe <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 8003168:	e7cd      	b.n	8003106 <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 800316a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	b12b      	cbz	r3, 800317e <USBD_LL_DataInStage+0xb4>
 8003172:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003176:	2a03      	cmp	r2, #3
 8003178:	d101      	bne.n	800317e <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 800317a:	4798      	blx	r3
 800317c:	e7c3      	b.n	8003106 <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 800317e:	2002      	movs	r0, #2
 8003180:	e7c2      	b.n	8003108 <USBD_LL_DataInStage+0x3e>

08003182 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003182:	2200      	movs	r2, #0
{
 8003184:	b570      	push	{r4, r5, r6, lr}
 8003186:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003188:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800318a:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800318c:	4611      	mov	r1, r2
 800318e:	2340      	movs	r3, #64	@ 0x40
 8003190:	f000 fc2c 	bl	80039ec <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003194:	4633      	mov	r3, r6
 8003196:	2180      	movs	r1, #128	@ 0x80
 8003198:	2200      	movs	r2, #0
 800319a:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800319c:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80031a0:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80031a4:	f000 fc22 	bl	80039ec <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80031a8:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80031aa:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80031ae:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80031b0:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80031b2:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80031b6:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 80031ba:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80031bc:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 80031c0:	b123      	cbz	r3, 80031cc <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80031c2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80031c6:	4620      	mov	r0, r4
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4798      	blx	r3
  }

  return USBD_OK;
}
 80031cc:	2000      	movs	r0, #0
 80031ce:	bd70      	pop	{r4, r5, r6, pc}

080031d0 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80031d0:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80031d2:	2000      	movs	r0, #0
 80031d4:	4770      	bx	lr

080031d6 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80031d6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80031da:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80031de:	2304      	movs	r3, #4
 80031e0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80031e4:	2000      	movs	r0, #0
 80031e6:	4770      	bx	lr

080031e8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80031e8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80031ec:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80031ee:	bf04      	itt	eq
 80031f0:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 80031f4:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 80031f8:	2000      	movs	r0, #0
 80031fa:	4770      	bx	lr

080031fc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80031fc:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80031fe:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003202:	2a03      	cmp	r2, #3
 8003204:	d104      	bne.n	8003210 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8003206:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	b103      	cbz	r3, 8003210 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800320e:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8003210:	2000      	movs	r0, #0
 8003212:	bd08      	pop	{r3, pc}

08003214 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8003214:	b510      	push	{r4, lr}
 8003216:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8003218:	2180      	movs	r1, #128	@ 0x80
 800321a:	f000 fbf3 	bl	8003a04 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800321e:	4620      	mov	r0, r4
}
 8003220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003224:	2100      	movs	r1, #0
 8003226:	f000 bbed 	b.w	8003a04 <USBD_LL_StallEP>
	...

0800322c <USBD_StdDevReq>:
{
 800322c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800322e:	780b      	ldrb	r3, [r1, #0]
 8003230:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003232:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8003236:	2b20      	cmp	r3, #32
{
 8003238:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800323a:	d006      	beq.n	800324a <USBD_StdDevReq+0x1e>
 800323c:	2b40      	cmp	r3, #64	@ 0x40
 800323e:	d004      	beq.n	800324a <USBD_StdDevReq+0x1e>
 8003240:	b163      	cbz	r3, 800325c <USBD_StdDevReq+0x30>
        USBD_CtlError(pdev, req);
 8003242:	4620      	mov	r0, r4
 8003244:	f7ff ffe6 	bl	8003214 <USBD_CtlError.constprop.0>
        break;
 8003248:	e005      	b.n	8003256 <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 800324a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800324e:	4629      	mov	r1, r5
 8003250:	4620      	mov	r0, r4
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4798      	blx	r3
}
 8003256:	2000      	movs	r0, #0
 8003258:	b003      	add	sp, #12
 800325a:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 800325c:	784b      	ldrb	r3, [r1, #1]
 800325e:	2b09      	cmp	r3, #9
 8003260:	d8ef      	bhi.n	8003242 <USBD_StdDevReq+0x16>
 8003262:	a201      	add	r2, pc, #4	@ (adr r2, 8003268 <USBD_StdDevReq+0x3c>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	0800347f 	.word	0x0800347f
 800326c:	080034b5 	.word	0x080034b5
 8003270:	08003243 	.word	0x08003243
 8003274:	080034a7 	.word	0x080034a7
 8003278:	08003243 	.word	0x08003243
 800327c:	080033a5 	.word	0x080033a5
 8003280:	08003291 	.word	0x08003291
 8003284:	08003243 	.word	0x08003243
 8003288:	0800344f 	.word	0x0800344f
 800328c:	080033e7 	.word	0x080033e7
  uint16_t len = 0U;
 8003290:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8003292:	8849      	ldrh	r1, [r1, #2]
  uint16_t len = 0U;
 8003294:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003298:	0a0b      	lsrs	r3, r1, #8
 800329a:	3b01      	subs	r3, #1
 800329c:	2b06      	cmp	r3, #6
 800329e:	d8d0      	bhi.n	8003242 <USBD_StdDevReq+0x16>
 80032a0:	a201      	add	r2, pc, #4	@ (adr r2, 80032a8 <USBD_StdDevReq+0x7c>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032c5 	.word	0x080032c5
 80032ac:	080032e9 	.word	0x080032e9
 80032b0:	08003303 	.word	0x08003303
 80032b4:	08003243 	.word	0x08003243
 80032b8:	08003243 	.word	0x08003243
 80032bc:	0800335b 	.word	0x0800335b
 80032c0:	08003371 	.word	0x08003371
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80032c4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80032c8:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80032ca:	7c20      	ldrb	r0, [r4, #16]
 80032cc:	f10d 0106 	add.w	r1, sp, #6
 80032d0:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80032d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80032d6:	88eb      	ldrh	r3, [r5, #6]
 80032d8:	2a00      	cmp	r2, #0
 80032da:	d05e      	beq.n	800339a <USBD_StdDevReq+0x16e>
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d153      	bne.n	8003388 <USBD_StdDevReq+0x15c>
        USBD_CtlSendStatus(pdev);
 80032e0:	4620      	mov	r0, r4
 80032e2:	f000 fa01 	bl	80036e8 <USBD_CtlSendStatus>
 80032e6:	e7b6      	b.n	8003256 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80032e8:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 80032ea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80032ee:	b932      	cbnz	r2, 80032fe <USBD_StdDevReq+0xd2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80032f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80032f2:	f10d 0006 	add.w	r0, sp, #6
 80032f6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80032f8:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80032fa:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80032fc:	e7e9      	b.n	80032d2 <USBD_StdDevReq+0xa6>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003300:	e7f7      	b.n	80032f2 <USBD_StdDevReq+0xc6>
      switch ((uint8_t)(req->wValue))
 8003302:	b2c9      	uxtb	r1, r1
 8003304:	2905      	cmp	r1, #5
 8003306:	d81e      	bhi.n	8003346 <USBD_StdDevReq+0x11a>
 8003308:	e8df f001 	tbb	[pc, r1]
 800330c:	110d0903 	.word	0x110d0903
 8003310:	1915      	.short	0x1915
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003312:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8003316:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1d6      	bne.n	80032ca <USBD_StdDevReq+0x9e>
 800331c:	e791      	b.n	8003242 <USBD_StdDevReq+0x16>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800331e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	e7f8      	b.n	8003318 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003326:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	e7f4      	b.n	8003318 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800332e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	e7f0      	b.n	8003318 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003336:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	e7ec      	b.n	8003318 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800333e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	e7e8      	b.n	8003318 <USBD_StdDevReq+0xec>
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8003346:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	2b00      	cmp	r3, #0
 800334e:	f43f af78 	beq.w	8003242 <USBD_StdDevReq+0x16>
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8003352:	f10d 0206 	add.w	r2, sp, #6
 8003356:	4798      	blx	r3
  if (err != 0U)
 8003358:	e7bb      	b.n	80032d2 <USBD_StdDevReq+0xa6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800335a:	7c03      	ldrb	r3, [r0, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f af70 	bne.w	8003242 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003362:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003366:	f10d 0006 	add.w	r0, sp, #6
 800336a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336c:	4798      	blx	r3
  if (err != 0U)
 800336e:	e7b0      	b.n	80032d2 <USBD_StdDevReq+0xa6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003370:	7c03      	ldrb	r3, [r0, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f47f af65 	bne.w	8003242 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003378:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800337c:	f10d 0006 	add.w	r0, sp, #6
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003384:	2307      	movs	r3, #7
 8003386:	e7b8      	b.n	80032fa <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 8003388:	429a      	cmp	r2, r3
 800338a:	bf28      	it	cs
 800338c:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800338e:	4601      	mov	r1, r0
 8003390:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8003392:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003396:	f000 f97d 	bl	8003694 <USBD_CtlSendData>
    if (req->wLength == 0U)
 800339a:	88eb      	ldrh	r3, [r5, #6]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f47f af5a 	bne.w	8003256 <USBD_StdDevReq+0x2a>
 80033a2:	e79d      	b.n	80032e0 <USBD_StdDevReq+0xb4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80033a4:	888b      	ldrh	r3, [r1, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f47f af4b 	bne.w	8003242 <USBD_StdDevReq+0x16>
 80033ac:	88cb      	ldrh	r3, [r1, #6]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f47f af47 	bne.w	8003242 <USBD_StdDevReq+0x16>
 80033b4:	884d      	ldrh	r5, [r1, #2]
 80033b6:	2d7f      	cmp	r5, #127	@ 0x7f
 80033b8:	f63f af43 	bhi.w	8003242 <USBD_StdDevReq+0x16>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80033bc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	f43f af3e 	beq.w	8003242 <USBD_StdDevReq+0x16>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80033c6:	b2ed      	uxtb	r5, r5
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80033c8:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 80033ca:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80033ce:	f000 fb3c 	bl	8003a4a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80033d2:	4620      	mov	r0, r4
 80033d4:	f000 f988 	bl	80036e8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80033d8:	b11d      	cbz	r5, 80033e2 <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80033da:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80033dc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80033e0:	e739      	b.n	8003256 <USBD_StdDevReq+0x2a>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e7fa      	b.n	80033dc <USBD_StdDevReq+0x1b0>
  cfgidx = (uint8_t)(req->wValue);
 80033e6:	7889      	ldrb	r1, [r1, #2]
 80033e8:	4d38      	ldr	r5, [pc, #224]	@ (80034cc <USBD_StdDevReq+0x2a0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80033ea:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80033ec:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80033ee:	f63f af28 	bhi.w	8003242 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 80033f2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d008      	beq.n	800340c <USBD_StdDevReq+0x1e0>
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d015      	beq.n	800342a <USBD_StdDevReq+0x1fe>
        USBD_CtlError(pdev, req);
 80033fe:	f7ff ff09 	bl	8003214 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003402:	4620      	mov	r0, r4
 8003404:	7829      	ldrb	r1, [r5, #0]
 8003406:	f7ff fdf4 	bl	8002ff2 <USBD_ClrClassConfig>
        break;
 800340a:	e724      	b.n	8003256 <USBD_StdDevReq+0x2a>
        if (cfgidx)
 800340c:	2900      	cmp	r1, #0
 800340e:	f43f af67 	beq.w	80032e0 <USBD_StdDevReq+0xb4>
          pdev->dev_config = cfgidx;
 8003412:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003414:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8003416:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003418:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800341c:	4620      	mov	r0, r4
 800341e:	f7ff fddb 	bl	8002fd8 <USBD_SetClassConfig>
 8003422:	2802      	cmp	r0, #2
 8003424:	f47f af5c 	bne.w	80032e0 <USBD_StdDevReq+0xb4>
 8003428:	e70b      	b.n	8003242 <USBD_StdDevReq+0x16>
        if (cfgidx == 0U)
 800342a:	b931      	cbnz	r1, 800343a <USBD_StdDevReq+0x20e>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800342c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800342e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003430:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8003434:	f7ff fddd 	bl	8002ff2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8003438:	e752      	b.n	80032e0 <USBD_StdDevReq+0xb4>
        else if (cfgidx != pdev->dev_config)
 800343a:	6841      	ldr	r1, [r0, #4]
 800343c:	2901      	cmp	r1, #1
 800343e:	f43f af4f 	beq.w	80032e0 <USBD_StdDevReq+0xb4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003442:	b2c9      	uxtb	r1, r1
 8003444:	f7ff fdd5 	bl	8002ff2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003448:	7829      	ldrb	r1, [r5, #0]
 800344a:	6061      	str	r1, [r4, #4]
 800344c:	e7e6      	b.n	800341c <USBD_StdDevReq+0x1f0>
  if (req->wLength != 1U)
 800344e:	88ca      	ldrh	r2, [r1, #6]
 8003450:	2a01      	cmp	r2, #1
 8003452:	f47f aef6 	bne.w	8003242 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8003456:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800345a:	2b02      	cmp	r3, #2
 800345c:	d80a      	bhi.n	8003474 <USBD_StdDevReq+0x248>
 800345e:	2b00      	cmp	r3, #0
 8003460:	f43f aeef 	beq.w	8003242 <USBD_StdDevReq+0x16>
        pdev->dev_default_config = 0U;
 8003464:	4601      	mov	r1, r0
 8003466:	2300      	movs	r3, #0
 8003468:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800346c:	4620      	mov	r0, r4
 800346e:	f000 f911 	bl	8003694 <USBD_CtlSendData>
      break;
 8003472:	e6f0      	b.n	8003256 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8003474:	2b03      	cmp	r3, #3
 8003476:	f47f aee4 	bne.w	8003242 <USBD_StdDevReq+0x16>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800347a:	1d01      	adds	r1, r0, #4
 800347c:	e7f6      	b.n	800346c <USBD_StdDevReq+0x240>
  switch (pdev->dev_state)
 800347e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003482:	3b01      	subs	r3, #1
 8003484:	2b02      	cmp	r3, #2
 8003486:	f63f aedc 	bhi.w	8003242 <USBD_StdDevReq+0x16>
      if (req->wLength != 0x2U)
 800348a:	88ca      	ldrh	r2, [r1, #6]
 800348c:	2a02      	cmp	r2, #2
 800348e:	f47f aed8 	bne.w	8003242 <USBD_StdDevReq+0x16>
      if (pdev->dev_remote_wakeup)
 8003492:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8003496:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2303      	movne	r3, #3
 80034a0:	f841 3f0c 	str.w	r3, [r1, #12]!
 80034a4:	e7e2      	b.n	800346c <USBD_StdDevReq+0x240>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80034a6:	884b      	ldrh	r3, [r1, #2]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	f47f aed4 	bne.w	8003256 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 80034ae:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 80034b2:	e715      	b.n	80032e0 <USBD_StdDevReq+0xb4>
  switch (pdev->dev_state)
 80034b4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80034b8:	3b01      	subs	r3, #1
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	f63f aec1 	bhi.w	8003242 <USBD_StdDevReq+0x16>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80034c0:	884b      	ldrh	r3, [r1, #2]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	f47f aec7 	bne.w	8003256 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e7f0      	b.n	80034ae <USBD_StdDevReq+0x282>
 80034cc:	2000043f 	.word	0x2000043f

080034d0 <USBD_StdItfReq>:
{
 80034d0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80034d2:	780b      	ldrb	r3, [r1, #0]
{
 80034d4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80034d6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80034da:	065b      	lsls	r3, r3, #25
{
 80034dc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80034de:	d501      	bpl.n	80034e4 <USBD_StdItfReq+0x14>
 80034e0:	2a40      	cmp	r2, #64	@ 0x40
 80034e2:	d115      	bne.n	8003510 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 80034e4:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80034e8:	3b01      	subs	r3, #1
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d810      	bhi.n	8003510 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80034ee:	792b      	ldrb	r3, [r5, #4]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d80d      	bhi.n	8003510 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80034f4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80034f8:	4629      	mov	r1, r5
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4620      	mov	r0, r4
 80034fe:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003500:	88eb      	ldrh	r3, [r5, #6]
 8003502:	b91b      	cbnz	r3, 800350c <USBD_StdItfReq+0x3c>
 8003504:	b910      	cbnz	r0, 800350c <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8003506:	4620      	mov	r0, r4
 8003508:	f000 f8ee 	bl	80036e8 <USBD_CtlSendStatus>
}
 800350c:	2000      	movs	r0, #0
 800350e:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8003510:	4620      	mov	r0, r4
 8003512:	f7ff fe7f 	bl	8003214 <USBD_CtlError.constprop.0>
          break;
 8003516:	e7f9      	b.n	800350c <USBD_StdItfReq+0x3c>

08003518 <USBD_StdEPReq>:
{
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	780a      	ldrb	r2, [r1, #0]
 800351c:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 800351e:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003522:	2a20      	cmp	r2, #32
{
 8003524:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8003526:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003528:	d006      	beq.n	8003538 <USBD_StdEPReq+0x20>
 800352a:	2a40      	cmp	r2, #64	@ 0x40
 800352c:	d004      	beq.n	8003538 <USBD_StdEPReq+0x20>
 800352e:	b15a      	cbz	r2, 8003548 <USBD_StdEPReq+0x30>
              USBD_CtlError(pdev, req);
 8003530:	4620      	mov	r0, r4
 8003532:	f7ff fe6f 	bl	8003214 <USBD_CtlError.constprop.0>
              break;
 8003536:	e005      	b.n	8003544 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 8003538:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 800353c:	4619      	mov	r1, r3
 800353e:	4620      	mov	r0, r4
 8003540:	6892      	ldr	r2, [r2, #8]
 8003542:	4790      	blx	r2
}
 8003544:	2000      	movs	r0, #0
 8003546:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8003548:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800354a:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 800354c:	2a01      	cmp	r2, #1
 800354e:	d035      	beq.n	80035bc <USBD_StdEPReq+0xa4>
 8003550:	2a03      	cmp	r2, #3
 8003552:	d021      	beq.n	8003598 <USBD_StdEPReq+0x80>
 8003554:	2a00      	cmp	r2, #0
 8003556:	d1eb      	bne.n	8003530 <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 8003558:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800355c:	2b02      	cmp	r3, #2
 800355e:	d044      	beq.n	80035ea <USBD_StdEPReq+0xd2>
 8003560:	2b03      	cmp	r3, #3
 8003562:	d1e5      	bne.n	8003530 <USBD_StdEPReq+0x18>
              if ((ep_addr & 0x80U) == 0x80U)
 8003564:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003566:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800356a:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800356e:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8003572:	d04b      	beq.n	800360c <USBD_StdEPReq+0xf4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0da      	beq.n	8003530 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800357a:	2514      	movs	r5, #20
 800357c:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8003580:	fb03 5505 	mla	r5, r3, r5, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003584:	2980      	cmp	r1, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003586:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003588:	d04b      	beq.n	8003622 <USBD_StdEPReq+0x10a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800358a:	4620      	mov	r0, r4
 800358c:	f000 fa4c 	bl	8003a28 <USBD_LL_IsStallEP>
 8003590:	2800      	cmp	r0, #0
 8003592:	d04b      	beq.n	800362c <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 8003594:	2301      	movs	r3, #1
 8003596:	e045      	b.n	8003624 <USBD_StdEPReq+0x10c>
          switch (pdev->dev_state)
 8003598:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800359c:	2a02      	cmp	r2, #2
 800359e:	d01b      	beq.n	80035d8 <USBD_StdEPReq+0xc0>
 80035a0:	2a03      	cmp	r2, #3
 80035a2:	d1c5      	bne.n	8003530 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80035a4:	885a      	ldrh	r2, [r3, #2]
 80035a6:	b92a      	cbnz	r2, 80035b4 <USBD_StdEPReq+0x9c>
                if ((ep_addr != 0x00U) &&
 80035a8:	064a      	lsls	r2, r1, #25
 80035aa:	d003      	beq.n	80035b4 <USBD_StdEPReq+0x9c>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80035ac:	88db      	ldrh	r3, [r3, #6]
 80035ae:	b90b      	cbnz	r3, 80035b4 <USBD_StdEPReq+0x9c>
                  USBD_LL_StallEP(pdev, ep_addr);
 80035b0:	f000 fa28 	bl	8003a04 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80035b4:	4620      	mov	r0, r4
 80035b6:	f000 f897 	bl	80036e8 <USBD_CtlSendStatus>
              break;
 80035ba:	e7c3      	b.n	8003544 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 80035bc:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80035c0:	2a02      	cmp	r2, #2
 80035c2:	d009      	beq.n	80035d8 <USBD_StdEPReq+0xc0>
 80035c4:	2a03      	cmp	r2, #3
 80035c6:	d1b3      	bne.n	8003530 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80035c8:	885b      	ldrh	r3, [r3, #2]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ba      	bne.n	8003544 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 80035ce:	064d      	lsls	r5, r1, #25
 80035d0:	d0f0      	beq.n	80035b4 <USBD_StdEPReq+0x9c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80035d2:	f000 fa20 	bl	8003a16 <USBD_LL_ClearStallEP>
 80035d6:	e7ed      	b.n	80035b4 <USBD_StdEPReq+0x9c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80035d8:	064b      	lsls	r3, r1, #25
 80035da:	d0a9      	beq.n	8003530 <USBD_StdEPReq+0x18>
                USBD_LL_StallEP(pdev, ep_addr);
 80035dc:	f000 fa12 	bl	8003a04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80035e0:	2180      	movs	r1, #128	@ 0x80
 80035e2:	4620      	mov	r0, r4
 80035e4:	f000 fa0e 	bl	8003a04 <USBD_LL_StallEP>
 80035e8:	e7ac      	b.n	8003544 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80035ea:	064a      	lsls	r2, r1, #25
 80035ec:	d1a0      	bne.n	8003530 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80035ee:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 80035f0:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80035f4:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80035f8:	bf4c      	ite	mi
 80035fa:	f100 0114 	addmi.w	r1, r0, #20
 80035fe:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 8003602:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003604:	4620      	mov	r0, r4
 8003606:	f000 f845 	bl	8003694 <USBD_CtlSendData>
              break;
 800360a:	e79b      	b.n	8003544 <USBD_StdEPReq+0x2c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800360c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8003610:	2b00      	cmp	r3, #0
 8003612:	d08d      	beq.n	8003530 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003614:	2514      	movs	r5, #20
 8003616:	fb05 0501 	mla	r5, r5, r1, r0
 800361a:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800361e:	2900      	cmp	r1, #0
 8003620:	d1b3      	bne.n	800358a <USBD_StdEPReq+0x72>
                pep->status = 0x0000U;
 8003622:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 8003624:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003626:	2202      	movs	r2, #2
 8003628:	4629      	mov	r1, r5
 800362a:	e7eb      	b.n	8003604 <USBD_StdEPReq+0xec>
                pep->status = 0x0000U;
 800362c:	6028      	str	r0, [r5, #0]
 800362e:	e7fa      	b.n	8003626 <USBD_StdEPReq+0x10e>

08003630 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8003630:	780b      	ldrb	r3, [r1, #0]
 8003632:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003634:	784b      	ldrb	r3, [r1, #1]
 8003636:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003638:	884b      	ldrh	r3, [r1, #2]
 800363a:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800363c:	888b      	ldrh	r3, [r1, #4]
 800363e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003640:	88cb      	ldrh	r3, [r1, #6]
 8003642:	80c3      	strh	r3, [r0, #6]
}
 8003644:	4770      	bx	lr

08003646 <USBD_CtlError>:
{
 8003646:	b510      	push	{r4, lr}
 8003648:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800364a:	2180      	movs	r1, #128	@ 0x80
 800364c:	f000 f9da 	bl	8003a04 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003650:	4620      	mov	r0, r4
}
 8003652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003656:	2100      	movs	r1, #0
 8003658:	f000 b9d4 	b.w	8003a04 <USBD_LL_StallEP>

0800365c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	460d      	mov	r5, r1
 8003660:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8003662:	4604      	mov	r4, r0
 8003664:	b170      	cbz	r0, 8003684 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8003666:	f7fc fd71 	bl	800014c <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800366a:	b2c3      	uxtb	r3, r0
 800366c:	3301      	adds	r3, #1
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003672:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003674:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8003676:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003678:	706b      	strb	r3, [r5, #1]
 800367a:	2302      	movs	r3, #2
 800367c:	3c01      	subs	r4, #1
    while (*desc != '\0')
 800367e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003682:	b901      	cbnz	r1, 8003686 <USBD_GetString+0x2a>
}
 8003684:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	54e9      	strb	r1, [r5, r3]
 800368a:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800368c:	3302      	adds	r3, #2
 800368e:	b2db      	uxtb	r3, r3
 8003690:	54a8      	strb	r0, [r5, r2]
 8003692:	e7f4      	b.n	800367e <USBD_GetString+0x22>

08003694 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8003694:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003696:	2202      	movs	r2, #2
{
 8003698:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800369a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800369e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80036a2:	460a      	mov	r2, r1
 80036a4:	2100      	movs	r1, #0
 80036a6:	f000 f9d9 	bl	8003a5c <USBD_LL_Transmit>

  return USBD_OK;
}
 80036aa:	2000      	movs	r0, #0
 80036ac:	bd10      	pop	{r4, pc}

080036ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80036ae:	b508      	push	{r3, lr}
 80036b0:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80036b2:	460a      	mov	r2, r1
 80036b4:	2100      	movs	r1, #0
 80036b6:	f000 f9d1 	bl	8003a5c <USBD_LL_Transmit>

  return USBD_OK;
}
 80036ba:	2000      	movs	r0, #0
 80036bc:	bd08      	pop	{r3, pc}

080036be <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80036be:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80036c0:	2203      	movs	r2, #3
{
 80036c2:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 80036c4:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80036c8:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80036cc:	460a      	mov	r2, r1
 80036ce:	2100      	movs	r1, #0
 80036d0:	f000 f9cd 	bl	8003a6e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80036d4:	2000      	movs	r0, #0
 80036d6:	bd10      	pop	{r4, pc}

080036d8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80036d8:	b508      	push	{r3, lr}
 80036da:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80036dc:	460a      	mov	r2, r1
 80036de:	2100      	movs	r1, #0
 80036e0:	f000 f9c5 	bl	8003a6e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80036e4:	2000      	movs	r0, #0
 80036e6:	bd08      	pop	{r3, pc}

080036e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80036e8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80036ea:	2304      	movs	r3, #4
 80036ec:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80036f0:	2300      	movs	r3, #0
 80036f2:	461a      	mov	r2, r3
 80036f4:	4619      	mov	r1, r3
 80036f6:	f000 f9b1 	bl	8003a5c <USBD_LL_Transmit>

  return USBD_OK;
}
 80036fa:	2000      	movs	r0, #0
 80036fc:	bd08      	pop	{r3, pc}

080036fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80036fe:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003700:	2305      	movs	r3, #5
 8003702:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003706:	2300      	movs	r3, #0
 8003708:	461a      	mov	r2, r3
 800370a:	4619      	mov	r1, r3
 800370c:	f000 f9af 	bl	8003a6e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003710:	2000      	movs	r0, #0
 8003712:	bd08      	pop	{r3, pc}

08003714 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003714:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003716:	2200      	movs	r2, #0
 8003718:	490e      	ldr	r1, [pc, #56]	@ (8003754 <MX_USB_DEVICE_Init+0x40>)
 800371a:	480f      	ldr	r0, [pc, #60]	@ (8003758 <MX_USB_DEVICE_Init+0x44>)
 800371c:	f7ff fc2f 	bl	8002f7e <USBD_Init>
 8003720:	b108      	cbz	r0, 8003726 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8003722:	f7fc fda5 	bl	8000270 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8003726:	490d      	ldr	r1, [pc, #52]	@ (800375c <MX_USB_DEVICE_Init+0x48>)
 8003728:	480b      	ldr	r0, [pc, #44]	@ (8003758 <MX_USB_DEVICE_Init+0x44>)
 800372a:	f7ff fc3d 	bl	8002fa8 <USBD_RegisterClass>
 800372e:	b108      	cbz	r0, 8003734 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8003730:	f7fc fd9e 	bl	8000270 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8003734:	490a      	ldr	r1, [pc, #40]	@ (8003760 <MX_USB_DEVICE_Init+0x4c>)
 8003736:	4808      	ldr	r0, [pc, #32]	@ (8003758 <MX_USB_DEVICE_Init+0x44>)
 8003738:	f7ff fc1c 	bl	8002f74 <USBD_DFU_RegisterMedia>
 800373c:	b108      	cbz	r0, 8003742 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800373e:	f7fc fd97 	bl	8000270 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003742:	4805      	ldr	r0, [pc, #20]	@ (8003758 <MX_USB_DEVICE_Init+0x44>)
 8003744:	f7ff fc37 	bl	8002fb6 <USBD_Start>
 8003748:	b118      	cbz	r0, 8003752 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800374a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800374e:	f7fc bd8f 	b.w	8000270 <Error_Handler>
}
 8003752:	bd08      	pop	{r3, pc}
 8003754:	200000ac 	.word	0x200000ac
 8003758:	20000440 	.word	0x20000440
 800375c:	2000003c 	.word	0x2000003c
 8003760:	200000c8 	.word	0x200000c8

08003764 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003764:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003766:	4801      	ldr	r0, [pc, #4]	@ (800376c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003768:	800b      	strh	r3, [r1, #0]
}
 800376a:	4770      	bx	lr
 800376c:	20000098 	.word	0x20000098

08003770 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003770:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003772:	4801      	ldr	r0, [pc, #4]	@ (8003778 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003774:	800b      	strh	r3, [r1, #0]
}
 8003776:	4770      	bx	lr
 8003778:	20000094 	.word	0x20000094

0800377c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800377c:	2300      	movs	r3, #0
 800377e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003780:	461e      	mov	r6, r3
 8003782:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8003784:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8003786:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800378a:	bf34      	ite	cc
 800378c:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800378e:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8003790:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8003794:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8003798:	3301      	adds	r3, #1
 800379a:	b2dc      	uxtb	r4, r3
 800379c:	42a2      	cmp	r2, r4
    value = value << 4;
 800379e:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80037a2:	d8ef      	bhi.n	8003784 <IntToUnicode+0x8>
  }
}
 80037a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080037a8 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80037a8:	231a      	movs	r3, #26
{
 80037aa:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80037ac:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80037ae:	4b0a      	ldr	r3, [pc, #40]	@ (80037d8 <USBD_FS_SerialStrDescriptor+0x30>)
 80037b0:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 80037b4:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 80037b8:	1880      	adds	r0, r0, r2
 80037ba:	d00a      	beq.n	80037d2 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80037bc:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80037c0:	4906      	ldr	r1, [pc, #24]	@ (80037dc <USBD_FS_SerialStrDescriptor+0x34>)
 80037c2:	2208      	movs	r2, #8
 80037c4:	f7ff ffda 	bl	800377c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80037c8:	2204      	movs	r2, #4
 80037ca:	4620      	mov	r0, r4
 80037cc:	3110      	adds	r1, #16
 80037ce:	f7ff ffd5 	bl	800377c <IntToUnicode>
}
 80037d2:	4803      	ldr	r0, [pc, #12]	@ (80037e0 <USBD_FS_SerialStrDescriptor+0x38>)
 80037d4:	bd10      	pop	{r4, pc}
 80037d6:	bf00      	nop
 80037d8:	1ffff000 	.word	0x1ffff000
 80037dc:	2000007a 	.word	0x2000007a
 80037e0:	20000078 	.word	0x20000078

080037e4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80037e4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80037e6:	4c04      	ldr	r4, [pc, #16]	@ (80037f8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80037e8:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80037ea:	4804      	ldr	r0, [pc, #16]	@ (80037fc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80037ec:	4621      	mov	r1, r4
 80037ee:	f7ff ff35 	bl	800365c <USBD_GetString>
}
 80037f2:	4620      	mov	r0, r4
 80037f4:	bd10      	pop	{r4, pc}
 80037f6:	bf00      	nop
 80037f8:	20000704 	.word	0x20000704
 80037fc:	08003b4c 	.word	0x08003b4c

08003800 <USBD_FS_ProductStrDescriptor>:
{
 8003800:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003802:	4c04      	ldr	r4, [pc, #16]	@ (8003814 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8003804:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003806:	4804      	ldr	r0, [pc, #16]	@ (8003818 <USBD_FS_ProductStrDescriptor+0x18>)
 8003808:	4621      	mov	r1, r4
 800380a:	f7ff ff27 	bl	800365c <USBD_GetString>
}
 800380e:	4620      	mov	r0, r4
 8003810:	bd10      	pop	{r4, pc}
 8003812:	bf00      	nop
 8003814:	20000704 	.word	0x20000704
 8003818:	08003b5f 	.word	0x08003b5f

0800381c <USBD_FS_ConfigStrDescriptor>:
{
 800381c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800381e:	4c04      	ldr	r4, [pc, #16]	@ (8003830 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8003820:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003822:	4804      	ldr	r0, [pc, #16]	@ (8003834 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003824:	4621      	mov	r1, r4
 8003826:	f7ff ff19 	bl	800365c <USBD_GetString>
}
 800382a:	4620      	mov	r0, r4
 800382c:	bd10      	pop	{r4, pc}
 800382e:	bf00      	nop
 8003830:	20000704 	.word	0x20000704
 8003834:	08003b7e 	.word	0x08003b7e

08003838 <USBD_FS_InterfaceStrDescriptor>:
{
 8003838:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800383a:	4c04      	ldr	r4, [pc, #16]	@ (800384c <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800383c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800383e:	4804      	ldr	r0, [pc, #16]	@ (8003850 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003840:	4621      	mov	r1, r4
 8003842:	f7ff ff0b 	bl	800365c <USBD_GetString>
}
 8003846:	4620      	mov	r0, r4
 8003848:	bd10      	pop	{r4, pc}
 800384a:	bf00      	nop
 800384c:	20000704 	.word	0x20000704
 8003850:	08003b89 	.word	0x08003b89

08003854 <MEM_If_Init_FS>:
uint16_t MEM_If_Init_FS(void)
{
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
  /* USER CODE END 0 */
}
 8003854:	2000      	movs	r0, #0
 8003856:	4770      	bx	lr

08003858 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8003858:	b510      	push	{r4, lr}
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */

	for(int i=0;i<Len;i++)
 800385a:	2300      	movs	r3, #0
{
 800385c:	4604      	mov	r4, r0
 800385e:	4608      	mov	r0, r1
	for(int i=0;i<Len;i++)
 8003860:	4293      	cmp	r3, r2
 8003862:	d100      	bne.n	8003866 <MEM_If_Read_FS+0xe>
	}


  return (uint8_t*)(dest);
  /* USER CODE END 4 */
}
 8003864:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
 8003866:	5ce1      	ldrb	r1, [r4, r3]
 8003868:	54c1      	strb	r1, [r0, r3]
	for(int i=0;i<Len;i++)
 800386a:	3301      	adds	r3, #1
 800386c:	e7f8      	b.n	8003860 <MEM_If_Read_FS+0x8>

0800386e <MEM_If_GetStatus_FS>:
  /* USER CODE BEGIN 5 */
  switch (Cmd)
  {
    case DFU_MEDIA_PROGRAM:
    	buffer[1] = (50>>0);
    	buffer[2] = (50>>8);
 800386e:	2000      	movs	r0, #0
    	buffer[1] = (50>>0);
 8003870:	2332      	movs	r3, #50	@ 0x32
    	buffer[2] = (50>>8);
 8003872:	7090      	strb	r0, [r2, #2]
    	buffer[1] = (50>>0);
 8003874:	7053      	strb	r3, [r2, #1]
    	buffer[3] = 0;
 8003876:	70d0      	strb	r0, [r2, #3]
    	buffer[3] = 0;
    break;
  }
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003878:	4770      	bx	lr

0800387a <MEM_If_Write_FS>:
{
 800387a:	b508      	push	{r3, lr}
 800387c:	460b      	mov	r3, r1
	if(flashWrite((uint32_t)dest, src, Len) != true)
 800387e:	4601      	mov	r1, r0
 8003880:	4618      	mov	r0, r3
 8003882:	f7fc fdbb 	bl	80003fc <flashWrite>
 8003886:	f080 0001 	eor.w	r0, r0, #1
}
 800388a:	b2c0      	uxtb	r0, r0
 800388c:	bd08      	pop	{r3, pc}

0800388e <MEM_If_Erase_FS>:
	if(flashErase(Add,1024) != true)
 800388e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
{
 8003892:	b508      	push	{r3, lr}
	if(flashErase(Add,1024) != true)
 8003894:	f7fc fd5c 	bl	8000350 <flashErase>
 8003898:	f080 0001 	eor.w	r0, r0, #1
}
 800389c:	b2c0      	uxtb	r0, r0
 800389e:	bd08      	pop	{r3, pc}

080038a0 <MEM_If_DeInit_FS>:
uint16_t MEM_If_DeInit_FS(void)
 80038a0:	2000      	movs	r0, #0
 80038a2:	4770      	bx	lr

080038a4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80038a4:	b118      	cbz	r0, 80038ae <USBD_Get_USB_Status+0xa>
 80038a6:	2802      	cmp	r0, #2
 80038a8:	bf0c      	ite	eq
 80038aa:	2001      	moveq	r0, #1
 80038ac:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80038ae:	4770      	bx	lr

080038b0 <HAL_PCD_MspInit>:
{
 80038b0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80038b2:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <HAL_PCD_MspInit+0x3c>)
 80038b4:	6802      	ldr	r2, [r0, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d115      	bne.n	80038e6 <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 80038ba:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 80038be:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80038c0:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80038c2:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80038c6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80038c8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80038ca:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80038cc:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80038ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80038d6:	f7fc ff35 	bl	8000744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80038da:	2014      	movs	r0, #20
}
 80038dc:	b003      	add	sp, #12
 80038de:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80038e2:	f7fc bf5f 	b.w	80007a4 <HAL_NVIC_EnableIRQ>
}
 80038e6:	b003      	add	sp, #12
 80038e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80038ec:	40005c00 	.word	0x40005c00

080038f0 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80038f0:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 80038f4:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80038f8:	f7ff bb82 	b.w	8003000 <USBD_LL_SetupStage>

080038fc <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80038fc:	2328      	movs	r3, #40	@ 0x28
 80038fe:	fb03 0301 	mla	r3, r3, r1, r0
 8003902:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8003906:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800390a:	f7ff bba6 	b.w	800305a <USBD_LL_DataOutStage>

0800390e <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800390e:	2328      	movs	r3, #40	@ 0x28
 8003910:	fb03 0301 	mla	r3, r3, r1, r0
 8003914:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8003918:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800391a:	f7ff bbd6 	b.w	80030ca <USBD_LL_DataInStage>

0800391e <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800391e:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8003922:	f7ff bc6b 	b.w	80031fc <USBD_LL_SOF>

08003926 <HAL_PCD_ResetCallback>:
{
 8003926:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003928:	7983      	ldrb	r3, [r0, #6]
{
 800392a:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800392c:	2b02      	cmp	r3, #2
 800392e:	d001      	beq.n	8003934 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8003930:	f7fc fc9e 	bl	8000270 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003934:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 8003938:	2101      	movs	r1, #1
 800393a:	f7ff fc49 	bl	80031d0 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800393e:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 8003942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003946:	f7ff bc1c 	b.w	8003182 <USBD_LL_Reset>
	...

0800394c <HAL_PCD_SuspendCallback>:
{
 800394c:	b510      	push	{r4, lr}
 800394e:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003950:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8003954:	f7ff fc3f 	bl	80031d6 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8003958:	7aa3      	ldrb	r3, [r4, #10]
 800395a:	b123      	cbz	r3, 8003966 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800395c:	4a02      	ldr	r2, [pc, #8]	@ (8003968 <HAL_PCD_SuspendCallback+0x1c>)
 800395e:	6913      	ldr	r3, [r2, #16]
 8003960:	f043 0306 	orr.w	r3, r3, #6
 8003964:	6113      	str	r3, [r2, #16]
}
 8003966:	bd10      	pop	{r4, pc}
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800396c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8003970:	f7ff bc3a 	b.w	80031e8 <USBD_LL_Resume>

08003974 <USBD_LL_Init>:
{
 8003974:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 8003976:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <USBD_LL_Init+0x4c>)
{
 8003978:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800397a:	4812      	ldr	r0, [pc, #72]	@ (80039c4 <USBD_LL_Init+0x50>)
  hpcd_USB_FS.Instance = USB;
 800397c:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800397e:	2308      	movs	r3, #8
 8003980:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003982:	2302      	movs	r3, #2
 8003984:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003986:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003988:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800398c:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003990:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003992:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003994:	f7fd f930 	bl	8000bf8 <HAL_PCD_Init>
 8003998:	b108      	cbz	r0, 800399e <USBD_LL_Init+0x2a>
    Error_Handler( );
 800399a:	f7fc fc69 	bl	8000270 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800399e:	2200      	movs	r2, #0
 80039a0:	2318      	movs	r3, #24
 80039a2:	4611      	mov	r1, r2
 80039a4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80039a8:	f7fd ff99 	bl	80018de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80039ac:	2358      	movs	r3, #88	@ 0x58
 80039ae:	2200      	movs	r2, #0
 80039b0:	2180      	movs	r1, #128	@ 0x80
 80039b2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80039b6:	f7fd ff92 	bl	80018de <HAL_PCDEx_PMAConfig>
}
 80039ba:	2000      	movs	r0, #0
 80039bc:	bd10      	pop	{r4, pc}
 80039be:	bf00      	nop
 80039c0:	40005c00 	.word	0x40005c00
 80039c4:	20000d24 	.word	0x20000d24

080039c8 <USBD_LL_Start>:
{
 80039c8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80039ca:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80039ce:	f7fd f976 	bl	8000cbe <HAL_PCD_Start>
}
 80039d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80039d6:	f7ff bf65 	b.w	80038a4 <USBD_Get_USB_Status>

080039da <USBD_LL_Stop>:
{
 80039da:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 80039dc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80039e0:	f7fd f986 	bl	8000cf0 <HAL_PCD_Stop>
}
 80039e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80039e8:	f7ff bf5c 	b.w	80038a4 <USBD_Get_USB_Status>

080039ec <USBD_LL_OpenEP>:
{
 80039ec:	b510      	push	{r4, lr}
 80039ee:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80039f0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 80039f4:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80039f6:	4623      	mov	r3, r4
 80039f8:	f7fd feaa 	bl	8001750 <HAL_PCD_EP_Open>
}
 80039fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003a00:	f7ff bf50 	b.w	80038a4 <USBD_Get_USB_Status>

08003a04 <USBD_LL_StallEP>:
{
 8003a04:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003a06:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8003a0a:	f7fd ff00 	bl	800180e <HAL_PCD_EP_SetStall>
}
 8003a0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003a12:	f7ff bf47 	b.w	80038a4 <USBD_Get_USB_Status>

08003a16 <USBD_LL_ClearStallEP>:
{
 8003a16:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003a18:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8003a1c:	f7fd ff2d 	bl	800187a <HAL_PCD_EP_ClrStall>
}
 8003a20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003a24:	f7ff bf3e 	b.w	80038a4 <USBD_Get_USB_Status>

08003a28 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003a28:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 8003a2a:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003a2e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003a32:	bf1b      	ittet	ne
 8003a34:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 8003a38:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003a3c:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003a40:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003a42:	bf08      	it	eq
 8003a44:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 8003a48:	4770      	bx	lr

08003a4a <USBD_LL_SetUSBAddress>:
{
 8003a4a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003a4c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8003a50:	f7fd f967 	bl	8000d22 <HAL_PCD_SetAddress>
}
 8003a54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003a58:	f7ff bf24 	b.w	80038a4 <USBD_Get_USB_Status>

08003a5c <USBD_LL_Transmit>:
{
 8003a5c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003a5e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8003a62:	f7fd febc 	bl	80017de <HAL_PCD_EP_Transmit>
}
 8003a66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003a6a:	f7ff bf1b 	b.w	80038a4 <USBD_Get_USB_Status>

08003a6e <USBD_LL_PrepareReceive>:
{
 8003a6e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003a70:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8003a74:	f7fd fe9c 	bl	80017b0 <HAL_PCD_EP_Receive>
}
 8003a78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003a7c:	f7ff bf12 	b.w	80038a4 <USBD_Get_USB_Status>

08003a80 <USBD_static_malloc>:
}
 8003a80:	4800      	ldr	r0, [pc, #0]	@ (8003a84 <USBD_static_malloc+0x4>)
 8003a82:	4770      	bx	lr
 8003a84:	20000904 	.word	0x20000904

08003a88 <USBD_static_free>:
}
 8003a88:	4770      	bx	lr

08003a8a <HAL_PCDEx_SetConnectionState>:
}
 8003a8a:	4770      	bx	lr

08003a8c <main>:




int main(void)
{
 8003a8c:	b508      	push	{r3, lr}
	hwInit();
 8003a8e:	f7fc fdcd 	bl	800062c <hwInit>
	apInit();
 8003a92:	f7fc fb63 	bl	800015c <apInit>

	apMain();
 8003a96:	f7fc fb62 	bl	800015e <apMain>

	return 0;
}
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	bd08      	pop	{r3, pc}

08003a9e <memset>:
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4402      	add	r2, r0
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d100      	bne.n	8003aa8 <memset+0xa>
 8003aa6:	4770      	bx	lr
 8003aa8:	f803 1b01 	strb.w	r1, [r3], #1
 8003aac:	e7f9      	b.n	8003aa2 <memset+0x4>
	...

08003ab0 <__libc_init_array>:
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	2600      	movs	r6, #0
 8003ab4:	4d0c      	ldr	r5, [pc, #48]	@ (8003ae8 <__libc_init_array+0x38>)
 8003ab6:	4c0d      	ldr	r4, [pc, #52]	@ (8003aec <__libc_init_array+0x3c>)
 8003ab8:	1b64      	subs	r4, r4, r5
 8003aba:	10a4      	asrs	r4, r4, #2
 8003abc:	42a6      	cmp	r6, r4
 8003abe:	d109      	bne.n	8003ad4 <__libc_init_array+0x24>
 8003ac0:	f000 f81a 	bl	8003af8 <_init>
 8003ac4:	2600      	movs	r6, #0
 8003ac6:	4d0a      	ldr	r5, [pc, #40]	@ (8003af0 <__libc_init_array+0x40>)
 8003ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8003af4 <__libc_init_array+0x44>)
 8003aca:	1b64      	subs	r4, r4, r5
 8003acc:	10a4      	asrs	r4, r4, #2
 8003ace:	42a6      	cmp	r6, r4
 8003ad0:	d105      	bne.n	8003ade <__libc_init_array+0x2e>
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
 8003ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad8:	4798      	blx	r3
 8003ada:	3601      	adds	r6, #1
 8003adc:	e7ee      	b.n	8003abc <__libc_init_array+0xc>
 8003ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae2:	4798      	blx	r3
 8003ae4:	3601      	adds	r6, #1
 8003ae6:	e7f2      	b.n	8003ace <__libc_init_array+0x1e>
 8003ae8:	08003bd0 	.word	0x08003bd0
 8003aec:	08003bd0 	.word	0x08003bd0
 8003af0:	08003bd0 	.word	0x08003bd0
 8003af4:	08003bd4 	.word	0x08003bd4

08003af8 <_init>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	bf00      	nop
 8003afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afe:	bc08      	pop	{r3}
 8003b00:	469e      	mov	lr, r3
 8003b02:	4770      	bx	lr

08003b04 <_fini>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr
