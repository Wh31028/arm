
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bbc  08005110  08005110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800dcd0  0800dcd0  00009cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e258  0800e258  0000b358  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e258  0800e258  0000a258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e260  0800e260  0000b358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e260  0800e260  0000a260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e264  0800e264  0000a264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0800e268  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a4  20000358  0800e5c0  0000b358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bfc  0800e5c0  0000bbfc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a79b  00000000  00000000  0000b381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005999  00000000  00000000  00025b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000ac96  00000000  00000000  0002b4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00036150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000142a  00000000  00000000  00037350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001de36  00000000  00000000  0003877a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024115  00000000  00000000  000565b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c446  00000000  00000000  0007a6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00106b0b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f0c  00000000  00000000  00106b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0010aa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005110 <__do_global_dtors_aux>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4c05      	ldr	r4, [pc, #20]	@ (8005128 <__do_global_dtors_aux+0x18>)
 8005114:	7823      	ldrb	r3, [r4, #0]
 8005116:	b933      	cbnz	r3, 8005126 <__do_global_dtors_aux+0x16>
 8005118:	4b04      	ldr	r3, [pc, #16]	@ (800512c <__do_global_dtors_aux+0x1c>)
 800511a:	b113      	cbz	r3, 8005122 <__do_global_dtors_aux+0x12>
 800511c:	4804      	ldr	r0, [pc, #16]	@ (8005130 <__do_global_dtors_aux+0x20>)
 800511e:	f3af 8000 	nop.w
 8005122:	2301      	movs	r3, #1
 8005124:	7023      	strb	r3, [r4, #0]
 8005126:	bd10      	pop	{r4, pc}
 8005128:	20000358 	.word	0x20000358
 800512c:	00000000 	.word	0x00000000
 8005130:	0800dcb4 	.word	0x0800dcb4

08005134 <frame_dummy>:
 8005134:	b508      	push	{r3, lr}
 8005136:	4b03      	ldr	r3, [pc, #12]	@ (8005144 <frame_dummy+0x10>)
 8005138:	b11b      	cbz	r3, 8005142 <frame_dummy+0xe>
 800513a:	4903      	ldr	r1, [pc, #12]	@ (8005148 <frame_dummy+0x14>)
 800513c:	4803      	ldr	r0, [pc, #12]	@ (800514c <frame_dummy+0x18>)
 800513e:	f3af 8000 	nop.w
 8005142:	bd08      	pop	{r3, pc}
 8005144:	00000000 	.word	0x00000000
 8005148:	2000035c 	.word	0x2000035c
 800514c:	0800dcb4 	.word	0x0800dcb4

08005150 <strcmp>:
 8005150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005158:	2a01      	cmp	r2, #1
 800515a:	bf28      	it	cs
 800515c:	429a      	cmpcs	r2, r3
 800515e:	d0f7      	beq.n	8005150 <strcmp>
 8005160:	1ad0      	subs	r0, r2, r3
 8005162:	4770      	bx	lr

08005164 <strlen>:
 8005164:	4603      	mov	r3, r0
 8005166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800516a:	2a00      	cmp	r2, #0
 800516c:	d1fb      	bne.n	8005166 <strlen+0x2>
 800516e:	1a18      	subs	r0, r3, r0
 8005170:	3801      	subs	r0, #1
 8005172:	4770      	bx	lr

08005174 <__aeabi_drsub>:
 8005174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8005178:	e002      	b.n	8005180 <__adddf3>
 800517a:	bf00      	nop

0800517c <__aeabi_dsub>:
 800517c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08005180 <__adddf3>:
 8005180:	b530      	push	{r4, r5, lr}
 8005182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800518a:	ea94 0f05 	teq	r4, r5
 800518e:	bf08      	it	eq
 8005190:	ea90 0f02 	teqeq	r0, r2
 8005194:	bf1f      	itttt	ne
 8005196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800519a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800519e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80051a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80051a6:	f000 80e2 	beq.w	800536e <__adddf3+0x1ee>
 80051aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80051ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80051b2:	bfb8      	it	lt
 80051b4:	426d      	neglt	r5, r5
 80051b6:	dd0c      	ble.n	80051d2 <__adddf3+0x52>
 80051b8:	442c      	add	r4, r5
 80051ba:	ea80 0202 	eor.w	r2, r0, r2
 80051be:	ea81 0303 	eor.w	r3, r1, r3
 80051c2:	ea82 0000 	eor.w	r0, r2, r0
 80051c6:	ea83 0101 	eor.w	r1, r3, r1
 80051ca:	ea80 0202 	eor.w	r2, r0, r2
 80051ce:	ea81 0303 	eor.w	r3, r1, r3
 80051d2:	2d36      	cmp	r5, #54	@ 0x36
 80051d4:	bf88      	it	hi
 80051d6:	bd30      	pophi	{r4, r5, pc}
 80051d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80051dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80051e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80051e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80051e8:	d002      	beq.n	80051f0 <__adddf3+0x70>
 80051ea:	4240      	negs	r0, r0
 80051ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80051f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80051f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80051f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80051fc:	d002      	beq.n	8005204 <__adddf3+0x84>
 80051fe:	4252      	negs	r2, r2
 8005200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005204:	ea94 0f05 	teq	r4, r5
 8005208:	f000 80a7 	beq.w	800535a <__adddf3+0x1da>
 800520c:	f1a4 0401 	sub.w	r4, r4, #1
 8005210:	f1d5 0e20 	rsbs	lr, r5, #32
 8005214:	db0d      	blt.n	8005232 <__adddf3+0xb2>
 8005216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800521a:	fa22 f205 	lsr.w	r2, r2, r5
 800521e:	1880      	adds	r0, r0, r2
 8005220:	f141 0100 	adc.w	r1, r1, #0
 8005224:	fa03 f20e 	lsl.w	r2, r3, lr
 8005228:	1880      	adds	r0, r0, r2
 800522a:	fa43 f305 	asr.w	r3, r3, r5
 800522e:	4159      	adcs	r1, r3
 8005230:	e00e      	b.n	8005250 <__adddf3+0xd0>
 8005232:	f1a5 0520 	sub.w	r5, r5, #32
 8005236:	f10e 0e20 	add.w	lr, lr, #32
 800523a:	2a01      	cmp	r2, #1
 800523c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005240:	bf28      	it	cs
 8005242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005246:	fa43 f305 	asr.w	r3, r3, r5
 800524a:	18c0      	adds	r0, r0, r3
 800524c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005254:	d507      	bpl.n	8005266 <__adddf3+0xe6>
 8005256:	f04f 0e00 	mov.w	lr, #0
 800525a:	f1dc 0c00 	rsbs	ip, ip, #0
 800525e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005262:	eb6e 0101 	sbc.w	r1, lr, r1
 8005266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800526a:	d31b      	bcc.n	80052a4 <__adddf3+0x124>
 800526c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8005270:	d30c      	bcc.n	800528c <__adddf3+0x10c>
 8005272:	0849      	lsrs	r1, r1, #1
 8005274:	ea5f 0030 	movs.w	r0, r0, rrx
 8005278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800527c:	f104 0401 	add.w	r4, r4, #1
 8005280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8005288:	f080 809a 	bcs.w	80053c0 <__adddf3+0x240>
 800528c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8005290:	bf08      	it	eq
 8005292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005296:	f150 0000 	adcs.w	r0, r0, #0
 800529a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800529e:	ea41 0105 	orr.w	r1, r1, r5
 80052a2:	bd30      	pop	{r4, r5, pc}
 80052a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80052a8:	4140      	adcs	r0, r0
 80052aa:	eb41 0101 	adc.w	r1, r1, r1
 80052ae:	3c01      	subs	r4, #1
 80052b0:	bf28      	it	cs
 80052b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80052b6:	d2e9      	bcs.n	800528c <__adddf3+0x10c>
 80052b8:	f091 0f00 	teq	r1, #0
 80052bc:	bf04      	itt	eq
 80052be:	4601      	moveq	r1, r0
 80052c0:	2000      	moveq	r0, #0
 80052c2:	fab1 f381 	clz	r3, r1
 80052c6:	bf08      	it	eq
 80052c8:	3320      	addeq	r3, #32
 80052ca:	f1a3 030b 	sub.w	r3, r3, #11
 80052ce:	f1b3 0220 	subs.w	r2, r3, #32
 80052d2:	da0c      	bge.n	80052ee <__adddf3+0x16e>
 80052d4:	320c      	adds	r2, #12
 80052d6:	dd08      	ble.n	80052ea <__adddf3+0x16a>
 80052d8:	f102 0c14 	add.w	ip, r2, #20
 80052dc:	f1c2 020c 	rsb	r2, r2, #12
 80052e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80052e4:	fa21 f102 	lsr.w	r1, r1, r2
 80052e8:	e00c      	b.n	8005304 <__adddf3+0x184>
 80052ea:	f102 0214 	add.w	r2, r2, #20
 80052ee:	bfd8      	it	le
 80052f0:	f1c2 0c20 	rsble	ip, r2, #32
 80052f4:	fa01 f102 	lsl.w	r1, r1, r2
 80052f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80052fc:	bfdc      	itt	le
 80052fe:	ea41 010c 	orrle.w	r1, r1, ip
 8005302:	4090      	lslle	r0, r2
 8005304:	1ae4      	subs	r4, r4, r3
 8005306:	bfa2      	ittt	ge
 8005308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800530c:	4329      	orrge	r1, r5
 800530e:	bd30      	popge	{r4, r5, pc}
 8005310:	ea6f 0404 	mvn.w	r4, r4
 8005314:	3c1f      	subs	r4, #31
 8005316:	da1c      	bge.n	8005352 <__adddf3+0x1d2>
 8005318:	340c      	adds	r4, #12
 800531a:	dc0e      	bgt.n	800533a <__adddf3+0x1ba>
 800531c:	f104 0414 	add.w	r4, r4, #20
 8005320:	f1c4 0220 	rsb	r2, r4, #32
 8005324:	fa20 f004 	lsr.w	r0, r0, r4
 8005328:	fa01 f302 	lsl.w	r3, r1, r2
 800532c:	ea40 0003 	orr.w	r0, r0, r3
 8005330:	fa21 f304 	lsr.w	r3, r1, r4
 8005334:	ea45 0103 	orr.w	r1, r5, r3
 8005338:	bd30      	pop	{r4, r5, pc}
 800533a:	f1c4 040c 	rsb	r4, r4, #12
 800533e:	f1c4 0220 	rsb	r2, r4, #32
 8005342:	fa20 f002 	lsr.w	r0, r0, r2
 8005346:	fa01 f304 	lsl.w	r3, r1, r4
 800534a:	ea40 0003 	orr.w	r0, r0, r3
 800534e:	4629      	mov	r1, r5
 8005350:	bd30      	pop	{r4, r5, pc}
 8005352:	fa21 f004 	lsr.w	r0, r1, r4
 8005356:	4629      	mov	r1, r5
 8005358:	bd30      	pop	{r4, r5, pc}
 800535a:	f094 0f00 	teq	r4, #0
 800535e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8005362:	bf06      	itte	eq
 8005364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8005368:	3401      	addeq	r4, #1
 800536a:	3d01      	subne	r5, #1
 800536c:	e74e      	b.n	800520c <__adddf3+0x8c>
 800536e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005372:	bf18      	it	ne
 8005374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005378:	d029      	beq.n	80053ce <__adddf3+0x24e>
 800537a:	ea94 0f05 	teq	r4, r5
 800537e:	bf08      	it	eq
 8005380:	ea90 0f02 	teqeq	r0, r2
 8005384:	d005      	beq.n	8005392 <__adddf3+0x212>
 8005386:	ea54 0c00 	orrs.w	ip, r4, r0
 800538a:	bf04      	itt	eq
 800538c:	4619      	moveq	r1, r3
 800538e:	4610      	moveq	r0, r2
 8005390:	bd30      	pop	{r4, r5, pc}
 8005392:	ea91 0f03 	teq	r1, r3
 8005396:	bf1e      	ittt	ne
 8005398:	2100      	movne	r1, #0
 800539a:	2000      	movne	r0, #0
 800539c:	bd30      	popne	{r4, r5, pc}
 800539e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80053a2:	d105      	bne.n	80053b0 <__adddf3+0x230>
 80053a4:	0040      	lsls	r0, r0, #1
 80053a6:	4149      	adcs	r1, r1
 80053a8:	bf28      	it	cs
 80053aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80053ae:	bd30      	pop	{r4, r5, pc}
 80053b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80053b4:	bf3c      	itt	cc
 80053b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80053ba:	bd30      	popcc	{r4, r5, pc}
 80053bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80053c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80053c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80053c8:	f04f 0000 	mov.w	r0, #0
 80053cc:	bd30      	pop	{r4, r5, pc}
 80053ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80053d2:	bf1a      	itte	ne
 80053d4:	4619      	movne	r1, r3
 80053d6:	4610      	movne	r0, r2
 80053d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80053dc:	bf1c      	itt	ne
 80053de:	460b      	movne	r3, r1
 80053e0:	4602      	movne	r2, r0
 80053e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80053e6:	bf06      	itte	eq
 80053e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80053ec:	ea91 0f03 	teqeq	r1, r3
 80053f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80053f4:	bd30      	pop	{r4, r5, pc}
 80053f6:	bf00      	nop

080053f8 <__aeabi_ui2d>:
 80053f8:	f090 0f00 	teq	r0, #0
 80053fc:	bf04      	itt	eq
 80053fe:	2100      	moveq	r1, #0
 8005400:	4770      	bxeq	lr
 8005402:	b530      	push	{r4, r5, lr}
 8005404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800540c:	f04f 0500 	mov.w	r5, #0
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	e750      	b.n	80052b8 <__adddf3+0x138>
 8005416:	bf00      	nop

08005418 <__aeabi_i2d>:
 8005418:	f090 0f00 	teq	r0, #0
 800541c:	bf04      	itt	eq
 800541e:	2100      	moveq	r1, #0
 8005420:	4770      	bxeq	lr
 8005422:	b530      	push	{r4, r5, lr}
 8005424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800542c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8005430:	bf48      	it	mi
 8005432:	4240      	negmi	r0, r0
 8005434:	f04f 0100 	mov.w	r1, #0
 8005438:	e73e      	b.n	80052b8 <__adddf3+0x138>
 800543a:	bf00      	nop

0800543c <__aeabi_f2d>:
 800543c:	0042      	lsls	r2, r0, #1
 800543e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005442:	ea4f 0131 	mov.w	r1, r1, rrx
 8005446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800544a:	bf1f      	itttt	ne
 800544c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8005450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8005454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8005458:	4770      	bxne	lr
 800545a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800545e:	bf08      	it	eq
 8005460:	4770      	bxeq	lr
 8005462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8005466:	bf04      	itt	eq
 8005468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800546c:	4770      	bxeq	lr
 800546e:	b530      	push	{r4, r5, lr}
 8005470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8005474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800547c:	e71c      	b.n	80052b8 <__adddf3+0x138>
 800547e:	bf00      	nop

08005480 <__aeabi_ul2d>:
 8005480:	ea50 0201 	orrs.w	r2, r0, r1
 8005484:	bf08      	it	eq
 8005486:	4770      	bxeq	lr
 8005488:	b530      	push	{r4, r5, lr}
 800548a:	f04f 0500 	mov.w	r5, #0
 800548e:	e00a      	b.n	80054a6 <__aeabi_l2d+0x16>

08005490 <__aeabi_l2d>:
 8005490:	ea50 0201 	orrs.w	r2, r0, r1
 8005494:	bf08      	it	eq
 8005496:	4770      	bxeq	lr
 8005498:	b530      	push	{r4, r5, lr}
 800549a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800549e:	d502      	bpl.n	80054a6 <__aeabi_l2d+0x16>
 80054a0:	4240      	negs	r0, r0
 80054a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80054a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80054aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80054ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80054b2:	f43f aed8 	beq.w	8005266 <__adddf3+0xe6>
 80054b6:	f04f 0203 	mov.w	r2, #3
 80054ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054be:	bf18      	it	ne
 80054c0:	3203      	addne	r2, #3
 80054c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054c6:	bf18      	it	ne
 80054c8:	3203      	addne	r2, #3
 80054ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80054ce:	f1c2 0320 	rsb	r3, r2, #32
 80054d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80054d6:	fa20 f002 	lsr.w	r0, r0, r2
 80054da:	fa01 fe03 	lsl.w	lr, r1, r3
 80054de:	ea40 000e 	orr.w	r0, r0, lr
 80054e2:	fa21 f102 	lsr.w	r1, r1, r2
 80054e6:	4414      	add	r4, r2
 80054e8:	e6bd      	b.n	8005266 <__adddf3+0xe6>
 80054ea:	bf00      	nop

080054ec <__aeabi_dmul>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80054f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80054f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80054fa:	bf1d      	ittte	ne
 80054fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005500:	ea94 0f0c 	teqne	r4, ip
 8005504:	ea95 0f0c 	teqne	r5, ip
 8005508:	f000 f8de 	bleq	80056c8 <__aeabi_dmul+0x1dc>
 800550c:	442c      	add	r4, r5
 800550e:	ea81 0603 	eor.w	r6, r1, r3
 8005512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800551a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800551e:	bf18      	it	ne
 8005520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800552c:	d038      	beq.n	80055a0 <__aeabi_dmul+0xb4>
 800552e:	fba0 ce02 	umull	ip, lr, r0, r2
 8005532:	f04f 0500 	mov.w	r5, #0
 8005536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800553a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800553e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005542:	f04f 0600 	mov.w	r6, #0
 8005546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800554a:	f09c 0f00 	teq	ip, #0
 800554e:	bf18      	it	ne
 8005550:	f04e 0e01 	orrne.w	lr, lr, #1
 8005554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8005558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800555c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8005560:	d204      	bcs.n	800556c <__aeabi_dmul+0x80>
 8005562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005566:	416d      	adcs	r5, r5
 8005568:	eb46 0606 	adc.w	r6, r6, r6
 800556c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800557c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8005584:	bf88      	it	hi
 8005586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800558a:	d81e      	bhi.n	80055ca <__aeabi_dmul+0xde>
 800558c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8005590:	bf08      	it	eq
 8005592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005596:	f150 0000 	adcs.w	r0, r0, #0
 800559a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80055a4:	ea46 0101 	orr.w	r1, r6, r1
 80055a8:	ea40 0002 	orr.w	r0, r0, r2
 80055ac:	ea81 0103 	eor.w	r1, r1, r3
 80055b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80055b4:	bfc2      	ittt	gt
 80055b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80055ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80055be:	bd70      	popgt	{r4, r5, r6, pc}
 80055c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80055c4:	f04f 0e00 	mov.w	lr, #0
 80055c8:	3c01      	subs	r4, #1
 80055ca:	f300 80ab 	bgt.w	8005724 <__aeabi_dmul+0x238>
 80055ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80055d2:	bfde      	ittt	le
 80055d4:	2000      	movle	r0, #0
 80055d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80055da:	bd70      	pople	{r4, r5, r6, pc}
 80055dc:	f1c4 0400 	rsb	r4, r4, #0
 80055e0:	3c20      	subs	r4, #32
 80055e2:	da35      	bge.n	8005650 <__aeabi_dmul+0x164>
 80055e4:	340c      	adds	r4, #12
 80055e6:	dc1b      	bgt.n	8005620 <__aeabi_dmul+0x134>
 80055e8:	f104 0414 	add.w	r4, r4, #20
 80055ec:	f1c4 0520 	rsb	r5, r4, #32
 80055f0:	fa00 f305 	lsl.w	r3, r0, r5
 80055f4:	fa20 f004 	lsr.w	r0, r0, r4
 80055f8:	fa01 f205 	lsl.w	r2, r1, r5
 80055fc:	ea40 0002 	orr.w	r0, r0, r2
 8005600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8005604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8005608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800560c:	fa21 f604 	lsr.w	r6, r1, r4
 8005610:	eb42 0106 	adc.w	r1, r2, r6
 8005614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005618:	bf08      	it	eq
 800561a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	f1c4 040c 	rsb	r4, r4, #12
 8005624:	f1c4 0520 	rsb	r5, r4, #32
 8005628:	fa00 f304 	lsl.w	r3, r0, r4
 800562c:	fa20 f005 	lsr.w	r0, r0, r5
 8005630:	fa01 f204 	lsl.w	r2, r1, r4
 8005634:	ea40 0002 	orr.w	r0, r0, r2
 8005638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800563c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005640:	f141 0100 	adc.w	r1, r1, #0
 8005644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005648:	bf08      	it	eq
 800564a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f1c4 0520 	rsb	r5, r4, #32
 8005654:	fa00 f205 	lsl.w	r2, r0, r5
 8005658:	ea4e 0e02 	orr.w	lr, lr, r2
 800565c:	fa20 f304 	lsr.w	r3, r0, r4
 8005660:	fa01 f205 	lsl.w	r2, r1, r5
 8005664:	ea43 0302 	orr.w	r3, r3, r2
 8005668:	fa21 f004 	lsr.w	r0, r1, r4
 800566c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005670:	fa21 f204 	lsr.w	r2, r1, r4
 8005674:	ea20 0002 	bic.w	r0, r0, r2
 8005678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800567c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005680:	bf08      	it	eq
 8005682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005686:	bd70      	pop	{r4, r5, r6, pc}
 8005688:	f094 0f00 	teq	r4, #0
 800568c:	d10f      	bne.n	80056ae <__aeabi_dmul+0x1c2>
 800568e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8005692:	0040      	lsls	r0, r0, #1
 8005694:	eb41 0101 	adc.w	r1, r1, r1
 8005698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800569c:	bf08      	it	eq
 800569e:	3c01      	subeq	r4, #1
 80056a0:	d0f7      	beq.n	8005692 <__aeabi_dmul+0x1a6>
 80056a2:	ea41 0106 	orr.w	r1, r1, r6
 80056a6:	f095 0f00 	teq	r5, #0
 80056aa:	bf18      	it	ne
 80056ac:	4770      	bxne	lr
 80056ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80056b2:	0052      	lsls	r2, r2, #1
 80056b4:	eb43 0303 	adc.w	r3, r3, r3
 80056b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80056bc:	bf08      	it	eq
 80056be:	3d01      	subeq	r5, #1
 80056c0:	d0f7      	beq.n	80056b2 <__aeabi_dmul+0x1c6>
 80056c2:	ea43 0306 	orr.w	r3, r3, r6
 80056c6:	4770      	bx	lr
 80056c8:	ea94 0f0c 	teq	r4, ip
 80056cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80056d0:	bf18      	it	ne
 80056d2:	ea95 0f0c 	teqne	r5, ip
 80056d6:	d00c      	beq.n	80056f2 <__aeabi_dmul+0x206>
 80056d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056dc:	bf18      	it	ne
 80056de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80056e2:	d1d1      	bne.n	8005688 <__aeabi_dmul+0x19c>
 80056e4:	ea81 0103 	eor.w	r1, r1, r3
 80056e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80056ec:	f04f 0000 	mov.w	r0, #0
 80056f0:	bd70      	pop	{r4, r5, r6, pc}
 80056f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056f6:	bf06      	itte	eq
 80056f8:	4610      	moveq	r0, r2
 80056fa:	4619      	moveq	r1, r3
 80056fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005700:	d019      	beq.n	8005736 <__aeabi_dmul+0x24a>
 8005702:	ea94 0f0c 	teq	r4, ip
 8005706:	d102      	bne.n	800570e <__aeabi_dmul+0x222>
 8005708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800570c:	d113      	bne.n	8005736 <__aeabi_dmul+0x24a>
 800570e:	ea95 0f0c 	teq	r5, ip
 8005712:	d105      	bne.n	8005720 <__aeabi_dmul+0x234>
 8005714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005718:	bf1c      	itt	ne
 800571a:	4610      	movne	r0, r2
 800571c:	4619      	movne	r1, r3
 800571e:	d10a      	bne.n	8005736 <__aeabi_dmul+0x24a>
 8005720:	ea81 0103 	eor.w	r1, r1, r3
 8005724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800572c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005730:	f04f 0000 	mov.w	r0, #0
 8005734:	bd70      	pop	{r4, r5, r6, pc}
 8005736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800573a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800573e:	bd70      	pop	{r4, r5, r6, pc}

08005740 <__aeabi_ddiv>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8005746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800574a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800574e:	bf1d      	ittte	ne
 8005750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005754:	ea94 0f0c 	teqne	r4, ip
 8005758:	ea95 0f0c 	teqne	r5, ip
 800575c:	f000 f8a7 	bleq	80058ae <__aeabi_ddiv+0x16e>
 8005760:	eba4 0405 	sub.w	r4, r4, r5
 8005764:	ea81 0e03 	eor.w	lr, r1, r3
 8005768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800576c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005770:	f000 8088 	beq.w	8005884 <__aeabi_ddiv+0x144>
 8005774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800577c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800578c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8005798:	429d      	cmp	r5, r3
 800579a:	bf08      	it	eq
 800579c:	4296      	cmpeq	r6, r2
 800579e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80057a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80057a6:	d202      	bcs.n	80057ae <__aeabi_ddiv+0x6e>
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80057ae:	1ab6      	subs	r6, r6, r2
 80057b0:	eb65 0503 	sbc.w	r5, r5, r3
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80057ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80057be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80057c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80057c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057ca:	bf22      	ittt	cs
 80057cc:	1ab6      	subcs	r6, r6, r2
 80057ce:	4675      	movcs	r5, lr
 80057d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80057da:	ebb6 0e02 	subs.w	lr, r6, r2
 80057de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057e2:	bf22      	ittt	cs
 80057e4:	1ab6      	subcs	r6, r6, r2
 80057e6:	4675      	movcs	r5, lr
 80057e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80057ec:	085b      	lsrs	r3, r3, #1
 80057ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80057f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80057f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057fa:	bf22      	ittt	cs
 80057fc:	1ab6      	subcs	r6, r6, r2
 80057fe:	4675      	movcs	r5, lr
 8005800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	ea4f 0232 	mov.w	r2, r2, rrx
 800580a:	ebb6 0e02 	subs.w	lr, r6, r2
 800580e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005812:	bf22      	ittt	cs
 8005814:	1ab6      	subcs	r6, r6, r2
 8005816:	4675      	movcs	r5, lr
 8005818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800581c:	ea55 0e06 	orrs.w	lr, r5, r6
 8005820:	d018      	beq.n	8005854 <__aeabi_ddiv+0x114>
 8005822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800582a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800582e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800583a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800583e:	d1c0      	bne.n	80057c2 <__aeabi_ddiv+0x82>
 8005840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005844:	d10b      	bne.n	800585e <__aeabi_ddiv+0x11e>
 8005846:	ea41 0100 	orr.w	r1, r1, r0
 800584a:	f04f 0000 	mov.w	r0, #0
 800584e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005852:	e7b6      	b.n	80057c2 <__aeabi_ddiv+0x82>
 8005854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005858:	bf04      	itt	eq
 800585a:	4301      	orreq	r1, r0
 800585c:	2000      	moveq	r0, #0
 800585e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8005862:	bf88      	it	hi
 8005864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8005868:	f63f aeaf 	bhi.w	80055ca <__aeabi_dmul+0xde>
 800586c:	ebb5 0c03 	subs.w	ip, r5, r3
 8005870:	bf04      	itt	eq
 8005872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800587a:	f150 0000 	adcs.w	r0, r0, #0
 800587e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8005888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800588c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005890:	bfc2      	ittt	gt
 8005892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800589a:	bd70      	popgt	{r4, r5, r6, pc}
 800589c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80058a0:	f04f 0e00 	mov.w	lr, #0
 80058a4:	3c01      	subs	r4, #1
 80058a6:	e690      	b.n	80055ca <__aeabi_dmul+0xde>
 80058a8:	ea45 0e06 	orr.w	lr, r5, r6
 80058ac:	e68d      	b.n	80055ca <__aeabi_dmul+0xde>
 80058ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80058b2:	ea94 0f0c 	teq	r4, ip
 80058b6:	bf08      	it	eq
 80058b8:	ea95 0f0c 	teqeq	r5, ip
 80058bc:	f43f af3b 	beq.w	8005736 <__aeabi_dmul+0x24a>
 80058c0:	ea94 0f0c 	teq	r4, ip
 80058c4:	d10a      	bne.n	80058dc <__aeabi_ddiv+0x19c>
 80058c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80058ca:	f47f af34 	bne.w	8005736 <__aeabi_dmul+0x24a>
 80058ce:	ea95 0f0c 	teq	r5, ip
 80058d2:	f47f af25 	bne.w	8005720 <__aeabi_dmul+0x234>
 80058d6:	4610      	mov	r0, r2
 80058d8:	4619      	mov	r1, r3
 80058da:	e72c      	b.n	8005736 <__aeabi_dmul+0x24a>
 80058dc:	ea95 0f0c 	teq	r5, ip
 80058e0:	d106      	bne.n	80058f0 <__aeabi_ddiv+0x1b0>
 80058e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80058e6:	f43f aefd 	beq.w	80056e4 <__aeabi_dmul+0x1f8>
 80058ea:	4610      	mov	r0, r2
 80058ec:	4619      	mov	r1, r3
 80058ee:	e722      	b.n	8005736 <__aeabi_dmul+0x24a>
 80058f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80058f4:	bf18      	it	ne
 80058f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80058fa:	f47f aec5 	bne.w	8005688 <__aeabi_dmul+0x19c>
 80058fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005902:	f47f af0d 	bne.w	8005720 <__aeabi_dmul+0x234>
 8005906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800590a:	f47f aeeb 	bne.w	80056e4 <__aeabi_dmul+0x1f8>
 800590e:	e712      	b.n	8005736 <__aeabi_dmul+0x24a>

08005910 <__gedf2>:
 8005910:	f04f 3cff 	mov.w	ip, #4294967295
 8005914:	e006      	b.n	8005924 <__cmpdf2+0x4>
 8005916:	bf00      	nop

08005918 <__ledf2>:
 8005918:	f04f 0c01 	mov.w	ip, #1
 800591c:	e002      	b.n	8005924 <__cmpdf2+0x4>
 800591e:	bf00      	nop

08005920 <__cmpdf2>:
 8005920:	f04f 0c01 	mov.w	ip, #1
 8005924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800592c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005934:	bf18      	it	ne
 8005936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800593a:	d01b      	beq.n	8005974 <__cmpdf2+0x54>
 800593c:	b001      	add	sp, #4
 800593e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005942:	bf0c      	ite	eq
 8005944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005948:	ea91 0f03 	teqne	r1, r3
 800594c:	bf02      	ittt	eq
 800594e:	ea90 0f02 	teqeq	r0, r2
 8005952:	2000      	moveq	r0, #0
 8005954:	4770      	bxeq	lr
 8005956:	f110 0f00 	cmn.w	r0, #0
 800595a:	ea91 0f03 	teq	r1, r3
 800595e:	bf58      	it	pl
 8005960:	4299      	cmppl	r1, r3
 8005962:	bf08      	it	eq
 8005964:	4290      	cmpeq	r0, r2
 8005966:	bf2c      	ite	cs
 8005968:	17d8      	asrcs	r0, r3, #31
 800596a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800596e:	f040 0001 	orr.w	r0, r0, #1
 8005972:	4770      	bx	lr
 8005974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800597c:	d102      	bne.n	8005984 <__cmpdf2+0x64>
 800597e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005982:	d107      	bne.n	8005994 <__cmpdf2+0x74>
 8005984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800598c:	d1d6      	bne.n	800593c <__cmpdf2+0x1c>
 800598e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005992:	d0d3      	beq.n	800593c <__cmpdf2+0x1c>
 8005994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop

0800599c <__aeabi_cdrcmple>:
 800599c:	4684      	mov	ip, r0
 800599e:	4610      	mov	r0, r2
 80059a0:	4662      	mov	r2, ip
 80059a2:	468c      	mov	ip, r1
 80059a4:	4619      	mov	r1, r3
 80059a6:	4663      	mov	r3, ip
 80059a8:	e000      	b.n	80059ac <__aeabi_cdcmpeq>
 80059aa:	bf00      	nop

080059ac <__aeabi_cdcmpeq>:
 80059ac:	b501      	push	{r0, lr}
 80059ae:	f7ff ffb7 	bl	8005920 <__cmpdf2>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	bf48      	it	mi
 80059b6:	f110 0f00 	cmnmi.w	r0, #0
 80059ba:	bd01      	pop	{r0, pc}

080059bc <__aeabi_dcmpeq>:
 80059bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059c0:	f7ff fff4 	bl	80059ac <__aeabi_cdcmpeq>
 80059c4:	bf0c      	ite	eq
 80059c6:	2001      	moveq	r0, #1
 80059c8:	2000      	movne	r0, #0
 80059ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80059ce:	bf00      	nop

080059d0 <__aeabi_dcmplt>:
 80059d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059d4:	f7ff ffea 	bl	80059ac <__aeabi_cdcmpeq>
 80059d8:	bf34      	ite	cc
 80059da:	2001      	movcc	r0, #1
 80059dc:	2000      	movcs	r0, #0
 80059de:	f85d fb08 	ldr.w	pc, [sp], #8
 80059e2:	bf00      	nop

080059e4 <__aeabi_dcmple>:
 80059e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059e8:	f7ff ffe0 	bl	80059ac <__aeabi_cdcmpeq>
 80059ec:	bf94      	ite	ls
 80059ee:	2001      	movls	r0, #1
 80059f0:	2000      	movhi	r0, #0
 80059f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80059f6:	bf00      	nop

080059f8 <__aeabi_dcmpge>:
 80059f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059fc:	f7ff ffce 	bl	800599c <__aeabi_cdrcmple>
 8005a00:	bf94      	ite	ls
 8005a02:	2001      	movls	r0, #1
 8005a04:	2000      	movhi	r0, #0
 8005a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a0a:	bf00      	nop

08005a0c <__aeabi_dcmpgt>:
 8005a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005a10:	f7ff ffc4 	bl	800599c <__aeabi_cdrcmple>
 8005a14:	bf34      	ite	cc
 8005a16:	2001      	movcc	r0, #1
 8005a18:	2000      	movcs	r0, #0
 8005a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a1e:	bf00      	nop

08005a20 <__aeabi_dcmpun>:
 8005a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a28:	d102      	bne.n	8005a30 <__aeabi_dcmpun+0x10>
 8005a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005a2e:	d10a      	bne.n	8005a46 <__aeabi_dcmpun+0x26>
 8005a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a38:	d102      	bne.n	8005a40 <__aeabi_dcmpun+0x20>
 8005a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005a3e:	d102      	bne.n	8005a46 <__aeabi_dcmpun+0x26>
 8005a40:	f04f 0000 	mov.w	r0, #0
 8005a44:	4770      	bx	lr
 8005a46:	f04f 0001 	mov.w	r0, #1
 8005a4a:	4770      	bx	lr

08005a4c <__aeabi_d2uiz>:
 8005a4c:	004a      	lsls	r2, r1, #1
 8005a4e:	d211      	bcs.n	8005a74 <__aeabi_d2uiz+0x28>
 8005a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8005a54:	d211      	bcs.n	8005a7a <__aeabi_d2uiz+0x2e>
 8005a56:	d50d      	bpl.n	8005a74 <__aeabi_d2uiz+0x28>
 8005a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8005a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005a60:	d40e      	bmi.n	8005a80 <__aeabi_d2uiz+0x34>
 8005a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8005a72:	4770      	bx	lr
 8005a74:	f04f 0000 	mov.w	r0, #0
 8005a78:	4770      	bx	lr
 8005a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005a7e:	d102      	bne.n	8005a86 <__aeabi_d2uiz+0x3a>
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	4770      	bx	lr
 8005a86:	f04f 0000 	mov.w	r0, #0
 8005a8a:	4770      	bx	lr

08005a8c <__aeabi_d2f>:
 8005a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8005a94:	bf24      	itt	cs
 8005a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8005a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8005a9e:	d90d      	bls.n	8005abc <__aeabi_d2f+0x30>
 8005aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8005aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8005ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005ab4:	bf08      	it	eq
 8005ab6:	f020 0001 	biceq.w	r0, r0, #1
 8005aba:	4770      	bx	lr
 8005abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8005ac0:	d121      	bne.n	8005b06 <__aeabi_d2f+0x7a>
 8005ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8005ac6:	bfbc      	itt	lt
 8005ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8005acc:	4770      	bxlt	lr
 8005ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005ad6:	f1c2 0218 	rsb	r2, r2, #24
 8005ada:	f1c2 0c20 	rsb	ip, r2, #32
 8005ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8005ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8005ae6:	bf18      	it	ne
 8005ae8:	f040 0001 	orrne.w	r0, r0, #1
 8005aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005af8:	ea40 000c 	orr.w	r0, r0, ip
 8005afc:	fa23 f302 	lsr.w	r3, r3, r2
 8005b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005b04:	e7cc      	b.n	8005aa0 <__aeabi_d2f+0x14>
 8005b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005b0a:	d107      	bne.n	8005b1c <__aeabi_d2f+0x90>
 8005b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005b10:	bf1e      	ittt	ne
 8005b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8005b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8005b1a:	4770      	bxne	lr
 8005b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8005b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8005b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop

08005b2c <__gesf2>:
 8005b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8005b30:	e006      	b.n	8005b40 <__cmpsf2+0x4>
 8005b32:	bf00      	nop

08005b34 <__lesf2>:
 8005b34:	f04f 0c01 	mov.w	ip, #1
 8005b38:	e002      	b.n	8005b40 <__cmpsf2+0x4>
 8005b3a:	bf00      	nop

08005b3c <__cmpsf2>:
 8005b3c:	f04f 0c01 	mov.w	ip, #1
 8005b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005b44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005b48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005b4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b50:	bf18      	it	ne
 8005b52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005b56:	d011      	beq.n	8005b7c <__cmpsf2+0x40>
 8005b58:	b001      	add	sp, #4
 8005b5a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8005b5e:	bf18      	it	ne
 8005b60:	ea90 0f01 	teqne	r0, r1
 8005b64:	bf58      	it	pl
 8005b66:	ebb2 0003 	subspl.w	r0, r2, r3
 8005b6a:	bf88      	it	hi
 8005b6c:	17c8      	asrhi	r0, r1, #31
 8005b6e:	bf38      	it	cc
 8005b70:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8005b74:	bf18      	it	ne
 8005b76:	f040 0001 	orrne.w	r0, r0, #1
 8005b7a:	4770      	bx	lr
 8005b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b80:	d102      	bne.n	8005b88 <__cmpsf2+0x4c>
 8005b82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005b86:	d105      	bne.n	8005b94 <__cmpsf2+0x58>
 8005b88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005b8c:	d1e4      	bne.n	8005b58 <__cmpsf2+0x1c>
 8005b8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005b92:	d0e1      	beq.n	8005b58 <__cmpsf2+0x1c>
 8005b94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop

08005b9c <__aeabi_cfrcmple>:
 8005b9c:	4684      	mov	ip, r0
 8005b9e:	4608      	mov	r0, r1
 8005ba0:	4661      	mov	r1, ip
 8005ba2:	e7ff      	b.n	8005ba4 <__aeabi_cfcmpeq>

08005ba4 <__aeabi_cfcmpeq>:
 8005ba4:	b50f      	push	{r0, r1, r2, r3, lr}
 8005ba6:	f7ff ffc9 	bl	8005b3c <__cmpsf2>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	bf48      	it	mi
 8005bae:	f110 0f00 	cmnmi.w	r0, #0
 8005bb2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08005bb4 <__aeabi_fcmpeq>:
 8005bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bb8:	f7ff fff4 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005bbc:	bf0c      	ite	eq
 8005bbe:	2001      	moveq	r0, #1
 8005bc0:	2000      	movne	r0, #0
 8005bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bc6:	bf00      	nop

08005bc8 <__aeabi_fcmplt>:
 8005bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bcc:	f7ff ffea 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005bd0:	bf34      	ite	cc
 8005bd2:	2001      	movcc	r0, #1
 8005bd4:	2000      	movcs	r0, #0
 8005bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bda:	bf00      	nop

08005bdc <__aeabi_fcmple>:
 8005bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005be0:	f7ff ffe0 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005be4:	bf94      	ite	ls
 8005be6:	2001      	movls	r0, #1
 8005be8:	2000      	movhi	r0, #0
 8005bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bee:	bf00      	nop

08005bf0 <__aeabi_fcmpge>:
 8005bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bf4:	f7ff ffd2 	bl	8005b9c <__aeabi_cfrcmple>
 8005bf8:	bf94      	ite	ls
 8005bfa:	2001      	movls	r0, #1
 8005bfc:	2000      	movhi	r0, #0
 8005bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c02:	bf00      	nop

08005c04 <__aeabi_fcmpgt>:
 8005c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005c08:	f7ff ffc8 	bl	8005b9c <__aeabi_cfrcmple>
 8005c0c:	bf34      	ite	cc
 8005c0e:	2001      	movcc	r0, #1
 8005c10:	2000      	movcs	r0, #0
 8005c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c16:	bf00      	nop

08005c18 <__aeabi_fcmpun>:
 8005c18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005c24:	d102      	bne.n	8005c2c <__aeabi_fcmpun+0x14>
 8005c26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005c2a:	d108      	bne.n	8005c3e <__aeabi_fcmpun+0x26>
 8005c2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005c30:	d102      	bne.n	8005c38 <__aeabi_fcmpun+0x20>
 8005c32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005c36:	d102      	bne.n	8005c3e <__aeabi_fcmpun+0x26>
 8005c38:	f04f 0000 	mov.w	r0, #0
 8005c3c:	4770      	bx	lr
 8005c3e:	f04f 0001 	mov.w	r0, #1
 8005c42:	4770      	bx	lr

08005c44 <__aeabi_d2lz>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	f7ff febf 	bl	80059d0 <__aeabi_dcmplt>
 8005c52:	b928      	cbnz	r0, 8005c60 <__aeabi_d2lz+0x1c>
 8005c54:	4620      	mov	r0, r4
 8005c56:	4629      	mov	r1, r5
 8005c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c5c:	f000 b80a 	b.w	8005c74 <__aeabi_d2ulz>
 8005c60:	4620      	mov	r0, r4
 8005c62:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8005c66:	f000 f805 	bl	8005c74 <__aeabi_d2ulz>
 8005c6a:	4240      	negs	r0, r0
 8005c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005c70:	bd38      	pop	{r3, r4, r5, pc}
 8005c72:	bf00      	nop

08005c74 <__aeabi_d2ulz>:
 8005c74:	b5d0      	push	{r4, r6, r7, lr}
 8005c76:	2200      	movs	r2, #0
 8005c78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <__aeabi_d2ulz+0x34>)
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	460f      	mov	r7, r1
 8005c7e:	f7ff fc35 	bl	80054ec <__aeabi_dmul>
 8005c82:	f7ff fee3 	bl	8005a4c <__aeabi_d2uiz>
 8005c86:	4604      	mov	r4, r0
 8005c88:	f7ff fbb6 	bl	80053f8 <__aeabi_ui2d>
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4b07      	ldr	r3, [pc, #28]	@ (8005cac <__aeabi_d2ulz+0x38>)
 8005c90:	f7ff fc2c 	bl	80054ec <__aeabi_dmul>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4630      	mov	r0, r6
 8005c9a:	4639      	mov	r1, r7
 8005c9c:	f7ff fa6e 	bl	800517c <__aeabi_dsub>
 8005ca0:	f7ff fed4 	bl	8005a4c <__aeabi_d2uiz>
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8005ca8:	3df00000 	.word	0x3df00000
 8005cac:	41f00000 	.word	0x41f00000

08005cb0 <apInit>:

#include "ap.h"


void apInit(void)
{
 8005cb0:	b508      	push	{r3, lr}
	uartOpen(_DEF_UART1, 57600);     //USB      (통신속도가 바뀌어서 통신이 안되지는 않음)
 8005cb2:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	f000 feb8 	bl	8006a2c <uartOpen>
	uartOpen(_DEF_UART2, 57600);     //UART			(통신속도가 바뀌면 그에 맞춰서 데이터를 보내줘야함)
 8005cbc:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8005cc0:	2001      	movs	r0, #1
 8005cc2:	f000 feb3 	bl	8006a2c <uartOpen>

  cliOpen(_DEF_UART1, 57600);
 8005cc6:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8005cca:	2000      	movs	r0, #0
 8005ccc:	f000 fa4c 	bl	8006168 <cliOpen>
  cliOpenLog(_DEF_UART2, 57600);
}
 8005cd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  cliOpenLog(_DEF_UART2, 57600);
 8005cd4:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8005cd8:	2001      	movs	r0, #1
 8005cda:	f000 ba4f 	b.w	800617c <cliOpenLog>
	...

08005ce0 <apMain>:

void apMain(void)
{
 8005ce0:	b538      	push	{r3, r4, r5, lr}
	uint32_t pre_time;

	pre_time = millis();
 8005ce2:	f000 f821 	bl	8005d28 <millis>
 8005ce6:	4604      	mov	r4, r0
		if (uartAvailable(_DEF_UART2) > 0)
		{
			uint8_t rx_data;
			rx_data = uartRead(_DEF_UART2);

			uartPrintf(_DEF_UART2, "Rx : 0x%X\n", rx_data);
 8005ce8:	4d0d      	ldr	r5, [pc, #52]	@ (8005d20 <apMain+0x40>)
		if(millis() - pre_time >= 500)
 8005cea:	f000 f81d 	bl	8005d28 <millis>
 8005cee:	1b00      	subs	r0, r0, r4
 8005cf0:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8005cf4:	d305      	bcc.n	8005d02 <apMain+0x22>
			pre_time = millis();
 8005cf6:	f000 f817 	bl	8005d28 <millis>
 8005cfa:	4604      	mov	r4, r0
			ledToggle(_DEF_LED1);
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	f000 fde7 	bl	80068d0 <ledToggle>
		if (uartAvailable(_DEF_UART2) > 0)
 8005d02:	2001      	movs	r0, #1
 8005d04:	f000 fee8 	bl	8006ad8 <uartAvailable>
 8005d08:	b138      	cbz	r0, 8005d1a <apMain+0x3a>
			rx_data = uartRead(_DEF_UART2);
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	f000 fefa 	bl	8006b04 <uartRead>
			uartPrintf(_DEF_UART2, "Rx : 0x%X\n", rx_data);
 8005d10:	4629      	mov	r1, r5
			rx_data = uartRead(_DEF_UART2);
 8005d12:	4602      	mov	r2, r0
			uartPrintf(_DEF_UART2, "Rx : 0x%X\n", rx_data);
 8005d14:	2001      	movs	r0, #1
 8005d16:	f000 ff29 	bl	8006b6c <uartPrintf>
		}

		cliMain();
 8005d1a:	f000 fb43 	bl	80063a4 <cliMain>
		if(millis() - pre_time >= 500)
 8005d1e:	e7e4      	b.n	8005cea <apMain+0xa>
 8005d20:	0800dcd0 	.word	0x0800dcd0

08005d24 <delay>:

}

void delay(uint32_t ms)
{
	HAL_Delay(ms);
 8005d24:	f001 b83c 	b.w	8006da0 <HAL_Delay>

08005d28 <millis>:
}

uint32_t millis(void)
{
	return HAL_GetTick();
 8005d28:	f001 b834 	b.w	8006d94 <HAL_GetTick>

08005d2c <__io_putchar>:
}

int __io_putchar(int ch)
{
 8005d2c:	b507      	push	{r0, r1, r2, lr}
	//USB로 printf 캐릭터 전송

	uartWrite(_DEF_UART1,(uint8_t *)&ch,1);
 8005d2e:	2201      	movs	r2, #1
{
 8005d30:	9001      	str	r0, [sp, #4]
	uartWrite(_DEF_UART1,(uint8_t *)&ch,1);
 8005d32:	a901      	add	r1, sp, #4
 8005d34:	2000      	movs	r0, #0
 8005d36:	f000 feff 	bl	8006b38 <uartWrite>
	return 1;
}
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	b003      	add	sp, #12
 8005d3e:	f85d fb04 	ldr.w	pc, [sp], #4

08005d42 <SystemClock_Config>:



void SystemClock_Config(void)
{
 8005d42:	b510      	push	{r4, lr}
 8005d44:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d46:	2214      	movs	r2, #20
 8005d48:	2100      	movs	r1, #0
 8005d4a:	a80c      	add	r0, sp, #48	@ 0x30
 8005d4c:	f005 ff18 	bl	800bb80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d50:	2214      	movs	r2, #20
 8005d52:	2100      	movs	r1, #0
 8005d54:	eb0d 0002 	add.w	r0, sp, r2
 8005d58:	f005 ff12 	bl	800bb80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005d5c:	2210      	movs	r2, #16
 8005d5e:	2100      	movs	r1, #0
 8005d60:	a801      	add	r0, sp, #4
 8005d62:	f005 ff0d 	bl	800bb80 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d66:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d6c:	2105      	movs	r1, #5
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005d6e:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d70:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d74:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005d78:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d7c:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005d7e:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005d82:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d84:	f002 fa1e 	bl	80081c4 <HAL_RCC_OscConfig>
 8005d88:	b108      	cbz	r0, 8005d8e <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d8a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d8c:	e7fe      	b.n	8005d8c <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d8e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d90:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005d94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d98:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005d9a:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005d9e:	4621      	mov	r1, r4
 8005da0:	a805      	add	r0, sp, #20
 8005da2:	f002 fbd1 	bl	8008548 <HAL_RCC_ClockConfig>
 8005da6:	b108      	cbz	r0, 8005dac <SystemClock_Config+0x6a>
 8005da8:	b672      	cpsid	i
  while (1)
 8005daa:	e7fe      	b.n	8005daa <SystemClock_Config+0x68>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005dac:	2211      	movs	r2, #17
 8005dae:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005db2:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005db4:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005db6:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005dba:	f002 fc81 	bl	80086c0 <HAL_RCCEx_PeriphCLKConfig>
 8005dbe:	b108      	cbz	r0, 8005dc4 <SystemClock_Config+0x82>
 8005dc0:	b672      	cpsid	i
  while (1)
 8005dc2:	e7fe      	b.n	8005dc2 <SystemClock_Config+0x80>
}
 8005dc4:	b014      	add	sp, #80	@ 0x50
 8005dc6:	bd10      	pop	{r4, pc}

08005dc8 <bspInit>:
{
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	b086      	sub	sp, #24
	 HAL_Init();
 8005dcc:	f000 ffc4 	bl	8006d58 <HAL_Init>
	 SystemClock_Config();
 8005dd0:	f7ff ffb7 	bl	8005d42 <SystemClock_Config>
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dd4:	4b13      	ldr	r3, [pc, #76]	@ (8005e24 <bspInit+0x5c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  //open drain
 8005dd6:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dda:	699a      	ldr	r2, [r3, #24]
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ddc:	2600      	movs	r6, #0
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dde:	f042 0220 	orr.w	r2, r2, #32
 8005de2:	619a      	str	r2, [r3, #24]
 8005de4:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005de6:	4c10      	ldr	r4, [pc, #64]	@ (8005e28 <bspInit+0x60>)
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 8005de8:	f002 0220 	and.w	r2, r2, #32
 8005dec:	9200      	str	r2, [sp, #0]
 8005dee:	9a00      	ldr	r2, [sp, #0]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8005df0:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005df2:	4620      	mov	r0, r4
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8005df4:	f042 0204 	orr.w	r2, r2, #4
 8005df8:	619a      	str	r2, [r3, #24]
 8005dfa:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dfc:	a902      	add	r1, sp, #8
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	9301      	str	r3, [sp, #4]
 8005e04:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  //open drain
 8005e06:	2311      	movs	r3, #17
 8005e08:	e9cd 5302 	strd	r5, r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e0c:	2302      	movs	r3, #2
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e0e:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e10:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e12:	f001 f9dd 	bl	80071d0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET); //회로에 풀업이
 8005e16:	4632      	mov	r2, r6
 8005e18:	4629      	mov	r1, r5
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f001 fb1a 	bl	8007454 <HAL_GPIO_WritePin>
}
 8005e20:	b006      	add	sp, #24
 8005e22:	bd70      	pop	{r4, r5, r6, pc}
 8005e24:	40021000 	.word	0x40021000
 8005e28:	40010800 	.word	0x40010800

08005e2c <Error_Handler>:
 8005e2c:	b672      	cpsid	i
  while (1)
 8005e2e:	e7fe      	b.n	8005e2e <Error_Handler+0x2>

08005e30 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e30:	4b0e      	ldr	r3, [pc, #56]	@ (8005e6c <HAL_MspInit+0x3c>)
{
 8005e32:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	f042 0201 	orr.w	r2, r2, #1
 8005e3a:	619a      	str	r2, [r3, #24]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	f002 0201 	and.w	r2, r2, #1
 8005e42:	9200      	str	r2, [sp, #0]
 8005e44:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005e4c:	61da      	str	r2, [r3, #28]
 8005e4e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e50:	4a07      	ldr	r2, [pc, #28]	@ (8005e70 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e5a:	6853      	ldr	r3, [r2, #4]
 8005e5c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005e60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e66:	b002      	add	sp, #8
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	40010000 	.word	0x40010000

08005e74 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005e74:	e7fe      	b.n	8005e74 <NMI_Handler>

08005e76 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e76:	e7fe      	b.n	8005e76 <HardFault_Handler>

08005e78 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e78:	e7fe      	b.n	8005e78 <MemManage_Handler>

08005e7a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e7a:	e7fe      	b.n	8005e7a <BusFault_Handler>

08005e7c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e7c:	e7fe      	b.n	8005e7c <UsageFault_Handler>

08005e7e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e7e:	4770      	bx	lr

08005e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8005e80:	4770      	bx	lr

08005e82 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8005e82:	4770      	bx	lr

08005e84 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e84:	f000 bf7a 	b.w	8006d7c <HAL_IncTick>

08005e88 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005e88:	4801      	ldr	r0, [pc, #4]	@ (8005e90 <DMA1_Channel5_IRQHandler+0x8>)
 8005e8a:	f001 b90d 	b.w	80070a8 <HAL_DMA_IRQHandler>
 8005e8e:	bf00      	nop
 8005e90:	20000934 	.word	0x20000934

08005e94 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005e94:	4801      	ldr	r0, [pc, #4]	@ (8005e9c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8005e96:	f001 bb7b 	b.w	8007590 <HAL_PCD_IRQHandler>
 8005e9a:	bf00      	nop
 8005e9c:	200017d8 	.word	0x200017d8

08005ea0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005ea0:	4801      	ldr	r0, [pc, #4]	@ (8005ea8 <USART1_IRQHandler+0x8>)
 8005ea2:	f002 bfa5 	b.w	8008df0 <HAL_UART_IRQHandler>
 8005ea6:	bf00      	nop
 8005ea8:	20000978 	.word	0x20000978

08005eac <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8005eac:	2001      	movs	r0, #1
 8005eae:	4770      	bx	lr

08005eb0 <_kill>:

int _kill(int pid, int sig)
{
 8005eb0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005eb2:	f005 fef1 	bl	800bc98 <__errno>
 8005eb6:	2316      	movs	r3, #22
 8005eb8:	6003      	str	r3, [r0, #0]
  return -1;
}
 8005eba:	f04f 30ff 	mov.w	r0, #4294967295
 8005ebe:	bd08      	pop	{r3, pc}

08005ec0 <_exit>:

void _exit (int status)
{
 8005ec0:	b508      	push	{r3, lr}
  errno = EINVAL;
 8005ec2:	f005 fee9 	bl	800bc98 <__errno>
 8005ec6:	2316      	movs	r3, #22
 8005ec8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8005eca:	e7fe      	b.n	8005eca <_exit+0xa>

08005ecc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	460d      	mov	r5, r1
 8005ed0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ed2:	460e      	mov	r6, r1
 8005ed4:	1b73      	subs	r3, r6, r5
 8005ed6:	429c      	cmp	r4, r3
 8005ed8:	dc01      	bgt.n	8005ede <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8005eda:	4620      	mov	r0, r4
 8005edc:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8005ede:	f3af 8000 	nop.w
 8005ee2:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ee6:	e7f5      	b.n	8005ed4 <_read+0x8>

08005ee8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	460d      	mov	r5, r1
 8005eec:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005eee:	460e      	mov	r6, r1
 8005ef0:	1b73      	subs	r3, r6, r5
 8005ef2:	429c      	cmp	r4, r3
 8005ef4:	dc01      	bgt.n	8005efa <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8005efa:	f816 0b01 	ldrb.w	r0, [r6], #1
 8005efe:	f7ff ff15 	bl	8005d2c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f02:	e7f5      	b.n	8005ef0 <_write+0x8>

08005f04 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295
 8005f08:	4770      	bx	lr

08005f0a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8005f0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8005f0e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8005f10:	604b      	str	r3, [r1, #4]
}
 8005f12:	4770      	bx	lr

08005f14 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005f14:	2001      	movs	r0, #1
 8005f16:	4770      	bx	lr

08005f18 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005f18:	2000      	movs	r0, #0
 8005f1a:	4770      	bx	lr

08005f1c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8005f4c <_sbrk+0x30>)
{
 8005f1e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8005f20:	6811      	ldr	r1, [r2, #0]
{
 8005f22:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8005f24:	b909      	cbnz	r1, 8005f2a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8005f26:	490a      	ldr	r1, [pc, #40]	@ (8005f50 <_sbrk+0x34>)
 8005f28:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f2a:	6810      	ldr	r0, [r2, #0]
 8005f2c:	4909      	ldr	r1, [pc, #36]	@ (8005f54 <_sbrk+0x38>)
 8005f2e:	4c0a      	ldr	r4, [pc, #40]	@ (8005f58 <_sbrk+0x3c>)
 8005f30:	4403      	add	r3, r0
 8005f32:	1b09      	subs	r1, r1, r4
 8005f34:	428b      	cmp	r3, r1
 8005f36:	d906      	bls.n	8005f46 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8005f38:	f005 feae 	bl	800bc98 <__errno>
 8005f3c:	230c      	movs	r3, #12
 8005f3e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8005f44:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8005f46:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8005f48:	e7fc      	b.n	8005f44 <_sbrk+0x28>
 8005f4a:	bf00      	nop
 8005f4c:	20000374 	.word	0x20000374
 8005f50:	20001c00 	.word	0x20001c00
 8005f54:	20005000 	.word	0x20005000
 8005f58:	00000400 	.word	0x00000400

08005f5c <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8005f5c:	4b01      	ldr	r3, [pc, #4]	@ (8005f64 <SystemInit+0x8>)
 8005f5e:	4a02      	ldr	r2, [pc, #8]	@ (8005f68 <SystemInit+0xc>)
 8005f60:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f62:	4770      	bx	lr
 8005f64:	e000ed00 	.word	0xe000ed00
 8005f68:	08005000 	.word	0x08005000

08005f6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f6c:	f7ff fff6 	bl	8005f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f70:	480b      	ldr	r0, [pc, #44]	@ (8005fa0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005f72:	490c      	ldr	r1, [pc, #48]	@ (8005fa4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005f74:	4a0c      	ldr	r2, [pc, #48]	@ (8005fa8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f78:	e002      	b.n	8005f80 <LoopCopyDataInit>

08005f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f7e:	3304      	adds	r3, #4

08005f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f84:	d3f9      	bcc.n	8005f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f86:	4a09      	ldr	r2, [pc, #36]	@ (8005fac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005f88:	4c09      	ldr	r4, [pc, #36]	@ (8005fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f8c:	e001      	b.n	8005f92 <LoopFillZerobss>

08005f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f90:	3204      	adds	r2, #4

08005f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f94:	d3fb      	bcc.n	8005f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f96:	f005 fe85 	bl	800bca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005f9a:	f004 fdc3 	bl	800ab24 <main>
  bx lr
 8005f9e:	4770      	bx	lr
  ldr r0, =_sdata
 8005fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fa4:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8005fa8:	0800e268 	.word	0x0800e268
  ldr r2, =_sbss
 8005fac:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8005fb0:	20001bfc 	.word	0x20001bfc

08005fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005fb4:	e7fe      	b.n	8005fb4 <ADC1_2_IRQHandler>

08005fb6 <qbufferCreate>:

bool   qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
  bool ret = true;

  p_node->in	  = 0;
 8005fb6:	2300      	movs	r3, #0
  p_node->out 	= 0;
  p_node->len 	= length;
  p_node->p_buf = p_buf;
 8005fb8:	e9c0 2102 	strd	r2, r1, [r0, #8]
  p_node->out 	= 0;
 8005fbc:	e9c0 3300 	strd	r3, r3, [r0]

  return ret;
}
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	4770      	bx	lr

08005fc4 <qbufferRead>:

	return ret;
}

bool   qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8005fc4:	b530      	push	{r4, r5, lr}
 8005fc6:	440a      	add	r2, r1
	bool ret = true;

	for(int i=0; i<length; i++)
 8005fc8:	4291      	cmp	r1, r2
 8005fca:	d101      	bne.n	8005fd0 <qbufferRead+0xc>
	bool ret = true;
 8005fcc:	2001      	movs	r0, #1
			break;
		}
	}

	return ret;
}
 8005fce:	bd30      	pop	{r4, r5, pc}
		if (p_node->p_buf != NULL)
 8005fd0:	68c3      	ldr	r3, [r0, #12]
 8005fd2:	b113      	cbz	r3, 8005fda <qbufferRead+0x16>
			p_data[i] = p_node->p_buf[p_node->out];
 8005fd4:	6844      	ldr	r4, [r0, #4]
 8005fd6:	5d1b      	ldrb	r3, [r3, r4]
 8005fd8:	700b      	strb	r3, [r1, #0]
		if(p_node->out != p_node->in)
 8005fda:	6843      	ldr	r3, [r0, #4]
 8005fdc:	6804      	ldr	r4, [r0, #0]
 8005fde:	3101      	adds	r1, #1
 8005fe0:	42a3      	cmp	r3, r4
 8005fe2:	d007      	beq.n	8005ff4 <qbufferRead+0x30>
			p_node->out = (p_node->out + 1) % p_node->len;
 8005fe4:	6884      	ldr	r4, [r0, #8]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	fbb3 f5f4 	udiv	r5, r3, r4
 8005fec:	fb04 3315 	mls	r3, r4, r5, r3
 8005ff0:	6043      	str	r3, [r0, #4]
	for(int i=0; i<length; i++)
 8005ff2:	e7e9      	b.n	8005fc8 <qbufferRead+0x4>
			ret = false;
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	e7ea      	b.n	8005fce <qbufferRead+0xa>

08005ff8 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
	uint32_t ret;

	ret = (p_node->in - p_node->out) % p_node->len;
 8005ff8:	e9d0 3200 	ldrd	r3, r2, [r0]
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	6882      	ldr	r2, [r0, #8]
 8006000:	fbb3 f0f2 	udiv	r0, r3, r2

	return ret;
}
 8006004:	fb02 3010 	mls	r0, r2, r0, r3
 8006008:	4770      	bx	lr

0800600a <cliToUpper>:

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
}

void cliToUpper(char *str)
{
 800600a:	2200      	movs	r2, #0
 800600c:	b510      	push	{r4, lr}
 800600e:	1e41      	subs	r1, r0, #1
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
  {
    str_ch = str[i];
 8006010:	f811 3f01 	ldrb.w	r3, [r1, #1]!

    if (str_ch == 0)
 8006014:	b16b      	cbz	r3, 8006032 <cliToUpper+0x28>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8006016:	f1a3 0461 	sub.w	r4, r3, #97	@ 0x61
 800601a:	2c19      	cmp	r4, #25
    {
      str_ch = str_ch - 'a' + 'A';
 800601c:	bf98      	it	ls
 800601e:	3b20      	subls	r3, #32
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8006020:	f102 0201 	add.w	r2, r2, #1
      str_ch = str_ch - 'a' + 'A';
 8006024:	bf98      	it	ls
 8006026:	b2db      	uxtbls	r3, r3
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8006028:	2a10      	cmp	r2, #16
    }
    str[i] = str_ch;
 800602a:	700b      	strb	r3, [r1, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800602c:	d1f0      	bne.n	8006010 <cliToUpper+0x6>
  }

  if (i == CLI_CMD_NAME_MAX)
  {
    str[i-1] = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	73c3      	strb	r3, [r0, #15]
  }
}
 8006032:	bd10      	pop	{r4, pc}

08006034 <cliArgsGetStr>:
{
  char *ret = NULL;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 8006034:	4b05      	ldr	r3, [pc, #20]	@ (800604c <cliArgsGetStr+0x18>)
 8006036:	f8b3 238c 	ldrh.w	r2, [r3, #908]	@ 0x38c
 800603a:	4282      	cmp	r2, r0
  {
    return 0;
  }

  ret = p_cli->cmd_args.argv[index];
 800603c:	bf86      	itte	hi
 800603e:	f8d3 3390 	ldrhi.w	r3, [r3, #912]	@ 0x390
 8006042:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
    return 0;
 8006046:	2000      	movls	r0, #0

  return ret;
}
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000378 	.word	0x20000378

08006050 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8006050:	b508      	push	{r3, lr}
 8006052:	4603      	mov	r3, r0
  bool ret = false;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 8006054:	4a08      	ldr	r2, [pc, #32]	@ (8006078 <cliArgsIsStr+0x28>)
{
 8006056:	4608      	mov	r0, r1
  if (index >= p_cli->cmd_args.argc)
 8006058:	f8b2 138c 	ldrh.w	r1, [r2, #908]	@ 0x38c
 800605c:	4299      	cmp	r1, r3
 800605e:	d909      	bls.n	8006074 <cliArgsIsStr+0x24>
  {
    return 0;
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8006060:	f8d2 2390 	ldr.w	r2, [r2, #912]	@ 0x390
 8006064:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006068:	f7ff f872 	bl	8005150 <strcmp>
 800606c:	fab0 f080 	clz	r0, r0
 8006070:	0940      	lsrs	r0, r0, #5
  {
    ret = true;
  }

  return ret;
}
 8006072:	bd08      	pop	{r3, pc}
    return 0;
 8006074:	2000      	movs	r0, #0
 8006076:	e7fc      	b.n	8006072 <cliArgsIsStr+0x22>
 8006078:	20000378 	.word	0x20000378

0800607c <cliArgsGetFloat>:
  if (index >= p_cli->cmd_args.argc)
 800607c:	4b06      	ldr	r3, [pc, #24]	@ (8006098 <cliArgsGetFloat+0x1c>)
 800607e:	f8b3 238c 	ldrh.w	r2, [r3, #908]	@ 0x38c
 8006082:	4282      	cmp	r2, r0
 8006084:	d906      	bls.n	8006094 <cliArgsGetFloat+0x18>
  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8006086:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 800608a:	2100      	movs	r1, #0
 800608c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006090:	f005 bb4a 	b.w	800b728 <strtof>
}
 8006094:	2000      	movs	r0, #0
 8006096:	4770      	bx	lr
 8006098:	20000378 	.word	0x20000378

0800609c <cliArgsGetData>:
  if (index >= p_cli->cmd_args.argc)
 800609c:	4b07      	ldr	r3, [pc, #28]	@ (80060bc <cliArgsGetData+0x20>)
 800609e:	f8b3 238c 	ldrh.w	r2, [r3, #908]	@ 0x38c
 80060a2:	4282      	cmp	r2, r0
 80060a4:	d907      	bls.n	80060b6 <cliArgsGetData+0x1a>
  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80060ac:	4611      	mov	r1, r2
 80060ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80060b2:	f005 bbff 	b.w	800b8b4 <strtoul>
}
 80060b6:	2000      	movs	r0, #0
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	20000378 	.word	0x20000378

080060c0 <cliLineChange.constprop.0>:
void cliLineChange(cli_t *p_cli, int8_t key_up)
 80060c0:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->hist_line_count == 0)
 80060c2:	4c25      	ldr	r4, [pc, #148]	@ (8006158 <cliLineChange.constprop.0+0x98>)
void cliLineChange(cli_t *p_cli, int8_t key_up)
 80060c4:	4605      	mov	r5, r0
  if (p_cli->hist_line_count == 0)
 80060c6:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d03f      	beq.n	800614e <cliLineChange.constprop.0+0x8e>
  if (p_cli->line.cursor > 0)
 80060ce:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 80060d2:	b11a      	cbz	r2, 80060dc <cliLineChange.constprop.0+0x1c>
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80060d4:	4921      	ldr	r1, [pc, #132]	@ (800615c <cliLineChange.constprop.0+0x9c>)
 80060d6:	7820      	ldrb	r0, [r4, #0]
 80060d8:	f000 fd48 	bl	8006b6c <uartPrintf>
  if (p_cli->line.count > 0)
 80060dc:	f894 2246 	ldrb.w	r2, [r4, #582]	@ 0x246
 80060e0:	b11a      	cbz	r2, 80060ea <cliLineChange.constprop.0+0x2a>
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 80060e2:	491f      	ldr	r1, [pc, #124]	@ (8006160 <cliLineChange.constprop.0+0xa0>)
 80060e4:	7820      	ldrb	r0, [r4, #0]
 80060e6:	f000 fd41 	bl	8006b6c <uartPrintf>
  if (key_up == true)
 80060ea:	2d01      	cmp	r5, #1
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80060ec:	f894 2197 	ldrb.w	r2, [r4, #407]	@ 0x197
  if (key_up == true)
 80060f0:	d12e      	bne.n	8006150 <cliLineChange.constprop.0+0x90>
    if (p_cli->hist_line_new == true)
 80060f2:	f894 3194 	ldrb.w	r3, [r4, #404]	@ 0x194
 80060f6:	b11b      	cbz	r3, 8006100 <cliLineChange.constprop.0+0x40>
      p_cli->hist_line_i = p_cli->hist_line_last;
 80060f8:	f894 3196 	ldrb.w	r3, [r4, #406]	@ 0x196
 80060fc:	f884 3195 	strb.w	r3, [r4, #405]	@ 0x195
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8006100:	f994 3195 	ldrsb.w	r3, [r4, #405]	@ 0x195
 8006104:	4413      	add	r3, r2
 8006106:	3b01      	subs	r3, #1
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8006108:	fb93 f1f2 	sdiv	r1, r3, r2
 800610c:	fb02 3311 	mls	r3, r2, r1, r3
 8006110:	b25a      	sxtb	r2, r3
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8006112:	f884 2195 	strb.w	r2, [r4, #405]	@ 0x195
  p_cli->line = p_cli->line_buf[change_i];
 8006116:	2223      	movs	r2, #35	@ 0x23
    change_i = p_cli->hist_line_i;
 8006118:	b2db      	uxtb	r3, r3
  p_cli->line = p_cli->line_buf[change_i];
 800611a:	fb02 4303 	mla	r3, r2, r3, r4
 800611e:	4d11      	ldr	r5, [pc, #68]	@ (8006164 <cliLineChange.constprop.0+0xa4>)
 8006120:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8006124:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006128:	462e      	mov	r6, r5
 800612a:	6810      	ldr	r0, [r2, #0]
 800612c:	6851      	ldr	r1, [r2, #4]
 800612e:	3208      	adds	r2, #8
 8006130:	c603      	stmia	r6!, {r0, r1}
 8006132:	429a      	cmp	r2, r3
 8006134:	4635      	mov	r5, r6
 8006136:	d1f7      	bne.n	8006128 <cliLineChange.constprop.0+0x68>
 8006138:	7893      	ldrb	r3, [r2, #2]
 800613a:	8811      	ldrh	r1, [r2, #0]
 800613c:	70b3      	strb	r3, [r6, #2]
 800613e:	8031      	strh	r1, [r6, #0]
  p_cli->line.cursor = p_cli->line.count;
 8006140:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 8006144:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
  p_cli->hist_line_new = false;
 8006148:	2300      	movs	r3, #0
 800614a:	f884 3194 	strb.w	r3, [r4, #404]	@ 0x194
}
 800614e:	bd70      	pop	{r4, r5, r6, pc}
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8006150:	f994 3195 	ldrsb.w	r3, [r4, #405]	@ 0x195
 8006154:	3301      	adds	r3, #1
 8006156:	e7d7      	b.n	8006108 <cliLineChange.constprop.0+0x48>
 8006158:	20000378 	.word	0x20000378
 800615c:	0800dcdb 	.word	0x0800dcdb
 8006160:	0800dce1 	.word	0x0800dce1
 8006164:	2000059c 	.word	0x2000059c

08006168 <cliOpen>:
{
 8006168:	b510      	push	{r4, lr}
  cli_node.ch = ch;
 800616a:	4c03      	ldr	r4, [pc, #12]	@ (8006178 <cliOpen+0x10>)
 800616c:	7020      	strb	r0, [r4, #0]
  cli_node.baud = baud;
 800616e:	6061      	str	r1, [r4, #4]
  cli_node.is_open = uartOpen(ch, baud);
 8006170:	f000 fc5c 	bl	8006a2c <uartOpen>
 8006174:	7220      	strb	r0, [r4, #8]
}
 8006176:	bd10      	pop	{r4, pc}
 8006178:	20000378 	.word	0x20000378

0800617c <cliOpenLog>:
{
 800617c:	b510      	push	{r4, lr}
  cli_node.log_ch = ch;
 800617e:	4c04      	ldr	r4, [pc, #16]	@ (8006190 <cliOpenLog+0x14>)
 8006180:	72a0      	strb	r0, [r4, #10]
  cli_node.log_baud = baud;
 8006182:	60e1      	str	r1, [r4, #12]
  ret = uartOpen(ch, baud);
 8006184:	f000 fc52 	bl	8006a2c <uartOpen>
  if (ret == true)
 8006188:	b108      	cbz	r0, 800618e <cliOpenLog+0x12>
    cli_node.is_log = true;
 800618a:	2301      	movs	r3, #1
 800618c:	7263      	strb	r3, [r4, #9]
}
 800618e:	bd10      	pop	{r4, pc}
 8006190:	20000378 	.word	0x20000378

08006194 <cliShowLog>:
{
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cli_node.is_log == true)
 8006196:	4b23      	ldr	r3, [pc, #140]	@ (8006224 <cliShowLog+0x90>)
{
 8006198:	4604      	mov	r4, r0
  if (cli_node.is_log == true)
 800619a:	7a5b      	ldrb	r3, [r3, #9]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d03f      	beq.n	8006220 <cliShowLog+0x8c>
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80061a0:	f890 2245 	ldrb.w	r2, [r0, #581]	@ 0x245
 80061a4:	4920      	ldr	r1, [pc, #128]	@ (8006228 <cliShowLog+0x94>)
 80061a6:	7a80      	ldrb	r0, [r0, #10]
 80061a8:	f000 fce0 	bl	8006b6c <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80061ac:	f894 2246 	ldrb.w	r2, [r4, #582]	@ 0x246
 80061b0:	491e      	ldr	r1, [pc, #120]	@ (800622c <cliShowLog+0x98>)
 80061b2:	7aa0      	ldrb	r0, [r4, #10]
 80061b4:	f000 fcda 	bl	8006b6c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80061b8:	f894 2244 	ldrb.w	r2, [r4, #580]	@ 0x244
 80061bc:	491c      	ldr	r1, [pc, #112]	@ (8006230 <cliShowLog+0x9c>)
 80061be:	7aa0      	ldrb	r0, [r4, #10]
 80061c0:	f000 fcd4 	bl	8006b6c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 80061c4:	491b      	ldr	r1, [pc, #108]	@ (8006234 <cliShowLog+0xa0>)
 80061c6:	f504 7209 	add.w	r2, r4, #548	@ 0x224
 80061ca:	7aa0      	ldrb	r0, [r4, #10]
 80061cc:	f000 fcce 	bl	8006b6c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80061d0:	f994 2195 	ldrsb.w	r2, [r4, #405]	@ 0x195
 80061d4:	4918      	ldr	r1, [pc, #96]	@ (8006238 <cliShowLog+0xa4>)
 80061d6:	7aa0      	ldrb	r0, [r4, #10]
 80061d8:	f000 fcc8 	bl	8006b6c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80061dc:	f894 2196 	ldrb.w	r2, [r4, #406]	@ 0x196
 80061e0:	4916      	ldr	r1, [pc, #88]	@ (800623c <cliShowLog+0xa8>)
 80061e2:	7aa0      	ldrb	r0, [r4, #10]
 80061e4:	f000 fcc2 	bl	8006b6c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80061e8:	f894 2197 	ldrb.w	r2, [r4, #407]	@ 0x197
 80061ec:	4914      	ldr	r1, [pc, #80]	@ (8006240 <cliShowLog+0xac>)
 80061ee:	7aa0      	ldrb	r0, [r4, #10]
 80061f0:	f000 fcbc 	bl	8006b6c <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80061f4:	2500      	movs	r5, #0
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80061f6:	4f13      	ldr	r7, [pc, #76]	@ (8006244 <cliShowLog+0xb0>)
 80061f8:	f504 76cc 	add.w	r6, r4, #408	@ 0x198
    for (int i=0; i<p_cli->hist_line_count; i++)
 80061fc:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8006200:	7aa0      	ldrb	r0, [r4, #10]
    for (int i=0; i<p_cli->hist_line_count; i++)
 8006202:	429d      	cmp	r5, r3
 8006204:	db04      	blt.n	8006210 <cliShowLog+0x7c>
}
 8006206:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    uartPrintf(p_cli->log_ch, "\n");
 800620a:	490f      	ldr	r1, [pc, #60]	@ (8006248 <cliShowLog+0xb4>)
 800620c:	f000 bcae 	b.w	8006b6c <uartPrintf>
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8006210:	4633      	mov	r3, r6
 8006212:	462a      	mov	r2, r5
 8006214:	4639      	mov	r1, r7
 8006216:	f000 fca9 	bl	8006b6c <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 800621a:	3501      	adds	r5, #1
 800621c:	3623      	adds	r6, #35	@ 0x23
 800621e:	e7ed      	b.n	80061fc <cliShowLog+0x68>
}
 8006220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006222:	bf00      	nop
 8006224:	20000378 	.word	0x20000378
 8006228:	0800dce7 	.word	0x0800dce7
 800622c:	0800dcf5 	.word	0x0800dcf5
 8006230:	0800dd03 	.word	0x0800dd03
 8006234:	0800dd11 	.word	0x0800dd11
 8006238:	0800dd1f 	.word	0x0800dd1f
 800623c:	0800dd2d 	.word	0x0800dd2d
 8006240:	0800dd3b 	.word	0x0800dd3b
 8006244:	0800dd49 	.word	0x0800dd49
 8006248:	0800dd76 	.word	0x0800dd76

0800624c <cliPrintf>:
{
 800624c:	b40f      	push	{r0, r1, r2, r3}
 800624e:	b513      	push	{r0, r1, r4, lr}
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8006250:	4c0a      	ldr	r4, [pc, #40]	@ (800627c <cliPrintf+0x30>)
{
 8006252:	ab04      	add	r3, sp, #16
 8006254:	f853 2b04 	ldr.w	r2, [r3], #4
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8006258:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800625c:	4620      	mov	r0, r4
  va_start (arg, fmt);
 800625e:	9301      	str	r3, [sp, #4]
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8006260:	f005 fc66 	bl	800bb30 <vsniprintf>
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8006264:	4621      	mov	r1, r4
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8006266:	4602      	mov	r2, r0
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8006268:	f814 0c11 	ldrb.w	r0, [r4, #-17]
 800626c:	f000 fc64 	bl	8006b38 <uartWrite>
}
 8006270:	b002      	add	sp, #8
 8006272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006276:	b004      	add	sp, #16
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000389 	.word	0x20000389

08006280 <cliShowList>:

  return ret;
}

void cliShowList(cli_args_t *args)
{
 8006280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  cli_t *p_cli = &cli_node;


  cliPrintf("\r\n");
 8006282:	480e      	ldr	r0, [pc, #56]	@ (80062bc <cliShowList+0x3c>)
 8006284:	f7ff ffe2 	bl	800624c <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8006288:	480d      	ldr	r0, [pc, #52]	@ (80062c0 <cliShowList+0x40>)
 800628a:	f7ff ffdf 	bl	800624c <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 800628e:	2500      	movs	r5, #0
 8006290:	4c0c      	ldr	r4, [pc, #48]	@ (80062c4 <cliShowList+0x44>)
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
    cliPrintf("\r\n");
 8006292:	4f0a      	ldr	r7, [pc, #40]	@ (80062bc <cliShowList+0x3c>)
  for (int i=0; i<p_cli->cmd_count; i++)
 8006294:	f5a4 7613 	sub.w	r6, r4, #588	@ 0x24c
 8006298:	f8b6 3248 	ldrh.w	r3, [r6, #584]	@ 0x248
 800629c:	42ab      	cmp	r3, r5
 800629e:	dc04      	bgt.n	80062aa <cliShowList+0x2a>
  }

  cliPrintf("-----------------------------\r\n");
}
 80062a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  cliPrintf("-----------------------------\r\n");
 80062a4:	4808      	ldr	r0, [pc, #32]	@ (80062c8 <cliShowList+0x48>)
 80062a6:	f7ff bfd1 	b.w	800624c <cliPrintf>
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80062aa:	4620      	mov	r0, r4
 80062ac:	f7ff ffce 	bl	800624c <cliPrintf>
    cliPrintf("\r\n");
 80062b0:	4638      	mov	r0, r7
 80062b2:	f7ff ffcb 	bl	800624c <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80062b6:	3501      	adds	r5, #1
 80062b8:	3414      	adds	r4, #20
 80062ba:	e7ed      	b.n	8006298 <cliShowList+0x18>
 80062bc:	0800dd75 	.word	0x0800dd75
 80062c0:	0800dd58 	.word	0x0800dd58
 80062c4:	200005c4 	.word	0x200005c4
 80062c8:	0800dd78 	.word	0x0800dd78

080062cc <cliMemoryDump>:
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80062cc:	8803      	ldrh	r3, [r0, #0]
{
 80062ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char **argv = args->argv;
 80062d2:	6844      	ldr	r4, [r0, #4]


  if(args->argc < 1)
 80062d4:	b92b      	cbnz	r3, 80062e2 <cliMemoryDump+0x16>
  {
    cliPrintf(">> md addr [size] \n");
 80062d6:	482b      	ldr	r0, [pc, #172]	@ (8006384 <cliMemoryDump+0xb8>)
      }
      cliPrintf("|\n   ");
    }
    addr++;
  }
}
 80062d8:	b003      	add	sp, #12
 80062da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cliPrintf(">> md addr [size] \n");
 80062de:	f7ff bfb5 	b.w	800624c <cliPrintf>
  if(argc > 1)
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d015      	beq.n	8006312 <cliMemoryDump+0x46>
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80062e6:	2200      	movs	r2, #0
 80062e8:	6860      	ldr	r0, [r4, #4]
 80062ea:	4611      	mov	r1, r2
 80062ec:	f005 fae2 	bl	800b8b4 <strtoul>
 80062f0:	4606      	mov	r6, r0
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80062f2:	2200      	movs	r2, #0
 80062f4:	6820      	ldr	r0, [r4, #0]
 80062f6:	4611      	mov	r1, r2
 80062f8:	f005 fadc 	bl	800b8b4 <strtoul>
 80062fc:	4604      	mov	r4, r0
  cliPrintf("\n   ");
 80062fe:	4822      	ldr	r0, [pc, #136]	@ (8006388 <cliMemoryDump+0xbc>)
 8006300:	f7ff ffa4 	bl	800624c <cliPrintf>
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8006304:	4627      	mov	r7, r4
  for (idx = 0; idx<size; idx++)
 8006306:	2500      	movs	r5, #0
 8006308:	42b5      	cmp	r5, r6
 800630a:	db04      	blt.n	8006316 <cliMemoryDump+0x4a>
}
 800630c:	b003      	add	sp, #12
 800630e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int idx, size = 16;
 8006312:	2610      	movs	r6, #16
 8006314:	e7ed      	b.n	80062f2 <cliMemoryDump+0x26>
    if((idx%4) == 0)
 8006316:	f015 0803 	ands.w	r8, r5, #3
 800631a:	d103      	bne.n	8006324 <cliMemoryDump+0x58>
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800631c:	4639      	mov	r1, r7
 800631e:	481b      	ldr	r0, [pc, #108]	@ (800638c <cliMemoryDump+0xc0>)
 8006320:	f7ff ff94 	bl	800624c <cliPrintf>
    cliPrintf(" 0x%08X", *(addr));
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	481a      	ldr	r0, [pc, #104]	@ (8006390 <cliMemoryDump+0xc4>)
 8006328:	f7ff ff90 	bl	800624c <cliPrintf>
    if ((idx%4) == 3)
 800632c:	f1b8 0f03 	cmp.w	r8, #3
 8006330:	d120      	bne.n	8006374 <cliMemoryDump+0xa8>
      cliPrintf ("  |");
 8006332:	4818      	ldr	r0, [pc, #96]	@ (8006394 <cliMemoryDump+0xc8>)
 8006334:	f7ff ff8a 	bl	800624c <cliPrintf>
            cliPrintf("%c", asc[i]);
 8006338:	f8df b05c 	ldr.w	fp, [pc, #92]	@ 8006398 <cliMemoryDump+0xcc>
 800633c:	f104 0910 	add.w	r9, r4, #16
        for (i=0;i<4;i++)
 8006340:	f04f 0a00 	mov.w	sl, #0
        memcpy((char *)asc, (char *)ascptr, 4);
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	f10d 0804 	add.w	r8, sp, #4
 800634a:	9301      	str	r3, [sp, #4]
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800634c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006350:	f1a1 0220 	sub.w	r2, r1, #32
 8006354:	2a5e      	cmp	r2, #94	@ 0x5e
 8006356:	d810      	bhi.n	800637a <cliMemoryDump+0xae>
            cliPrintf("%c", asc[i]);
 8006358:	4658      	mov	r0, fp
 800635a:	f7ff ff77 	bl	800624c <cliPrintf>
        for (i=0;i<4;i++)
 800635e:	f10a 0a01 	add.w	sl, sl, #1
 8006362:	f1ba 0f04 	cmp.w	sl, #4
 8006366:	d1f1      	bne.n	800634c <cliMemoryDump+0x80>
        ascptr+=1;
 8006368:	3404      	adds	r4, #4
      for (idx1= 0; idx1< 4; idx1++)
 800636a:	454c      	cmp	r4, r9
 800636c:	d1e8      	bne.n	8006340 <cliMemoryDump+0x74>
      cliPrintf("|\n   ");
 800636e:	480b      	ldr	r0, [pc, #44]	@ (800639c <cliMemoryDump+0xd0>)
 8006370:	f7ff ff6c 	bl	800624c <cliPrintf>
    addr++;
 8006374:	3704      	adds	r7, #4
  for (idx = 0; idx<size; idx++)
 8006376:	3501      	adds	r5, #1
 8006378:	e7c6      	b.n	8006308 <cliMemoryDump+0x3c>
            cliPrintf(".");
 800637a:	4809      	ldr	r0, [pc, #36]	@ (80063a0 <cliMemoryDump+0xd4>)
 800637c:	f7ff ff66 	bl	800624c <cliPrintf>
 8006380:	e7ed      	b.n	800635e <cliMemoryDump+0x92>
 8006382:	bf00      	nop
 8006384:	0800dd98 	.word	0x0800dd98
 8006388:	0800ddc8 	.word	0x0800ddc8
 800638c:	0800ddac 	.word	0x0800ddac
 8006390:	0800ddb6 	.word	0x0800ddb6
 8006394:	0800ddbe 	.word	0x0800ddbe
 8006398:	0800ddc2 	.word	0x0800ddc2
 800639c:	0800ddc7 	.word	0x0800ddc7
 80063a0:	0800ddc5 	.word	0x0800ddc5

080063a4 <cliMain>:
{
 80063a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (cli_node.is_open != true)
 80063a8:	4ca7      	ldr	r4, [pc, #668]	@ (8006648 <cliMain+0x2a4>)
{
 80063aa:	b085      	sub	sp, #20
  if (cli_node.is_open != true)
 80063ac:	7a27      	ldrb	r7, [r4, #8]
 80063ae:	2f00      	cmp	r7, #0
 80063b0:	f000 8143 	beq.w	800663a <cliMain+0x296>
  if (uartAvailable(cli_node.ch) > 0)
 80063b4:	7820      	ldrb	r0, [r4, #0]
 80063b6:	f000 fb8f 	bl	8006ad8 <uartAvailable>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	f000 813d 	beq.w	800663a <cliMain+0x296>
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 80063c0:	7820      	ldrb	r0, [r4, #0]
 80063c2:	f000 fb9f 	bl	8006b04 <uartRead>
  if (p_cli->state == CLI_RX_IDLE)
 80063c6:	7c22      	ldrb	r2, [r4, #16]
 80063c8:	f88d 0007 	strb.w	r0, [sp, #7]
 80063cc:	2a00      	cmp	r2, #0
 80063ce:	f040 80ea 	bne.w	80065a6 <cliMain+0x202>
    switch(rx_data)
 80063d2:	281b      	cmp	r0, #27
 80063d4:	f000 812c 	beq.w	8006630 <cliMain+0x28c>
 80063d8:	d852      	bhi.n	8006480 <cliMain+0xdc>
 80063da:	2808      	cmp	r0, #8
 80063dc:	f000 80fc 	beq.w	80065d8 <cliMain+0x234>
 80063e0:	280d      	cmp	r0, #13
 80063e2:	d069      	beq.n	80064b8 <cliMain+0x114>
        if ((line->count + 1) < line->buf_len)
 80063e4:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 80063e8:	f894 2244 	ldrb.w	r2, [r4, #580]	@ 0x244
 80063ec:	1c59      	adds	r1, r3, #1
 80063ee:	4291      	cmp	r1, r2
 80063f0:	f280 8120 	bge.w	8006634 <cliMain+0x290>
          if (line->cursor == line->count)
 80063f4:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d119      	bne.n	8006430 <cliMain+0x8c>
            uartWrite(p_cli->ch, &rx_data, 1);
 80063fc:	2201      	movs	r2, #1
 80063fe:	f10d 0107 	add.w	r1, sp, #7
 8006402:	7820      	ldrb	r0, [r4, #0]
 8006404:	f000 fb98 	bl	8006b38 <uartWrite>
            line->buf[line->cursor] = rx_data;
 8006408:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 800640c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006410:	18a3      	adds	r3, r4, r2
            line->cursor++;
 8006412:	3201      	adds	r2, #1
 8006414:	f884 2245 	strb.w	r2, [r4, #581]	@ 0x245
            line->buf[line->count] = 0;
 8006418:	2200      	movs	r2, #0
            line->buf[line->cursor] = rx_data;
 800641a:	f883 1224 	strb.w	r1, [r3, #548]	@ 0x224
            line->count++;
 800641e:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 8006422:	3301      	adds	r3, #1
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f884 3246 	strb.w	r3, [r4, #582]	@ 0x246
            line->buf[line->count] = 0;
 800642a:	4423      	add	r3, r4
 800642c:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
          if (line->cursor < line->count)
 8006430:	f894 6245 	ldrb.w	r6, [r4, #581]	@ 0x245
 8006434:	f894 5246 	ldrb.w	r5, [r4, #582]	@ 0x246
 8006438:	42ae      	cmp	r6, r5
 800643a:	f080 80b4 	bcs.w	80065a6 <cliMain+0x202>
            mov_len = line->count - line->cursor;
 800643e:	1baa      	subs	r2, r5, r6
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	f505 7109 	add.w	r1, r5, #548	@ 0x224
 8006446:	f205 2025 	addw	r0, r5, #549	@ 0x225
 800644a:	1a89      	subs	r1, r1, r2
 800644c:	1a80      	subs	r0, r0, r2
 800644e:	4421      	add	r1, r4
 8006450:	4420      	add	r0, r4
 8006452:	f005 fb7b 	bl	800bb4c <memmove>
            line->buf[line->count] = 0;
 8006456:	2100      	movs	r1, #0
            line->buf[line->cursor] = rx_data;
 8006458:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800645c:	19a3      	adds	r3, r4, r6
 800645e:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
            line->count++;
 8006462:	1c6b      	adds	r3, r5, #1
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f884 3246 	strb.w	r3, [r4, #582]	@ 0x246
            line->buf[line->count] = 0;
 800646a:	4423      	add	r3, r4
            line->cursor++;
 800646c:	3601      	adds	r6, #1
            line->buf[line->count] = 0;
 800646e:	f883 1224 	strb.w	r1, [r3, #548]	@ 0x224
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8006472:	7820      	ldrb	r0, [r4, #0]
 8006474:	4975      	ldr	r1, [pc, #468]	@ (800664c <cliMain+0x2a8>)
            line->cursor++;
 8006476:	f884 6245 	strb.w	r6, [r4, #581]	@ 0x245
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 800647a:	f000 fb77 	bl	8006b6c <uartPrintf>
 800647e:	e092      	b.n	80065a6 <cliMain+0x202>
    switch(rx_data)
 8006480:	287f      	cmp	r0, #127	@ 0x7f
 8006482:	d1af      	bne.n	80063e4 <cliMain+0x40>
        if (line->cursor < line->count)
 8006484:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 8006488:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 800648c:	429a      	cmp	r2, r3
 800648e:	f080 80d1 	bcs.w	8006634 <cliMain+0x290>
          for (int i=1; i<mov_len; i++)
 8006492:	2001      	movs	r0, #1
          mov_len = line->count - line->cursor;
 8006494:	1a99      	subs	r1, r3, r2
 8006496:	f502 7209 	add.w	r2, r2, #548	@ 0x224
 800649a:	b2c9      	uxtb	r1, r1
          for (int i=1; i<mov_len; i++)
 800649c:	4422      	add	r2, r4
 800649e:	4288      	cmp	r0, r1
 80064a0:	f2c0 8095 	blt.w	80065ce <cliMain+0x22a>
          line->buf[line->count] = 0;
 80064a4:	2200      	movs	r2, #0
          line->count--;
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	f884 3246 	strb.w	r3, [r4, #582]	@ 0x246
          line->buf[line->count] = 0;
 80064ae:	4423      	add	r3, r4
          uartPrintf(p_cli->ch, "\x1B[1P");
 80064b0:	4967      	ldr	r1, [pc, #412]	@ (8006650 <cliMain+0x2ac>)
          line->buf[line->count] = 0;
 80064b2:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
          uartPrintf(p_cli->ch, "\x1B[1P");
 80064b6:	e073      	b.n	80065a0 <cliMain+0x1fc>
        if (line->count > 0)
 80064b8:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d063      	beq.n	8006588 <cliMain+0x1e4>
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 80064c0:	2323      	movs	r3, #35	@ 0x23
 80064c2:	f894 2196 	ldrb.w	r2, [r4, #406]	@ 0x196
 80064c6:	f504 7509 	add.w	r5, r4, #548	@ 0x224
 80064ca:	fb03 4302 	mla	r3, r3, r2, r4
 80064ce:	f504 7c11 	add.w	ip, r4, #580	@ 0x244
 80064d2:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80064d6:	462e      	mov	r6, r5
 80064d8:	ce03      	ldmia	r6!, {r0, r1}
 80064da:	4566      	cmp	r6, ip
 80064dc:	6018      	str	r0, [r3, #0]
 80064de:	6059      	str	r1, [r3, #4]
 80064e0:	4635      	mov	r5, r6
 80064e2:	f103 0308 	add.w	r3, r3, #8
 80064e6:	d1f6      	bne.n	80064d6 <cliMain+0x132>
 80064e8:	8830      	ldrh	r0, [r6, #0]
 80064ea:	78b1      	ldrb	r1, [r6, #2]
 80064ec:	8018      	strh	r0, [r3, #0]
 80064ee:	7099      	strb	r1, [r3, #2]
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 80064f0:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
  p_cli->argc = 0;
 80064f4:	2600      	movs	r6, #0
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 80064f6:	2b03      	cmp	r3, #3
    p_cli->hist_line_count++;
 80064f8:	bf9c      	itt	ls
 80064fa:	3301      	addls	r3, #1
 80064fc:	f884 3197 	strbls.w	r3, [r4, #407]	@ 0x197
  p_cli->hist_line_new  = true;
 8006500:	2301      	movs	r3, #1
  p_cli->hist_line_i    = p_cli->hist_line_last;
 8006502:	f884 2195 	strb.w	r2, [r4, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8006506:	3201      	adds	r2, #1
 8006508:	f002 0203 	and.w	r2, r2, #3
 800650c:	f884 2196 	strb.w	r2, [r4, #406]	@ 0x196
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8006510:	4950      	ldr	r1, [pc, #320]	@ (8006654 <cliMain+0x2b0>)
 8006512:	4851      	ldr	r0, [pc, #324]	@ (8006658 <cliMain+0x2b4>)
 8006514:	aa02      	add	r2, sp, #8
  p_cli->hist_line_new  = true;
 8006516:	f884 3194 	strb.w	r3, [r4, #404]	@ 0x194
  p_cli->argc = 0;
 800651a:	f8a4 6112 	strh.w	r6, [r4, #274]	@ 0x112
  argv[argc] = NULL;
 800651e:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8006522:	f005 fb6f 	bl	800bc04 <strtok_r>
 8006526:	4633      	mov	r3, r6
 8006528:	4605      	mov	r5, r0
    argv[argc++] = tok;
 800652a:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 800665c <cliMain+0x2b8>
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800652e:	f8df 9124 	ldr.w	r9, [pc, #292]	@ 8006654 <cliMain+0x2b0>
 8006532:	1c5e      	adds	r6, r3, #1
    argv[argc++] = tok;
 8006534:	b29b      	uxth	r3, r3
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8006536:	2d00      	cmp	r5, #0
 8006538:	d13d      	bne.n	80065b6 <cliMain+0x212>
  p_cli->argc = argc;
 800653a:	f8a4 3112 	strh.w	r3, [r4, #274]	@ 0x112
  if (argc > 0)
 800653e:	b31b      	cbz	r3, 8006588 <cliMain+0x1e4>
    cliPrintf("\r\n");
 8006540:	4847      	ldr	r0, [pc, #284]	@ (8006660 <cliMain+0x2bc>)
 8006542:	f7ff fe83 	bl	800624c <cliPrintf>
    cliToUpper(p_cli->argv[0]);
 8006546:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 800654a:	f7ff fd5e 	bl	800600a <cliToUpper>
    for (int i=0; i<p_cli->cmd_count; i++)
 800654e:	4e45      	ldr	r6, [pc, #276]	@ (8006664 <cliMain+0x2c0>)
 8006550:	f8b4 8248 	ldrh.w	r8, [r4, #584]	@ 0x248
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8006554:	f8d4 9114 	ldr.w	r9, [r4, #276]	@ 0x114
    for (int i=0; i<p_cli->cmd_count; i++)
 8006558:	4545      	cmp	r5, r8
 800655a:	da15      	bge.n	8006588 <cliMain+0x1e4>
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800655c:	4631      	mov	r1, r6
 800655e:	4648      	mov	r0, r9
 8006560:	f7fe fdf6 	bl	8005150 <strcmp>
 8006564:	3614      	adds	r6, #20
 8006566:	bb80      	cbnz	r0, 80065ca <cliMain+0x226>
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8006568:	f8b4 3112 	ldrh.w	r3, [r4, #274]	@ 0x112
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800656c:	483e      	ldr	r0, [pc, #248]	@ (8006668 <cliMain+0x2c4>)
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800656e:	3b01      	subs	r3, #1
 8006570:	f8a4 338c 	strh.w	r3, [r4, #908]	@ 0x38c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8006574:	2314      	movs	r3, #20
 8006576:	fb03 4305 	mla	r3, r3, r5, r4
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800657a:	f8c4 0390 	str.w	r0, [r4, #912]	@ 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800657e:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8006582:	f500 701d 	add.w	r0, r0, #628	@ 0x274
 8006586:	4798      	blx	r3
        line->count = 0;
 8006588:	2300      	movs	r3, #0
  uartPrintf(p_cli->ch, "\n\r");
 800658a:	4938      	ldr	r1, [pc, #224]	@ (800666c <cliMain+0x2c8>)
 800658c:	7820      	ldrb	r0, [r4, #0]
        line->count = 0;
 800658e:	f884 3246 	strb.w	r3, [r4, #582]	@ 0x246
        line->cursor = 0;
 8006592:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
        line->buf[0] = 0;
 8006596:	f884 3224 	strb.w	r3, [r4, #548]	@ 0x224
  uartPrintf(p_cli->ch, "\n\r");
 800659a:	f000 fae7 	bl	8006b6c <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800659e:	4934      	ldr	r1, [pc, #208]	@ (8006670 <cliMain+0x2cc>)
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80065a0:	7820      	ldrb	r0, [r4, #0]
 80065a2:	f000 fae3 	bl	8006b6c <uartPrintf>
  switch(p_cli->state)
 80065a6:	7c23      	ldrb	r3, [r4, #16]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d842      	bhi.n	8006634 <cliMain+0x290>
 80065ae:	e8df f003 	tbb	[pc, r3]
 80065b2:	483f      	.short	0x483f
 80065b4:	da63      	.short	0xda63
    argv[argc++] = tok;
 80065b6:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80065ba:	4649      	mov	r1, r9
 80065bc:	2000      	movs	r0, #0
 80065be:	aa02      	add	r2, sp, #8
 80065c0:	f005 fb20 	bl	800bc04 <strtok_r>
 80065c4:	4633      	mov	r3, r6
 80065c6:	4605      	mov	r5, r0
 80065c8:	e7b3      	b.n	8006532 <cliMain+0x18e>
    for (int i=0; i<p_cli->cmd_count; i++)
 80065ca:	3501      	adds	r5, #1
 80065cc:	e7c4      	b.n	8006558 <cliMain+0x1b4>
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80065ce:	7855      	ldrb	r5, [r2, #1]
          for (int i=1; i<mov_len; i++)
 80065d0:	3001      	adds	r0, #1
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80065d2:	f802 5b01 	strb.w	r5, [r2], #1
          for (int i=1; i<mov_len; i++)
 80065d6:	e762      	b.n	800649e <cliMain+0xfa>
        if (line->count > 0 && line->cursor > 0)
 80065d8:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
        if (line->cursor < line->count)
 80065dc:	f894 6245 	ldrb.w	r6, [r4, #581]	@ 0x245
        if (line->count > 0 && line->cursor > 0)
 80065e0:	b92b      	cbnz	r3, 80065ee <cliMain+0x24a>
        if (line->cursor > 0)
 80065e2:	b33e      	cbz	r6, 8006634 <cliMain+0x290>
          line->cursor--;
 80065e4:	1e73      	subs	r3, r6, #1
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80065e6:	4923      	ldr	r1, [pc, #140]	@ (8006674 <cliMain+0x2d0>)
          line->cursor--;
 80065e8:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80065ec:	e7d8      	b.n	80065a0 <cliMain+0x1fc>
        if (line->count > 0 && line->cursor > 0)
 80065ee:	b30e      	cbz	r6, 8006634 <cliMain+0x290>
          if (line->cursor == line->count)
 80065f0:	42b3      	cmp	r3, r6
 80065f2:	d106      	bne.n	8006602 <cliMain+0x25e>
            line->count--;
 80065f4:	1e73      	subs	r3, r6, #1
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	f884 3246 	strb.w	r3, [r4, #582]	@ 0x246
            line->buf[line->count] = 0;
 80065fc:	4423      	add	r3, r4
 80065fe:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
          if (line->cursor < line->count)
 8006602:	f894 5246 	ldrb.w	r5, [r4, #582]	@ 0x246
 8006606:	42b5      	cmp	r5, r6
 8006608:	d9ec      	bls.n	80065e4 <cliMain+0x240>
            mov_len = line->count - line->cursor;
 800660a:	1baa      	subs	r2, r5, r6
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800660c:	f506 7109 	add.w	r1, r6, #548	@ 0x224
 8006610:	f206 2023 	addw	r0, r6, #547	@ 0x223
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	4421      	add	r1, r4
 8006618:	4420      	add	r0, r4
 800661a:	f005 fa97 	bl	800bb4c <memmove>
            line->buf[line->count] = 0;
 800661e:	2300      	movs	r3, #0
            line->count--;
 8006620:	3d01      	subs	r5, #1
 8006622:	b2ed      	uxtb	r5, r5
 8006624:	f884 5246 	strb.w	r5, [r4, #582]	@ 0x246
            line->buf[line->count] = 0;
 8006628:	4425      	add	r5, r4
 800662a:	f885 3224 	strb.w	r3, [r5, #548]	@ 0x224
        if (line->cursor > 0)
 800662e:	e7d9      	b.n	80065e4 <cliMain+0x240>
      p_cli->state = CLI_RX_SP2;
 8006630:	2302      	movs	r3, #2
      p_cli->state = CLI_RX_IDLE;
 8006632:	7423      	strb	r3, [r4, #16]
  cliShowLog(p_cli);
 8006634:	4804      	ldr	r0, [pc, #16]	@ (8006648 <cliMain+0x2a4>)
 8006636:	f7ff fdad 	bl	8006194 <cliShowLog>
}
 800663a:	4638      	mov	r0, r7
 800663c:	b005      	add	sp, #20
 800663e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p_cli->state = CLI_RX_SP3;
 8006642:	2303      	movs	r3, #3
 8006644:	e7f5      	b.n	8006632 <cliMain+0x28e>
 8006646:	bf00      	nop
 8006648:	20000378 	.word	0x20000378
 800664c:	0800dde5 	.word	0x0800dde5
 8006650:	0800dde0 	.word	0x0800dde0
 8006654:	0800ddcd 	.word	0x0800ddcd
 8006658:	2000059c 	.word	0x2000059c
 800665c:	2000048c 	.word	0x2000048c
 8006660:	0800dd75 	.word	0x0800dd75
 8006664:	200005c4 	.word	0x200005c4
 8006668:	20000490 	.word	0x20000490
 800666c:	0800ddd4 	.word	0x0800ddd4
 8006670:	0800ddd7 	.word	0x0800ddd7
 8006674:	0800dddd 	.word	0x0800dddd
      p_cli->state = CLI_RX_IDLE;
 8006678:	2300      	movs	r3, #0
      if (rx_data == CLI_KEY_LEFT)
 800667a:	f89d 2007 	ldrb.w	r2, [sp, #7]
      p_cli->state = CLI_RX_IDLE;
 800667e:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_LEFT)
 8006680:	2a44      	cmp	r2, #68	@ 0x44
 8006682:	d110      	bne.n	80066a6 <cliMain+0x302>
        if (line->cursor > 0)
 8006684:	f894 3245 	ldrb.w	r3, [r4, #581]	@ 0x245
 8006688:	b38b      	cbz	r3, 80066ee <cliMain+0x34a>
          line->cursor--;
 800668a:	3b01      	subs	r3, #1
 800668c:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
          tx_buf[0] = 0x1B;
 8006690:	f645 331b 	movw	r3, #23323	@ 0x5b1b
          tx_buf[2] = rx_data;
 8006694:	f88d 200a 	strb.w	r2, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8006698:	7820      	ldrb	r0, [r4, #0]
 800669a:	2203      	movs	r2, #3
 800669c:	a902      	add	r1, sp, #8
          tx_buf[0] = 0x1B;
 800669e:	f8ad 3008 	strh.w	r3, [sp, #8]
          uartWrite(p_cli->ch, tx_buf, 3);
 80066a2:	f000 fa49 	bl	8006b38 <uartWrite>
      if (rx_data == CLI_KEY_RIGHT)
 80066a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80066aa:	2b43      	cmp	r3, #67	@ 0x43
 80066ac:	d114      	bne.n	80066d8 <cliMain+0x334>
        if (line->cursor < line->buf_len)
 80066ae:	f894 3245 	ldrb.w	r3, [r4, #581]	@ 0x245
 80066b2:	f894 2244 	ldrb.w	r2, [r4, #580]	@ 0x244
        uartWrite(p_cli->ch, tx_buf, 3);
 80066b6:	7820      	ldrb	r0, [r4, #0]
        if (line->cursor < line->buf_len)
 80066b8:	429a      	cmp	r2, r3
          line->cursor++;
 80066ba:	bf84      	itt	hi
 80066bc:	3301      	addhi	r3, #1
 80066be:	f884 3245 	strbhi.w	r3, [r4, #581]	@ 0x245
        tx_buf[0] = 0x1B;
 80066c2:	f645 331b 	movw	r3, #23323	@ 0x5b1b
 80066c6:	f8ad 3008 	strh.w	r3, [sp, #8]
        tx_buf[2] = rx_data;
 80066ca:	2343      	movs	r3, #67	@ 0x43
        uartWrite(p_cli->ch, tx_buf, 3);
 80066cc:	2203      	movs	r2, #3
 80066ce:	a902      	add	r1, sp, #8
        tx_buf[2] = rx_data;
 80066d0:	f88d 300a 	strb.w	r3, [sp, #10]
        uartWrite(p_cli->ch, tx_buf, 3);
 80066d4:	f000 fa30 	bl	8006b38 <uartWrite>
      if (rx_data == CLI_KEY_UP)
 80066d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80066dc:	2b41      	cmp	r3, #65	@ 0x41
 80066de:	d106      	bne.n	80066ee <cliMain+0x34a>
        cliLineChange(p_cli, true);
 80066e0:	2001      	movs	r0, #1
 80066e2:	f7ff fced 	bl	80060c0 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80066e6:	4921      	ldr	r1, [pc, #132]	@ (800676c <cliMain+0x3c8>)
 80066e8:	7820      	ldrb	r0, [r4, #0]
 80066ea:	f000 fa3f 	bl	8006b6c <uartPrintf>
      if (rx_data == CLI_KEY_DOWN)
 80066ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80066f2:	2b42      	cmp	r3, #66	@ 0x42
 80066f4:	d106      	bne.n	8006704 <cliMain+0x360>
        cliLineChange(p_cli, false);
 80066f6:	2000      	movs	r0, #0
 80066f8:	f7ff fce2 	bl	80060c0 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80066fc:	491b      	ldr	r1, [pc, #108]	@ (800676c <cliMain+0x3c8>)
 80066fe:	7820      	ldrb	r0, [r4, #0]
 8006700:	f000 fa34 	bl	8006b6c <uartPrintf>
      if (rx_data == CLI_KEY_HOME)
 8006704:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006708:	2b31      	cmp	r3, #49	@ 0x31
 800670a:	d10a      	bne.n	8006722 <cliMain+0x37e>
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800670c:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 8006710:	4917      	ldr	r1, [pc, #92]	@ (8006770 <cliMain+0x3cc>)
 8006712:	7820      	ldrb	r0, [r4, #0]
 8006714:	f000 fa2a 	bl	8006b6c <uartPrintf>
        line->cursor = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
        p_cli->state = CLI_RX_SP4;
 800671e:	2304      	movs	r3, #4
 8006720:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_END)
 8006722:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006726:	2b34      	cmp	r3, #52	@ 0x34
 8006728:	d184      	bne.n	8006634 <cliMain+0x290>
        if (line->cursor < line->count)
 800672a:	f894 3245 	ldrb.w	r3, [r4, #581]	@ 0x245
 800672e:	f894 2246 	ldrb.w	r2, [r4, #582]	@ 0x246
 8006732:	4293      	cmp	r3, r2
 8006734:	d205      	bcs.n	8006742 <cliMain+0x39e>
          mov_len = line->count - line->cursor;
 8006736:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8006738:	490e      	ldr	r1, [pc, #56]	@ (8006774 <cliMain+0x3d0>)
 800673a:	7820      	ldrb	r0, [r4, #0]
 800673c:	b292      	uxth	r2, r2
 800673e:	f000 fa15 	bl	8006b6c <uartPrintf>
        if (line->cursor > line->count)
 8006742:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 8006746:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 800674a:	429a      	cmp	r2, r3
 800674c:	d905      	bls.n	800675a <cliMain+0x3b6>
          mov_len = line->cursor - line->count;
 800674e:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8006750:	4907      	ldr	r1, [pc, #28]	@ (8006770 <cliMain+0x3cc>)
 8006752:	7820      	ldrb	r0, [r4, #0]
 8006754:	b292      	uxth	r2, r2
 8006756:	f000 fa09 	bl	8006b6c <uartPrintf>
        line->cursor = line->count;
 800675a:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 800675e:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
        p_cli->state = CLI_RX_SP4;
 8006762:	2304      	movs	r3, #4
 8006764:	e765      	b.n	8006632 <cliMain+0x28e>
      p_cli->state = CLI_RX_IDLE;
 8006766:	2300      	movs	r3, #0
 8006768:	e763      	b.n	8006632 <cliMain+0x28e>
 800676a:	bf00      	nop
 800676c:	2000059c 	.word	0x2000059c
 8006770:	0800dcdb 	.word	0x0800dcdb
 8006774:	0800ddf0 	.word	0x0800ddf0

08006778 <cliKeepLoop>:
{
 8006778:	b508      	push	{r3, lr}
  if (uartAvailable(p_cli->ch) == 0)
 800677a:	4b04      	ldr	r3, [pc, #16]	@ (800678c <cliKeepLoop+0x14>)
 800677c:	7818      	ldrb	r0, [r3, #0]
 800677e:	f000 f9ab 	bl	8006ad8 <uartAvailable>
}
 8006782:	fab0 f080 	clz	r0, r0
 8006786:	0940      	lsrs	r0, r0, #5
 8006788:	bd08      	pop	{r3, pc}
 800678a:	bf00      	nop
 800678c:	20000378 	.word	0x20000378

08006790 <cliAdd>:
{
 8006790:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8006792:	4d0e      	ldr	r5, [pc, #56]	@ (80067cc <cliAdd+0x3c>)
{
 8006794:	460e      	mov	r6, r1
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8006796:	f8b5 4248 	ldrh.w	r4, [r5, #584]	@ 0x248
 800679a:	2c0f      	cmp	r4, #15
 800679c:	d814      	bhi.n	80067c8 <cliAdd+0x38>
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800679e:	2314      	movs	r3, #20
 80067a0:	435c      	muls	r4, r3
 80067a2:	f504 7313 	add.w	r3, r4, #588	@ 0x24c
 80067a6:	442b      	add	r3, r5
 80067a8:	4601      	mov	r1, r0
 80067aa:	4618      	mov	r0, r3
 80067ac:	f005 faa1 	bl	800bcf2 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80067b0:	442c      	add	r4, r5
 80067b2:	f8c4 625c 	str.w	r6, [r4, #604]	@ 0x25c
  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80067b6:	f7ff fc28 	bl	800600a <cliToUpper>
  return ret;
 80067ba:	2001      	movs	r0, #1
  p_cli->cmd_count++;
 80067bc:	f8b5 3248 	ldrh.w	r3, [r5, #584]	@ 0x248
 80067c0:	3301      	adds	r3, #1
 80067c2:	f8a5 3248 	strh.w	r3, [r5, #584]	@ 0x248
}
 80067c6:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 80067c8:	2000      	movs	r0, #0
 80067ca:	e7fc      	b.n	80067c6 <cliAdd+0x36>
 80067cc:	20000378 	.word	0x20000378

080067d0 <cliInit>:
{
 80067d0:	b508      	push	{r3, lr}
  cli_node.cmd_args.getData  = cliArgsGetData;
 80067d2:	4911      	ldr	r1, [pc, #68]	@ (8006818 <cliInit+0x48>)
  cli_node.is_open = false;
 80067d4:	4b11      	ldr	r3, [pc, #68]	@ (800681c <cliInit+0x4c>)
 80067d6:	2200      	movs	r2, #0
  cli_node.cmd_args.getData  = cliArgsGetData;
 80067d8:	f8c3 1394 	str.w	r1, [r3, #916]	@ 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80067dc:	4910      	ldr	r1, [pc, #64]	@ (8006820 <cliInit+0x50>)
  cliAdd("help", cliShowList);
 80067de:	4811      	ldr	r0, [pc, #68]	@ (8006824 <cliInit+0x54>)
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80067e0:	f8c3 1398 	str.w	r1, [r3, #920]	@ 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80067e4:	4910      	ldr	r1, [pc, #64]	@ (8006828 <cliInit+0x58>)
  cli_node.is_open = false;
 80067e6:	811a      	strh	r2, [r3, #8]
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80067e8:	f8c3 139c 	str.w	r1, [r3, #924]	@ 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80067ec:	490f      	ldr	r1, [pc, #60]	@ (800682c <cliInit+0x5c>)
  cli_node.state   = CLI_RX_IDLE;
 80067ee:	741a      	strb	r2, [r3, #16]
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80067f0:	f8c3 13a0 	str.w	r1, [r3, #928]	@ 0x3a0
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 80067f4:	211f      	movs	r1, #31
 80067f6:	f8a3 1244 	strh.w	r1, [r3, #580]	@ 0x244
  cliAdd("help", cliShowList);
 80067fa:	490d      	ldr	r1, [pc, #52]	@ (8006830 <cliInit+0x60>)
  cli_node.hist_line_new   = false;
 80067fc:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
  p_cli->line.count   = 0;
 8006800:	f883 2246 	strb.w	r2, [r3, #582]	@ 0x246
  p_cli->line.buf[0]  = 0;
 8006804:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
  cliAdd("help", cliShowList);
 8006808:	f7ff ffc2 	bl	8006790 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 800680c:	4909      	ldr	r1, [pc, #36]	@ (8006834 <cliInit+0x64>)
 800680e:	480a      	ldr	r0, [pc, #40]	@ (8006838 <cliInit+0x68>)
 8006810:	f7ff ffbe 	bl	8006790 <cliAdd>
}
 8006814:	2001      	movs	r0, #1
 8006816:	bd08      	pop	{r3, pc}
 8006818:	0800609d 	.word	0x0800609d
 800681c:	20000378 	.word	0x20000378
 8006820:	0800607d 	.word	0x0800607d
 8006824:	0800ddf6 	.word	0x0800ddf6
 8006828:	08006035 	.word	0x08006035
 800682c:	08006051 	.word	0x08006051
 8006830:	08006281 	.word	0x08006281
 8006834:	080062cd 	.word	0x080062cd
 8006838:	0800ddfb 	.word	0x0800ddfb

0800683c <flashInit>:
static flash_tbl_t flash_tbl[FLASH_SECTOR_MAX];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 800683c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
	for (int i=0;i<FLASH_SECTOR_MAX;i++)
	{
		flash_tbl[i].addr =0x8000000 + i*1024;   //테이블 시트에 나와있은 시작 주소 0x8000000 에 sector 크기 1024(0x800U)
		flash_tbl[i].length = 1024;
 8006840:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006844:	4a05      	ldr	r2, [pc, #20]	@ (800685c <flashInit+0x20>)
	for (int i=0;i<FLASH_SECTOR_MAX;i++)
 8006846:	4906      	ldr	r1, [pc, #24]	@ (8006860 <flashInit+0x24>)
		flash_tbl[i].addr =0x8000000 + i*1024;   //테이블 시트에 나와있은 시작 주소 0x8000000 에 sector 크기 1024(0x800U)
 8006848:	6013      	str	r3, [r2, #0]
	for (int i=0;i<FLASH_SECTOR_MAX;i++)
 800684a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800684e:	428b      	cmp	r3, r1
		flash_tbl[i].length = 1024;
 8006850:	8090      	strh	r0, [r2, #4]
	for (int i=0;i<FLASH_SECTOR_MAX;i++)
 8006852:	f102 0208 	add.w	r2, r2, #8
 8006856:	d1f7      	bne.n	8006848 <flashInit+0xc>
	}

	return true;
}
 8006858:	2001      	movs	r0, #1
 800685a:	4770      	bx	lr
 800685c:	2000071c 	.word	0x2000071c
 8006860:	08010000 	.word	0x08010000

08006864 <ledOff.part.0>:
	 HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state); // Reset이 0
}
void ledOff(uint8_t ch)
{
	if(ch >=LED_MAX_CH) return;
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8006864:	4b02      	ldr	r3, [pc, #8]	@ (8006870 <ledOff.part.0+0xc>)
 8006866:	79da      	ldrb	r2, [r3, #7]
 8006868:	8899      	ldrh	r1, [r3, #4]
 800686a:	6818      	ldr	r0, [r3, #0]
 800686c:	f000 bdf2 	b.w	8007454 <HAL_GPIO_WritePin>
 8006870:	20000004 	.word	0x20000004

08006874 <ledInit>:
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006874:	2300      	movs	r3, #0
{
 8006876:	b510      	push	{r4, lr}
 8006878:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800687a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800687e:	9304      	str	r3, [sp, #16]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8006880:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006884:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8006888:	699a      	ldr	r2, [r3, #24]
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800688a:	2401      	movs	r4, #1
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 800688c:	f042 0208 	orr.w	r2, r2, #8
 8006890:	619a      	str	r2, [r3, #24]
 8006892:	699b      	ldr	r3, [r3, #24]
		 HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8006894:	a902      	add	r1, sp, #8
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8006896:	f003 0308 	and.w	r3, r3, #8
 800689a:	9301      	str	r3, [sp, #4]
 800689c:	9b01      	ldr	r3, [sp, #4]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800689e:	2302      	movs	r3, #2
 80068a0:	9305      	str	r3, [sp, #20]
		 GPIO_InitStruct.Pin = led_tbl[i].pin;
 80068a2:	4b08      	ldr	r3, [pc, #32]	@ (80068c4 <ledInit+0x50>)
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068a4:	9403      	str	r4, [sp, #12]
		 GPIO_InitStruct.Pin = led_tbl[i].pin;
 80068a6:	889a      	ldrh	r2, [r3, #4]
		 HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80068a8:	6818      	ldr	r0, [r3, #0]
		 GPIO_InitStruct.Pin = led_tbl[i].pin;
 80068aa:	9202      	str	r2, [sp, #8]
		 HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80068ac:	f000 fc90 	bl	80071d0 <HAL_GPIO_Init>
	if(ch >=LED_MAX_CH) return;
 80068b0:	f7ff ffd8 	bl	8006864 <ledOff.part.0>
	 cliAdd("led",cliLed);
 80068b4:	4904      	ldr	r1, [pc, #16]	@ (80068c8 <ledInit+0x54>)
 80068b6:	4805      	ldr	r0, [pc, #20]	@ (80068cc <ledInit+0x58>)
 80068b8:	f7ff ff6a 	bl	8006790 <cliAdd>
}
 80068bc:	4620      	mov	r0, r4
 80068be:	b006      	add	sp, #24
 80068c0:	bd10      	pop	{r4, pc}
 80068c2:	bf00      	nop
 80068c4:	20000004 	.word	0x20000004
 80068c8:	080068e5 	.word	0x080068e5
 80068cc:	0800ddfe 	.word	0x0800ddfe

080068d0 <ledToggle>:

}
void ledToggle(uint8_t ch)
{
	if(ch >=LED_MAX_CH) return;
 80068d0:	b920      	cbnz	r0, 80068dc <ledToggle+0xc>
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80068d2:	4b03      	ldr	r3, [pc, #12]	@ (80068e0 <ledToggle+0x10>)
 80068d4:	8899      	ldrh	r1, [r3, #4]
 80068d6:	6818      	ldr	r0, [r3, #0]
 80068d8:	f000 bdc1 	b.w	800745e <HAL_GPIO_TogglePin>
}
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	20000004 	.word	0x20000004

080068e4 <cliLed>:

void cliLed(cli_args_t *args)
{
	bool ret =false;

	if(args->argc == 3 && args->isStr(0,"toggle") == true)
 80068e4:	8803      	ldrh	r3, [r0, #0]
{
 80068e6:	b570      	push	{r4, r5, r6, lr}
	if(args->argc == 3 && args->isStr(0,"toggle") == true)
 80068e8:	2b03      	cmp	r3, #3
{
 80068ea:	4605      	mov	r5, r0
	if(args->argc == 3 && args->isStr(0,"toggle") == true)
 80068ec:	d122      	bne.n	8006934 <cliLed+0x50>
 80068ee:	6943      	ldr	r3, [r0, #20]
 80068f0:	4913      	ldr	r1, [pc, #76]	@ (8006940 <cliLed+0x5c>)
 80068f2:	2000      	movs	r0, #0
 80068f4:	4798      	blx	r3
 80068f6:	b1e8      	cbz	r0, 8006934 <cliLed+0x50>
	{
		uint8_t led_ch;
		uint32_t toggle_time;
		uint32_t pre_time;

		led_ch = (uint8_t)args->getData(1);
 80068f8:	68ab      	ldr	r3, [r5, #8]
 80068fa:	2001      	movs	r0, #1
 80068fc:	4798      	blx	r3
		toggle_time = (uint32_t)args->getData(2);
 80068fe:	68ab      	ldr	r3, [r5, #8]
		led_ch = (uint8_t)args->getData(1);
 8006900:	b2c4      	uxtb	r4, r0
		toggle_time = (uint32_t)args->getData(2);
 8006902:	2002      	movs	r0, #2
 8006904:	4798      	blx	r3
 8006906:	4606      	mov	r6, r0

		if(led_ch >0)
 8006908:	b10c      	cbz	r4, 800690e <cliLed+0x2a>
		{
			led_ch--;
 800690a:	3c01      	subs	r4, #1
 800690c:	b2e4      	uxtb	r4, r4
		}

		pre_time = millis();
 800690e:	f7ff fa0b 	bl	8005d28 <millis>
 8006912:	4605      	mov	r5, r0
		while(cliKeepLoop())
 8006914:	f7ff ff30 	bl	8006778 <cliKeepLoop>
 8006918:	b900      	cbnz	r0, 800691c <cliLed+0x38>

	if(ret !=true)
	{
		cliPrintf("led toggle ch[1~%d] time_ms\n",LED_MAX_CH);
	}
}
 800691a:	bd70      	pop	{r4, r5, r6, pc}
			if(millis()-pre_time >=toggle_time)
 800691c:	f7ff fa04 	bl	8005d28 <millis>
 8006920:	1b40      	subs	r0, r0, r5
 8006922:	4286      	cmp	r6, r0
 8006924:	d8f6      	bhi.n	8006914 <cliLed+0x30>
				pre_time = millis();
 8006926:	f7ff f9ff 	bl	8005d28 <millis>
 800692a:	4605      	mov	r5, r0
				ledToggle(led_ch);
 800692c:	4620      	mov	r0, r4
 800692e:	f7ff ffcf 	bl	80068d0 <ledToggle>
 8006932:	e7ef      	b.n	8006914 <cliLed+0x30>
		cliPrintf("led toggle ch[1~%d] time_ms\n",LED_MAX_CH);
 8006934:	2101      	movs	r1, #1
}
 8006936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cliPrintf("led toggle ch[1~%d] time_ms\n",LED_MAX_CH);
 800693a:	4802      	ldr	r0, [pc, #8]	@ (8006944 <cliLed+0x60>)
 800693c:	f7ff bc86 	b.w	800624c <cliPrintf>
 8006940:	0800de02 	.word	0x0800de02
 8006944:	0800de09 	.word	0x0800de09

08006948 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8006948:	b508      	push	{r3, lr}
	bool ret = true;

	//만약 Reset 핀이 눌렸다면
	//delay 500ms 안에 다시 빠르게 누르면 레지스터 값이 증가
	if(RCC->CSR & (1<<26))
 800694a:	4b0d      	ldr	r3, [pc, #52]	@ (8006980 <resetInit+0x38>)
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	015b      	lsls	r3, r3, #5
 8006950:	d50f      	bpl.n	8006972 <resetInit+0x2a>
	{
		rtcBackupRegWrite(1,rtcBackupRegRead(1)+1);
 8006952:	2001      	movs	r0, #1
 8006954:	f000 f83c 	bl	80069d0 <rtcBackupRegRead>
 8006958:	1c41      	adds	r1, r0, #1
 800695a:	2001      	movs	r0, #1
 800695c:	f000 f83e 	bl	80069dc <rtcBackupRegWrite>
		delay(500);
 8006960:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006964:	f7ff f9de 	bl	8005d24 <delay>
		reset_count = rtcBackupRegRead(1);
 8006968:	2001      	movs	r0, #1
 800696a:	f000 f831 	bl	80069d0 <rtcBackupRegRead>
 800696e:	4b05      	ldr	r3, [pc, #20]	@ (8006984 <resetInit+0x3c>)
 8006970:	6018      	str	r0, [r3, #0]
	}

	rtcBackupRegWrite(1,0);
 8006972:	2100      	movs	r1, #0
 8006974:	2001      	movs	r0, #1
 8006976:	f000 f831 	bl	80069dc <rtcBackupRegWrite>

	return ret;
}
 800697a:	2001      	movs	r0, #1
 800697c:	bd08      	pop	{r3, pc}
 800697e:	bf00      	nop
 8006980:	40021000 	.word	0x40021000
 8006984:	2000091c 	.word	0x2000091c

08006988 <rtcInit>:

bool rtcInit(void)
{
	bool ret = true;

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006988:	4b0e      	ldr	r3, [pc, #56]	@ (80069c4 <rtcInit+0x3c>)
{
 800698a:	b507      	push	{r0, r1, r2, lr}
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800698c:	699a      	ldr	r2, [r3, #24]

	hrtc.Instance = RTC;
 800698e:	480e      	ldr	r0, [pc, #56]	@ (80069c8 <rtcInit+0x40>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006990:	f042 0210 	orr.w	r2, r2, #16
 8006994:	619a      	str	r2, [r3, #24]
 8006996:	699b      	ldr	r3, [r3, #24]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8006998:	4a0c      	ldr	r2, [pc, #48]	@ (80069cc <rtcInit+0x44>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800699a:	f003 0310 	and.w	r3, r3, #16
 800699e:	9301      	str	r3, [sp, #4]
 80069a0:	9b01      	ldr	r3, [sp, #4]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80069a2:	f04f 33ff 	mov.w	r3, #4294967295
 80069a6:	e9c0 2300 	strd	r2, r3, [r0]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80069aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069ae:	6083      	str	r3, [r0, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80069b0:	f001 ffa8 	bl	8008904 <HAL_RTC_Init>
 80069b4:	b108      	cbz	r0, 80069ba <rtcInit+0x32>
	{
	   Error_Handler();
 80069b6:	f7ff fa39 	bl	8005e2c <Error_Handler>
	}


	return ret;
}
 80069ba:	2001      	movs	r0, #1
 80069bc:	b003      	add	sp, #12
 80069be:	f85d fb04 	ldr.w	pc, [sp], #4
 80069c2:	bf00      	nop
 80069c4:	40021000 	.word	0x40021000
 80069c8:	20000920 	.word	0x20000920
 80069cc:	40002800 	.word	0x40002800

080069d0 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 80069d0:	4601      	mov	r1, r0
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 80069d2:	4801      	ldr	r0, [pc, #4]	@ (80069d8 <rtcBackupRegRead+0x8>)
 80069d4:	f001 bfe4 	b.w	80089a0 <HAL_RTCEx_BKUPRead>
 80069d8:	20000920 	.word	0x20000920

080069dc <rtcBackupRegWrite>:
}


void rtcBackupRegWrite(uint32_t index,uint32_t data)
{
 80069dc:	460a      	mov	r2, r1
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80069de:	4601      	mov	r1, r0
 80069e0:	4801      	ldr	r0, [pc, #4]	@ (80069e8 <rtcBackupRegWrite+0xc>)
 80069e2:	f001 bfd5 	b.w	8008990 <HAL_RTCEx_BKUPWrite>
 80069e6:	bf00      	nop
 80069e8:	20000920 	.word	0x20000920

080069ec <HAL_RTC_MspInit>:




void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80069ec:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 80069ee:	4b0b      	ldr	r3, [pc, #44]	@ (8006a1c <HAL_RTC_MspInit+0x30>)
 80069f0:	6802      	ldr	r2, [r0, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d10f      	bne.n	8006a16 <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80069f6:	f001 fbdf 	bl	80081b8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80069fa:	4b09      	ldr	r3, [pc, #36]	@ (8006a20 <HAL_RTC_MspInit+0x34>)
 80069fc:	69da      	ldr	r2, [r3, #28]
 80069fe:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8006a02:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006a04:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a0c:	9301      	str	r3, [sp, #4]
 8006a0e:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8006a10:	4b04      	ldr	r3, [pc, #16]	@ (8006a24 <HAL_RTC_MspInit+0x38>)
 8006a12:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006a16:	b003      	add	sp, #12
 8006a18:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a1c:	40002800 	.word	0x40002800
 8006a20:	40021000 	.word	0x40021000
 8006a24:	42420000 	.word	0x42420000

08006a28 <uartInit>:
	{
		is_open[i] = false;
	}

	return true;
}
 8006a28:	2001      	movs	r0, #1
 8006a2a:	4770      	bx	lr

08006a2c <uartOpen>:

bool     uartOpen(uint8_t ch, uint32_t baud)
{
 8006a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bool ret = false;


	switch(ch)
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d041      	beq.n	8006ab6 <uartOpen+0x8a>
 8006a32:	2801      	cmp	r0, #1
 8006a34:	d12a      	bne.n	8006a8c <uartOpen+0x60>
		is_open[ch] = true;
		ret = true;
		break;

	case _DEF_UART2:
			huart1.Instance          = USART1;
 8006a36:	4c21      	ldr	r4, [pc, #132]	@ (8006abc <uartOpen+0x90>)
 8006a38:	4b21      	ldr	r3, [pc, #132]	@ (8006ac0 <uartOpen+0x94>)
		  huart1.Init.BaudRate     = baud;
		  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8006a3a:	2500      	movs	r5, #0
		  huart1.Init.BaudRate     = baud;
 8006a3c:	e9c4 3100 	strd	r3, r1, [r4]
		  huart1.Init.StopBits     = UART_STOPBITS_1;
		  huart1.Init.Parity       = UART_PARITY_NONE;
		  huart1.Init.Mode         = UART_MODE_TX_RX;
 8006a40:	230c      	movs	r3, #12
		  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
		  huart1.Init.OverSampling = UART_OVERSAMPLING_16;

		  qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8006a42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a46:	491f      	ldr	r1, [pc, #124]	@ (8006ac4 <uartOpen+0x98>)
 8006a48:	481f      	ldr	r0, [pc, #124]	@ (8006ac8 <uartOpen+0x9c>)
		  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8006a4a:	e9c4 3505 	strd	r3, r5, [r4, #20]
		  huart1.Init.StopBits     = UART_STOPBITS_1;
 8006a4e:	e9c4 5502 	strd	r5, r5, [r4, #8]
		  huart1.Init.Parity       = UART_PARITY_NONE;
 8006a52:	6125      	str	r5, [r4, #16]
		  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a54:	61e5      	str	r5, [r4, #28]
		  qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8006a56:	f7ff faae 	bl	8005fb6 <qbufferCreate>

		  __HAL_RCC_DMA1_CLK_ENABLE();
 8006a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8006acc <uartOpen+0xa0>)
		  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006a5c:	4629      	mov	r1, r5
		  __HAL_RCC_DMA1_CLK_ENABLE();
 8006a5e:	695a      	ldr	r2, [r3, #20]
		  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006a60:	200f      	movs	r0, #15
		  __HAL_RCC_DMA1_CLK_ENABLE();
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	615a      	str	r2, [r3, #20]
 8006a68:	695b      	ldr	r3, [r3, #20]
		  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006a6a:	462a      	mov	r2, r5
		  __HAL_RCC_DMA1_CLK_ENABLE();
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	9b01      	ldr	r3, [sp, #4]
		  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006a74:	f000 f9b8 	bl	8006de8 <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8006a78:	200f      	movs	r0, #15
 8006a7a:	f000 f9e5 	bl	8006e48 <HAL_NVIC_EnableIRQ>

		  HAL_UART_DeInit(&huart1);
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f002 f85f 	bl	8008b42 <HAL_UART_DeInit>

		  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006a84:	4620      	mov	r0, r4
 8006a86:	f002 f82d 	bl	8008ae4 <HAL_UART_Init>
 8006a8a:	b110      	cbz	r0, 8006a92 <uartOpen+0x66>
	bool ret = false;
 8006a8c:	2000      	movs	r0, #0
		break;
	}


	return ret;
}
 8006a8e:	b003      	add	sp, #12
 8006a90:	bd30      	pop	{r4, r5, pc}
		  	if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8006a92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a96:	490b      	ldr	r1, [pc, #44]	@ (8006ac4 <uartOpen+0x98>)
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f002 fb3f 	bl	800911c <HAL_UART_Receive_DMA>
 8006a9e:	fab0 f080 	clz	r0, r0
		  	qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8006aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <uartOpen+0xa4>)
 8006aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8006ad4 <uartOpen+0xa8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
		  	if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8006aa8:	0940      	lsrs	r0, r0, #5
		  	qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8006aaa:	6859      	ldr	r1, [r3, #4]
 8006aac:	6993      	ldr	r3, [r2, #24]
 8006aae:	1a5b      	subs	r3, r3, r1
		  	qbuffer[ch].out = qbuffer[ch].in;
 8006ab0:	e9c2 3304 	strd	r3, r3, [r2, #16]
 8006ab4:	e7eb      	b.n	8006a8e <uartOpen+0x62>
		ret = true;
 8006ab6:	2001      	movs	r0, #1
 8006ab8:	e7e9      	b.n	8006a8e <uartOpen+0x62>
 8006aba:	bf00      	nop
 8006abc:	20000978 	.word	0x20000978
 8006ac0:	40013800 	.word	0x40013800
 8006ac4:	200009c0 	.word	0x200009c0
 8006ac8:	20000ad0 	.word	0x20000ad0
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	20000934 	.word	0x20000934
 8006ad4:	20000ac0 	.word	0x20000ac0

08006ad8 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
	uint32_t ret = 0;

	switch(ch)
 8006ad8:	b118      	cbz	r0, 8006ae2 <uartAvailable+0xa>
 8006ada:	2801      	cmp	r0, #1
 8006adc:	d003      	beq.n	8006ae6 <uartAvailable+0xe>
			ret = qbufferAvailable(&qbuffer[ch]);
			break;
	}

	return ret;
}
 8006ade:	2000      	movs	r0, #0
 8006ae0:	4770      	bx	lr
			ret = cdcAvailable();
 8006ae2:	f003 bde5 	b.w	800a6b0 <cdcAvailable>
			qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 8006ae6:	4b05      	ldr	r3, [pc, #20]	@ (8006afc <uartAvailable+0x24>)
 8006ae8:	4805      	ldr	r0, [pc, #20]	@ (8006b00 <uartAvailable+0x28>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	6983      	ldr	r3, [r0, #24]
 8006af0:	1a9b      	subs	r3, r3, r2
 8006af2:	f840 3f10 	str.w	r3, [r0, #16]!
			ret = qbufferAvailable(&qbuffer[ch]);
 8006af6:	f7ff ba7f 	b.w	8005ff8 <qbufferAvailable>
 8006afa:	bf00      	nop
 8006afc:	20000934 	.word	0x20000934
 8006b00:	20000ac0 	.word	0x20000ac0

08006b04 <uartRead>:

uint8_t  uartRead(uint8_t ch)
{
	uint8_t ret=0;
 8006b04:	2300      	movs	r3, #0
{
 8006b06:	b507      	push	{r0, r1, r2, lr}

	switch(ch)
 8006b08:	4602      	mov	r2, r0
	uint8_t ret=0;
 8006b0a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch(ch)
 8006b0e:	b130      	cbz	r0, 8006b1e <uartRead+0x1a>
 8006b10:	2801      	cmp	r0, #1
 8006b12:	d009      	beq.n	8006b28 <uartRead+0x24>
		qbufferRead(&qbuffer[_DEF_UART2],&ret,1);
		break;
	}

	return ret;
}
 8006b14:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006b18:	b003      	add	sp, #12
 8006b1a:	f85d fb04 	ldr.w	pc, [sp], #4
		ret = cdcRead();
 8006b1e:	f003 fdd9 	bl	800a6d4 <cdcRead>
 8006b22:	f88d 0007 	strb.w	r0, [sp, #7]
		break;
 8006b26:	e7f5      	b.n	8006b14 <uartRead+0x10>
		qbufferRead(&qbuffer[_DEF_UART2],&ret,1);
 8006b28:	f10d 0107 	add.w	r1, sp, #7
 8006b2c:	4801      	ldr	r0, [pc, #4]	@ (8006b34 <uartRead+0x30>)
 8006b2e:	f7ff fa49 	bl	8005fc4 <qbufferRead>
		break;
 8006b32:	e7ef      	b.n	8006b14 <uartRead+0x10>
 8006b34:	20000ad0 	.word	0x20000ad0

08006b38 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data,uint32_t length)
{
 8006b38:	4603      	mov	r3, r0
 8006b3a:	b510      	push	{r4, lr}
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	4614      	mov	r4, r2
	uint8_t ret=0;
	HAL_StatusTypeDef status;
	switch(ch)
 8006b40:	b11b      	cbz	r3, 8006b4a <uartWrite+0x12>
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d006      	beq.n	8006b54 <uartWrite+0x1c>
	uint8_t ret=0;
 8006b46:	2000      	movs	r0, #0
 8006b48:	e003      	b.n	8006b52 <uartWrite+0x1a>
	{
	case _DEF_UART1:
		ret = cdcWrite(p_data,length);
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	f003 fe4c 	bl	800a7e8 <cdcWrite>
 8006b50:	b2c0      	uxtb	r0, r0
			ret = length;
		}
		break;
	}
	return ret;
}
 8006b52:	bd10      	pop	{r4, pc}
		status = HAL_UART_Transmit(&huart1,p_data, length, 100);
 8006b54:	2364      	movs	r3, #100	@ 0x64
 8006b56:	4804      	ldr	r0, [pc, #16]	@ (8006b68 <uartWrite+0x30>)
 8006b58:	b292      	uxth	r2, r2
 8006b5a:	f002 f80c 	bl	8008b76 <HAL_UART_Transmit>
		if(status == HAL_OK)
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d1f1      	bne.n	8006b46 <uartWrite+0xe>
			ret = length;
 8006b62:	b2e0      	uxtb	r0, r4
 8006b64:	e7f5      	b.n	8006b52 <uartWrite+0x1a>
 8006b66:	bf00      	nop
 8006b68:	20000978 	.word	0x20000978

08006b6c <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8006b6c:	b40e      	push	{r1, r2, r3}
 8006b6e:	b510      	push	{r4, lr}
 8006b70:	b0c3      	sub	sp, #268	@ 0x10c
 8006b72:	ab45      	add	r3, sp, #276	@ 0x114
 8006b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b78:	4604      	mov	r4, r0
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
	len = vsnprintf(buf,256,fmt,args);
 8006b7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b7e:	a802      	add	r0, sp, #8
	va_start(args, fmt);
 8006b80:	9301      	str	r3, [sp, #4]
	len = vsnprintf(buf,256,fmt,args);
 8006b82:	f004 ffd5 	bl	800bb30 <vsniprintf>

	ret = uartWrite(ch,(uint8_t *)buf,len);
 8006b86:	a902      	add	r1, sp, #8
	len = vsnprintf(buf,256,fmt,args);
 8006b88:	4602      	mov	r2, r0
	ret = uartWrite(ch,(uint8_t *)buf,len);
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f7ff ffd4 	bl	8006b38 <uartWrite>

	va_end(args);


	return ret;
}
 8006b90:	b043      	add	sp, #268	@ 0x10c
 8006b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b96:	b003      	add	sp, #12
 8006b98:	4770      	bx	lr

08006b9a <HAL_UART_ErrorCallback>:





void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8006b9a:	4770      	bx	lr

08006b9c <HAL_UART_RxCpltCallback>:
  		qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2],1);

  		HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8006b9c:	4770      	bx	lr
	...

08006ba0 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006ba0:	b570      	push	{r4, r5, r6, lr}
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ba6:	2210      	movs	r2, #16
 8006ba8:	2100      	movs	r1, #0
 8006baa:	a802      	add	r0, sp, #8
 8006bac:	f004 ffe8 	bl	800bb80 <memset>
  if(uartHandle->Instance==USART1)
 8006bb0:	6832      	ldr	r2, [r6, #0]
 8006bb2:	4b25      	ldr	r3, [pc, #148]	@ (8006c48 <HAL_UART_MspInit+0xa8>)
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d144      	bne.n	8006c42 <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006bb8:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8006bbc:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bbe:	4823      	ldr	r0, [pc, #140]	@ (8006c4c <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8006bc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bc4:	619a      	str	r2, [r3, #24]
 8006bc6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bc8:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8006bca:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8006bce:	9200      	str	r2, [sp, #0]
 8006bd0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bd2:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bd4:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bd6:	f042 0204 	orr.w	r2, r2, #4
 8006bda:	619a      	str	r2, [r3, #24]
 8006bdc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bde:	f44f 7200 	mov.w	r2, #512	@ 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006be2:	f003 0304 	and.w	r3, r3, #4
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bea:	2302      	movs	r3, #2
 8006bec:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bf4:	f000 faec 	bl	80071d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bfc:	4813      	ldr	r0, [pc, #76]	@ (8006c4c <HAL_UART_MspInit+0xac>)
 8006bfe:	a902      	add	r1, sp, #8

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006c00:	4c13      	ldr	r4, [pc, #76]	@ (8006c50 <HAL_UART_MspInit+0xb0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c02:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c06:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c08:	f000 fae2 	bl	80071d0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006c0c:	4b11      	ldr	r3, [pc, #68]	@ (8006c54 <HAL_UART_MspInit+0xb4>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006c0e:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c10:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006c14:	2380      	movs	r3, #128	@ 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c16:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006c1a:	2320      	movs	r3, #32
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c1c:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006c1e:	e9c4 3506 	strd	r3, r5, [r4, #24]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c22:	6165      	str	r5, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006c24:	f000 f944 	bl	8006eb0 <HAL_DMA_Init>
 8006c28:	b108      	cbz	r0, 8006c2e <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8006c2a:	f7ff f8ff 	bl	8005e2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2025      	movs	r0, #37	@ 0x25
 8006c32:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006c34:	63f4      	str	r4, [r6, #60]	@ 0x3c
 8006c36:	6266      	str	r6, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006c38:	f000 f8d6 	bl	8006de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006c3c:	2025      	movs	r0, #37	@ 0x25
 8006c3e:	f000 f903 	bl	8006e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006c42:	b006      	add	sp, #24
 8006c44:	bd70      	pop	{r4, r5, r6, pc}
 8006c46:	bf00      	nop
 8006c48:	40013800 	.word	0x40013800
 8006c4c:	40010800 	.word	0x40010800
 8006c50:	20000934 	.word	0x20000934
 8006c54:	40020058 	.word	0x40020058

08006c58 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART1)
 8006c58:	6802      	ldr	r2, [r0, #0]
 8006c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c8c <HAL_UART_MspDeInit+0x34>)
{
 8006c5c:	b510      	push	{r4, lr}
  if(uartHandle->Instance==USART1)
 8006c5e:	429a      	cmp	r2, r3
{
 8006c60:	4604      	mov	r4, r0
  if(uartHandle->Instance==USART1)
 8006c62:	d111      	bne.n	8006c88 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8006c64:	4a0a      	ldr	r2, [pc, #40]	@ (8006c90 <HAL_UART_MspDeInit+0x38>)

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006c66:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 8006c6a:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006c6c:	4809      	ldr	r0, [pc, #36]	@ (8006c94 <HAL_UART_MspDeInit+0x3c>)
    __HAL_RCC_USART1_CLK_DISABLE();
 8006c6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c72:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006c74:	f000 fb80 	bl	8007378 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006c78:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006c7a:	f000 f949 	bl	8006f10 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8006c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006c82:	2025      	movs	r0, #37	@ 0x25
 8006c84:	f000 b8ee 	b.w	8006e64 <HAL_NVIC_DisableIRQ>
}
 8006c88:	bd10      	pop	{r4, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40013800 	.word	0x40013800
 8006c90:	40021000 	.word	0x40021000
 8006c94:	40010800 	.word	0x40010800

08006c98 <usbInit>:

#include "usb_device.h"


bool usbInit(void)
{
 8006c98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	bool ret = true;

	GPIO_InitTypeDef GPIO_InitStruct = {0};

	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  //open drain
 8006c9a:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8006c9e:	2311      	movs	r3, #17
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ca0:	2500      	movs	r5, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  //open drain
 8006ca2:	e9cd 6300 	strd	r6, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ca6:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ca8:	4c0e      	ldr	r4, [pc, #56]	@ (8006ce4 <usbInit+0x4c>)
 8006caa:	4669      	mov	r1, sp
 8006cac:	4620      	mov	r0, r4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cae:	9303      	str	r3, [sp, #12]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cb0:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cb2:	f000 fa8d 	bl	80071d0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET); //회로에 풀업이
 8006cb6:	462a      	mov	r2, r5
 8006cb8:	4631      	mov	r1, r6
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f000 fbca 	bl	8007454 <HAL_GPIO_WritePin>
	delay(200);
 8006cc0:	20c8      	movs	r0, #200	@ 0xc8
 8006cc2:	f7ff f82f 	bl	8005d24 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_SET);
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 fbc2 	bl	8007454 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	4669      	mov	r1, sp
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cd4:	9501      	str	r5, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cd6:	f000 fa7b 	bl	80071d0 <HAL_GPIO_Init>


 MX_USB_DEVICE_Init();
 8006cda:	f003 fc7b 	bl	800a5d4 <MX_USB_DEVICE_Init>

	return ret;
}
 8006cde:	2001      	movs	r0, #1
 8006ce0:	b004      	add	sp, #16
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	40010800 	.word	0x40010800

08006ce8 <hwInit>:




void hwInit(void)
{
 8006ce8:	b508      	push	{r3, lr}
	bspInit();
 8006cea:	f7ff f86d 	bl	8005dc8 <bspInit>
	cliInit();
 8006cee:	f7ff fd6f 	bl	80067d0 <cliInit>
	rtcInit();
 8006cf2:	f7ff fe49 	bl	8006988 <rtcInit>
	resetInit();
 8006cf6:	f7ff fe27 	bl	8006948 <resetInit>
	ledInit();
 8006cfa:	f7ff fdbb 	bl	8006874 <ledInit>
	usbInit();
 8006cfe:	f7ff ffcb 	bl	8006c98 <usbInit>
	uartInit();
 8006d02:	f7ff fe91 	bl	8006a28 <uartInit>
	flashInit();

}
 8006d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	flashInit();
 8006d0a:	f7ff bd97 	b.w	800683c <flashInit>
	...

08006d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d10:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d12:	4b0e      	ldr	r3, [pc, #56]	@ (8006d4c <HAL_InitTick+0x3c>)
{
 8006d14:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d16:	781a      	ldrb	r2, [r3, #0]
 8006d18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d20:	4a0b      	ldr	r2, [pc, #44]	@ (8006d50 <HAL_InitTick+0x40>)
 8006d22:	6810      	ldr	r0, [r2, #0]
 8006d24:	fbb0 f0f3 	udiv	r0, r0, r3
 8006d28:	f000 f8ae 	bl	8006e88 <HAL_SYSTICK_Config>
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	b958      	cbnz	r0, 8006d48 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d30:	2d0f      	cmp	r5, #15
 8006d32:	d809      	bhi.n	8006d48 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d34:	4602      	mov	r2, r0
 8006d36:	4629      	mov	r1, r5
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	f000 f854 	bl	8006de8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d40:	4620      	mov	r0, r4
 8006d42:	4b04      	ldr	r3, [pc, #16]	@ (8006d54 <HAL_InitTick+0x44>)
 8006d44:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8006d46:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006d48:	2001      	movs	r0, #1
 8006d4a:	e7fc      	b.n	8006d46 <HAL_InitTick+0x36>
 8006d4c:	2000000c 	.word	0x2000000c
 8006d50:	20000000 	.word	0x20000000
 8006d54:	20000010 	.word	0x20000010

08006d58 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d58:	4a07      	ldr	r2, [pc, #28]	@ (8006d78 <HAL_Init+0x20>)
{
 8006d5a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d5c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d5e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d60:	f043 0310 	orr.w	r3, r3, #16
 8006d64:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d66:	f000 f82d 	bl	8006dc4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d6a:	200f      	movs	r0, #15
 8006d6c:	f7ff ffd0 	bl	8006d10 <HAL_InitTick>
  HAL_MspInit();
 8006d70:	f7ff f85e 	bl	8005e30 <HAL_MspInit>
}
 8006d74:	2000      	movs	r0, #0
 8006d76:	bd08      	pop	{r3, pc}
 8006d78:	40022000 	.word	0x40022000

08006d7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006d7c:	4a03      	ldr	r2, [pc, #12]	@ (8006d8c <HAL_IncTick+0x10>)
 8006d7e:	4b04      	ldr	r3, [pc, #16]	@ (8006d90 <HAL_IncTick+0x14>)
 8006d80:	6811      	ldr	r1, [r2, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	440b      	add	r3, r1
 8006d86:	6013      	str	r3, [r2, #0]
}
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	20000ae0 	.word	0x20000ae0
 8006d90:	2000000c 	.word	0x2000000c

08006d94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006d94:	4b01      	ldr	r3, [pc, #4]	@ (8006d9c <HAL_GetTick+0x8>)
 8006d96:	6818      	ldr	r0, [r3, #0]
}
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	20000ae0 	.word	0x20000ae0

08006da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006da4:	f7ff fff6 	bl	8006d94 <HAL_GetTick>
 8006da8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006daa:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006dac:	bf1e      	ittt	ne
 8006dae:	4b04      	ldrne	r3, [pc, #16]	@ (8006dc0 <HAL_Delay+0x20>)
 8006db0:	781b      	ldrbne	r3, [r3, #0]
 8006db2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006db4:	f7ff ffee 	bl	8006d94 <HAL_GetTick>
 8006db8:	1b43      	subs	r3, r0, r5
 8006dba:	42a3      	cmp	r3, r4
 8006dbc:	d3fa      	bcc.n	8006db4 <HAL_Delay+0x14>
  {
  }
}
 8006dbe:	bd38      	pop	{r3, r4, r5, pc}
 8006dc0:	2000000c 	.word	0x2000000c

08006dc4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006dc4:	4907      	ldr	r1, [pc, #28]	@ (8006de4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006dc6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006dc8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006dca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006dd2:	0412      	lsls	r2, r2, #16
 8006dd4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006de0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006de2:	4770      	bx	lr
 8006de4:	e000ed00 	.word	0xe000ed00

08006de8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006de8:	4b15      	ldr	r3, [pc, #84]	@ (8006e40 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006dea:	b530      	push	{r4, r5, lr}
 8006dec:	68dc      	ldr	r4, [r3, #12]
 8006dee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006df2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006df6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	bf28      	it	cs
 8006dfc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006dfe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e00:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e04:	bf94      	ite	ls
 8006e06:	2400      	movls	r4, #0
 8006e08:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e0a:	fa05 f303 	lsl.w	r3, r5, r3
 8006e0e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e12:	40a5      	lsls	r5, r4
 8006e14:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e18:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8006e1a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e1c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e20:	bfac      	ite	ge
 8006e22:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e26:	4a07      	ldrlt	r2, [pc, #28]	@ (8006e44 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e28:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	bfab      	itete	ge
 8006e30:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e34:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e38:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e3c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006e3e:	bd30      	pop	{r4, r5, pc}
 8006e40:	e000ed00 	.word	0xe000ed00
 8006e44:	e000ed14 	.word	0xe000ed14

08006e48 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	db07      	blt.n	8006e5c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	0941      	lsrs	r1, r0, #5
 8006e50:	4a03      	ldr	r2, [pc, #12]	@ (8006e60 <HAL_NVIC_EnableIRQ+0x18>)
 8006e52:	f000 001f 	and.w	r0, r0, #31
 8006e56:	4083      	lsls	r3, r0
 8006e58:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	e000e100 	.word	0xe000e100

08006e64 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006e64:	2800      	cmp	r0, #0
 8006e66:	db0c      	blt.n	8006e82 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e68:	2201      	movs	r2, #1
 8006e6a:	4906      	ldr	r1, [pc, #24]	@ (8006e84 <HAL_NVIC_DisableIRQ+0x20>)
 8006e6c:	0943      	lsrs	r3, r0, #5
 8006e6e:	f000 001f 	and.w	r0, r0, #31
 8006e72:	4082      	lsls	r2, r0
 8006e74:	3320      	adds	r3, #32
 8006e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006e7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006e7e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006e82:	4770      	bx	lr
 8006e84:	e000e100 	.word	0xe000e100

08006e88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e88:	3801      	subs	r0, #1
 8006e8a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8006e8e:	d20b      	bcs.n	8006ea8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e90:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e94:	21f0      	movs	r1, #240	@ 0xf0
 8006e96:	4a05      	ldr	r2, [pc, #20]	@ (8006eac <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e98:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e9a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e9e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ea0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ea2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ea4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ea6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006ea8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006eaa:	4770      	bx	lr
 8006eac:	e000ed00 	.word	0xe000ed00

08006eb0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006eb0:	4603      	mov	r3, r0
{
 8006eb2:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8006eb4:	b330      	cbz	r0, 8006f04 <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006eb6:	6801      	ldr	r1, [r0, #0]
 8006eb8:	2014      	movs	r0, #20
 8006eba:	4a13      	ldr	r2, [pc, #76]	@ (8006f08 <HAL_DMA_Init+0x58>)
 8006ebc:	440a      	add	r2, r1
 8006ebe:	fbb2 f2f0 	udiv	r2, r2, r0
 8006ec2:	0092      	lsls	r2, r2, #2
 8006ec4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8006ec6:	4a11      	ldr	r2, [pc, #68]	@ (8006f0c <HAL_DMA_Init+0x5c>)
 8006ec8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006ed0:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8006ed4:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ed6:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8006ed8:	6808      	ldr	r0, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006eda:	4322      	orrs	r2, r4
 8006edc:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006ede:	f36f 100d 	bfc	r0, #4, #10
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ee2:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ee4:	695c      	ldr	r4, [r3, #20]
 8006ee6:	4322      	orrs	r2, r4
 8006ee8:	699c      	ldr	r4, [r3, #24]
 8006eea:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8006eec:	69dc      	ldr	r4, [r3, #28]
 8006eee:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8006ef0:	4302      	orrs	r2, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006ef2:	600a      	str	r2, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ef4:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006ef6:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ef8:	6398      	str	r0, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006efa:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8006efe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 8006f02:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006f04:	2001      	movs	r0, #1
 8006f06:	e7fc      	b.n	8006f02 <HAL_DMA_Init+0x52>
 8006f08:	bffdfff8 	.word	0xbffdfff8
 8006f0c:	40020000 	.word	0x40020000

08006f10 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006f10:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006f12:	b308      	cbz	r0, 8006f58 <HAL_DMA_DeInit+0x48>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006f14:	6801      	ldr	r1, [r0, #0]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006f16:	4a11      	ldr	r2, [pc, #68]	@ (8006f5c <HAL_DMA_DeInit+0x4c>)
  __HAL_DMA_DISABLE(hdma);
 8006f18:	680b      	ldr	r3, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006f1a:	440a      	add	r2, r1
  __HAL_DMA_DISABLE(hdma);
 8006f1c:	f023 0301 	bic.w	r3, r3, #1
 8006f20:	600b      	str	r3, [r1, #0]
  hdma->Instance->CCR  = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	600b      	str	r3, [r1, #0]
  hdma->Instance->CNDTR = 0U;
 8006f26:	604b      	str	r3, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 8006f28:	608b      	str	r3, [r1, #8]
  hdma->Instance->CMAR = 0U;
 8006f2a:	60cb      	str	r3, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006f2c:	2114      	movs	r1, #20
 8006f2e:	fbb2 f2f1 	udiv	r2, r2, r1
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8006f32:	2101      	movs	r1, #1
  hdma->DmaBaseAddress = DMA1;
 8006f34:	4c0a      	ldr	r4, [pc, #40]	@ (8006f60 <HAL_DMA_DeInit+0x50>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006f36:	0092      	lsls	r2, r2, #2
 8006f38:	6402      	str	r2, [r0, #64]	@ 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8006f3a:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8006f3e:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8006f40:	6062      	str	r2, [r4, #4]
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f42:	6383      	str	r3, [r0, #56]	@ 0x38
  hdma->XferHalfCpltCallback = NULL;
 8006f44:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hdma->XferAbortCallback = NULL;
 8006f48:	e9c0 330c 	strd	r3, r3, [r0, #48]	@ 0x30

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006f4c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006f50:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8006f54:	4618      	mov	r0, r3
}
 8006f56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006f58:	2001      	movs	r0, #1
 8006f5a:	e7fc      	b.n	8006f56 <HAL_DMA_DeInit+0x46>
 8006f5c:	bffdfff8 	.word	0xbffdfff8
 8006f60:	40020000 	.word	0x40020000

08006f64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f64:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006f66:	f890 4020 	ldrb.w	r4, [r0, #32]
 8006f6a:	2c01      	cmp	r4, #1
 8006f6c:	d034      	beq.n	8006fd8 <HAL_DMA_Start_IT+0x74>
 8006f6e:	2401      	movs	r4, #1
 8006f70:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f74:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 8006f78:	2c01      	cmp	r4, #1
 8006f7a:	b2e5      	uxtb	r5, r4
 8006f7c:	f04f 0400 	mov.w	r4, #0
 8006f80:	d128      	bne.n	8006fd4 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f82:	2602      	movs	r6, #2
 8006f84:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f88:	6384      	str	r4, [r0, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f8a:	6804      	ldr	r4, [r0, #0]
 8006f8c:	6826      	ldr	r6, [r4, #0]
 8006f8e:	f026 0601 	bic.w	r6, r6, #1
 8006f92:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006f94:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8006f98:	40bd      	lsls	r5, r7
 8006f9a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006f9c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f9e:	6843      	ldr	r3, [r0, #4]
 8006fa0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8006fa2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006fa4:	bf0b      	itete	eq
 8006fa6:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8006fa8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006faa:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8006fac:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8006fae:	b14b      	cbz	r3, 8006fc4 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8006fb6:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006fb8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	f043 0301 	orr.w	r3, r3, #1
 8006fc0:	6023      	str	r3, [r4, #0]
}
 8006fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	f023 0304 	bic.w	r3, r3, #4
 8006fca:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	f043 030a 	orr.w	r3, r3, #10
 8006fd2:	e7f0      	b.n	8006fb6 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8006fd4:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8006fd8:	2002      	movs	r0, #2
 8006fda:	e7f2      	b.n	8006fc2 <HAL_DMA_Start_IT+0x5e>

08006fdc <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fdc:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 8006fe0:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fe2:	2a02      	cmp	r2, #2
 8006fe4:	d006      	beq.n	8006ff4 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8006fea:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2020 	strb.w	r2, [r3, #32]
}
 8006ff2:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ff4:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006ff6:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ff8:	6811      	ldr	r1, [r2, #0]
 8006ffa:	f021 010e 	bic.w	r1, r1, #14
 8006ffe:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007000:	6811      	ldr	r1, [r2, #0]
 8007002:	f021 0101 	bic.w	r1, r1, #1
 8007006:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007008:	2101      	movs	r1, #1
 800700a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800700c:	fa01 f202 	lsl.w	r2, r1, r2
 8007010:	6042      	str	r2, [r0, #4]
  return status; 
 8007012:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8007014:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 8007018:	e7e8      	b.n	8006fec <HAL_DMA_Abort+0x10>
	...

0800701c <HAL_DMA_Abort_IT>:
{  
 800701c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800701e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8007022:	2b02      	cmp	r3, #2
 8007024:	d003      	beq.n	800702e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007026:	2304      	movs	r3, #4
 8007028:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 800702a:	2001      	movs	r0, #1
}
 800702c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800702e:	6803      	ldr	r3, [r0, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	f022 020e 	bic.w	r2, r2, #14
 8007036:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	f022 0201 	bic.w	r2, r2, #1
 800703e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007040:	4a17      	ldr	r2, [pc, #92]	@ (80070a0 <HAL_DMA_Abort_IT+0x84>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d01f      	beq.n	8007086 <HAL_DMA_Abort_IT+0x6a>
 8007046:	3214      	adds	r2, #20
 8007048:	4293      	cmp	r3, r2
 800704a:	d01e      	beq.n	800708a <HAL_DMA_Abort_IT+0x6e>
 800704c:	3214      	adds	r2, #20
 800704e:	4293      	cmp	r3, r2
 8007050:	d01d      	beq.n	800708e <HAL_DMA_Abort_IT+0x72>
 8007052:	3214      	adds	r2, #20
 8007054:	4293      	cmp	r3, r2
 8007056:	d01d      	beq.n	8007094 <HAL_DMA_Abort_IT+0x78>
 8007058:	3214      	adds	r2, #20
 800705a:	4293      	cmp	r3, r2
 800705c:	d01d      	beq.n	800709a <HAL_DMA_Abort_IT+0x7e>
 800705e:	3214      	adds	r2, #20
 8007060:	4293      	cmp	r3, r2
 8007062:	bf14      	ite	ne
 8007064:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8007068:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 800706c:	4a0d      	ldr	r2, [pc, #52]	@ (80070a4 <HAL_DMA_Abort_IT+0x88>)
 800706e:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007070:	2301      	movs	r3, #1
 8007072:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8007076:	2300      	movs	r3, #0
 8007078:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800707c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800707e:	b103      	cbz	r3, 8007082 <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8007080:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8007082:	2000      	movs	r0, #0
 8007084:	e7d2      	b.n	800702c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007086:	2301      	movs	r3, #1
 8007088:	e7f0      	b.n	800706c <HAL_DMA_Abort_IT+0x50>
 800708a:	2310      	movs	r3, #16
 800708c:	e7ee      	b.n	800706c <HAL_DMA_Abort_IT+0x50>
 800708e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007092:	e7eb      	b.n	800706c <HAL_DMA_Abort_IT+0x50>
 8007094:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007098:	e7e8      	b.n	800706c <HAL_DMA_Abort_IT+0x50>
 800709a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800709e:	e7e5      	b.n	800706c <HAL_DMA_Abort_IT+0x50>
 80070a0:	40020008 	.word	0x40020008
 80070a4:	40020000 	.word	0x40020000

080070a8 <HAL_DMA_IRQHandler>:
{
 80070a8:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80070aa:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80070ac:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80070ae:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80070b0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80070b2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80070b4:	4095      	lsls	r5, r2
 80070b6:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80070b8:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80070ba:	d032      	beq.n	8007122 <HAL_DMA_IRQHandler+0x7a>
 80070bc:	074d      	lsls	r5, r1, #29
 80070be:	d530      	bpl.n	8007122 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80070c4:	bf5e      	ittt	pl
 80070c6:	681a      	ldrpl	r2, [r3, #0]
 80070c8:	f022 0204 	bicpl.w	r2, r2, #4
 80070cc:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80070ce:	4a3e      	ldr	r2, [pc, #248]	@ (80071c8 <HAL_DMA_IRQHandler+0x120>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d019      	beq.n	8007108 <HAL_DMA_IRQHandler+0x60>
 80070d4:	3214      	adds	r2, #20
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d018      	beq.n	800710c <HAL_DMA_IRQHandler+0x64>
 80070da:	3214      	adds	r2, #20
 80070dc:	4293      	cmp	r3, r2
 80070de:	d017      	beq.n	8007110 <HAL_DMA_IRQHandler+0x68>
 80070e0:	3214      	adds	r2, #20
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d017      	beq.n	8007116 <HAL_DMA_IRQHandler+0x6e>
 80070e6:	3214      	adds	r2, #20
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d017      	beq.n	800711c <HAL_DMA_IRQHandler+0x74>
 80070ec:	3214      	adds	r2, #20
 80070ee:	4293      	cmp	r3, r2
 80070f0:	bf14      	ite	ne
 80070f2:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 80070f6:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 80070fa:	4a34      	ldr	r2, [pc, #208]	@ (80071cc <HAL_DMA_IRQHandler+0x124>)
 80070fc:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80070fe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8007100:	2b00      	cmp	r3, #0
 8007102:	d05e      	beq.n	80071c2 <HAL_DMA_IRQHandler+0x11a>
}
 8007104:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8007106:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007108:	2304      	movs	r3, #4
 800710a:	e7f6      	b.n	80070fa <HAL_DMA_IRQHandler+0x52>
 800710c:	2340      	movs	r3, #64	@ 0x40
 800710e:	e7f4      	b.n	80070fa <HAL_DMA_IRQHandler+0x52>
 8007110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007114:	e7f1      	b.n	80070fa <HAL_DMA_IRQHandler+0x52>
 8007116:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800711a:	e7ee      	b.n	80070fa <HAL_DMA_IRQHandler+0x52>
 800711c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007120:	e7eb      	b.n	80070fa <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007122:	2502      	movs	r5, #2
 8007124:	4095      	lsls	r5, r2
 8007126:	4225      	tst	r5, r4
 8007128:	d035      	beq.n	8007196 <HAL_DMA_IRQHandler+0xee>
 800712a:	078d      	lsls	r5, r1, #30
 800712c:	d533      	bpl.n	8007196 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	0694      	lsls	r4, r2, #26
 8007132:	d406      	bmi.n	8007142 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	f022 020a 	bic.w	r2, r2, #10
 800713a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800713c:	2201      	movs	r2, #1
 800713e:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007142:	4a21      	ldr	r2, [pc, #132]	@ (80071c8 <HAL_DMA_IRQHandler+0x120>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d019      	beq.n	800717c <HAL_DMA_IRQHandler+0xd4>
 8007148:	3214      	adds	r2, #20
 800714a:	4293      	cmp	r3, r2
 800714c:	d018      	beq.n	8007180 <HAL_DMA_IRQHandler+0xd8>
 800714e:	3214      	adds	r2, #20
 8007150:	4293      	cmp	r3, r2
 8007152:	d017      	beq.n	8007184 <HAL_DMA_IRQHandler+0xdc>
 8007154:	3214      	adds	r2, #20
 8007156:	4293      	cmp	r3, r2
 8007158:	d017      	beq.n	800718a <HAL_DMA_IRQHandler+0xe2>
 800715a:	3214      	adds	r2, #20
 800715c:	4293      	cmp	r3, r2
 800715e:	d017      	beq.n	8007190 <HAL_DMA_IRQHandler+0xe8>
 8007160:	3214      	adds	r2, #20
 8007162:	4293      	cmp	r3, r2
 8007164:	bf14      	ite	ne
 8007166:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 800716a:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 800716e:	4a17      	ldr	r2, [pc, #92]	@ (80071cc <HAL_DMA_IRQHandler+0x124>)
 8007170:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8007172:	2300      	movs	r3, #0
 8007174:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8007178:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800717a:	e7c1      	b.n	8007100 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800717c:	2302      	movs	r3, #2
 800717e:	e7f6      	b.n	800716e <HAL_DMA_IRQHandler+0xc6>
 8007180:	2320      	movs	r3, #32
 8007182:	e7f4      	b.n	800716e <HAL_DMA_IRQHandler+0xc6>
 8007184:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007188:	e7f1      	b.n	800716e <HAL_DMA_IRQHandler+0xc6>
 800718a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800718e:	e7ee      	b.n	800716e <HAL_DMA_IRQHandler+0xc6>
 8007190:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007194:	e7eb      	b.n	800716e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007196:	2508      	movs	r5, #8
 8007198:	4095      	lsls	r5, r2
 800719a:	4225      	tst	r5, r4
 800719c:	d011      	beq.n	80071c2 <HAL_DMA_IRQHandler+0x11a>
 800719e:	0709      	lsls	r1, r1, #28
 80071a0:	d50f      	bpl.n	80071c2 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071a2:	6819      	ldr	r1, [r3, #0]
 80071a4:	f021 010e 	bic.w	r1, r1, #14
 80071a8:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80071aa:	2301      	movs	r3, #1
 80071ac:	fa03 f202 	lsl.w	r2, r3, r2
 80071b0:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071b2:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80071b4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80071b8:	2300      	movs	r3, #0
 80071ba:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80071be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80071c0:	e79e      	b.n	8007100 <HAL_DMA_IRQHandler+0x58>
}
 80071c2:	bc70      	pop	{r4, r5, r6}
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40020008 	.word	0x40020008
 80071cc:	40020000 	.word	0x40020000

080071d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80071d4:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80071d6:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 80071da:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80071dc:	f8df c184 	ldr.w	ip, [pc, #388]	@ 8007364 <HAL_GPIO_Init+0x194>
 80071e0:	4b61      	ldr	r3, [pc, #388]	@ (8007368 <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80071e2:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80071e6:	680a      	ldr	r2, [r1, #0]
 80071e8:	fa32 f506 	lsrs.w	r5, r2, r6
 80071ec:	d102      	bne.n	80071f4 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 80071ee:	b003      	add	sp, #12
 80071f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80071f4:	2501      	movs	r5, #1
 80071f6:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80071fa:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 80071fe:	ea37 0202 	bics.w	r2, r7, r2
 8007202:	d176      	bne.n	80072f2 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8007204:	684a      	ldr	r2, [r1, #4]
 8007206:	2a03      	cmp	r2, #3
 8007208:	d807      	bhi.n	800721a <HAL_GPIO_Init+0x4a>
 800720a:	3a01      	subs	r2, #1
 800720c:	2a02      	cmp	r2, #2
 800720e:	f200 8083 	bhi.w	8007318 <HAL_GPIO_Init+0x148>
 8007212:	e8df f002 	tbb	[pc, r2]
 8007216:	9691      	.short	0x9691
 8007218:	9c          	.byte	0x9c
 8007219:	00          	.byte	0x00
 800721a:	2a12      	cmp	r2, #18
 800721c:	f000 8094 	beq.w	8007348 <HAL_GPIO_Init+0x178>
 8007220:	d869      	bhi.n	80072f6 <HAL_GPIO_Init+0x126>
 8007222:	2a11      	cmp	r2, #17
 8007224:	f000 808a 	beq.w	800733c <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007228:	2dff      	cmp	r5, #255	@ 0xff
 800722a:	bf94      	ite	ls
 800722c:	4681      	movls	r9, r0
 800722e:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007230:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007234:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007238:	bf88      	it	hi
 800723a:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800723c:	fa0e fa02 	lsl.w	sl, lr, r2
 8007240:	ea27 070a 	bic.w	r7, r7, sl
 8007244:	fa04 f202 	lsl.w	r2, r4, r2
 8007248:	4317      	orrs	r7, r2
 800724a:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800724e:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8007252:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8007256:	d04c      	beq.n	80072f2 <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007258:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800725c:	f026 0703 	bic.w	r7, r6, #3
 8007260:	f042 0201 	orr.w	r2, r2, #1
 8007264:	f8cc 2018 	str.w	r2, [ip, #24]
 8007268:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800726c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8007270:	f002 0201 	and.w	r2, r2, #1
 8007274:	9201      	str	r2, [sp, #4]
 8007276:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800727a:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800727e:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007280:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8007284:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007286:	fa0e fb0a 	lsl.w	fp, lr, sl
 800728a:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800728e:	4a37      	ldr	r2, [pc, #220]	@ (800736c <HAL_GPIO_Init+0x19c>)
 8007290:	4290      	cmp	r0, r2
 8007292:	d060      	beq.n	8007356 <HAL_GPIO_Init+0x186>
 8007294:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007298:	4290      	cmp	r0, r2
 800729a:	d05e      	beq.n	800735a <HAL_GPIO_Init+0x18a>
 800729c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80072a0:	4290      	cmp	r0, r2
 80072a2:	d05c      	beq.n	800735e <HAL_GPIO_Init+0x18e>
 80072a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80072a8:	4290      	cmp	r0, r2
 80072aa:	bf14      	ite	ne
 80072ac:	2204      	movne	r2, #4
 80072ae:	2203      	moveq	r2, #3
 80072b0:	fa02 f20a 	lsl.w	r2, r2, sl
 80072b4:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80072b8:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80072ba:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80072bc:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80072c0:	bf14      	ite	ne
 80072c2:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80072c4:	43aa      	biceq	r2, r5
 80072c6:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80072c8:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80072ca:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80072ce:	bf14      	ite	ne
 80072d0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80072d2:	43aa      	biceq	r2, r5
 80072d4:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80072d6:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80072d8:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80072dc:	bf14      	ite	ne
 80072de:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80072e0:	43aa      	biceq	r2, r5
 80072e2:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80072e4:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80072e6:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80072ea:	bf14      	ite	ne
 80072ec:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80072ee:	43aa      	biceq	r2, r5
 80072f0:	601a      	str	r2, [r3, #0]
	position++;
 80072f2:	3601      	adds	r6, #1
 80072f4:	e777      	b.n	80071e6 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80072f6:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8007370 <HAL_GPIO_Init+0x1a0>
 80072fa:	454a      	cmp	r2, r9
 80072fc:	d00c      	beq.n	8007318 <HAL_GPIO_Init+0x148>
 80072fe:	d814      	bhi.n	800732a <HAL_GPIO_Init+0x15a>
 8007300:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8007304:	454a      	cmp	r2, r9
 8007306:	d007      	beq.n	8007318 <HAL_GPIO_Init+0x148>
 8007308:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 800730c:	454a      	cmp	r2, r9
 800730e:	d003      	beq.n	8007318 <HAL_GPIO_Init+0x148>
 8007310:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8007314:	454a      	cmp	r2, r9
 8007316:	d187      	bne.n	8007228 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007318:	688a      	ldr	r2, [r1, #8]
 800731a:	b1d2      	cbz	r2, 8007352 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800731c:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800731e:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8007322:	bf0c      	ite	eq
 8007324:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8007326:	6147      	strne	r7, [r0, #20]
 8007328:	e77e      	b.n	8007228 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800732a:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 8007374 <HAL_GPIO_Init+0x1a4>
 800732e:	454a      	cmp	r2, r9
 8007330:	d0f2      	beq.n	8007318 <HAL_GPIO_Init+0x148>
 8007332:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8007336:	e7ed      	b.n	8007314 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007338:	68cc      	ldr	r4, [r1, #12]
          break;
 800733a:	e775      	b.n	8007228 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800733c:	68cc      	ldr	r4, [r1, #12]
 800733e:	3404      	adds	r4, #4
          break;
 8007340:	e772      	b.n	8007228 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007342:	68cc      	ldr	r4, [r1, #12]
 8007344:	3408      	adds	r4, #8
          break;
 8007346:	e76f      	b.n	8007228 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007348:	68cc      	ldr	r4, [r1, #12]
 800734a:	340c      	adds	r4, #12
          break;
 800734c:	e76c      	b.n	8007228 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800734e:	2400      	movs	r4, #0
 8007350:	e76a      	b.n	8007228 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007352:	2404      	movs	r4, #4
 8007354:	e768      	b.n	8007228 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007356:	2200      	movs	r2, #0
 8007358:	e7aa      	b.n	80072b0 <HAL_GPIO_Init+0xe0>
 800735a:	2201      	movs	r2, #1
 800735c:	e7a8      	b.n	80072b0 <HAL_GPIO_Init+0xe0>
 800735e:	2202      	movs	r2, #2
 8007360:	e7a6      	b.n	80072b0 <HAL_GPIO_Init+0xe0>
 8007362:	bf00      	nop
 8007364:	40021000 	.word	0x40021000
 8007368:	40010400 	.word	0x40010400
 800736c:	40010800 	.word	0x40010800
 8007370:	10220000 	.word	0x10220000
 8007374:	10310000 	.word	0x10310000

08007378 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800737c:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8007380:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007382:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007386:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800738a:	eb00 030b 	add.w	r3, r0, fp
 800738e:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8007390:	4b2e      	ldr	r3, [pc, #184]	@ (800744c <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 8007392:	fa31 f402 	lsrs.w	r4, r1, r2
 8007396:	d102      	bne.n	800739e <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8007398:	b003      	add	sp, #12
 800739a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800739e:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 80073a2:	400f      	ands	r7, r1
 80073a4:	d049      	beq.n	800743a <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 80073a6:	f022 0403 	bic.w	r4, r2, #3
 80073aa:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80073ae:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80073b2:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 80073b6:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80073b8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80073bc:	fa08 f90c 	lsl.w	r9, r8, ip
 80073c0:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80073c4:	4d22      	ldr	r5, [pc, #136]	@ (8007450 <HAL_GPIO_DeInit+0xd8>)
 80073c6:	42a8      	cmp	r0, r5
 80073c8:	d039      	beq.n	800743e <HAL_GPIO_DeInit+0xc6>
 80073ca:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80073ce:	42a8      	cmp	r0, r5
 80073d0:	d037      	beq.n	8007442 <HAL_GPIO_DeInit+0xca>
 80073d2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80073d6:	42a8      	cmp	r0, r5
 80073d8:	d035      	beq.n	8007446 <HAL_GPIO_DeInit+0xce>
 80073da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80073de:	42a8      	cmp	r0, r5
 80073e0:	bf14      	ite	ne
 80073e2:	2504      	movne	r5, #4
 80073e4:	2503      	moveq	r5, #3
 80073e6:	fa05 f50c 	lsl.w	r5, r5, ip
 80073ea:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80073ec:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80073f0:	d10f      	bne.n	8007412 <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80073f2:	681d      	ldr	r5, [r3, #0]
 80073f4:	4035      	ands	r5, r6
 80073f6:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80073f8:	685d      	ldr	r5, [r3, #4]
 80073fa:	4035      	ands	r5, r6
 80073fc:	605d      	str	r5, [r3, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80073fe:	68dd      	ldr	r5, [r3, #12]
 8007400:	4035      	ands	r5, r6
 8007402:	60dd      	str	r5, [r3, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8007404:	689d      	ldr	r5, [r3, #8]
 8007406:	4035      	ands	r5, r6
 8007408:	609d      	str	r5, [r3, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800740a:	68a5      	ldr	r5, [r4, #8]
 800740c:	ea25 0509 	bic.w	r5, r5, r9
 8007410:	60a5      	str	r5, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007412:	2fff      	cmp	r7, #255	@ 0xff
 8007414:	bf94      	ite	ls
 8007416:	4607      	movls	r7, r0
 8007418:	9f01      	ldrhi	r7, [sp, #4]
 800741a:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800741e:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007420:	bf88      	it	hi
 8007422:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8007424:	fa08 fc04 	lsl.w	ip, r8, r4
 8007428:	ea25 050c 	bic.w	r5, r5, ip
 800742c:	fa0b f404 	lsl.w	r4, fp, r4
 8007430:	4325      	orrs	r5, r4
 8007432:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8007434:	68c4      	ldr	r4, [r0, #12]
 8007436:	4034      	ands	r4, r6
 8007438:	60c4      	str	r4, [r0, #12]
    position++;
 800743a:	3201      	adds	r2, #1
 800743c:	e7a9      	b.n	8007392 <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800743e:	2500      	movs	r5, #0
 8007440:	e7d1      	b.n	80073e6 <HAL_GPIO_DeInit+0x6e>
 8007442:	2501      	movs	r5, #1
 8007444:	e7cf      	b.n	80073e6 <HAL_GPIO_DeInit+0x6e>
 8007446:	2502      	movs	r5, #2
 8007448:	e7cd      	b.n	80073e6 <HAL_GPIO_DeInit+0x6e>
 800744a:	bf00      	nop
 800744c:	40010400 	.word	0x40010400
 8007450:	40010800 	.word	0x40010800

08007454 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007454:	b10a      	cbz	r2, 800745a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007456:	6101      	str	r1, [r0, #16]
  }
}
 8007458:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800745a:	0409      	lsls	r1, r1, #16
 800745c:	e7fb      	b.n	8007456 <HAL_GPIO_WritePin+0x2>

0800745e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800745e:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007460:	ea01 0203 	and.w	r2, r1, r3
 8007464:	ea21 0103 	bic.w	r1, r1, r3
 8007468:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800746c:	6101      	str	r1, [r0, #16]
}
 800746e:	4770      	bx	lr

08007470 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007472:	4604      	mov	r4, r0
 8007474:	b1e0      	cbz	r0, 80074b0 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007476:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 800747a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800747e:	b91b      	cbnz	r3, 8007488 <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007480:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007484:	f003 fa46 	bl	800a914 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007488:	2303      	movs	r3, #3
 800748a:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800748e:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007490:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 8007492:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8007494:	f855 0b04 	ldr.w	r0, [r5], #4
 8007498:	f001 fe61 	bl	800915e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800749c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80074a0:	6820      	ldr	r0, [r4, #0]
 80074a2:	f001 fe4c 	bl	800913e <USB_CoreInit>
 80074a6:	4601      	mov	r1, r0
 80074a8:	b128      	cbz	r0, 80074b6 <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074aa:	2302      	movs	r3, #2
 80074ac:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 80074b0:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80074b2:	4628      	mov	r0, r5
 80074b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80074b6:	6820      	ldr	r0, [r4, #0]
 80074b8:	f001 fe5b 	bl	8009172 <USB_SetCurrentMode>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d1f4      	bne.n	80074aa <HAL_PCD_Init+0x3a>
 80074c0:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 80074c2:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074c4:	7926      	ldrb	r6, [r4, #4]
 80074c6:	f104 0310 	add.w	r3, r4, #16
 80074ca:	b2c1      	uxtb	r1, r0
 80074cc:	428e      	cmp	r6, r1
 80074ce:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80074d2:	d818      	bhi.n	8007506 <HAL_PCD_Init+0x96>
 80074d4:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 80074d6:	460a      	mov	r2, r1
 80074d8:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 80074dc:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074de:	4286      	cmp	r6, r0
 80074e0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80074e4:	d81b      	bhi.n	800751e <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074e6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80074ea:	6820      	ldr	r0, [r4, #0]
 80074ec:	f001 fe43 	bl	8009176 <USB_DevInit>
 80074f0:	4605      	mov	r5, r0
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d1d9      	bne.n	80074aa <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 80074f6:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80074f8:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 80074fa:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80074fc:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8007500:	f002 f8ee 	bl	80096e0 <USB_DevDisconnect>
  return HAL_OK;
 8007504:	e7d5      	b.n	80074b2 <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007506:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 800750a:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 800750e:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007512:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007516:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800751a:	3001      	adds	r0, #1
 800751c:	e7d5      	b.n	80074ca <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800751e:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 8007522:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 8007526:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800752a:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800752e:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007532:	3101      	adds	r1, #1
 8007534:	e7d2      	b.n	80074dc <HAL_PCD_Init+0x6c>

08007536 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007536:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8007538:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 800753c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800753e:	2b01      	cmp	r3, #1
 8007540:	d010      	beq.n	8007564 <HAL_PCD_Start+0x2e>
 8007542:	2501      	movs	r5, #1
 8007544:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8007548:	6800      	ldr	r0, [r0, #0]
 800754a:	f001 fdff 	bl	800914c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800754e:	4629      	mov	r1, r5
 8007550:	4620      	mov	r0, r4
 8007552:	f003 fae6 	bl	800ab22 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8007556:	6820      	ldr	r0, [r4, #0]
 8007558:	f002 f8c0 	bl	80096dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800755c:	2000      	movs	r0, #0
 800755e:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8007562:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8007564:	2002      	movs	r0, #2
 8007566:	e7fc      	b.n	8007562 <HAL_PCD_Start+0x2c>

08007568 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007568:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800756a:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 800756e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007570:	2a01      	cmp	r2, #1
 8007572:	d00a      	beq.n	800758a <HAL_PCD_SetAddress+0x22>
 8007574:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8007576:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 8007578:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800757c:	6800      	ldr	r0, [r0, #0]
 800757e:	f002 f8a7 	bl	80096d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007582:	2000      	movs	r0, #0
 8007584:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8007588:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800758a:	2002      	movs	r0, #2
 800758c:	e7fc      	b.n	8007588 <HAL_PCD_SetAddress+0x20>
	...

08007590 <HAL_PCD_IRQHandler>:
{
 8007590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	4604      	mov	r4, r0
 8007596:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007598:	6800      	ldr	r0, [r0, #0]
 800759a:	f002 f8a3 	bl	80096e4 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800759e:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 80075a2:	f000 844f 	beq.w	8007e44 <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 80075a6:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80075a8:	4ec6      	ldr	r6, [pc, #792]	@ (80078c4 <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80075aa:	6820      	ldr	r0, [r4, #0]
 80075ac:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 80075b0:	041f      	lsls	r7, r3, #16
 80075b2:	d402      	bmi.n	80075ba <HAL_PCD_IRQHandler+0x2a>
}
 80075b4:	b005      	add	sp, #20
 80075b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80075ba:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 80075be:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 80075c2:	b299      	uxth	r1, r3
    if (epindex == 0U)
 80075c4:	f040 80c0 	bne.w	8007748 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80075c8:	f011 0110 	ands.w	r1, r1, #16
 80075cc:	d126      	bne.n	800761c <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80075ce:	8803      	ldrh	r3, [r0, #0]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	4033      	ands	r3, r6
 80075d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075d8:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80075da:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80075de:	7c22      	ldrb	r2, [r4, #16]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80075ea:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 80075ee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80075f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 80075f4:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80075f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80075f8:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 80075fa:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80075fc:	f003 f9b9 	bl	800a972 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007600:	7b63      	ldrb	r3, [r4, #13]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0d1      	beq.n	80075aa <HAL_PCD_IRQHandler+0x1a>
 8007606:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007608:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800760a:	2a00      	cmp	r2, #0
 800760c:	d1cd      	bne.n	80075aa <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800760e:	7b63      	ldrb	r3, [r4, #13]
 8007610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007614:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007618:	7362      	strb	r2, [r4, #13]
 800761a:	e7c6      	b.n	80075aa <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800761c:	8807      	ldrh	r7, [r0, #0]
 800761e:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007620:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 8007624:	d021      	beq.n	800766a <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007626:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800762a:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 800762e:	b29b      	uxth	r3, r3
 8007630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007634:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007638:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800763c:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8007640:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007644:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007648:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 800764c:	f002 fa95 	bl	8009b7a <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007650:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8007652:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007654:	8813      	ldrh	r3, [r2, #0]
 8007656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800765a:	051b      	lsls	r3, r3, #20
 800765c:	0d1b      	lsrs	r3, r3, #20
 800765e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007662:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8007664:	f003 f976 	bl	800a954 <HAL_PCD_SetupStageCallback>
 8007668:	e79f      	b.n	80075aa <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800766a:	0419      	lsls	r1, r3, #16
 800766c:	d59d      	bpl.n	80075aa <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800766e:	8803      	ldrh	r3, [r0, #0]
 8007670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007674:	051b      	lsls	r3, r3, #20
 8007676:	0d1b      	lsrs	r3, r3, #20
 8007678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767c:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800767e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007682:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8007686:	b29b      	uxth	r3, r3
 8007688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800768c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007690:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8007694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007698:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800769c:	b18b      	cbz	r3, 80076c2 <HAL_PCD_IRQHandler+0x132>
 800769e:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 80076a2:	b171      	cbz	r1, 80076c2 <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80076a4:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 80076a8:	f002 fa67 	bl	8009b7a <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80076ac:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 80076b0:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80076b4:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 80076b6:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80076b8:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 80076ba:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80076be:	f003 f94f 	bl	800a960 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80076c2:	6821      	ldr	r1, [r4, #0]
 80076c4:	880a      	ldrh	r2, [r1, #0]
 80076c6:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80076c8:	0512      	lsls	r2, r2, #20
 80076ca:	f53f af6e 	bmi.w	80075aa <HAL_PCD_IRQHandler+0x1a>
 80076ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80076d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076d6:	f43f af68 	beq.w	80075aa <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80076da:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 80076de:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 80076e2:	b292      	uxth	r2, r2
 80076e4:	5a83      	ldrh	r3, [r0, r2]
 80076e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ea:	5283      	strh	r3, [r0, r2]
 80076ec:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 80076f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80076f2:	d91d      	bls.n	8007730 <HAL_PCD_IRQHandler+0x1a0>
 80076f4:	095f      	lsrs	r7, r3, #5
 80076f6:	06db      	lsls	r3, r3, #27
 80076f8:	5a83      	ldrh	r3, [r0, r2]
 80076fa:	bf08      	it	eq
 80076fc:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8007700:	b29b      	uxth	r3, r3
 8007702:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8007706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800770a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800770e:	b29b      	uxth	r3, r3
 8007710:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007712:	880b      	ldrh	r3, [r1, #0]
 8007714:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800771c:	041b      	lsls	r3, r3, #16
 800771e:	0c1b      	lsrs	r3, r3, #16
 8007720:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8007724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800772c:	800b      	strh	r3, [r1, #0]
 800772e:	e73c      	b.n	80075aa <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007730:	b90b      	cbnz	r3, 8007736 <HAL_PCD_IRQHandler+0x1a6>
 8007732:	5a83      	ldrh	r3, [r0, r2]
 8007734:	e7e7      	b.n	8007706 <HAL_PCD_IRQHandler+0x176>
 8007736:	085f      	lsrs	r7, r3, #1
 8007738:	07db      	lsls	r3, r3, #31
 800773a:	5a83      	ldrh	r3, [r0, r2]
 800773c:	bf48      	it	mi
 800773e:	3701      	addmi	r7, #1
 8007740:	b29b      	uxth	r3, r3
 8007742:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8007746:	e7e2      	b.n	800770e <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007748:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800774c:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800774e:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007752:	f140 80f6 	bpl.w	8007942 <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007756:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 800775a:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800775e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007762:	051b      	lsls	r3, r3, #20
 8007764:	0d1b      	lsrs	r3, r3, #20
 8007766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800776a:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 800776e:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8007772:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 8007776:	b9bb      	cbnz	r3, 80077a8 <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007778:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800777c:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8007780:	b29b      	uxth	r3, r3
 8007782:	3306      	adds	r3, #6
 8007784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007788:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 800778c:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8007790:	f1b9 0f00 	cmp.w	r9, #0
 8007794:	f000 80ba 	beq.w	800790c <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007798:	464b      	mov	r3, r9
 800779a:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800779e:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 80077a2:	f002 f9ea 	bl	8009b7a <USB_ReadPMA>
 80077a6:	e0b1      	b.n	800790c <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 80077a8:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80077ac:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	f040 8089 	bne.w	80078c8 <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80077b6:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 80077ba:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 80077be:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80077c2:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 80077c6:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80077ca:	44d9      	add	r9, fp
 80077cc:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80077d0:	d03c      	beq.n	800784c <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80077d2:	f109 0902 	add.w	r9, r9, #2
 80077d6:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 80077da:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 80077de:	4599      	cmp	r9, r3
 80077e0:	d913      	bls.n	800780a <HAL_PCD_IRQHandler+0x27a>
 80077e2:	2300      	movs	r3, #0
 80077e4:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80077e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80077ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077f4:	041b      	lsls	r3, r3, #16
 80077f6:	0c1b      	lsrs	r3, r3, #16
 80077f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80077fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007804:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007808:	e005      	b.n	8007816 <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 800780a:	eba3 0309 	sub.w	r3, r3, r9
 800780e:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8007812:	2b00      	cmp	r3, #0
 8007814:	d0e8      	beq.n	80077e8 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007816:	f1bc 0f00 	cmp.w	ip, #0
 800781a:	d00d      	beq.n	8007838 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800781c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007820:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007828:	041b      	lsls	r3, r3, #16
 800782a:	0c1b      	lsrs	r3, r3, #16
 800782c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007830:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007834:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8007838:	f1b9 0f00 	cmp.w	r9, #0
 800783c:	d066      	beq.n	800790c <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800783e:	2128      	movs	r1, #40	@ 0x28
 8007840:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007844:	464b      	mov	r3, r9
 8007846:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 800784a:	e7a8      	b.n	800779e <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800784c:	f109 0906 	add.w	r9, r9, #6
 8007850:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8007854:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 8007858:	4599      	cmp	r9, r3
 800785a:	d912      	bls.n	8007882 <HAL_PCD_IRQHandler+0x2f2>
 800785c:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007860:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007864:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007868:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800786c:	041b      	lsls	r3, r3, #16
 800786e:	0c1b      	lsrs	r3, r3, #16
 8007870:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800787c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007880:	e005      	b.n	800788e <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 8007882:	eba3 0309 	sub.w	r3, r3, r9
 8007886:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0e8      	beq.n	8007860 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800788e:	f1bc 0f00 	cmp.w	ip, #0
 8007892:	d10d      	bne.n	80078b0 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007894:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800789c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a0:	041b      	lsls	r3, r3, #16
 80078a2:	0c1b      	lsrs	r3, r3, #16
 80078a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80078ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80078b0:	f1b9 0f00 	cmp.w	r9, #0
 80078b4:	d02a      	beq.n	800790c <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80078b6:	2128      	movs	r1, #40	@ 0x28
 80078b8:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80078bc:	464b      	mov	r3, r9
 80078be:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 80078c2:	e76c      	b.n	800779e <HAL_PCD_IRQHandler+0x20e>
 80078c4:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80078c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80078cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078d4:	041b      	lsls	r3, r3, #16
 80078d6:	0c1b      	lsrs	r3, r3, #16
 80078d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80078e0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80078e4:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 80078e8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80078f2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80078f6:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80078f8:	d054      	beq.n	80079a4 <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80078fa:	3202      	adds	r2, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8007902:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8007906:	f1b9 0f00 	cmp.w	r9, #0
 800790a:	d19b      	bne.n	8007844 <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 800790c:	fb05 f107 	mul.w	r1, r5, r7
 8007910:	1863      	adds	r3, r4, r1
 8007912:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8007916:	444a      	add	r2, r9
 8007918:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 800791c:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8007920:	444a      	add	r2, r9
 8007922:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007926:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 800792a:	b11a      	cbz	r2, 8007934 <HAL_PCD_IRQHandler+0x3a4>
 800792c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8007930:	4599      	cmp	r9, r3
 8007932:	d241      	bcs.n	80079b8 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007934:	fb05 4307 	mla	r3, r5, r7, r4
 8007938:	4620      	mov	r0, r4
 800793a:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 800793e:	f003 f80f 	bl	800a960 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007942:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007946:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007948:	f43f ae2f 	beq.w	80075aa <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800794c:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8007950:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007954:	b29b      	uxth	r3, r3
 8007956:	4033      	ands	r3, r6
 8007958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800795c:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8007960:	eb04 030c 	add.w	r3, r4, ip
 8007964:	7cda      	ldrb	r2, [r3, #19]
 8007966:	2a01      	cmp	r2, #1
 8007968:	d156      	bne.n	8007a18 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 800796a:	2100      	movs	r1, #0
 800796c:	fb07 5205 	mla	r2, r7, r5, r5
 8007970:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 8007972:	7f1a      	ldrb	r2, [r3, #28]
 8007974:	b392      	cbz	r2, 80079dc <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007976:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800797a:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800797c:	d036      	beq.n	80079ec <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800797e:	bb12      	cbnz	r2, 80079c6 <HAL_PCD_IRQHandler+0x436>
 8007980:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8007984:	7c1b      	ldrb	r3, [r3, #16]
 8007986:	b292      	uxth	r2, r2
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800798e:	4410      	add	r0, r2
 8007990:	5a1a      	ldrh	r2, [r3, r0]
 8007992:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007996:	521a      	strh	r2, [r3, r0]
 8007998:	5a1a      	ldrh	r2, [r3, r0]
 800799a:	b292      	uxth	r2, r2
 800799c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079a0:	521a      	strh	r2, [r3, r0]
 80079a2:	e01b      	b.n	80079dc <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80079a4:	3206      	adds	r2, #6
 80079a6:	4413      	add	r3, r2
 80079a8:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 80079ac:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 80079b0:	f1b9 0f00 	cmp.w	r9, #0
 80079b4:	d0aa      	beq.n	800790c <HAL_PCD_IRQHandler+0x37c>
 80079b6:	e781      	b.n	80078bc <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 80079b8:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80079bc:	6820      	ldr	r0, [r4, #0]
 80079be:	4421      	add	r1, r4
 80079c0:	f001 fea6 	bl	8009710 <USB_EPStartXfer>
 80079c4:	e7bd      	b.n	8007942 <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079c6:	2a01      	cmp	r2, #1
 80079c8:	d108      	bne.n	80079dc <HAL_PCD_IRQHandler+0x44c>
 80079ca:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80079ce:	7c1b      	ldrb	r3, [r3, #16]
 80079d0:	b292      	uxth	r2, r2
 80079d2:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	4410      	add	r0, r2
 80079da:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80079dc:	2328      	movs	r3, #40	@ 0x28
 80079de:	fb03 4307 	mla	r3, r3, r7, r4
 80079e2:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80079e4:	4620      	mov	r0, r4
 80079e6:	f002 ffc4 	bl	800a972 <HAL_PCD_DataInStageCallback>
 80079ea:	e5de      	b.n	80075aa <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079ec:	b93a      	cbnz	r2, 80079fe <HAL_PCD_IRQHandler+0x46e>
 80079ee:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80079f2:	7c1b      	ldrb	r3, [r3, #16]
 80079f4:	b292      	uxth	r2, r2
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80079fc:	e7c7      	b.n	800798e <HAL_PCD_IRQHandler+0x3fe>
 80079fe:	2a01      	cmp	r2, #1
 8007a00:	d1ec      	bne.n	80079dc <HAL_PCD_IRQHandler+0x44c>
 8007a02:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8007a06:	7c1b      	ldrb	r3, [r3, #16]
 8007a08:	b292      	uxth	r2, r2
 8007a0a:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	4410      	add	r0, r2
 8007a12:	f823 8000 	strh.w	r8, [r3, r0]
 8007a16:	e7e1      	b.n	80079dc <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007a18:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007a1a:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 8007a1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007a20:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8007a24:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007a28:	d11b      	bne.n	8007a62 <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007a2a:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 8007a2e:	b2bf      	uxth	r7, r7
 8007a30:	4457      	add	r7, sl
 8007a32:	3702      	adds	r7, #2
 8007a34:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8007a38:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007a3c:	4297      	cmp	r7, r2
 8007a3e:	d302      	bcc.n	8007a46 <HAL_PCD_IRQHandler+0x4b6>
 8007a40:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 8007a44:	e7ce      	b.n	80079e4 <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 8007a46:	1bd2      	subs	r2, r2, r7
 8007a48:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 8007a4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8007a4c:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8007a50:	443a      	add	r2, r7
 8007a52:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8007a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007a56:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 8007a58:	443a      	add	r2, r7
 8007a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007a5c:	f001 fe58 	bl	8009710 <USB_EPStartXfer>
 8007a60:	e5a3      	b.n	80075aa <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007a62:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007a66:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007a6a:	fa1f fc8c 	uxth.w	ip, ip
 8007a6e:	44d4      	add	ip, sl
 8007a70:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007a74:	f000 80f4 	beq.w	8007c60 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007a78:	f10c 0c02 	add.w	ip, ip, #2
 8007a7c:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8007a80:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 8007a84:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007a88:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8007a8a:	bf2c      	ite	cs
 8007a8c:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 8007a8e:	eba2 020c 	subcc.w	r2, r2, ip
 8007a92:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007a94:	2a00      	cmp	r2, #0
 8007a96:	d15b      	bne.n	8007b50 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a98:	2328      	movs	r3, #40	@ 0x28
 8007a9a:	fb03 4307 	mla	r3, r3, r7, r4
 8007a9e:	7c5b      	ldrb	r3, [r3, #17]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d141      	bne.n	8007b28 <HAL_PCD_IRQHandler+0x598>
 8007aa4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8007aa8:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8007aac:	b292      	uxth	r2, r2
 8007aae:	010b      	lsls	r3, r1, #4
 8007ab0:	4494      	add	ip, r2
 8007ab2:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8007ab6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007aba:	f82c 2003 	strh.w	r2, [ip, r3]
 8007abe:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8007ac2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007ac6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007aca:	b292      	uxth	r2, r2
 8007acc:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ad0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8007ad4:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8007ad8:	b292      	uxth	r2, r2
 8007ada:	4410      	add	r0, r2
 8007adc:	5ac2      	ldrh	r2, [r0, r3]
 8007ade:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007ae2:	52c2      	strh	r2, [r0, r3]
 8007ae4:	5ac2      	ldrh	r2, [r0, r3]
 8007ae6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007aea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007aee:	b292      	uxth	r2, r2
 8007af0:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007af2:	4620      	mov	r0, r4
 8007af4:	f002 ff3d 	bl	800a972 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007af8:	f1b8 0f00 	cmp.w	r8, #0
 8007afc:	f000 80f4 	beq.w	8007ce8 <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007b00:	2328      	movs	r3, #40	@ 0x28
 8007b02:	fb03 4307 	mla	r3, r3, r7, r4
 8007b06:	6822      	ldr	r2, [r4, #0]
 8007b08:	7c19      	ldrb	r1, [r3, #16]
 8007b0a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007b0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b16:	041b      	lsls	r3, r3, #16
 8007b18:	0c1b      	lsrs	r3, r3, #16
 8007b1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b22:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8007b26:	e0df      	b.n	8007ce8 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d1e2      	bne.n	8007af2 <HAL_PCD_IRQHandler+0x562>
 8007b2c:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8007b30:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8007b34:	fa1f fe8e 	uxth.w	lr, lr
 8007b38:	44f4      	add	ip, lr
 8007b3a:	010b      	lsls	r3, r1, #4
 8007b3c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b40:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8007b44:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8007b48:	fa1f fc8c 	uxth.w	ip, ip
 8007b4c:	4460      	add	r0, ip
 8007b4e:	e7cf      	b.n	8007af0 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007b50:	f1b8 0f00 	cmp.w	r8, #0
 8007b54:	d00d      	beq.n	8007b72 <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007b56:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8007b5a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007b5e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007b62:	0412      	lsls	r2, r2, #16
 8007b64:	0c12      	lsrs	r2, r2, #16
 8007b66:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8007b6a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007b6e:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8007b72:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8007b76:	fb08 4807 	mla	r8, r8, r7, r4
 8007b7a:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8007b7e:	2a01      	cmp	r2, #1
 8007b80:	f040 80b2 	bne.w	8007ce8 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8007b84:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8007b88:	eb02 0e0c 	add.w	lr, r2, ip
 8007b8c:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8007b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b92:	4462      	add	r2, ip
 8007b94:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8007b96:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8007b9a:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d335      	bcc.n	8007c0e <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 8007ba2:	1a9b      	subs	r3, r3, r2
 8007ba4:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007ba8:	2328      	movs	r3, #40	@ 0x28
 8007baa:	fb03 4307 	mla	r3, r3, r7, r4
 8007bae:	f893 c011 	ldrb.w	ip, [r3, #17]
 8007bb2:	b293      	uxth	r3, r2
 8007bb4:	f1bc 0f00 	cmp.w	ip, #0
 8007bb8:	d145      	bne.n	8007c46 <HAL_PCD_IRQHandler+0x6b6>
 8007bba:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8007bbe:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8007bc2:	fa1f f888 	uxth.w	r8, r8
 8007bc6:	44c4      	add	ip, r8
 8007bc8:	0109      	lsls	r1, r1, #4
 8007bca:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8007bce:	2a3e      	cmp	r2, #62	@ 0x3e
 8007bd0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007bd4:	f82c 8001 	strh.w	r8, [ip, r1]
 8007bd8:	d925      	bls.n	8007c26 <HAL_PCD_IRQHandler+0x696>
 8007bda:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8007bde:	06d2      	lsls	r2, r2, #27
 8007be0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8007be4:	bf08      	it	eq
 8007be6:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8007bea:	b292      	uxth	r2, r2
 8007bec:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8007bf0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007bf4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007bf8:	b292      	uxth	r2, r2
 8007bfa:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007bfe:	2228      	movs	r2, #40	@ 0x28
 8007c00:	fb02 4207 	mla	r2, r2, r7, r4
 8007c04:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007c06:	4671      	mov	r1, lr
 8007c08:	f001 fd72 	bl	80096f0 <USB_WritePMA>
 8007c0c:	e06c      	b.n	8007ce8 <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 8007c0e:	b91b      	cbnz	r3, 8007c18 <HAL_PCD_IRQHandler+0x688>
          len = TxPctSize;
 8007c10:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8007c12:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8007c16:	e7c7      	b.n	8007ba8 <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 8007c1e:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          len = ep->xfer_len_db;
 8007c22:	461a      	mov	r2, r3
 8007c24:	e7c0      	b.n	8007ba8 <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007c26:	b912      	cbnz	r2, 8007c2e <HAL_PCD_IRQHandler+0x69e>
 8007c28:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8007c2c:	e7e0      	b.n	8007bf0 <HAL_PCD_IRQHandler+0x660>
 8007c2e:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8007c32:	07d2      	lsls	r2, r2, #31
 8007c34:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8007c38:	bf48      	it	mi
 8007c3a:	f108 0801 	addmi.w	r8, r8, #1
 8007c3e:	b292      	uxth	r2, r2
 8007c40:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8007c44:	e7d8      	b.n	8007bf8 <HAL_PCD_IRQHandler+0x668>
 8007c46:	f1bc 0f01 	cmp.w	ip, #1
 8007c4a:	d1d8      	bne.n	8007bfe <HAL_PCD_IRQHandler+0x66e>
 8007c4c:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8007c50:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8007c54:	fa1f fc8c 	uxth.w	ip, ip
 8007c58:	4462      	add	r2, ip
 8007c5a:	0109      	lsls	r1, r1, #4
 8007c5c:	5253      	strh	r3, [r2, r1]
 8007c5e:	e7ce      	b.n	8007bfe <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007c60:	f10c 0c06 	add.w	ip, ip, #6
 8007c64:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8007c68:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 8007c6c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007c70:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 8007c72:	bf8c      	ite	hi
 8007c74:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 8007c76:	eba2 020c 	subls.w	r2, r2, ip
 8007c7a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8007c7c:	2a00      	cmp	r2, #0
 8007c7e:	d15d      	bne.n	8007d3c <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c80:	2328      	movs	r3, #40	@ 0x28
 8007c82:	fb03 4307 	mla	r3, r3, r7, r4
 8007c86:	7c5b      	ldrb	r3, [r3, #17]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d143      	bne.n	8007d14 <HAL_PCD_IRQHandler+0x784>
 8007c8c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8007c90:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8007c94:	b292      	uxth	r2, r2
 8007c96:	010b      	lsls	r3, r1, #4
 8007c98:	4494      	add	ip, r2
 8007c9a:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8007c9e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007ca2:	f82c 2003 	strh.w	r2, [ip, r3]
 8007ca6:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8007caa:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007cae:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007cb2:	b292      	uxth	r2, r2
 8007cb4:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007cb8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8007cbc:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8007cc0:	b292      	uxth	r2, r2
 8007cc2:	4410      	add	r0, r2
 8007cc4:	5ac2      	ldrh	r2, [r0, r3]
 8007cc6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007cca:	52c2      	strh	r2, [r0, r3]
 8007ccc:	5ac2      	ldrh	r2, [r0, r3]
 8007cce:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007cd2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007cd6:	b292      	uxth	r2, r2
 8007cd8:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f002 fe49 	bl	800a972 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007ce0:	f1b8 0f00 	cmp.w	r8, #0
 8007ce4:	f43f af0c 	beq.w	8007b00 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007ce8:	2328      	movs	r3, #40	@ 0x28
 8007cea:	fb03 4307 	mla	r3, r3, r7, r4
 8007cee:	6822      	ldr	r2, [r4, #0]
 8007cf0:	7c19      	ldrb	r1, [r3, #16]
 8007cf2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cfe:	041b      	lsls	r3, r3, #16
 8007d00:	0c1b      	lsrs	r3, r3, #16
 8007d02:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8007d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d0e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8007d12:	e44a      	b.n	80075aa <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d1e0      	bne.n	8007cda <HAL_PCD_IRQHandler+0x74a>
 8007d18:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8007d1c:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8007d20:	fa1f fe8e 	uxth.w	lr, lr
 8007d24:	44f4      	add	ip, lr
 8007d26:	010b      	lsls	r3, r1, #4
 8007d28:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d2c:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8007d30:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8007d34:	fa1f fc8c 	uxth.w	ip, ip
 8007d38:	4460      	add	r0, ip
 8007d3a:	e7cd      	b.n	8007cd8 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007d3c:	f1b8 0f00 	cmp.w	r8, #0
 8007d40:	d10d      	bne.n	8007d5e <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007d42:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8007d46:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007d4a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007d4e:	0412      	lsls	r2, r2, #16
 8007d50:	0c12      	lsrs	r2, r2, #16
 8007d52:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8007d56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d5a:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8007d5e:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8007d62:	fb08 4807 	mla	r8, r8, r7, r4
 8007d66:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8007d6a:	2a01      	cmp	r2, #1
 8007d6c:	d1bc      	bne.n	8007ce8 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8007d6e:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8007d72:	eb02 0e0c 	add.w	lr, r2, ip
 8007d76:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8007d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d7c:	4462      	add	r2, ip
 8007d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8007d80:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8007d84:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d332      	bcc.n	8007df2 <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 8007d8c:	1a9b      	subs	r3, r3, r2
 8007d8e:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007d92:	2328      	movs	r3, #40	@ 0x28
 8007d94:	fb03 4307 	mla	r3, r3, r7, r4
 8007d98:	f893 c011 	ldrb.w	ip, [r3, #17]
 8007d9c:	b293      	uxth	r3, r2
 8007d9e:	f1bc 0f00 	cmp.w	ip, #0
 8007da2:	d142      	bne.n	8007e2a <HAL_PCD_IRQHandler+0x89a>
 8007da4:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8007da8:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8007dac:	fa1f f888 	uxth.w	r8, r8
 8007db0:	44c4      	add	ip, r8
 8007db2:	0109      	lsls	r1, r1, #4
 8007db4:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8007db8:	2a3e      	cmp	r2, #62	@ 0x3e
 8007dba:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007dbe:	f82c 8001 	strh.w	r8, [ip, r1]
 8007dc2:	d922      	bls.n	8007e0a <HAL_PCD_IRQHandler+0x87a>
 8007dc4:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8007dc8:	06d2      	lsls	r2, r2, #27
 8007dca:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8007dce:	bf08      	it	eq
 8007dd0:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8007dd4:	b292      	uxth	r2, r2
 8007dd6:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8007dda:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007dde:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007de2:	b292      	uxth	r2, r2
 8007de4:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007de8:	2228      	movs	r2, #40	@ 0x28
 8007dea:	fb02 4207 	mla	r2, r2, r7, r4
 8007dee:	8b52      	ldrh	r2, [r2, #26]
 8007df0:	e709      	b.n	8007c06 <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 8007df2:	b91b      	cbnz	r3, 8007dfc <HAL_PCD_IRQHandler+0x86c>
          len = TxPctSize;
 8007df4:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8007df6:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8007dfa:	e7ca      	b.n	8007d92 <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 8007e02:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          len = ep->xfer_len_db;
 8007e06:	461a      	mov	r2, r3
 8007e08:	e7c3      	b.n	8007d92 <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007e0a:	b912      	cbnz	r2, 8007e12 <HAL_PCD_IRQHandler+0x882>
 8007e0c:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8007e10:	e7e3      	b.n	8007dda <HAL_PCD_IRQHandler+0x84a>
 8007e12:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8007e16:	07d2      	lsls	r2, r2, #31
 8007e18:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8007e1c:	bf48      	it	mi
 8007e1e:	f108 0801 	addmi.w	r8, r8, #1
 8007e22:	b292      	uxth	r2, r2
 8007e24:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8007e28:	e7db      	b.n	8007de2 <HAL_PCD_IRQHandler+0x852>
 8007e2a:	f1bc 0f01 	cmp.w	ip, #1
 8007e2e:	d1db      	bne.n	8007de8 <HAL_PCD_IRQHandler+0x858>
 8007e30:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8007e34:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8007e38:	b292      	uxth	r2, r2
 8007e3a:	4494      	add	ip, r2
 8007e3c:	010a      	lsls	r2, r1, #4
 8007e3e:	f82c 3002 	strh.w	r3, [ip, r2]
 8007e42:	e7d1      	b.n	8007de8 <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007e44:	0546      	lsls	r6, r0, #21
 8007e46:	d512      	bpl.n	8007e6e <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007e48:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8007e4a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007e4c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8007e50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e54:	041b      	lsls	r3, r3, #16
 8007e56:	0c1b      	lsrs	r3, r3, #16
 8007e58:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8007e5c:	f002 fd95 	bl	800a98a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007e60:	4629      	mov	r1, r5
 8007e62:	4620      	mov	r0, r4
}
 8007e64:	b005      	add	sp, #20
 8007e66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007e6a:	f7ff bb7d 	b.w	8007568 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007e6e:	0441      	lsls	r1, r0, #17
 8007e70:	d50a      	bpl.n	8007e88 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007e72:	6822      	ldr	r2, [r4, #0]
 8007e74:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8007e78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007e7c:	041b      	lsls	r3, r3, #16
 8007e7e:	0c1b      	lsrs	r3, r3, #16
 8007e80:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8007e84:	f7ff bb96 	b.w	80075b4 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007e88:	0482      	lsls	r2, r0, #18
 8007e8a:	d505      	bpl.n	8007e98 <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007e8c:	6822      	ldr	r2, [r4, #0]
 8007e8e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8007e92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e96:	e7f1      	b.n	8007e7c <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007e98:	04c3      	lsls	r3, r0, #19
 8007e9a:	d519      	bpl.n	8007ed0 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8007e9c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8007e9e:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8007ea0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8007ea4:	f023 0304 	bic.w	r3, r3, #4
 8007ea8:	041b      	lsls	r3, r3, #16
 8007eaa:	0c1b      	lsrs	r3, r3, #16
 8007eac:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007eb0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8007eb4:	f023 0308 	bic.w	r3, r3, #8
 8007eb8:	041b      	lsls	r3, r3, #16
 8007eba:	0c1b      	lsrs	r3, r3, #16
 8007ebc:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8007ec0:	f002 fd86 	bl	800a9d0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007ec4:	6822      	ldr	r2, [r4, #0]
 8007ec6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8007eca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ece:	e7d5      	b.n	8007e7c <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007ed0:	0507      	lsls	r7, r0, #20
 8007ed2:	d548      	bpl.n	8007f66 <HAL_PCD_IRQHandler+0x9d6>
 8007ed4:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	4606      	mov	r6, r0
 8007eda:	4619      	mov	r1, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	f103 0520 	add.w	r5, r3, #32
 8007ee2:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8007ee6:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8007ee8:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8007eec:	d1f9      	bne.n	8007ee2 <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8007eee:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8007ef2:	b292      	uxth	r2, r2
 8007ef4:	f042 0201 	orr.w	r2, r2, #1
 8007ef8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8007efc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8007f00:	f022 0201 	bic.w	r2, r2, #1
 8007f04:	0412      	lsls	r2, r2, #16
 8007f06:	0c12      	lsrs	r2, r2, #16
 8007f08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8007f0c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8007f10:	0556      	lsls	r6, r2, #21
 8007f12:	d5fb      	bpl.n	8007f0c <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007f14:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8007f18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f1c:	0412      	lsls	r2, r2, #16
 8007f1e:	0c12      	lsrs	r2, r2, #16
 8007f20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8007f24:	f830 2b02 	ldrh.w	r2, [r0], #2
 8007f28:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8007f2c:	428d      	cmp	r5, r1
 8007f2e:	d1f9      	bne.n	8007f24 <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007f30:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8007f34:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007f36:	b292      	uxth	r2, r2
 8007f38:	f042 0208 	orr.w	r2, r2, #8
 8007f3c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007f40:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8007f44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f48:	0412      	lsls	r2, r2, #16
 8007f4a:	0c12      	lsrs	r2, r2, #16
 8007f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8007f50:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8007f54:	b292      	uxth	r2, r2
 8007f56:	f042 0204 	orr.w	r2, r2, #4
 8007f5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8007f5e:	f002 fd27 	bl	800a9b0 <HAL_PCD_SuspendCallback>
    return;
 8007f62:	f7ff bb27 	b.w	80075b4 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007f66:	0582      	lsls	r2, r0, #22
 8007f68:	d50d      	bpl.n	8007f86 <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007f6a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8007f6c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007f6e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8007f72:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f76:	041b      	lsls	r3, r3, #16
 8007f78:	0c1b      	lsrs	r3, r3, #16
 8007f7a:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8007f7e:	f002 fd00 	bl	800a982 <HAL_PCD_SOFCallback>
    return;
 8007f82:	f7ff bb17 	b.w	80075b4 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007f86:	05c3      	lsls	r3, r0, #23
 8007f88:	f57f ab14 	bpl.w	80075b4 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007f8c:	6822      	ldr	r2, [r4, #0]
 8007f8e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8007f92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f96:	e771      	b.n	8007e7c <HAL_PCD_IRQHandler+0x8ec>

08007f98 <HAL_PCD_EP_Open>:
{
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	2428      	movs	r4, #40	@ 0x28
 8007f9c:	4605      	mov	r5, r0
 8007f9e:	f001 0007 	and.w	r0, r1, #7
 8007fa2:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8007fa4:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fa8:	bf14      	ite	ne
 8007faa:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fae:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 8007fb2:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 8007fb6:	bf15      	itete	ne
 8007fb8:	2401      	movne	r4, #1
    ep->is_in = 0U;
 8007fba:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 8007fbc:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 8007fbe:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fc2:	bf14      	ite	ne
 8007fc4:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fc6:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 8007fc8:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8007fca:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8007fcc:	bf08      	it	eq
 8007fce:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fd0:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 8007fd2:	bf08      	it	eq
 8007fd4:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 8007fd6:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8007fd8:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d009      	beq.n	8007ff4 <HAL_PCD_EP_Open+0x5c>
 8007fe0:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007fe2:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8007fe4:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007fe8:	f001 f8d6 	bl	8009198 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007fec:	2000      	movs	r0, #0
 8007fee:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8007ff4:	2002      	movs	r0, #2
 8007ff6:	e7fc      	b.n	8007ff2 <HAL_PCD_EP_Open+0x5a>

08007ff8 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8007ff8:	2328      	movs	r3, #40	@ 0x28
 8007ffa:	f001 0207 	and.w	r2, r1, #7
 8007ffe:	4353      	muls	r3, r2
 8008000:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 8008004:	b510      	push	{r4, lr}
 8008006:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008008:	bf18      	it	ne
 800800a:	f103 0110 	addne.w	r1, r3, #16
 800800e:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008010:	bf0b      	itete	eq
 8008012:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 8008016:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8008018:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800801a:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800801c:	bf0a      	itet	eq
 800801e:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8008020:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 8008022:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 8008026:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008028:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 800802c:	2b01      	cmp	r3, #1
 800802e:	d009      	beq.n	8008044 <HAL_PCD_EP_Close+0x4c>
 8008030:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008032:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008034:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008038:	f001 fa0e 	bl	8009458 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800803c:	2000      	movs	r0, #0
 800803e:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8008042:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008044:	2002      	movs	r0, #2
 8008046:	e7fc      	b.n	8008042 <HAL_PCD_EP_Close+0x4a>

08008048 <HAL_PCD_EP_Receive>:
{
 8008048:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 800804a:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 800804c:	2600      	movs	r6, #0
 800804e:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8008052:	434c      	muls	r4, r1
 8008054:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8008056:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800805a:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800805e:	4401      	add	r1, r0
  ep->xfer_len = len;
 8008060:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 8008064:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 8008068:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800806c:	6800      	ldr	r0, [r0, #0]
 800806e:	f001 fb4f 	bl	8009710 <USB_EPStartXfer>
}
 8008072:	4630      	mov	r0, r6
 8008074:	bd70      	pop	{r4, r5, r6, pc}

08008076 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008076:	2328      	movs	r3, #40	@ 0x28
 8008078:	f001 0107 	and.w	r1, r1, #7
 800807c:	fb03 0001 	mla	r0, r3, r1, r0
}
 8008080:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 8008084:	4770      	bx	lr

08008086 <HAL_PCD_EP_Transmit>:
{
 8008086:	b570      	push	{r4, r5, r6, lr}
 8008088:	2528      	movs	r5, #40	@ 0x28
 800808a:	f001 0107 	and.w	r1, r1, #7
 800808e:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 8008090:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 8008092:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8008094:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8008098:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800809a:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800809c:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80080a0:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 80080a2:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 80080a6:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 80080a8:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 80080aa:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80080ac:	6800      	ldr	r0, [r0, #0]
 80080ae:	f001 fb2f 	bl	8009710 <USB_EPStartXfer>
}
 80080b2:	4630      	mov	r0, r6
 80080b4:	bd70      	pop	{r4, r5, r6, pc}

080080b6 <HAL_PCD_EP_SetStall>:
{
 80080b6:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80080b8:	7903      	ldrb	r3, [r0, #4]
 80080ba:	f001 0507 	and.w	r5, r1, #7
 80080be:	42ab      	cmp	r3, r5
{
 80080c0:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80080c2:	d32a      	bcc.n	800811a <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 80080c4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80080c8:	f04f 0328 	mov.w	r3, #40	@ 0x28
 80080cc:	d01c      	beq.n	8008108 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 80080ce:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080d0:	436b      	muls	r3, r5
 80080d2:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 80080d6:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080d8:	4401      	add	r1, r0
    ep->is_in = 1U;
 80080da:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 80080dc:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80080de:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80080e0:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80080e2:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d019      	beq.n	800811e <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80080ea:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80080ec:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80080f0:	f001 fa85 	bl	80095fe <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80080f4:	b925      	cbnz	r5, 8008100 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80080f6:	6820      	ldr	r0, [r4, #0]
 80080f8:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 80080fc:	f001 faf6 	bl	80096ec <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8008100:	2000      	movs	r0, #0
 8008102:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8008106:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8008108:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800810a:	434b      	muls	r3, r1
 800810c:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8008110:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8008112:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008114:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 8008118:	e7e0      	b.n	80080dc <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 800811a:	2001      	movs	r0, #1
 800811c:	e7f3      	b.n	8008106 <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 800811e:	2002      	movs	r0, #2
 8008120:	e7f1      	b.n	8008106 <HAL_PCD_EP_SetStall+0x50>

08008122 <HAL_PCD_EP_ClrStall>:
{
 8008122:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008124:	7902      	ldrb	r2, [r0, #4]
 8008126:	f001 030f 	and.w	r3, r1, #15
 800812a:	429a      	cmp	r2, r3
{
 800812c:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800812e:	d326      	bcc.n	800817e <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8008130:	2328      	movs	r3, #40	@ 0x28
 8008132:	f001 0207 	and.w	r2, r1, #7
 8008136:	4353      	muls	r3, r2
 8008138:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800813c:	bf14      	ite	ne
 800813e:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008142:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 8008146:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8008148:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 800814c:	bf15      	itete	ne
 800814e:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8008150:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008152:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008154:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8008156:	bf14      	ite	ne
 8008158:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 800815a:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 800815e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008160:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008162:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8008166:	2b01      	cmp	r3, #1
 8008168:	d00b      	beq.n	8008182 <HAL_PCD_EP_ClrStall+0x60>
 800816a:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800816c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800816e:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008172:	f001 fa64 	bl	800963e <USB_EPClearStall>
  return HAL_OK;
 8008176:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8008178:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 800817c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800817e:	2001      	movs	r0, #1
 8008180:	e7fc      	b.n	800817c <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 8008182:	2002      	movs	r0, #2
 8008184:	e7fa      	b.n	800817c <HAL_PCD_EP_ClrStall+0x5a>

08008186 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008186:	b510      	push	{r4, lr}
 8008188:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800818a:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800818e:	bf1b      	ittet	ne
 8008190:	f001 0107 	andne.w	r1, r1, #7
 8008194:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008198:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800819c:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 800819e:	bf08      	it	eq
 80081a0:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80081a4:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80081a6:	b91a      	cbnz	r2, 80081b0 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 80081a8:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80081aa:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80081ac:	2000      	movs	r0, #0
 80081ae:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80081b0:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80081b2:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80081b4:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80081b6:	e7f9      	b.n	80081ac <HAL_PCDEx_PMAConfig+0x26>

080081b8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80081b8:	2201      	movs	r2, #1
 80081ba:	4b01      	ldr	r3, [pc, #4]	@ (80081c0 <HAL_PWR_EnableBkUpAccess+0x8>)
 80081bc:	621a      	str	r2, [r3, #32]
}
 80081be:	4770      	bx	lr
 80081c0:	420e0000 	.word	0x420e0000

080081c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081c8:	4605      	mov	r5, r0
 80081ca:	b338      	cbz	r0, 800821c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081cc:	6803      	ldr	r3, [r0, #0]
 80081ce:	07db      	lsls	r3, r3, #31
 80081d0:	d410      	bmi.n	80081f4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081d2:	682b      	ldr	r3, [r5, #0]
 80081d4:	079f      	lsls	r7, r3, #30
 80081d6:	d45e      	bmi.n	8008296 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	0719      	lsls	r1, r3, #28
 80081dc:	f100 8095 	bmi.w	800830a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081e0:	682b      	ldr	r3, [r5, #0]
 80081e2:	075a      	lsls	r2, r3, #29
 80081e4:	f100 80c1 	bmi.w	800836a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081e8:	69eb      	ldr	r3, [r5, #28]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f040 812c 	bne.w	8008448 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80081f0:	2000      	movs	r0, #0
 80081f2:	e029      	b.n	8008248 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80081f4:	4c90      	ldr	r4, [pc, #576]	@ (8008438 <HAL_RCC_OscConfig+0x274>)
 80081f6:	6863      	ldr	r3, [r4, #4]
 80081f8:	f003 030c 	and.w	r3, r3, #12
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d007      	beq.n	8008210 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008200:	6863      	ldr	r3, [r4, #4]
 8008202:	f003 030c 	and.w	r3, r3, #12
 8008206:	2b08      	cmp	r3, #8
 8008208:	d10a      	bne.n	8008220 <HAL_RCC_OscConfig+0x5c>
 800820a:	6863      	ldr	r3, [r4, #4]
 800820c:	03de      	lsls	r6, r3, #15
 800820e:	d507      	bpl.n	8008220 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	039c      	lsls	r4, r3, #14
 8008214:	d5dd      	bpl.n	80081d2 <HAL_RCC_OscConfig+0xe>
 8008216:	686b      	ldr	r3, [r5, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1da      	bne.n	80081d2 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800821c:	2001      	movs	r0, #1
 800821e:	e013      	b.n	8008248 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008220:	686b      	ldr	r3, [r5, #4]
 8008222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008226:	d112      	bne.n	800824e <HAL_RCC_OscConfig+0x8a>
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800822e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008230:	f7fe fdb0 	bl	8006d94 <HAL_GetTick>
 8008234:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	0398      	lsls	r0, r3, #14
 800823a:	d4ca      	bmi.n	80081d2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800823c:	f7fe fdaa 	bl	8006d94 <HAL_GetTick>
 8008240:	1b80      	subs	r0, r0, r6
 8008242:	2864      	cmp	r0, #100	@ 0x64
 8008244:	d9f7      	bls.n	8008236 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8008246:	2003      	movs	r0, #3
}
 8008248:	b002      	add	sp, #8
 800824a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800824e:	b99b      	cbnz	r3, 8008278 <HAL_RCC_OscConfig+0xb4>
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008256:	6023      	str	r3, [r4, #0]
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800825e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008260:	f7fe fd98 	bl	8006d94 <HAL_GetTick>
 8008264:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	0399      	lsls	r1, r3, #14
 800826a:	d5b2      	bpl.n	80081d2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800826c:	f7fe fd92 	bl	8006d94 <HAL_GetTick>
 8008270:	1b80      	subs	r0, r0, r6
 8008272:	2864      	cmp	r0, #100	@ 0x64
 8008274:	d9f7      	bls.n	8008266 <HAL_RCC_OscConfig+0xa2>
 8008276:	e7e6      	b.n	8008246 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	d103      	bne.n	8008288 <HAL_RCC_OscConfig+0xc4>
 8008280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	e7cf      	b.n	8008228 <HAL_RCC_OscConfig+0x64>
 8008288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008294:	e7cb      	b.n	800822e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008296:	4c68      	ldr	r4, [pc, #416]	@ (8008438 <HAL_RCC_OscConfig+0x274>)
 8008298:	6863      	ldr	r3, [r4, #4]
 800829a:	f013 0f0c 	tst.w	r3, #12
 800829e:	d007      	beq.n	80082b0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80082a0:	6863      	ldr	r3, [r4, #4]
 80082a2:	f003 030c 	and.w	r3, r3, #12
 80082a6:	2b08      	cmp	r3, #8
 80082a8:	d110      	bne.n	80082cc <HAL_RCC_OscConfig+0x108>
 80082aa:	6863      	ldr	r3, [r4, #4]
 80082ac:	03da      	lsls	r2, r3, #15
 80082ae:	d40d      	bmi.n	80082cc <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	079b      	lsls	r3, r3, #30
 80082b4:	d502      	bpl.n	80082bc <HAL_RCC_OscConfig+0xf8>
 80082b6:	692b      	ldr	r3, [r5, #16]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d1af      	bne.n	800821c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082bc:	6823      	ldr	r3, [r4, #0]
 80082be:	696a      	ldr	r2, [r5, #20]
 80082c0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80082c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	e785      	b.n	80081d8 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80082cc:	692a      	ldr	r2, [r5, #16]
 80082ce:	4b5b      	ldr	r3, [pc, #364]	@ (800843c <HAL_RCC_OscConfig+0x278>)
 80082d0:	b16a      	cbz	r2, 80082ee <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80082d2:	2201      	movs	r2, #1
 80082d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80082d6:	f7fe fd5d 	bl	8006d94 <HAL_GetTick>
 80082da:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	079f      	lsls	r7, r3, #30
 80082e0:	d4ec      	bmi.n	80082bc <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082e2:	f7fe fd57 	bl	8006d94 <HAL_GetTick>
 80082e6:	1b80      	subs	r0, r0, r6
 80082e8:	2802      	cmp	r0, #2
 80082ea:	d9f7      	bls.n	80082dc <HAL_RCC_OscConfig+0x118>
 80082ec:	e7ab      	b.n	8008246 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80082ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80082f0:	f7fe fd50 	bl	8006d94 <HAL_GetTick>
 80082f4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	0798      	lsls	r0, r3, #30
 80082fa:	f57f af6d 	bpl.w	80081d8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082fe:	f7fe fd49 	bl	8006d94 <HAL_GetTick>
 8008302:	1b80      	subs	r0, r0, r6
 8008304:	2802      	cmp	r0, #2
 8008306:	d9f6      	bls.n	80082f6 <HAL_RCC_OscConfig+0x132>
 8008308:	e79d      	b.n	8008246 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800830a:	69aa      	ldr	r2, [r5, #24]
 800830c:	4e4a      	ldr	r6, [pc, #296]	@ (8008438 <HAL_RCC_OscConfig+0x274>)
 800830e:	4b4b      	ldr	r3, [pc, #300]	@ (800843c <HAL_RCC_OscConfig+0x278>)
 8008310:	b1e2      	cbz	r2, 800834c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8008312:	2201      	movs	r2, #1
 8008314:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8008318:	f7fe fd3c 	bl	8006d94 <HAL_GetTick>
 800831c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800831e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8008320:	079b      	lsls	r3, r3, #30
 8008322:	d50d      	bpl.n	8008340 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008324:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008328:	4b45      	ldr	r3, [pc, #276]	@ (8008440 <HAL_RCC_OscConfig+0x27c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008330:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8008332:	bf00      	nop
  }
  while (Delay --);
 8008334:	9b01      	ldr	r3, [sp, #4]
 8008336:	1e5a      	subs	r2, r3, #1
 8008338:	9201      	str	r2, [sp, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1f9      	bne.n	8008332 <HAL_RCC_OscConfig+0x16e>
 800833e:	e74f      	b.n	80081e0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008340:	f7fe fd28 	bl	8006d94 <HAL_GetTick>
 8008344:	1b00      	subs	r0, r0, r4
 8008346:	2802      	cmp	r0, #2
 8008348:	d9e9      	bls.n	800831e <HAL_RCC_OscConfig+0x15a>
 800834a:	e77c      	b.n	8008246 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800834c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8008350:	f7fe fd20 	bl	8006d94 <HAL_GetTick>
 8008354:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008356:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8008358:	079f      	lsls	r7, r3, #30
 800835a:	f57f af41 	bpl.w	80081e0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800835e:	f7fe fd19 	bl	8006d94 <HAL_GetTick>
 8008362:	1b00      	subs	r0, r0, r4
 8008364:	2802      	cmp	r0, #2
 8008366:	d9f6      	bls.n	8008356 <HAL_RCC_OscConfig+0x192>
 8008368:	e76d      	b.n	8008246 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800836a:	4c33      	ldr	r4, [pc, #204]	@ (8008438 <HAL_RCC_OscConfig+0x274>)
 800836c:	69e3      	ldr	r3, [r4, #28]
 800836e:	00d8      	lsls	r0, r3, #3
 8008370:	d424      	bmi.n	80083bc <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8008372:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008374:	69e3      	ldr	r3, [r4, #28]
 8008376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800837a:	61e3      	str	r3, [r4, #28]
 800837c:	69e3      	ldr	r3, [r4, #28]
 800837e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008386:	4e2f      	ldr	r6, [pc, #188]	@ (8008444 <HAL_RCC_OscConfig+0x280>)
 8008388:	6833      	ldr	r3, [r6, #0]
 800838a:	05d9      	lsls	r1, r3, #23
 800838c:	d518      	bpl.n	80083c0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800838e:	68eb      	ldr	r3, [r5, #12]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d126      	bne.n	80083e2 <HAL_RCC_OscConfig+0x21e>
 8008394:	6a23      	ldr	r3, [r4, #32]
 8008396:	f043 0301 	orr.w	r3, r3, #1
 800839a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800839c:	f7fe fcfa 	bl	8006d94 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083a0:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80083a4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083a6:	6a23      	ldr	r3, [r4, #32]
 80083a8:	079b      	lsls	r3, r3, #30
 80083aa:	d53f      	bpl.n	800842c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80083ac:	2f00      	cmp	r7, #0
 80083ae:	f43f af1b 	beq.w	80081e8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80083b2:	69e3      	ldr	r3, [r4, #28]
 80083b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083b8:	61e3      	str	r3, [r4, #28]
 80083ba:	e715      	b.n	80081e8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80083bc:	2700      	movs	r7, #0
 80083be:	e7e2      	b.n	8008386 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083c0:	6833      	ldr	r3, [r6, #0]
 80083c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083c6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80083c8:	f7fe fce4 	bl	8006d94 <HAL_GetTick>
 80083cc:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083ce:	6833      	ldr	r3, [r6, #0]
 80083d0:	05da      	lsls	r2, r3, #23
 80083d2:	d4dc      	bmi.n	800838e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083d4:	f7fe fcde 	bl	8006d94 <HAL_GetTick>
 80083d8:	eba0 0008 	sub.w	r0, r0, r8
 80083dc:	2864      	cmp	r0, #100	@ 0x64
 80083de:	d9f6      	bls.n	80083ce <HAL_RCC_OscConfig+0x20a>
 80083e0:	e731      	b.n	8008246 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083e2:	b9ab      	cbnz	r3, 8008410 <HAL_RCC_OscConfig+0x24c>
 80083e4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083e6:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083ea:	f023 0301 	bic.w	r3, r3, #1
 80083ee:	6223      	str	r3, [r4, #32]
 80083f0:	6a23      	ldr	r3, [r4, #32]
 80083f2:	f023 0304 	bic.w	r3, r3, #4
 80083f6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80083f8:	f7fe fccc 	bl	8006d94 <HAL_GetTick>
 80083fc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083fe:	6a23      	ldr	r3, [r4, #32]
 8008400:	0798      	lsls	r0, r3, #30
 8008402:	d5d3      	bpl.n	80083ac <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008404:	f7fe fcc6 	bl	8006d94 <HAL_GetTick>
 8008408:	1b80      	subs	r0, r0, r6
 800840a:	4540      	cmp	r0, r8
 800840c:	d9f7      	bls.n	80083fe <HAL_RCC_OscConfig+0x23a>
 800840e:	e71a      	b.n	8008246 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008410:	2b05      	cmp	r3, #5
 8008412:	6a23      	ldr	r3, [r4, #32]
 8008414:	d103      	bne.n	800841e <HAL_RCC_OscConfig+0x25a>
 8008416:	f043 0304 	orr.w	r3, r3, #4
 800841a:	6223      	str	r3, [r4, #32]
 800841c:	e7ba      	b.n	8008394 <HAL_RCC_OscConfig+0x1d0>
 800841e:	f023 0301 	bic.w	r3, r3, #1
 8008422:	6223      	str	r3, [r4, #32]
 8008424:	6a23      	ldr	r3, [r4, #32]
 8008426:	f023 0304 	bic.w	r3, r3, #4
 800842a:	e7b6      	b.n	800839a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800842c:	f7fe fcb2 	bl	8006d94 <HAL_GetTick>
 8008430:	1b80      	subs	r0, r0, r6
 8008432:	4540      	cmp	r0, r8
 8008434:	d9b7      	bls.n	80083a6 <HAL_RCC_OscConfig+0x1e2>
 8008436:	e706      	b.n	8008246 <HAL_RCC_OscConfig+0x82>
 8008438:	40021000 	.word	0x40021000
 800843c:	42420000 	.word	0x42420000
 8008440:	20000000 	.word	0x20000000
 8008444:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008448:	4c2a      	ldr	r4, [pc, #168]	@ (80084f4 <HAL_RCC_OscConfig+0x330>)
 800844a:	6862      	ldr	r2, [r4, #4]
 800844c:	f002 020c 	and.w	r2, r2, #12
 8008450:	2a08      	cmp	r2, #8
 8008452:	d03e      	beq.n	80084d2 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008454:	2200      	movs	r2, #0
 8008456:	2b02      	cmp	r3, #2
 8008458:	4b27      	ldr	r3, [pc, #156]	@ (80084f8 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 800845a:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800845c:	d12c      	bne.n	80084b8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800845e:	f7fe fc99 	bl	8006d94 <HAL_GetTick>
 8008462:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	0199      	lsls	r1, r3, #6
 8008468:	d420      	bmi.n	80084ac <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800846a:	6a2b      	ldr	r3, [r5, #32]
 800846c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008470:	d105      	bne.n	800847e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008472:	6862      	ldr	r2, [r4, #4]
 8008474:	68a9      	ldr	r1, [r5, #8]
 8008476:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800847a:	430a      	orrs	r2, r1
 800847c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800847e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8008480:	6862      	ldr	r2, [r4, #4]
 8008482:	430b      	orrs	r3, r1
 8008484:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8008488:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800848a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800848c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800848e:	4b1a      	ldr	r3, [pc, #104]	@ (80084f8 <HAL_RCC_OscConfig+0x334>)
 8008490:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8008492:	f7fe fc7f 	bl	8006d94 <HAL_GetTick>
 8008496:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	019a      	lsls	r2, r3, #6
 800849c:	f53f aea8 	bmi.w	80081f0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084a0:	f7fe fc78 	bl	8006d94 <HAL_GetTick>
 80084a4:	1b40      	subs	r0, r0, r5
 80084a6:	2802      	cmp	r0, #2
 80084a8:	d9f6      	bls.n	8008498 <HAL_RCC_OscConfig+0x2d4>
 80084aa:	e6cc      	b.n	8008246 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084ac:	f7fe fc72 	bl	8006d94 <HAL_GetTick>
 80084b0:	1b80      	subs	r0, r0, r6
 80084b2:	2802      	cmp	r0, #2
 80084b4:	d9d6      	bls.n	8008464 <HAL_RCC_OscConfig+0x2a0>
 80084b6:	e6c6      	b.n	8008246 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80084b8:	f7fe fc6c 	bl	8006d94 <HAL_GetTick>
 80084bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	019b      	lsls	r3, r3, #6
 80084c2:	f57f ae95 	bpl.w	80081f0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084c6:	f7fe fc65 	bl	8006d94 <HAL_GetTick>
 80084ca:	1b40      	subs	r0, r0, r5
 80084cc:	2802      	cmp	r0, #2
 80084ce:	d9f6      	bls.n	80084be <HAL_RCC_OscConfig+0x2fa>
 80084d0:	e6b9      	b.n	8008246 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	f43f aea2 	beq.w	800821c <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 80084d8:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084da:	6a2b      	ldr	r3, [r5, #32]
 80084dc:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80084e0:	429a      	cmp	r2, r3
 80084e2:	f47f ae9b 	bne.w	800821c <HAL_RCC_OscConfig+0x58>
 80084e6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80084e8:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084ec:	1ac0      	subs	r0, r0, r3
 80084ee:	bf18      	it	ne
 80084f0:	2001      	movne	r0, #1
 80084f2:	e6a9      	b.n	8008248 <HAL_RCC_OscConfig+0x84>
 80084f4:	40021000 	.word	0x40021000
 80084f8:	42420000 	.word	0x42420000

080084fc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80084fc:	4a0d      	ldr	r2, [pc, #52]	@ (8008534 <HAL_RCC_GetSysClockFreq+0x38>)
 80084fe:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8008500:	f003 010c 	and.w	r1, r3, #12
 8008504:	2908      	cmp	r1, #8
 8008506:	d112      	bne.n	800852e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008508:	480b      	ldr	r0, [pc, #44]	@ (8008538 <HAL_RCC_GetSysClockFreq+0x3c>)
 800850a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800850e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008510:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008512:	d509      	bpl.n	8008528 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008514:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008516:	4a09      	ldr	r2, [pc, #36]	@ (800853c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008518:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800851c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800851e:	4a08      	ldr	r2, [pc, #32]	@ (8008540 <HAL_RCC_GetSysClockFreq+0x44>)
 8008520:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008522:	fbb0 f0f3 	udiv	r0, r0, r3
 8008526:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008528:	4b06      	ldr	r3, [pc, #24]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x48>)
 800852a:	4358      	muls	r0, r3
 800852c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800852e:	4803      	ldr	r0, [pc, #12]	@ (800853c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	40021000 	.word	0x40021000
 8008538:	0800dfe4 	.word	0x0800dfe4
 800853c:	007a1200 	.word	0x007a1200
 8008540:	0800dfe2 	.word	0x0800dfe2
 8008544:	003d0900 	.word	0x003d0900

08008548 <HAL_RCC_ClockConfig>:
{
 8008548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800854c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800854e:	4604      	mov	r4, r0
 8008550:	b910      	cbnz	r0, 8008558 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8008552:	2001      	movs	r0, #1
}
 8008554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008558:	4a44      	ldr	r2, [pc, #272]	@ (800866c <HAL_RCC_ClockConfig+0x124>)
 800855a:	6813      	ldr	r3, [r2, #0]
 800855c:	f003 0307 	and.w	r3, r3, #7
 8008560:	428b      	cmp	r3, r1
 8008562:	d328      	bcc.n	80085b6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008564:	6821      	ldr	r1, [r4, #0]
 8008566:	078e      	lsls	r6, r1, #30
 8008568:	d430      	bmi.n	80085cc <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800856a:	07ca      	lsls	r2, r1, #31
 800856c:	d443      	bmi.n	80085f6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800856e:	4a3f      	ldr	r2, [pc, #252]	@ (800866c <HAL_RCC_ClockConfig+0x124>)
 8008570:	6813      	ldr	r3, [r2, #0]
 8008572:	f003 0307 	and.w	r3, r3, #7
 8008576:	42ab      	cmp	r3, r5
 8008578:	d865      	bhi.n	8008646 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800857a:	6822      	ldr	r2, [r4, #0]
 800857c:	4d3c      	ldr	r5, [pc, #240]	@ (8008670 <HAL_RCC_ClockConfig+0x128>)
 800857e:	f012 0f04 	tst.w	r2, #4
 8008582:	d16c      	bne.n	800865e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008584:	0713      	lsls	r3, r2, #28
 8008586:	d506      	bpl.n	8008596 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008588:	686b      	ldr	r3, [r5, #4]
 800858a:	6922      	ldr	r2, [r4, #16]
 800858c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8008590:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008594:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008596:	f7ff ffb1 	bl	80084fc <HAL_RCC_GetSysClockFreq>
 800859a:	686b      	ldr	r3, [r5, #4]
 800859c:	4a35      	ldr	r2, [pc, #212]	@ (8008674 <HAL_RCC_ClockConfig+0x12c>)
 800859e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80085a2:	5cd3      	ldrb	r3, [r2, r3]
 80085a4:	40d8      	lsrs	r0, r3
 80085a6:	4b34      	ldr	r3, [pc, #208]	@ (8008678 <HAL_RCC_ClockConfig+0x130>)
 80085a8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80085aa:	4b34      	ldr	r3, [pc, #208]	@ (800867c <HAL_RCC_ClockConfig+0x134>)
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	f7fe fbaf 	bl	8006d10 <HAL_InitTick>
  return HAL_OK;
 80085b2:	2000      	movs	r0, #0
 80085b4:	e7ce      	b.n	8008554 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085b6:	6813      	ldr	r3, [r2, #0]
 80085b8:	f023 0307 	bic.w	r3, r3, #7
 80085bc:	430b      	orrs	r3, r1
 80085be:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085c0:	6813      	ldr	r3, [r2, #0]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	428b      	cmp	r3, r1
 80085c8:	d1c3      	bne.n	8008552 <HAL_RCC_ClockConfig+0xa>
 80085ca:	e7cb      	b.n	8008564 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085cc:	4b28      	ldr	r3, [pc, #160]	@ (8008670 <HAL_RCC_ClockConfig+0x128>)
 80085ce:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085d2:	bf1e      	ittt	ne
 80085d4:	685a      	ldrne	r2, [r3, #4]
 80085d6:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 80085da:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085dc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085de:	bf42      	ittt	mi
 80085e0:	685a      	ldrmi	r2, [r3, #4]
 80085e2:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 80085e6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	68a0      	ldr	r0, [r4, #8]
 80085ec:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80085f0:	4302      	orrs	r2, r0
 80085f2:	605a      	str	r2, [r3, #4]
 80085f4:	e7b9      	b.n	800856a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085f6:	6862      	ldr	r2, [r4, #4]
 80085f8:	4e1d      	ldr	r6, [pc, #116]	@ (8008670 <HAL_RCC_ClockConfig+0x128>)
 80085fa:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085fc:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085fe:	d11a      	bne.n	8008636 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008600:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008604:	d0a5      	beq.n	8008552 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008606:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008608:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800860c:	f023 0303 	bic.w	r3, r3, #3
 8008610:	4313      	orrs	r3, r2
 8008612:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8008614:	f7fe fbbe 	bl	8006d94 <HAL_GetTick>
 8008618:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800861a:	6873      	ldr	r3, [r6, #4]
 800861c:	6862      	ldr	r2, [r4, #4]
 800861e:	f003 030c 	and.w	r3, r3, #12
 8008622:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008626:	d0a2      	beq.n	800856e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008628:	f7fe fbb4 	bl	8006d94 <HAL_GetTick>
 800862c:	1bc0      	subs	r0, r0, r7
 800862e:	4540      	cmp	r0, r8
 8008630:	d9f3      	bls.n	800861a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8008632:	2003      	movs	r0, #3
 8008634:	e78e      	b.n	8008554 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008636:	2a02      	cmp	r2, #2
 8008638:	d102      	bne.n	8008640 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800863a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800863e:	e7e1      	b.n	8008604 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008640:	f013 0f02 	tst.w	r3, #2
 8008644:	e7de      	b.n	8008604 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008646:	6813      	ldr	r3, [r2, #0]
 8008648:	f023 0307 	bic.w	r3, r3, #7
 800864c:	432b      	orrs	r3, r5
 800864e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008650:	6813      	ldr	r3, [r2, #0]
 8008652:	f003 0307 	and.w	r3, r3, #7
 8008656:	42ab      	cmp	r3, r5
 8008658:	f47f af7b 	bne.w	8008552 <HAL_RCC_ClockConfig+0xa>
 800865c:	e78d      	b.n	800857a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800865e:	686b      	ldr	r3, [r5, #4]
 8008660:	68e1      	ldr	r1, [r4, #12]
 8008662:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008666:	430b      	orrs	r3, r1
 8008668:	606b      	str	r3, [r5, #4]
 800866a:	e78b      	b.n	8008584 <HAL_RCC_ClockConfig+0x3c>
 800866c:	40022000 	.word	0x40022000
 8008670:	40021000 	.word	0x40021000
 8008674:	0800dfd2 	.word	0x0800dfd2
 8008678:	20000000 	.word	0x20000000
 800867c:	20000010 	.word	0x20000010

08008680 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008680:	4b04      	ldr	r3, [pc, #16]	@ (8008694 <HAL_RCC_GetPCLK1Freq+0x14>)
 8008682:	4a05      	ldr	r2, [pc, #20]	@ (8008698 <HAL_RCC_GetPCLK1Freq+0x18>)
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800868a:	5cd3      	ldrb	r3, [r2, r3]
 800868c:	4a03      	ldr	r2, [pc, #12]	@ (800869c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800868e:	6810      	ldr	r0, [r2, #0]
}
 8008690:	40d8      	lsrs	r0, r3
 8008692:	4770      	bx	lr
 8008694:	40021000 	.word	0x40021000
 8008698:	0800dfca 	.word	0x0800dfca
 800869c:	20000000 	.word	0x20000000

080086a0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80086a0:	4b04      	ldr	r3, [pc, #16]	@ (80086b4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80086a2:	4a05      	ldr	r2, [pc, #20]	@ (80086b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80086aa:	5cd3      	ldrb	r3, [r2, r3]
 80086ac:	4a03      	ldr	r2, [pc, #12]	@ (80086bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80086ae:	6810      	ldr	r0, [r2, #0]
}
 80086b0:	40d8      	lsrs	r0, r3
 80086b2:	4770      	bx	lr
 80086b4:	40021000 	.word	0x40021000
 80086b8:	0800dfca 	.word	0x0800dfca
 80086bc:	20000000 	.word	0x20000000

080086c0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80086c0:	6803      	ldr	r3, [r0, #0]
{
 80086c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80086c6:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80086c8:	07d8      	lsls	r0, r3, #31
 80086ca:	d521      	bpl.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086cc:	4c36      	ldr	r4, [pc, #216]	@ (80087a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80086ce:	69e3      	ldr	r3, [r4, #28]
 80086d0:	00d9      	lsls	r1, r3, #3
 80086d2:	d42b      	bmi.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80086d4:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80086d6:	69e3      	ldr	r3, [r4, #28]
 80086d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086dc:	61e3      	str	r3, [r4, #28]
 80086de:	69e3      	ldr	r3, [r4, #28]
 80086e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086e8:	4f30      	ldr	r7, [pc, #192]	@ (80087ac <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	05da      	lsls	r2, r3, #23
 80086ee:	d51f      	bpl.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086f0:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086f2:	686a      	ldr	r2, [r5, #4]
 80086f4:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80086f8:	d12e      	bne.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086fa:	6a23      	ldr	r3, [r4, #32]
 80086fc:	686a      	ldr	r2, [r5, #4]
 80086fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008702:	4313      	orrs	r3, r2
 8008704:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008706:	b11e      	cbz	r6, 8008710 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008708:	69e3      	ldr	r3, [r4, #28]
 800870a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800870e:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008710:	682a      	ldr	r2, [r5, #0]
 8008712:	0791      	lsls	r1, r2, #30
 8008714:	d506      	bpl.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008716:	4924      	ldr	r1, [pc, #144]	@ (80087a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008718:	68a8      	ldr	r0, [r5, #8]
 800871a:	684b      	ldr	r3, [r1, #4]
 800871c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8008720:	4303      	orrs	r3, r0
 8008722:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008724:	06d3      	lsls	r3, r2, #27
 8008726:	d436      	bmi.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008728:	2000      	movs	r0, #0
 800872a:	e012      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 800872c:	2600      	movs	r6, #0
 800872e:	e7db      	b.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008736:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8008738:	f7fe fb2c 	bl	8006d94 <HAL_GetTick>
 800873c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	05db      	lsls	r3, r3, #23
 8008742:	d4d5      	bmi.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008744:	f7fe fb26 	bl	8006d94 <HAL_GetTick>
 8008748:	eba0 0008 	sub.w	r0, r0, r8
 800874c:	2864      	cmp	r0, #100	@ 0x64
 800874e:	d9f6      	bls.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8008750:	2003      	movs	r0, #3
}
 8008752:	b002      	add	sp, #8
 8008754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008758:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800875c:	429a      	cmp	r2, r3
 800875e:	d0cc      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8008760:	2001      	movs	r0, #1
 8008762:	4a13      	ldr	r2, [pc, #76]	@ (80087b0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008764:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8008766:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800876a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800876c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008770:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008772:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8008776:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008778:	d5bf      	bpl.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 800877a:	f7fe fb0b 	bl	8006d94 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800877e:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8008782:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008784:	6a23      	ldr	r3, [r4, #32]
 8008786:	0798      	lsls	r0, r3, #30
 8008788:	d4b7      	bmi.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800878a:	f7fe fb03 	bl	8006d94 <HAL_GetTick>
 800878e:	1bc0      	subs	r0, r0, r7
 8008790:	4540      	cmp	r0, r8
 8008792:	d9f7      	bls.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8008794:	e7dc      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008796:	4a04      	ldr	r2, [pc, #16]	@ (80087a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008798:	68e9      	ldr	r1, [r5, #12]
 800879a:	6853      	ldr	r3, [r2, #4]
 800879c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80087a0:	430b      	orrs	r3, r1
 80087a2:	6053      	str	r3, [r2, #4]
 80087a4:	e7c0      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80087a6:	bf00      	nop
 80087a8:	40021000 	.word	0x40021000
 80087ac:	40007000 	.word	0x40007000
 80087b0:	42420000 	.word	0x42420000

080087b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80087b4:	2802      	cmp	r0, #2
{
 80087b6:	b508      	push	{r3, lr}
  switch (PeriphClk)
 80087b8:	d044      	beq.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80087ba:	2810      	cmp	r0, #16
 80087bc:	d003      	beq.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 80087be:	2801      	cmp	r0, #1
 80087c0:	d022      	beq.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 80087c2:	2000      	movs	r0, #0
 80087c4:	e034      	b.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80087c6:	4b25      	ldr	r3, [pc, #148]	@ (800885c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80087c8:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80087ca:	6818      	ldr	r0, [r3, #0]
 80087cc:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 80087d0:	d02e      	beq.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80087d2:	f3c2 4183 	ubfx	r1, r2, #18, #4
 80087d6:	4822      	ldr	r0, [pc, #136]	@ (8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80087d8:	03d2      	lsls	r2, r2, #15
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80087da:	bf48      	it	mi
 80087dc:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80087de:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80087e0:	bf41      	itttt	mi
 80087e2:	4920      	ldrmi	r1, [pc, #128]	@ (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80087e4:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 80087e8:	5c89      	ldrbmi	r1, [r1, r2]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80087ea:	4a1f      	ldrmi	r2, [pc, #124]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80087ec:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80087ee:	bf4c      	ite	mi
 80087f0:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80087f4:	4a1d      	ldrpl	r2, [pc, #116]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80087f6:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80087f8:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80087fc:	d418      	bmi.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 80087fe:	2303      	movs	r3, #3
 8008800:	0040      	lsls	r0, r0, #1
      }
      break;
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008802:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8008806:	e013      	b.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008808:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 800880c:	4a13      	ldr	r2, [pc, #76]	@ (800885c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800880e:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008810:	4019      	ands	r1, r3
 8008812:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 8008816:	d01e      	beq.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008818:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800881c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008820:	d107      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  uint32_t temp_reg = 0U, frequency = 0U;
 8008822:	f649 4040 	movw	r0, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008826:	6a53      	ldr	r3, [r2, #36]	@ 0x24
  uint32_t temp_reg = 0U, frequency = 0U;
 8008828:	f013 0f02 	tst.w	r3, #2
 800882c:	bf08      	it	eq
 800882e:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8008830:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008836:	d1c4      	bne.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8008838:	6813      	ldr	r3, [r2, #0]
  uint32_t temp_reg = 0U, frequency = 0U;
 800883a:	f24f 4024 	movw	r0, #62500	@ 0xf424
 800883e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8008842:	e7f3      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008844:	f7ff ff2c 	bl	80086a0 <HAL_RCC_GetPCLK2Freq>
 8008848:	4b04      	ldr	r3, [pc, #16]	@ (800885c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8008850:	3301      	adds	r3, #1
 8008852:	005b      	lsls	r3, r3, #1
 8008854:	e7d5      	b.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 8008856:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800885a:	e7e9      	b.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800885c:	40021000 	.word	0x40021000
 8008860:	0800dff6 	.word	0x0800dff6
 8008864:	0800dff4 	.word	0x0800dff4
 8008868:	007a1200 	.word	0x007a1200
 800886c:	003d0900 	.word	0x003d0900

08008870 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8008874:	f7fe fa8e 	bl	8006d94 <HAL_GetTick>
 8008878:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	0692      	lsls	r2, r2, #26
 8008880:	d505      	bpl.n	800888e <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 8008882:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	f042 0210 	orr.w	r2, r2, #16
 800888a:	605a      	str	r2, [r3, #4]
}
 800888c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800888e:	f7fe fa81 	bl	8006d94 <HAL_GetTick>
 8008892:	1b40      	subs	r0, r0, r5
 8008894:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008898:	d9ef      	bls.n	800887a <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 800889a:	2003      	movs	r0, #3
 800889c:	e7f6      	b.n	800888c <RTC_EnterInitMode+0x1c>

0800889e <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800889e:	6802      	ldr	r2, [r0, #0]
{
 80088a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088a2:	6853      	ldr	r3, [r2, #4]
{
 80088a4:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088a6:	f023 0310 	bic.w	r3, r3, #16
 80088aa:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 80088ac:	f7fe fa72 	bl	8006d94 <HAL_GetTick>
 80088b0:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	069b      	lsls	r3, r3, #26
 80088b8:	d501      	bpl.n	80088be <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80088ba:	2000      	movs	r0, #0
}
 80088bc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80088be:	f7fe fa69 	bl	8006d94 <HAL_GetTick>
 80088c2:	1b40      	subs	r0, r0, r5
 80088c4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80088c8:	d9f3      	bls.n	80088b2 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80088ca:	2003      	movs	r0, #3
 80088cc:	e7f6      	b.n	80088bc <RTC_ExitInitMode+0x1e>

080088ce <HAL_RTC_WaitForSynchro>:
{
 80088ce:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80088d0:	4604      	mov	r4, r0
 80088d2:	b1a8      	cbz	r0, 8008900 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80088d4:	6802      	ldr	r2, [r0, #0]
 80088d6:	6853      	ldr	r3, [r2, #4]
 80088d8:	f023 0308 	bic.w	r3, r3, #8
 80088dc:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80088de:	f7fe fa59 	bl	8006d94 <HAL_GetTick>
 80088e2:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	071b      	lsls	r3, r3, #28
 80088ea:	d501      	bpl.n	80088f0 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 80088ec:	2000      	movs	r0, #0
}
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80088f0:	f7fe fa50 	bl	8006d94 <HAL_GetTick>
 80088f4:	1b40      	subs	r0, r0, r5
 80088f6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80088fa:	d9f3      	bls.n	80088e4 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 80088fc:	2003      	movs	r0, #3
 80088fe:	e7f6      	b.n	80088ee <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8008900:	2001      	movs	r0, #1
 8008902:	e7f4      	b.n	80088ee <HAL_RTC_WaitForSynchro+0x20>

08008904 <HAL_RTC_Init>:
{
 8008904:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8008906:	4604      	mov	r4, r0
 8008908:	b170      	cbz	r0, 8008928 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800890a:	7c43      	ldrb	r3, [r0, #17]
 800890c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008910:	b913      	cbnz	r3, 8008918 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8008912:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8008914:	f7fe f86a 	bl	80069ec <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008918:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800891a:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 800891c:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800891e:	f7ff ffd6 	bl	80088ce <HAL_RTC_WaitForSynchro>
 8008922:	b118      	cbz	r0, 800892c <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008924:	2304      	movs	r3, #4
 8008926:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8008928:	2001      	movs	r0, #1
}
 800892a:	bd10      	pop	{r4, pc}
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800892c:	4620      	mov	r0, r4
 800892e:	f7ff ff9f 	bl	8008870 <RTC_EnterInitMode>
 8008932:	2800      	cmp	r0, #0
 8008934:	d1f6      	bne.n	8008924 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8008936:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8008938:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800893a:	6853      	ldr	r3, [r2, #4]
 800893c:	f023 0307 	bic.w	r3, r3, #7
 8008940:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8008942:	4a12      	ldr	r2, [pc, #72]	@ (800898c <HAL_RTC_Init+0x88>)
 8008944:	b119      	cbz	r1, 800894e <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8008946:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008948:	f023 0301 	bic.w	r3, r3, #1
 800894c:	6313      	str	r3, [r2, #48]	@ 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800894e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008950:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 8008954:	430b      	orrs	r3, r1
 8008956:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8008958:	6860      	ldr	r0, [r4, #4]
 800895a:	1c43      	adds	r3, r0, #1
 800895c:	d105      	bne.n	800896a <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800895e:	2001      	movs	r0, #1
 8008960:	f7ff ff28 	bl	80087b4 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8008964:	2800      	cmp	r0, #0
 8008966:	d0dd      	beq.n	8008924 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8008968:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8008970:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8008972:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8008974:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008976:	4620      	mov	r0, r4
 8008978:	f7ff ff91 	bl	800889e <RTC_ExitInitMode>
 800897c:	2800      	cmp	r0, #0
 800897e:	d1d1      	bne.n	8008924 <HAL_RTC_Init+0x20>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8008980:	2301      	movs	r3, #1
 8008982:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8008984:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8008986:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8008988:	e7cf      	b.n	800892a <HAL_RTC_Init+0x26>
 800898a:	bf00      	nop
 800898c:	40006c00 	.word	0x40006c00

08008990 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 8008990:	0089      	lsls	r1, r1, #2
 8008992:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8008996:	f501 41d8 	add.w	r1, r1, #27648	@ 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800899a:	b292      	uxth	r2, r2
 800899c:	600a      	str	r2, [r1, #0]
}
 800899e:	4770      	bx	lr

080089a0 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 80089a0:	0089      	lsls	r1, r1, #2
 80089a2:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80089a6:	f501 41d8 	add.w	r1, r1, #27648	@ 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80089aa:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 80089ac:	b280      	uxth	r0, r0
 80089ae:	4770      	bx	lr

080089b0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089b0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b2:	f102 030c 	add.w	r3, r2, #12
 80089b6:	e853 3f00 	ldrex	r3, [r3]
 80089ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089be:	320c      	adds	r2, #12
 80089c0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80089c4:	6802      	ldr	r2, [r0, #0]
 80089c6:	2900      	cmp	r1, #0
 80089c8:	d1f2      	bne.n	80089b0 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ca:	f102 0314 	add.w	r3, r2, #20
 80089ce:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d6:	f102 0c14 	add.w	ip, r2, #20
 80089da:	e84c 3100 	strex	r1, r3, [ip]
 80089de:	2900      	cmp	r1, #0
 80089e0:	d1f3      	bne.n	80089ca <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d10b      	bne.n	8008a00 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e8:	f102 030c 	add.w	r3, r2, #12
 80089ec:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f4:	f102 0c0c 	add.w	ip, r2, #12
 80089f8:	e84c 3100 	strex	r1, r3, [ip]
 80089fc:	2900      	cmp	r1, #0
 80089fe:	d1f3      	bne.n	80089e8 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a00:	2320      	movs	r3, #32
 8008a02:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a06:	2300      	movs	r3, #0
 8008a08:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8008a0a:	4770      	bx	lr

08008a0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a10:	6803      	ldr	r3, [r0, #0]
 8008a12:	68c1      	ldr	r1, [r0, #12]
 8008a14:	691a      	ldr	r2, [r3, #16]
 8008a16:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008a1e:	6882      	ldr	r2, [r0, #8]
 8008a20:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8008a22:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008a24:	4302      	orrs	r2, r0
 8008a26:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8008a28:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8008a2c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008a30:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8008a32:	430a      	orrs	r2, r1
 8008a34:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a36:	695a      	ldr	r2, [r3, #20]
 8008a38:	69a1      	ldr	r1, [r4, #24]
 8008a3a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008a42:	4a0e      	ldr	r2, [pc, #56]	@ (8008a7c <UART_SetConfig+0x70>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d115      	bne.n	8008a74 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008a48:	f7ff fe2a 	bl	80086a0 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a4c:	2319      	movs	r3, #25
 8008a4e:	4343      	muls	r3, r0
 8008a50:	6862      	ldr	r2, [r4, #4]
 8008a52:	6820      	ldr	r0, [r4, #0]
 8008a54:	0092      	lsls	r2, r2, #2
 8008a56:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a5a:	2264      	movs	r2, #100	@ 0x64
 8008a5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a60:	fb02 3311 	mls	r3, r2, r1, r3
 8008a64:	011b      	lsls	r3, r3, #4
 8008a66:	3332      	adds	r3, #50	@ 0x32
 8008a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a6c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8008a70:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8008a72:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8008a74:	f7ff fe04 	bl	8008680 <HAL_RCC_GetPCLK1Freq>
 8008a78:	e7e8      	b.n	8008a4c <UART_SetConfig+0x40>
 8008a7a:	bf00      	nop
 8008a7c:	40013800 	.word	0x40013800

08008a80 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8008a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a82:	4605      	mov	r5, r0
 8008a84:	460c      	mov	r4, r1
 8008a86:	4617      	mov	r7, r2
 8008a88:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a8a:	682a      	ldr	r2, [r5, #0]
 8008a8c:	6813      	ldr	r3, [r2, #0]
 8008a8e:	ea34 0303 	bics.w	r3, r4, r3
 8008a92:	d101      	bne.n	8008a98 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8008a94:	2000      	movs	r0, #0
 8008a96:	e021      	b.n	8008adc <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8008a98:	1c70      	adds	r0, r6, #1
 8008a9a:	d0f7      	beq.n	8008a8c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a9c:	f7fe f97a 	bl	8006d94 <HAL_GetTick>
 8008aa0:	1bc0      	subs	r0, r0, r7
 8008aa2:	4286      	cmp	r6, r0
 8008aa4:	d31c      	bcc.n	8008ae0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8008aa6:	b1de      	cbz	r6, 8008ae0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	68da      	ldr	r2, [r3, #12]
 8008aac:	0751      	lsls	r1, r2, #29
 8008aae:	d5ec      	bpl.n	8008a8a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8008ab0:	2c80      	cmp	r4, #128	@ 0x80
 8008ab2:	d0ea      	beq.n	8008a8a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8008ab4:	2c40      	cmp	r4, #64	@ 0x40
 8008ab6:	d0e8      	beq.n	8008a8a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	0712      	lsls	r2, r2, #28
 8008abc:	d5e5      	bpl.n	8008a8a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008abe:	2400      	movs	r4, #0
 8008ac0:	9401      	str	r4, [sp, #4]
 8008ac2:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 8008ac4:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008ac6:	9201      	str	r2, [sp, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	9301      	str	r3, [sp, #4]
 8008acc:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8008ace:	f7ff ff6f 	bl	80089b0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ad2:	2308      	movs	r3, #8
          return HAL_ERROR;
 8008ad4:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ad6:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8008ad8:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
}
 8008adc:	b003      	add	sp, #12
 8008ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008ae0:	2003      	movs	r0, #3
 8008ae2:	e7fb      	b.n	8008adc <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08008ae4 <HAL_UART_Init>:
{
 8008ae4:	b510      	push	{r4, lr}
  if (huart == NULL)
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	b348      	cbz	r0, 8008b3e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008aea:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8008aee:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008af2:	b91b      	cbnz	r3, 8008afc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8008af4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8008af8:	f7fe f852 	bl	8006ba0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8008afc:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8008afe:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008b00:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8008b04:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8008b06:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8008b08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b0c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8008b0e:	f7ff ff7d 	bl	8008a0c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b12:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b14:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b16:	691a      	ldr	r2, [r3, #16]
 8008b18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b1e:	695a      	ldr	r2, [r3, #20]
 8008b20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b24:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8008b26:	68da      	ldr	r2, [r3, #12]
 8008b28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b2c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008b2e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b30:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008b32:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008b36:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b3a:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8008b3c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008b3e:	2001      	movs	r0, #1
 8008b40:	e7fc      	b.n	8008b3c <HAL_UART_Init+0x58>

08008b42 <HAL_UART_DeInit>:
{
 8008b42:	b510      	push	{r4, lr}
  if (huart == NULL)
 8008b44:	4604      	mov	r4, r0
 8008b46:	b1a0      	cbz	r0, 8008b72 <HAL_UART_DeInit+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 8008b48:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8008b4a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008b4c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8008b50:	68d3      	ldr	r3, [r2, #12]
 8008b52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b56:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8008b58:	f7fe f87e 	bl	8006c58 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(huart);
 8008b60:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8008b64:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8008b68:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b6c:	6320      	str	r0, [r4, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b6e:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8008b70:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008b72:	2001      	movs	r0, #1
 8008b74:	e7fc      	b.n	8008b70 <HAL_UART_DeInit+0x2e>

08008b76 <HAL_UART_Transmit>:
{
 8008b76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b7a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008b7c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008b80:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8008b82:	2b20      	cmp	r3, #32
{
 8008b84:	460e      	mov	r6, r1
 8008b86:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8008b88:	d13f      	bne.n	8008c0a <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8008b8a:	2900      	cmp	r1, #0
 8008b8c:	d03f      	beq.n	8008c0e <HAL_UART_Transmit+0x98>
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	d03d      	beq.n	8008c0e <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b92:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b94:	2500      	movs	r5, #0
 8008b96:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b98:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8008b9c:	f7fe f8fa 	bl	8006d94 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba0:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8008ba2:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 8008ba8:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008baa:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bac:	d103      	bne.n	8008bb6 <HAL_UART_Transmit+0x40>
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	b90b      	cbnz	r3, 8008bb6 <HAL_UART_Transmit+0x40>
      pdata16bits = (const uint16_t *) pData;
 8008bb2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8008bb4:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8008bb6:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	b953      	cbnz	r3, 8008bd2 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bbc:	4643      	mov	r3, r8
 8008bbe:	464a      	mov	r2, r9
 8008bc0:	2140      	movs	r1, #64	@ 0x40
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f7ff ff5c 	bl	8008a80 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8008bc8:	2320      	movs	r3, #32
 8008bca:	b950      	cbnz	r0, 8008be2 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8008bcc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8008bd0:	e00a      	b.n	8008be8 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bd2:	4643      	mov	r3, r8
 8008bd4:	464a      	mov	r2, r9
 8008bd6:	2180      	movs	r1, #128	@ 0x80
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f7ff ff51 	bl	8008a80 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8008bde:	b128      	cbz	r0, 8008bec <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8008be0:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8008be2:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8008be4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8008be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bec:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8008bee:	b94e      	cbnz	r6, 8008c04 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bf0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8008bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bf8:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8008bfa:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8008bfc:	3901      	subs	r1, #1
 8008bfe:	b289      	uxth	r1, r1
 8008c00:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8008c02:	e7d8      	b.n	8008bb6 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c04:	f816 3b01 	ldrb.w	r3, [r6], #1
 8008c08:	e7f6      	b.n	8008bf8 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8008c0a:	2002      	movs	r0, #2
 8008c0c:	e7ec      	b.n	8008be8 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8008c0e:	2001      	movs	r0, #1
 8008c10:	e7ea      	b.n	8008be8 <HAL_UART_Transmit+0x72>

08008c12 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8008c12:	4770      	bx	lr

08008c14 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8008c14:	4770      	bx	lr

08008c16 <UART_DMAError>:
{
 8008c16:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c18:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008c1a:	6803      	ldr	r3, [r0, #0]
 8008c1c:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008c1e:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8008c22:	2921      	cmp	r1, #33	@ 0x21
 8008c24:	d112      	bne.n	8008c4c <UART_DMAError+0x36>
 8008c26:	0612      	lsls	r2, r2, #24
 8008c28:	d510      	bpl.n	8008c4c <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	84c2      	strh	r2, [r0, #38]	@ 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2e:	f103 020c 	add.w	r2, r3, #12
 8008c32:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c36:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3a:	f103 0c0c 	add.w	ip, r3, #12
 8008c3e:	e84c 2100 	strex	r1, r2, [ip]
 8008c42:	2900      	cmp	r1, #0
 8008c44:	d1f3      	bne.n	8008c2e <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 8008c46:	2220      	movs	r2, #32
 8008c48:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c4c:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c4e:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
 8008c52:	2a22      	cmp	r2, #34	@ 0x22
 8008c54:	d105      	bne.n	8008c62 <UART_DMAError+0x4c>
 8008c56:	065b      	lsls	r3, r3, #25
 8008c58:	d503      	bpl.n	8008c62 <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008c5e:	f7ff fea7 	bl	80089b0 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c62:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8008c64:	f043 0310 	orr.w	r3, r3, #16
 8008c68:	6443      	str	r3, [r0, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8008c6a:	f7fd ff96 	bl	8006b9a <HAL_UART_ErrorCallback>
}
 8008c6e:	bd08      	pop	{r3, pc}

08008c70 <UART_DMAAbortOnError>:
{
 8008c70:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8008c72:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c74:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8008c76:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008c78:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8008c7a:	f7fd ff8e 	bl	8006b9a <HAL_UART_ErrorCallback>
}
 8008c7e:	bd08      	pop	{r3, pc}

08008c80 <HAL_UARTEx_RxEventCallback>:
}
 8008c80:	4770      	bx	lr

08008c82 <UART_DMARxHalfCplt>:
{
 8008c82:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008c84:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c86:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008c88:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c8a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d104      	bne.n	8008c9a <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008c90:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8008c92:	0849      	lsrs	r1, r1, #1
 8008c94:	f7ff fff4 	bl	8008c80 <HAL_UARTEx_RxEventCallback>
}
 8008c98:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8008c9a:	f7ff ffbb 	bl	8008c14 <HAL_UART_RxHalfCpltCallback>
}
 8008c9e:	e7fb      	b.n	8008c98 <UART_DMARxHalfCplt+0x16>

08008ca0 <UART_DMAReceiveCplt>:
{
 8008ca0:	b508      	push	{r3, lr}
 8008ca2:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008ca4:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ca6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f013 0320 	ands.w	r3, r3, #32
 8008cae:	d137      	bne.n	8008d20 <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 8008cb0:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cb2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb4:	f102 030c 	add.w	r3, r2, #12
 8008cb8:	e853 3f00 	ldrex	r3, [r3]
 8008cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc0:	320c      	adds	r2, #12
 8008cc2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8008cc6:	6803      	ldr	r3, [r0, #0]
 8008cc8:	2900      	cmp	r1, #0
 8008cca:	d1f2      	bne.n	8008cb2 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ccc:	f103 0214 	add.w	r2, r3, #20
 8008cd0:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd8:	f103 0c14 	add.w	ip, r3, #20
 8008cdc:	e84c 2100 	strex	r1, r2, [ip]
 8008ce0:	2900      	cmp	r1, #0
 8008ce2:	d1f3      	bne.n	8008ccc <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce4:	f103 0214 	add.w	r2, r3, #20
 8008ce8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf0:	f103 0c14 	add.w	ip, r3, #20
 8008cf4:	e84c 2100 	strex	r1, r2, [ip]
 8008cf8:	2900      	cmp	r1, #0
 8008cfa:	d1f3      	bne.n	8008ce4 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d02:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8008d04:	2a01      	cmp	r2, #1
 8008d06:	d10b      	bne.n	8008d20 <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d08:	f103 020c 	add.w	r2, r3, #12
 8008d0c:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d10:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	f103 0c0c 	add.w	ip, r3, #12
 8008d18:	e84c 2100 	strex	r1, r2, [ip]
 8008d1c:	2900      	cmp	r1, #0
 8008d1e:	d1f3      	bne.n	8008d08 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d20:	2300      	movs	r3, #0
 8008d22:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d24:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d103      	bne.n	8008d32 <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d2a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8008d2c:	f7ff ffa8 	bl	8008c80 <HAL_UARTEx_RxEventCallback>
}
 8008d30:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8008d32:	f7fd ff33 	bl	8006b9c <HAL_UART_RxCpltCallback>
}
 8008d36:	e7fb      	b.n	8008d30 <UART_DMAReceiveCplt+0x90>

08008d38 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d38:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8008d3c:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d3e:	2b22      	cmp	r3, #34	@ 0x22
 8008d40:	d142      	bne.n	8008dc8 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d42:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d44:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d46:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d4a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d4c:	d13f      	bne.n	8008dce <UART_Receive_IT.isra.0+0x96>
 8008d4e:	6901      	ldr	r1, [r0, #16]
 8008d50:	2900      	cmp	r1, #0
 8008d52:	d13f      	bne.n	8008dd4 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d54:	6852      	ldr	r2, [r2, #4]
 8008d56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d5a:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8008d5e:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8008d60:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8008d62:	3b01      	subs	r3, #1
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d12d      	bne.n	8008dc8 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d6c:	6802      	ldr	r2, [r0, #0]
 8008d6e:	68d1      	ldr	r1, [r2, #12]
 8008d70:	f021 0120 	bic.w	r1, r1, #32
 8008d74:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d76:	68d1      	ldr	r1, [r2, #12]
 8008d78:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8008d7c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d7e:	6951      	ldr	r1, [r2, #20]
 8008d80:	f021 0101 	bic.w	r1, r1, #1
 8008d84:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8008d86:	2220      	movs	r2, #32
 8008d88:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d8c:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d8e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8008d90:	2a01      	cmp	r2, #1
 8008d92:	6802      	ldr	r2, [r0, #0]
 8008d94:	d128      	bne.n	8008de8 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d96:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d98:	f102 030c 	add.w	r3, r2, #12
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da4:	f102 0c0c 	add.w	ip, r2, #12
 8008da8:	e84c 3100 	strex	r1, r3, [ip]
 8008dac:	2900      	cmp	r1, #0
 8008dae:	d1f3      	bne.n	8008d98 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008db0:	6813      	ldr	r3, [r2, #0]
 8008db2:	06db      	lsls	r3, r3, #27
 8008db4:	d505      	bpl.n	8008dc2 <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008db6:	9101      	str	r1, [sp, #4]
 8008db8:	6813      	ldr	r3, [r2, #0]
 8008dba:	9301      	str	r3, [sp, #4]
 8008dbc:	6853      	ldr	r3, [r2, #4]
 8008dbe:	9301      	str	r3, [sp, #4]
 8008dc0:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dc2:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8008dc4:	f7ff ff5c 	bl	8008c80 <HAL_UARTEx_RxEventCallback>
}
 8008dc8:	b003      	add	sp, #12
 8008dca:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008dce:	b939      	cbnz	r1, 8008de0 <UART_Receive_IT.isra.0+0xa8>
 8008dd0:	6901      	ldr	r1, [r0, #16]
 8008dd2:	b929      	cbnz	r1, 8008de0 <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008dd4:	6852      	ldr	r2, [r2, #4]
 8008dd6:	b2d2      	uxtb	r2, r2
 8008dd8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8008dda:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008ddc:	3301      	adds	r3, #1
 8008dde:	e7be      	b.n	8008d5e <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008de0:	6852      	ldr	r2, [r2, #4]
 8008de2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008de6:	e7f7      	b.n	8008dd8 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8008de8:	f7fd fed8 	bl	8006b9c <HAL_UART_RxCpltCallback>
 8008dec:	e7ec      	b.n	8008dc8 <UART_Receive_IT.isra.0+0x90>
	...

08008df0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008df0:	6803      	ldr	r3, [r0, #0]
{
 8008df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008df4:	681a      	ldr	r2, [r3, #0]
{
 8008df6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8008df8:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dfa:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dfc:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8008dfe:	d108      	bne.n	8008e12 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e00:	0696      	lsls	r6, r2, #26
 8008e02:	d568      	bpl.n	8008ed6 <HAL_UART_IRQHandler+0xe6>
 8008e04:	068d      	lsls	r5, r1, #26
 8008e06:	d566      	bpl.n	8008ed6 <HAL_UART_IRQHandler+0xe6>
}
 8008e08:	b002      	add	sp, #8
 8008e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8008e0e:	f7ff bf93 	b.w	8008d38 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e12:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e16:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 8008e1a:	4305      	orrs	r5, r0
 8008e1c:	d05b      	beq.n	8008ed6 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e1e:	07d6      	lsls	r6, r2, #31
 8008e20:	d505      	bpl.n	8008e2e <HAL_UART_IRQHandler+0x3e>
 8008e22:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e24:	bf42      	ittt	mi
 8008e26:	6c63      	ldrmi	r3, [r4, #68]	@ 0x44
 8008e28:	f043 0301 	orrmi.w	r3, r3, #1
 8008e2c:	6463      	strmi	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e2e:	0753      	lsls	r3, r2, #29
 8008e30:	d504      	bpl.n	8008e3c <HAL_UART_IRQHandler+0x4c>
 8008e32:	b118      	cbz	r0, 8008e3c <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e34:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008e36:	f043 0302 	orr.w	r3, r3, #2
 8008e3a:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e3c:	0796      	lsls	r6, r2, #30
 8008e3e:	d504      	bpl.n	8008e4a <HAL_UART_IRQHandler+0x5a>
 8008e40:	b118      	cbz	r0, 8008e4a <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e42:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008e44:	f043 0304 	orr.w	r3, r3, #4
 8008e48:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e4a:	0715      	lsls	r5, r2, #28
 8008e4c:	d507      	bpl.n	8008e5e <HAL_UART_IRQHandler+0x6e>
 8008e4e:	f001 0320 	and.w	r3, r1, #32
 8008e52:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e54:	bf1e      	ittt	ne
 8008e56:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 8008e58:	f043 0308 	orrne.w	r3, r3, #8
 8008e5c:	6463      	strne	r3, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e5e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d032      	beq.n	8008eca <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e64:	0692      	lsls	r2, r2, #26
 8008e66:	d504      	bpl.n	8008e72 <HAL_UART_IRQHandler+0x82>
 8008e68:	068b      	lsls	r3, r1, #26
 8008e6a:	d502      	bpl.n	8008e72 <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f7ff ff63 	bl	8008d38 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e72:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8008e74:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e76:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e78:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e7e:	f002 0208 	and.w	r2, r2, #8
 8008e82:	ea53 0502 	orrs.w	r5, r3, r2
 8008e86:	d022      	beq.n	8008ece <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8008e88:	f7ff fd92 	bl	80089b0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e8c:	6973      	ldr	r3, [r6, #20]
 8008e8e:	065e      	lsls	r6, r3, #25
 8008e90:	d518      	bpl.n	8008ec4 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e92:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	f102 0314 	add.w	r3, r2, #20
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea0:	3214      	adds	r2, #20
 8008ea2:	e842 3100 	strex	r1, r3, [r2]
 8008ea6:	2900      	cmp	r1, #0
 8008ea8:	d1f3      	bne.n	8008e92 <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8008eaa:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8008eac:	b150      	cbz	r0, 8008ec4 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008eae:	4b74      	ldr	r3, [pc, #464]	@ (8009080 <HAL_UART_IRQHandler+0x290>)
 8008eb0:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008eb2:	f7fe f8b3 	bl	800701c <HAL_DMA_Abort_IT>
 8008eb6:	b140      	cbz	r0, 8008eca <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008eb8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8008eba:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 8008ebc:	b002      	add	sp, #8
 8008ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ec2:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f7fd fe68 	bl	8006b9a <HAL_UART_ErrorCallback>
}
 8008eca:	b002      	add	sp, #8
 8008ecc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8008ece:	f7fd fe64 	bl	8006b9a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ed2:	6465      	str	r5, [r4, #68]	@ 0x44
 8008ed4:	e7f9      	b.n	8008eca <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008ed8:	2801      	cmp	r0, #1
 8008eda:	f040 8094 	bne.w	8009006 <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008ede:	06d5      	lsls	r5, r2, #27
 8008ee0:	f140 8091 	bpl.w	8009006 <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ee4:	06c8      	lsls	r0, r1, #27
 8008ee6:	f140 808e 	bpl.w	8009006 <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008eea:	2200      	movs	r2, #0
 8008eec:	9201      	str	r2, [sp, #4]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	9201      	str	r2, [sp, #4]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	9201      	str	r2, [sp, #4]
 8008ef6:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ef8:	695a      	ldr	r2, [r3, #20]
 8008efa:	0652      	lsls	r2, r2, #25
 8008efc:	d54d      	bpl.n	8008f9a <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008efe:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8008f00:	680a      	ldr	r2, [r1, #0]
 8008f02:	6852      	ldr	r2, [r2, #4]
 8008f04:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8008f06:	2a00      	cmp	r2, #0
 8008f08:	d0df      	beq.n	8008eca <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f0a:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 8008f0c:	4290      	cmp	r0, r2
 8008f0e:	d9dc      	bls.n	8008eca <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8008f10:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f12:	698a      	ldr	r2, [r1, #24]
 8008f14:	2a20      	cmp	r2, #32
 8008f16:	d036      	beq.n	8008f86 <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f18:	f103 020c 	add.w	r2, r3, #12
 8008f1c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	f103 000c 	add.w	r0, r3, #12
 8008f28:	e840 2100 	strex	r1, r2, [r0]
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	d1f3      	bne.n	8008f18 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f30:	f103 0214 	add.w	r2, r3, #20
 8008f34:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f38:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3c:	f103 0014 	add.w	r0, r3, #20
 8008f40:	e840 2100 	strex	r1, r2, [r0]
 8008f44:	2900      	cmp	r1, #0
 8008f46:	d1f3      	bne.n	8008f30 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	f103 0214 	add.w	r2, r3, #20
 8008f4c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f54:	f103 0014 	add.w	r0, r3, #20
 8008f58:	e840 2100 	strex	r1, r2, [r0]
 8008f5c:	2900      	cmp	r1, #0
 8008f5e:	d1f3      	bne.n	8008f48 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8008f60:	2220      	movs	r2, #32
 8008f62:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f66:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f68:	f103 020c 	add.w	r2, r3, #12
 8008f6c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f70:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f74:	f103 000c 	add.w	r0, r3, #12
 8008f78:	e840 2100 	strex	r1, r2, [r0]
 8008f7c:	2900      	cmp	r1, #0
 8008f7e:	d1f3      	bne.n	8008f68 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f80:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8008f82:	f7fe f82b 	bl	8006fdc <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f86:	2302      	movs	r3, #2
 8008f88:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f8a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8008f8c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8008f8e:	1ac9      	subs	r1, r1, r3
 8008f90:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f92:	4620      	mov	r0, r4
 8008f94:	f7ff fe74 	bl	8008c80 <HAL_UARTEx_RxEventCallback>
 8008f98:	e797      	b.n	8008eca <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f9a:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8008f9c:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f9e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8008fa0:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fa2:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d090      	beq.n	8008eca <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fa8:	1a89      	subs	r1, r1, r2
 8008faa:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008fac:	2900      	cmp	r1, #0
 8008fae:	d08c      	beq.n	8008eca <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb0:	f103 020c 	add.w	r2, r3, #12
 8008fb4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fb8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbc:	f103 050c 	add.w	r5, r3, #12
 8008fc0:	e845 2000 	strex	r0, r2, [r5]
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d1f3      	bne.n	8008fb0 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc8:	f103 0214 	add.w	r2, r3, #20
 8008fcc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fd0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	f103 0514 	add.w	r5, r3, #20
 8008fd8:	e845 2000 	strex	r0, r2, [r5]
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d1f3      	bne.n	8008fc8 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8008fe0:	2220      	movs	r2, #32
 8008fe2:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe6:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe8:	f103 020c 	add.w	r2, r3, #12
 8008fec:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ff0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff4:	f103 050c 	add.w	r5, r3, #12
 8008ff8:	e845 2000 	strex	r0, r2, [r5]
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d1f3      	bne.n	8008fe8 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009000:	2302      	movs	r3, #2
 8009002:	6363      	str	r3, [r4, #52]	@ 0x34
 8009004:	e7c5      	b.n	8008f92 <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009006:	0616      	lsls	r6, r2, #24
 8009008:	d528      	bpl.n	800905c <HAL_UART_IRQHandler+0x26c>
 800900a:	060d      	lsls	r5, r1, #24
 800900c:	d526      	bpl.n	800905c <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800900e:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8009012:	2a21      	cmp	r2, #33	@ 0x21
 8009014:	f47f af59 	bne.w	8008eca <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009018:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800901a:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800901c:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009020:	d117      	bne.n	8009052 <HAL_UART_IRQHandler+0x262>
 8009022:	6921      	ldr	r1, [r4, #16]
 8009024:	b9a9      	cbnz	r1, 8009052 <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009026:	f832 1b02 	ldrh.w	r1, [r2], #2
 800902a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800902e:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009030:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8009032:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8009034:	3a01      	subs	r2, #1
 8009036:	b292      	uxth	r2, r2
 8009038:	84e2      	strh	r2, [r4, #38]	@ 0x26
 800903a:	2a00      	cmp	r2, #0
 800903c:	f47f af45 	bne.w	8008eca <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009046:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009048:	68da      	ldr	r2, [r3, #12]
 800904a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800904e:	60da      	str	r2, [r3, #12]
 8009050:	e73b      	b.n	8008eca <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009052:	1c51      	adds	r1, r2, #1
 8009054:	6221      	str	r1, [r4, #32]
 8009056:	7812      	ldrb	r2, [r2, #0]
 8009058:	605a      	str	r2, [r3, #4]
 800905a:	e7ea      	b.n	8009032 <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800905c:	0650      	lsls	r0, r2, #25
 800905e:	f57f af34 	bpl.w	8008eca <HAL_UART_IRQHandler+0xda>
 8009062:	064a      	lsls	r2, r1, #25
 8009064:	f57f af31 	bpl.w	8008eca <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009068:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800906a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800906c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009070:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8009072:	2320      	movs	r3, #32
 8009074:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8009078:	f7ff fdcb 	bl	8008c12 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800907c:	e725      	b.n	8008eca <HAL_UART_IRQHandler+0xda>
 800907e:	bf00      	nop
 8009080:	08008c71 	.word	0x08008c71

08009084 <UART_Start_Receive_DMA>:
{
 8009084:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009086:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 8009088:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800908a:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800908c:	2222      	movs	r2, #34	@ 0x22
{
 800908e:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8009090:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009092:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009094:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009098:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800909a:	4a1d      	ldr	r2, [pc, #116]	@ (8009110 <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800909c:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800909e:	6282      	str	r2, [r0, #40]	@ 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80090a0:	4a1c      	ldr	r2, [pc, #112]	@ (8009114 <UART_Start_Receive_DMA+0x90>)
 80090a2:	62c2      	str	r2, [r0, #44]	@ 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80090a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009118 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 80090a6:	e9c0 250c 	strd	r2, r5, [r0, #48]	@ 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80090aa:	460a      	mov	r2, r1
 80090ac:	1d31      	adds	r1, r6, #4
 80090ae:	f7fd ff59 	bl	8006f64 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	9501      	str	r5, [sp, #4]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	9201      	str	r2, [sp, #4]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	9201      	str	r2, [sp, #4]
 80090be:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 80090c0:	6922      	ldr	r2, [r4, #16]
 80090c2:	b15a      	cbz	r2, 80090dc <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	f103 020c 	add.w	r2, r3, #12
 80090c8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	f103 000c 	add.w	r0, r3, #12
 80090d4:	e840 2100 	strex	r1, r2, [r0]
 80090d8:	2900      	cmp	r1, #0
 80090da:	d1f3      	bne.n	80090c4 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090dc:	f103 0214 	add.w	r2, r3, #20
 80090e0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e4:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	f103 0014 	add.w	r0, r3, #20
 80090ec:	e840 2100 	strex	r1, r2, [r0]
 80090f0:	2900      	cmp	r1, #0
 80090f2:	d1f3      	bne.n	80090dc <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	f103 0214 	add.w	r2, r3, #20
 80090f8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009100:	f103 0114 	add.w	r1, r3, #20
 8009104:	e841 2000 	strex	r0, r2, [r1]
 8009108:	2800      	cmp	r0, #0
 800910a:	d1f3      	bne.n	80090f4 <UART_Start_Receive_DMA+0x70>
}
 800910c:	b002      	add	sp, #8
 800910e:	bd70      	pop	{r4, r5, r6, pc}
 8009110:	08008ca1 	.word	0x08008ca1
 8009114:	08008c83 	.word	0x08008c83
 8009118:	08008c17 	.word	0x08008c17

0800911c <HAL_UART_Receive_DMA>:
{
 800911c:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 800911e:	f890 6042 	ldrb.w	r6, [r0, #66]	@ 0x42
 8009122:	2e20      	cmp	r6, #32
 8009124:	d106      	bne.n	8009134 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8009126:	b141      	cbz	r1, 800913a <HAL_UART_Receive_DMA+0x1e>
 8009128:	b13a      	cbz	r2, 800913a <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912a:	2400      	movs	r4, #0
 800912c:	6304      	str	r4, [r0, #48]	@ 0x30
}
 800912e:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009130:	f7ff bfa8 	b.w	8009084 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8009134:	2002      	movs	r0, #2
}
 8009136:	bc70      	pop	{r4, r5, r6}
 8009138:	4770      	bx	lr
      return HAL_ERROR;
 800913a:	2001      	movs	r0, #1
 800913c:	e7fb      	b.n	8009136 <HAL_UART_Receive_DMA+0x1a>

0800913e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800913e:	b084      	sub	sp, #16
 8009140:	a804      	add	r0, sp, #16
 8009142:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8009146:	2000      	movs	r0, #0
 8009148:	b004      	add	sp, #16
 800914a:	4770      	bx	lr

0800914c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800914c:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800914e:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 8009152:	2000      	movs	r0, #0
 8009154:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8009158:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 800915c:	4770      	bx	lr

0800915e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800915e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8009162:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009166:	045b      	lsls	r3, r3, #17
 8009168:	0c5b      	lsrs	r3, r3, #17
 800916a:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 800916e:	2000      	movs	r0, #0
 8009170:	4770      	bx	lr

08009172 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8009172:	2000      	movs	r0, #0
 8009174:	4770      	bx	lr

08009176 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009176:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009178:	4604      	mov	r4, r0
 800917a:	a804      	add	r0, sp, #16
 800917c:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009180:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009182:	2301      	movs	r3, #1
 8009184:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 8009188:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800918c:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009190:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 8009194:	b004      	add	sp, #16
 8009196:	bd10      	pop	{r4, pc}

08009198 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009198:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800919a:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800919c:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800919e:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 80091a2:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80091a4:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 80091a8:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 80091ac:	0424      	lsls	r4, r4, #16
 80091ae:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 80091b0:	2d03      	cmp	r5, #3
 80091b2:	d803      	bhi.n	80091bc <USB_ActivateEndpoint+0x24>
 80091b4:	e8df f005 	tbb	[pc, r5]
 80091b8:	45474941 	.word	0x45474941
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 80091bc:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80091be:	f248 0680 	movw	r6, #32896	@ 0x8080
 80091c2:	4334      	orrs	r4, r6
 80091c4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80091c8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80091cc:	4f9f      	ldr	r7, [pc, #636]	@ (800944c <USB_ActivateEndpoint+0x2b4>)
 80091ce:	b2a4      	uxth	r4, r4
 80091d0:	403c      	ands	r4, r7
 80091d2:	4314      	orrs	r4, r2
 80091d4:	4334      	orrs	r4, r6
 80091d6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 80091da:	7b0c      	ldrb	r4, [r1, #12]
 80091dc:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 80091e0:	2c00      	cmp	r4, #0
 80091e2:	f040 808d 	bne.w	8009300 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80091e6:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 80091e8:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80091ea:	0864      	lsrs	r4, r4, #1
 80091ec:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 80091ee:	b37e      	cbz	r6, 8009250 <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80091f0:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80091f4:	b289      	uxth	r1, r1
 80091f6:	4461      	add	r1, ip
 80091f8:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091fc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009200:	0649      	lsls	r1, r1, #25
 8009202:	d509      	bpl.n	8009218 <USB_ActivateEndpoint+0x80>
 8009204:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009208:	b289      	uxth	r1, r1
 800920a:	4039      	ands	r1, r7
 800920c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009210:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8009214:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009218:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800921c:	4c8c      	ldr	r4, [pc, #560]	@ (8009450 <USB_ActivateEndpoint+0x2b8>)
 800921e:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8009220:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009222:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8009226:	d001      	beq.n	800922c <USB_ActivateEndpoint+0x94>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009228:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800922c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009230:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009234:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8009238:	e04c      	b.n	80092d4 <USB_ActivateEndpoint+0x13c>
  HAL_StatusTypeDef ret = HAL_OK;
 800923a:	4628      	mov	r0, r5
      wEpRegVal |= USB_EP_CONTROL;
 800923c:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
      break;
 8009240:	e7bd      	b.n	80091be <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8009242:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  switch (ep->type)
 8009246:	2000      	movs	r0, #0
 8009248:	e7b9      	b.n	80091be <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800924a:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 800924e:	e7fa      	b.n	8009246 <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009250:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009254:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009256:	b2ad      	uxth	r5, r5
 8009258:	4465      	add	r5, ip
 800925a:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800925e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8009262:	293e      	cmp	r1, #62	@ 0x3e
 8009264:	b2a4      	uxth	r4, r4
 8009266:	4464      	add	r4, ip
 8009268:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 800926c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009270:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 8009274:	d92f      	bls.n	80092d6 <USB_ActivateEndpoint+0x13e>
 8009276:	094d      	lsrs	r5, r1, #5
 8009278:	06ce      	lsls	r6, r1, #27
 800927a:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 800927e:	bf08      	it	eq
 8009280:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8009284:	b289      	uxth	r1, r1
 8009286:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 800928a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800928e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8009292:	b289      	uxth	r1, r1
 8009294:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009298:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800929c:	044f      	lsls	r7, r1, #17
 800929e:	d50d      	bpl.n	80092bc <USB_ActivateEndpoint+0x124>
 80092a0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80092a4:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80092a8:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80092ac:	0409      	lsls	r1, r1, #16
 80092ae:	0c09      	lsrs	r1, r1, #16
 80092b0:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80092b4:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80092b8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 80092bc:	4c65      	ldr	r4, [pc, #404]	@ (8009454 <USB_ActivateEndpoint+0x2bc>)
 80092be:	b9c2      	cbnz	r2, 80092f2 <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80092c0:	881a      	ldrh	r2, [r3, #0]
 80092c2:	b292      	uxth	r2, r2
 80092c4:	4022      	ands	r2, r4
 80092c6:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 80092ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80092ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80092d2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80092d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80092d6:	b911      	cbnz	r1, 80092de <USB_ActivateEndpoint+0x146>
 80092d8:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 80092dc:	e7d5      	b.n	800928a <USB_ActivateEndpoint+0xf2>
 80092de:	084d      	lsrs	r5, r1, #1
 80092e0:	07c9      	lsls	r1, r1, #31
 80092e2:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 80092e6:	bf48      	it	mi
 80092e8:	3501      	addmi	r5, #1
 80092ea:	b289      	uxth	r1, r1
 80092ec:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 80092f0:	e7cf      	b.n	8009292 <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80092f2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80092f6:	b289      	uxth	r1, r1
 80092f8:	4021      	ands	r1, r4
 80092fa:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 80092fe:	e795      	b.n	800922c <USB_ActivateEndpoint+0x94>
    if (ep->type == EP_TYPE_BULK)
 8009300:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009302:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8009306:	d15b      	bne.n	80093c0 <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009308:	b2a4      	uxth	r4, r4
 800930a:	403c      	ands	r4, r7
 800930c:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 8009310:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8009314:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009318:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 800931c:	890e      	ldrh	r6, [r1, #8]
 800931e:	b2a4      	uxth	r4, r4
 8009320:	0876      	lsrs	r6, r6, #1
 8009322:	4464      	add	r4, ip
 8009324:	0076      	lsls	r6, r6, #1
 8009326:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 800932a:	894e      	ldrh	r6, [r1, #10]
 800932c:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8009330:	0876      	lsrs	r6, r6, #1
 8009332:	b2a4      	uxth	r4, r4
 8009334:	4464      	add	r4, ip
 8009336:	0076      	lsls	r6, r6, #1
 8009338:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 800933c:	7849      	ldrb	r1, [r1, #1]
 800933e:	2900      	cmp	r1, #0
 8009340:	d148      	bne.n	80093d4 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009342:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009346:	044e      	lsls	r6, r1, #17
 8009348:	d50d      	bpl.n	8009366 <USB_ActivateEndpoint+0x1ce>
 800934a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800934e:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009352:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009356:	0409      	lsls	r1, r1, #16
 8009358:	0c09      	lsrs	r1, r1, #16
 800935a:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800935e:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009362:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009366:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800936a:	064d      	lsls	r5, r1, #25
 800936c:	d50d      	bpl.n	800938a <USB_ActivateEndpoint+0x1f2>
 800936e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009372:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009376:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800937a:	0409      	lsls	r1, r1, #16
 800937c:	0c09      	lsrs	r1, r1, #16
 800937e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009382:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8009386:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800938a:	f248 0480 	movw	r4, #32896	@ 0x8080
 800938e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009392:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8009396:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800939a:	0409      	lsls	r1, r1, #16
 800939c:	0c09      	lsrs	r1, r1, #16
 800939e:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 80093a2:	4321      	orrs	r1, r4
 80093a4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093a8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80093ac:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80093b0:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80093b4:	0409      	lsls	r1, r1, #16
 80093b6:	0c09      	lsrs	r1, r1, #16
 80093b8:	430c      	orrs	r4, r1
 80093ba:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 80093be:	e789      	b.n	80092d4 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80093c0:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 80093c4:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 80093c8:	0424      	lsls	r4, r4, #16
 80093ca:	0c24      	lsrs	r4, r4, #16
 80093cc:	4326      	orrs	r6, r4
 80093ce:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 80093d2:	e7a1      	b.n	8009318 <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093d4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80093d8:	044c      	lsls	r4, r1, #17
 80093da:	d50d      	bpl.n	80093f8 <USB_ActivateEndpoint+0x260>
 80093dc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80093e0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80093e4:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80093e8:	0409      	lsls	r1, r1, #16
 80093ea:	0c09      	lsrs	r1, r1, #16
 80093ec:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80093f0:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80093f4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093f8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80093fc:	0649      	lsls	r1, r1, #25
 80093fe:	d50d      	bpl.n	800941c <USB_ActivateEndpoint+0x284>
 8009400:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009404:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009408:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800940c:	0409      	lsls	r1, r1, #16
 800940e:	0c09      	lsrs	r1, r1, #16
 8009410:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009414:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8009418:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800941c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009420:	4c0b      	ldr	r4, [pc, #44]	@ (8009450 <USB_ActivateEndpoint+0x2b8>)
 8009422:	b289      	uxth	r1, r1
 8009424:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8009426:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009428:	bf18      	it	ne
 800942a:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800942e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009432:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009436:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800943a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800943e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8009442:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009446:	0409      	lsls	r1, r1, #16
 8009448:	0c09      	lsrs	r1, r1, #16
 800944a:	e6ef      	b.n	800922c <USB_ActivateEndpoint+0x94>
 800944c:	ffff8f8f 	.word	0xffff8f8f
 8009450:	ffff8fbf 	.word	0xffff8fbf
 8009454:	ffffbf8f 	.word	0xffffbf8f

08009458 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8009458:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800945a:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 800945c:	7b09      	ldrb	r1, [r1, #12]
 800945e:	bbd9      	cbnz	r1, 80094d8 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8009460:	b30a      	cbz	r2, 80094a6 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009462:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009466:	0651      	lsls	r1, r2, #25
 8009468:	d50d      	bpl.n	8009486 <USB_DeactivateEndpoint+0x2e>
 800946a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800946e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009472:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009476:	0412      	lsls	r2, r2, #16
 8009478:	0c12      	lsrs	r2, r2, #16
 800947a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800947e:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8009482:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009486:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800948a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800948e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009492:	0412      	lsls	r2, r2, #16
 8009494:	0c12      	lsrs	r2, r2, #16
 8009496:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800949a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800949e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80094a2:	2000      	movs	r0, #0
 80094a4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094a6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80094aa:	0452      	lsls	r2, r2, #17
 80094ac:	d50d      	bpl.n	80094ca <USB_DeactivateEndpoint+0x72>
 80094ae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80094b2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80094b6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80094ba:	0412      	lsls	r2, r2, #16
 80094bc:	0c12      	lsrs	r2, r2, #16
 80094be:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80094c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80094c6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80094ca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80094ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80094d2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80094d6:	e7dc      	b.n	8009492 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 80094d8:	2a00      	cmp	r2, #0
 80094da:	d14a      	bne.n	8009572 <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094dc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80094e0:	0451      	lsls	r1, r2, #17
 80094e2:	d50d      	bpl.n	8009500 <USB_DeactivateEndpoint+0xa8>
 80094e4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80094e8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80094ec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80094f0:	0412      	lsls	r2, r2, #16
 80094f2:	0c12      	lsrs	r2, r2, #16
 80094f4:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80094f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80094fc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009500:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009504:	0652      	lsls	r2, r2, #25
 8009506:	d50d      	bpl.n	8009524 <USB_DeactivateEndpoint+0xcc>
 8009508:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800950c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009510:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009514:	0412      	lsls	r2, r2, #16
 8009516:	0c12      	lsrs	r2, r2, #16
 8009518:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800951c:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8009520:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009524:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8009528:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800952c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009530:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009534:	0412      	lsls	r2, r2, #16
 8009536:	0c12      	lsrs	r2, r2, #16
 8009538:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800953c:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8009540:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009544:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009548:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800954c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009550:	0412      	lsls	r2, r2, #16
 8009552:	0c12      	lsrs	r2, r2, #16
 8009554:	430a      	orrs	r2, r1
 8009556:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800955a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800955e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009562:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009566:	0412      	lsls	r2, r2, #16
 8009568:	0c12      	lsrs	r2, r2, #16
 800956a:	4311      	orrs	r1, r2
 800956c:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8009570:	e797      	b.n	80094a2 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009572:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009576:	0451      	lsls	r1, r2, #17
 8009578:	d50d      	bpl.n	8009596 <USB_DeactivateEndpoint+0x13e>
 800957a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800957e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009582:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009586:	0412      	lsls	r2, r2, #16
 8009588:	0c12      	lsrs	r2, r2, #16
 800958a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800958e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009592:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009596:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800959a:	0652      	lsls	r2, r2, #25
 800959c:	d50d      	bpl.n	80095ba <USB_DeactivateEndpoint+0x162>
 800959e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80095a2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80095a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80095aa:	0412      	lsls	r2, r2, #16
 80095ac:	0c12      	lsrs	r2, r2, #16
 80095ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80095b2:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80095b6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095ba:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 80095be:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80095c2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80095c6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80095ca:	0412      	lsls	r2, r2, #16
 80095cc:	0c12      	lsrs	r2, r2, #16
 80095ce:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80095d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80095d6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095da:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80095de:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80095e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095e6:	0412      	lsls	r2, r2, #16
 80095e8:	0c12      	lsrs	r2, r2, #16
 80095ea:	430a      	orrs	r2, r1
 80095ec:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80095f0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80095f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80095f8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80095fc:	e7b3      	b.n	8009566 <USB_DeactivateEndpoint+0x10e>

080095fe <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80095fe:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009600:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8009602:	b18b      	cbz	r3, 8009628 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009604:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009608:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800960c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009610:	041b      	lsls	r3, r3, #16
 8009612:	0c1b      	lsrs	r3, r3, #16
 8009614:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800961c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009620:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8009624:	2000      	movs	r0, #0
 8009626:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009628:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800962c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009634:	041b      	lsls	r3, r3, #16
 8009636:	0c1b      	lsrs	r3, r3, #16
 8009638:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800963c:	e7ec      	b.n	8009618 <USB_EPSetStall+0x1a>

0800963e <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800963e:	7b0b      	ldrb	r3, [r1, #12]
 8009640:	bb3b      	cbnz	r3, 8009692 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8009642:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009644:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8009646:	b333      	cbz	r3, 8009696 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009648:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800964c:	065b      	lsls	r3, r3, #25
 800964e:	d50d      	bpl.n	800966c <USB_EPClearStall+0x2e>
 8009650:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800965c:	041b      	lsls	r3, r3, #16
 800965e:	0c1b      	lsrs	r3, r3, #16
 8009660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009664:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009668:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800966c:	78cb      	ldrb	r3, [r1, #3]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d00f      	beq.n	8009692 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009672:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800967a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800967e:	041b      	lsls	r3, r3, #16
 8009680:	0c1b      	lsrs	r3, r3, #16
 8009682:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800968a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800968e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8009692:	2000      	movs	r0, #0
 8009694:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009696:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800969a:	045b      	lsls	r3, r3, #17
 800969c:	d50d      	bpl.n	80096ba <USB_EPClearStall+0x7c>
 800969e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80096a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096aa:	041b      	lsls	r3, r3, #16
 80096ac:	0c1b      	lsrs	r3, r3, #16
 80096ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80096b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096b6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80096be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096c6:	041b      	lsls	r3, r3, #16
 80096c8:	0c1b      	lsrs	r3, r3, #16
 80096ca:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80096ce:	e7da      	b.n	8009686 <USB_EPClearStall+0x48>

080096d0 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80096d0:	b911      	cbnz	r1, 80096d8 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80096d2:	2380      	movs	r3, #128	@ 0x80
 80096d4:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 80096d8:	2000      	movs	r0, #0
 80096da:	4770      	bx	lr

080096dc <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 80096dc:	2000      	movs	r0, #0
 80096de:	4770      	bx	lr

080096e0 <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 80096e0:	2000      	movs	r0, #0
 80096e2:	4770      	bx	lr

080096e4 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80096e4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 80096e8:	b280      	uxth	r0, r0
 80096ea:	4770      	bx	lr

080096ec <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80096ec:	2000      	movs	r0, #0
 80096ee:	4770      	bx	lr

080096f0 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80096f0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80096f4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80096f6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80096fa:	085b      	lsrs	r3, r3, #1
 80096fc:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 8009700:	4283      	cmp	r3, r0
 8009702:	d100      	bne.n	8009706 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8009704:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009706:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 800970a:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 800970e:	e7f7      	b.n	8009700 <USB_WritePMA+0x10>

08009710 <USB_EPStartXfer>:
{
 8009710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8009714:	784b      	ldrb	r3, [r1, #1]
{
 8009716:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8009718:	2b01      	cmp	r3, #1
{
 800971a:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 800971c:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 800971e:	f040 8118 	bne.w	8009952 <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 8009722:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8009726:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009728:	6949      	ldr	r1, [r1, #20]
    if (ep->xfer_len > ep->maxpacket)
 800972a:	454f      	cmp	r7, r9
 800972c:	bf28      	it	cs
 800972e:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 8009730:	bb0a      	cbnz	r2, 8009776 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009732:	b2bf      	uxth	r7, r7
 8009734:	88ea      	ldrh	r2, [r5, #6]
 8009736:	463b      	mov	r3, r7
 8009738:	f7ff ffda 	bl	80096f0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800973c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8009740:	7829      	ldrb	r1, [r5, #0]
 8009742:	b280      	uxth	r0, r0
 8009744:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8009748:	0109      	lsls	r1, r1, #4
 800974a:	4402      	add	r2, r0
 800974c:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800974e:	782a      	ldrb	r2, [r5, #0]
 8009750:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8009754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800975c:	041b      	lsls	r3, r3, #16
 800975e:	0c1b      	lsrs	r3, r3, #16
 8009760:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 8009764:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800976a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800976e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8009772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 8009776:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009778:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 800977c:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 800977e:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009780:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8009784:	f040 80d0 	bne.w	8009928 <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 8009788:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800978a:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 800978e:	f080 80b4 	bcs.w	80098fa <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009792:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009796:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800979a:	0412      	lsls	r2, r2, #16
 800979c:	0c12      	lsrs	r2, r2, #16
 800979e:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 80097a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80097a6:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80097aa:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80097ae:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 80097b2:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80097b4:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 80097b8:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 80097ba:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80097be:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80097c0:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80097c4:	d04e      	beq.n	8009864 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80097c6:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80097ca:	4472      	add	r2, lr
 80097cc:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097d0:	896a      	ldrh	r2, [r5, #10]
 80097d2:	f7ff ff8d 	bl	80096f0 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80097d6:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 80097d8:	bf36      	itet	cc
 80097da:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 80097dc:	2300      	movcs	r3, #0
 80097de:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097e0:	786a      	ldrb	r2, [r5, #1]
 80097e2:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 80097e4:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097e8:	b2b3      	uxth	r3, r6
 80097ea:	bb7a      	cbnz	r2, 800984c <USB_EPStartXfer+0x13c>
 80097ec:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 80097f0:	7828      	ldrb	r0, [r5, #0]
 80097f2:	b292      	uxth	r2, r2
 80097f4:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 80097f8:	0100      	lsls	r0, r0, #4
 80097fa:	4411      	add	r1, r2
 80097fc:	5a42      	ldrh	r2, [r0, r1]
 80097fe:	2e3e      	cmp	r6, #62	@ 0x3e
 8009800:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009804:	5242      	strh	r2, [r0, r1]
 8009806:	d914      	bls.n	8009832 <USB_EPStartXfer+0x122>
 8009808:	5a42      	ldrh	r2, [r0, r1]
 800980a:	0977      	lsrs	r7, r6, #5
 800980c:	06f6      	lsls	r6, r6, #27
 800980e:	bf08      	it	eq
 8009810:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8009814:	b292      	uxth	r2, r2
 8009816:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800981a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800981e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009822:	b292      	uxth	r2, r2
 8009824:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009826:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009828:	4651      	mov	r1, sl
 800982a:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800982c:	f7ff ff60 	bl	80096f0 <USB_WritePMA>
 8009830:	e78d      	b.n	800974e <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009832:	b90e      	cbnz	r6, 8009838 <USB_EPStartXfer+0x128>
 8009834:	5a42      	ldrh	r2, [r0, r1]
 8009836:	e7f0      	b.n	800981a <USB_EPStartXfer+0x10a>
 8009838:	07f2      	lsls	r2, r6, #31
 800983a:	5a42      	ldrh	r2, [r0, r1]
 800983c:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8009840:	bf48      	it	mi
 8009842:	3701      	addmi	r7, #1
 8009844:	b292      	uxth	r2, r2
 8009846:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800984a:	e7ea      	b.n	8009822 <USB_EPStartXfer+0x112>
 800984c:	2a01      	cmp	r2, #1
 800984e:	d1ea      	bne.n	8009826 <USB_EPStartXfer+0x116>
 8009850:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8009854:	7829      	ldrb	r1, [r5, #0]
 8009856:	b280      	uxth	r0, r0
 8009858:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 800985c:	0109      	lsls	r1, r1, #4
 800985e:	4402      	add	r2, r0
 8009860:	528b      	strh	r3, [r1, r2]
 8009862:	e7e0      	b.n	8009826 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009864:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8009868:	4472      	add	r2, lr
 800986a:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800986e:	892a      	ldrh	r2, [r5, #8]
 8009870:	f7ff ff3e 	bl	80096f0 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8009874:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8009876:	bf36      	itet	cc
 8009878:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 800987a:	4643      	movcs	r3, r8
 800987c:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800987e:	786a      	ldrb	r2, [r5, #1]
 8009880:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8009882:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009886:	b2b3      	uxth	r3, r6
 8009888:	bb5a      	cbnz	r2, 80098e2 <USB_EPStartXfer+0x1d2>
 800988a:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 800988e:	7828      	ldrb	r0, [r5, #0]
 8009890:	b292      	uxth	r2, r2
 8009892:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8009896:	0100      	lsls	r0, r0, #4
 8009898:	4411      	add	r1, r2
 800989a:	5a42      	ldrh	r2, [r0, r1]
 800989c:	2e3e      	cmp	r6, #62	@ 0x3e
 800989e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80098a2:	5242      	strh	r2, [r0, r1]
 80098a4:	d910      	bls.n	80098c8 <USB_EPStartXfer+0x1b8>
 80098a6:	5a42      	ldrh	r2, [r0, r1]
 80098a8:	0977      	lsrs	r7, r6, #5
 80098aa:	06f6      	lsls	r6, r6, #27
 80098ac:	bf08      	it	eq
 80098ae:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80098b2:	b292      	uxth	r2, r2
 80098b4:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80098b8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80098bc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80098c0:	b292      	uxth	r2, r2
 80098c2:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098c4:	896a      	ldrh	r2, [r5, #10]
 80098c6:	e7af      	b.n	8009828 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80098c8:	b90e      	cbnz	r6, 80098ce <USB_EPStartXfer+0x1be>
 80098ca:	5a42      	ldrh	r2, [r0, r1]
 80098cc:	e7f4      	b.n	80098b8 <USB_EPStartXfer+0x1a8>
 80098ce:	07f2      	lsls	r2, r6, #31
 80098d0:	5a42      	ldrh	r2, [r0, r1]
 80098d2:	ea4f 0756 	mov.w	r7, r6, lsr #1
 80098d6:	bf48      	it	mi
 80098d8:	3701      	addmi	r7, #1
 80098da:	b292      	uxth	r2, r2
 80098dc:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80098e0:	e7ee      	b.n	80098c0 <USB_EPStartXfer+0x1b0>
 80098e2:	2a01      	cmp	r2, #1
 80098e4:	d1ee      	bne.n	80098c4 <USB_EPStartXfer+0x1b4>
 80098e6:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80098ea:	7829      	ldrb	r1, [r5, #0]
 80098ec:	b280      	uxth	r0, r0
 80098ee:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 80098f2:	0109      	lsls	r1, r1, #4
 80098f4:	4402      	add	r2, r0
 80098f6:	528b      	strh	r3, [r1, r2]
 80098f8:	e7e4      	b.n	80098c4 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80098fa:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 80098fe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009902:	0412      	lsls	r2, r2, #16
 8009904:	0c12      	lsrs	r2, r2, #16
 8009906:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800990a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800990e:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009912:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8009916:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800991a:	b29b      	uxth	r3, r3
 800991c:	441a      	add	r2, r3
 800991e:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009920:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009924:	892a      	ldrh	r2, [r5, #8]
 8009926:	e781      	b.n	800982c <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 8009928:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800992a:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 800992e:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009930:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009934:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009936:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009938:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800993a:	d506      	bpl.n	800994a <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800993c:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 8009940:	4432      	add	r2, r6
 8009942:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009946:	896a      	ldrh	r2, [r5, #10]
 8009948:	e770      	b.n	800982c <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800994a:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800994e:	4432      	add	r2, r6
 8009950:	e7e6      	b.n	8009920 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 8009952:	2a00      	cmp	r2, #0
 8009954:	d13b      	bne.n	80099ce <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 8009956:	698b      	ldr	r3, [r1, #24]
 8009958:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800995a:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 800995e:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8009960:	bf84      	itt	hi
 8009962:	1a5a      	subhi	r2, r3, r1
        len = ep->maxpacket;
 8009964:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009966:	7829      	ldrb	r1, [r5, #0]
 8009968:	61aa      	str	r2, [r5, #24]
 800996a:	b280      	uxth	r0, r0
 800996c:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 8009970:	0109      	lsls	r1, r1, #4
 8009972:	4402      	add	r2, r0
 8009974:	5a88      	ldrh	r0, [r1, r2]
 8009976:	2b3e      	cmp	r3, #62	@ 0x3e
 8009978:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800997c:	5288      	strh	r0, [r1, r2]
 800997e:	d91a      	bls.n	80099b6 <USB_EPStartXfer+0x2a6>
 8009980:	0958      	lsrs	r0, r3, #5
 8009982:	06de      	lsls	r6, r3, #27
 8009984:	5a8b      	ldrh	r3, [r1, r2]
 8009986:	bf08      	it	eq
 8009988:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800998c:	b29b      	uxth	r3, r3
 800998e:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8009992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800999a:	b29b      	uxth	r3, r3
 800999c:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800999e:	782a      	ldrb	r2, [r5, #0]
 80099a0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80099a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099ac:	041b      	lsls	r3, r3, #16
 80099ae:	0c1b      	lsrs	r3, r3, #16
 80099b0:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80099b4:	e6d6      	b.n	8009764 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80099b6:	b90b      	cbnz	r3, 80099bc <USB_EPStartXfer+0x2ac>
 80099b8:	5a8b      	ldrh	r3, [r1, r2]
 80099ba:	e7ea      	b.n	8009992 <USB_EPStartXfer+0x282>
 80099bc:	0858      	lsrs	r0, r3, #1
 80099be:	07db      	lsls	r3, r3, #31
 80099c0:	5a8b      	ldrh	r3, [r1, r2]
 80099c2:	bf48      	it	mi
 80099c4:	3001      	addmi	r0, #1
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80099cc:	e7e5      	b.n	800999a <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 80099ce:	78ca      	ldrb	r2, [r1, #3]
 80099d0:	2a02      	cmp	r2, #2
 80099d2:	d170      	bne.n	8009ab6 <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d138      	bne.n	8009a4a <USB_EPStartXfer+0x33a>
 80099d8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80099dc:	780b      	ldrb	r3, [r1, #0]
 80099de:	b292      	uxth	r2, r2
 80099e0:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	4410      	add	r0, r2
 80099e8:	5ac2      	ldrh	r2, [r0, r3]
 80099ea:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80099ee:	52c2      	strh	r2, [r0, r3]
 80099f0:	690a      	ldr	r2, [r1, #16]
 80099f2:	2a3e      	cmp	r2, #62	@ 0x3e
 80099f4:	d946      	bls.n	8009a84 <USB_EPStartXfer+0x374>
 80099f6:	5ac1      	ldrh	r1, [r0, r3]
 80099f8:	0956      	lsrs	r6, r2, #5
 80099fa:	06d7      	lsls	r7, r2, #27
 80099fc:	bf08      	it	eq
 80099fe:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8009a02:	b289      	uxth	r1, r1
 8009a04:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8009a08:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8009a0c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8009a10:	b289      	uxth	r1, r1
 8009a12:	52c1      	strh	r1, [r0, r3]
 8009a14:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8009a18:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8009a1c:	b280      	uxth	r0, r0
 8009a1e:	4401      	add	r1, r0
 8009a20:	5ac8      	ldrh	r0, [r1, r3]
 8009a22:	2a3e      	cmp	r2, #62	@ 0x3e
 8009a24:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009a28:	52c8      	strh	r0, [r1, r3]
 8009a2a:	d938      	bls.n	8009a9e <USB_EPStartXfer+0x38e>
 8009a2c:	0950      	lsrs	r0, r2, #5
 8009a2e:	06d7      	lsls	r7, r2, #27
 8009a30:	5aca      	ldrh	r2, [r1, r3]
 8009a32:	bf08      	it	eq
 8009a34:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8009a38:	b292      	uxth	r2, r2
 8009a3a:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8009a3e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009a42:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009a46:	b292      	uxth	r2, r2
 8009a48:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8009a4a:	69eb      	ldr	r3, [r5, #28]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d0a6      	beq.n	800999e <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009a50:	f244 0340 	movw	r3, #16448	@ 0x4040
 8009a54:	782a      	ldrb	r2, [r5, #0]
 8009a56:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a5a:	ea03 0001 	and.w	r0, r3, r1
 8009a5e:	438b      	bics	r3, r1
 8009a60:	d001      	beq.n	8009a66 <USB_EPStartXfer+0x356>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d19b      	bne.n	800999e <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009a66:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8009a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a72:	041b      	lsls	r3, r3, #16
 8009a74:	0c1b      	lsrs	r3, r3, #16
 8009a76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009a7e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8009a82:	e78c      	b.n	800999e <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009a84:	b90a      	cbnz	r2, 8009a8a <USB_EPStartXfer+0x37a>
 8009a86:	5ac1      	ldrh	r1, [r0, r3]
 8009a88:	e7be      	b.n	8009a08 <USB_EPStartXfer+0x2f8>
 8009a8a:	07d1      	lsls	r1, r2, #31
 8009a8c:	5ac1      	ldrh	r1, [r0, r3]
 8009a8e:	ea4f 0652 	mov.w	r6, r2, lsr #1
 8009a92:	bf48      	it	mi
 8009a94:	3601      	addmi	r6, #1
 8009a96:	b289      	uxth	r1, r1
 8009a98:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8009a9c:	e7b8      	b.n	8009a10 <USB_EPStartXfer+0x300>
 8009a9e:	b90a      	cbnz	r2, 8009aa4 <USB_EPStartXfer+0x394>
 8009aa0:	5aca      	ldrh	r2, [r1, r3]
 8009aa2:	e7cc      	b.n	8009a3e <USB_EPStartXfer+0x32e>
 8009aa4:	0850      	lsrs	r0, r2, #1
 8009aa6:	07d6      	lsls	r6, r2, #31
 8009aa8:	5aca      	ldrh	r2, [r1, r3]
 8009aaa:	bf48      	it	mi
 8009aac:	3001      	addmi	r0, #1
 8009aae:	b292      	uxth	r2, r2
 8009ab0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8009ab4:	e7c7      	b.n	8009a46 <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 8009ab6:	2a01      	cmp	r2, #1
 8009ab8:	d15d      	bne.n	8009b76 <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 8009aba:	698a      	ldr	r2, [r1, #24]
 8009abc:	6909      	ldr	r1, [r1, #16]
 8009abe:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 8009ac0:	bf94      	ite	ls
 8009ac2:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8009ac4:	1a50      	subhi	r0, r2, r1
 8009ac6:	61a8      	str	r0, [r5, #24]
          len = ep->maxpacket;
 8009ac8:	bf88      	it	hi
 8009aca:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f47f af66 	bne.w	800999e <USB_EPStartXfer+0x28e>
 8009ad2:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 8009ad6:	782b      	ldrb	r3, [r5, #0]
 8009ad8:	b289      	uxth	r1, r1
 8009ada:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 8009ade:	011b      	lsls	r3, r3, #4
 8009ae0:	4408      	add	r0, r1
 8009ae2:	5ac1      	ldrh	r1, [r0, r3]
 8009ae4:	2a3e      	cmp	r2, #62	@ 0x3e
 8009ae6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009aea:	52c1      	strh	r1, [r0, r3]
 8009aec:	d92b      	bls.n	8009b46 <USB_EPStartXfer+0x436>
 8009aee:	06d1      	lsls	r1, r2, #27
 8009af0:	5ac1      	ldrh	r1, [r0, r3]
 8009af2:	ea4f 1652 	mov.w	r6, r2, lsr #5
 8009af6:	bf08      	it	eq
 8009af8:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8009afc:	b289      	uxth	r1, r1
 8009afe:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8009b02:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8009b06:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8009b0a:	b289      	uxth	r1, r1
 8009b0c:	52c1      	strh	r1, [r0, r3]
 8009b0e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8009b12:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8009b16:	b280      	uxth	r0, r0
 8009b18:	4401      	add	r1, r0
 8009b1a:	5ac8      	ldrh	r0, [r1, r3]
 8009b1c:	2a3e      	cmp	r2, #62	@ 0x3e
 8009b1e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009b22:	52c8      	strh	r0, [r1, r3]
 8009b24:	d91b      	bls.n	8009b5e <USB_EPStartXfer+0x44e>
 8009b26:	0950      	lsrs	r0, r2, #5
 8009b28:	06d6      	lsls	r6, r2, #27
 8009b2a:	5aca      	ldrh	r2, [r1, r3]
 8009b2c:	bf08      	it	eq
 8009b2e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8009b32:	b292      	uxth	r2, r2
 8009b34:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8009b38:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009b3c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009b40:	b292      	uxth	r2, r2
 8009b42:	52ca      	strh	r2, [r1, r3]
 8009b44:	e72b      	b.n	800999e <USB_EPStartXfer+0x28e>
 8009b46:	b90a      	cbnz	r2, 8009b4c <USB_EPStartXfer+0x43c>
 8009b48:	5ac1      	ldrh	r1, [r0, r3]
 8009b4a:	e7da      	b.n	8009b02 <USB_EPStartXfer+0x3f2>
 8009b4c:	5ac1      	ldrh	r1, [r0, r3]
 8009b4e:	0856      	lsrs	r6, r2, #1
 8009b50:	07d7      	lsls	r7, r2, #31
 8009b52:	bf48      	it	mi
 8009b54:	3601      	addmi	r6, #1
 8009b56:	b289      	uxth	r1, r1
 8009b58:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8009b5c:	e7d5      	b.n	8009b0a <USB_EPStartXfer+0x3fa>
 8009b5e:	b90a      	cbnz	r2, 8009b64 <USB_EPStartXfer+0x454>
 8009b60:	5aca      	ldrh	r2, [r1, r3]
 8009b62:	e7e9      	b.n	8009b38 <USB_EPStartXfer+0x428>
 8009b64:	0850      	lsrs	r0, r2, #1
 8009b66:	07d2      	lsls	r2, r2, #31
 8009b68:	5aca      	ldrh	r2, [r1, r3]
 8009b6a:	bf48      	it	mi
 8009b6c:	3001      	addmi	r0, #1
 8009b6e:	b292      	uxth	r2, r2
 8009b70:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8009b74:	e7e4      	b.n	8009b40 <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 8009b76:	2001      	movs	r0, #1
 8009b78:	e5fb      	b.n	8009772 <USB_EPStartXfer+0x62>

08009b7a <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b7a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 8009b7e:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b80:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009b84:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8009b86:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b88:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 8009b8a:	462e      	mov	r6, r5
 8009b8c:	3402      	adds	r4, #2
 8009b8e:	b936      	cbnz	r6, 8009b9e <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009b90:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8009b92:	bf44      	itt	mi
 8009b94:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009b98:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8009b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8009b9e:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 8009ba2:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8009ba4:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009ba6:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009baa:	0a12      	lsrs	r2, r2, #8
 8009bac:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8009bb0:	e7ec      	b.n	8009b8c <USB_ReadPMA+0x12>

08009bb2 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009bb2:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 8009bb6:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009bb8:	b16b      	cbz	r3, 8009bd6 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009bba:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009bbe:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8009bc2:	28ff      	cmp	r0, #255	@ 0xff
 8009bc4:	d007      	beq.n	8009bd6 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	4621      	mov	r1, r4
 8009bca:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8009bce:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8009bd0:	23ff      	movs	r3, #255	@ 0xff
 8009bd2:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	bd10      	pop	{r4, pc}
	...

08009bdc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009bdc:	2343      	movs	r3, #67	@ 0x43
 8009bde:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8009be0:	4800      	ldr	r0, [pc, #0]	@ (8009be4 <USBD_CDC_GetFSCfgDesc+0x8>)
 8009be2:	4770      	bx	lr
 8009be4:	20000058 	.word	0x20000058

08009be8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009be8:	2343      	movs	r3, #67	@ 0x43
 8009bea:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8009bec:	4800      	ldr	r0, [pc, #0]	@ (8009bf0 <USBD_CDC_GetHSCfgDesc+0x8>)
 8009bee:	4770      	bx	lr
 8009bf0:	2000009c 	.word	0x2000009c

08009bf4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009bf4:	2343      	movs	r3, #67	@ 0x43
 8009bf6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8009bf8:	4800      	ldr	r0, [pc, #0]	@ (8009bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8009bfa:	4770      	bx	lr
 8009bfc:	20000014 	.word	0x20000014

08009c00 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c00:	230a      	movs	r3, #10
 8009c02:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8009c04:	4800      	ldr	r0, [pc, #0]	@ (8009c08 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8009c06:	4770      	bx	lr
 8009c08:	20000118 	.word	0x20000118

08009c0c <USBD_CDC_DataOut>:
{
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c10:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c14:	f000 ff7c 	bl	800ab10 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8009c18:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c1c:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 8009c20:	b14b      	cbz	r3, 8009c36 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c22:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8009c26:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8009c30:	4798      	blx	r3
    return USBD_OK;
 8009c32:	2000      	movs	r0, #0
}
 8009c34:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8009c36:	2002      	movs	r0, #2
 8009c38:	e7fc      	b.n	8009c34 <USBD_CDC_DataOut+0x28>

08009c3a <USBD_CDC_DataIn>:
{
 8009c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c3c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 8009c40:	b1ce      	cbz	r6, 8009c76 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009c42:	2214      	movs	r2, #20
 8009c44:	fb02 0201 	mla	r2, r2, r1, r0
 8009c48:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009c4a:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009c4e:	b173      	cbz	r3, 8009c6e <USBD_CDC_DataIn+0x34>
 8009c50:	2728      	movs	r7, #40	@ 0x28
 8009c52:	fb07 5401 	mla	r4, r7, r1, r5
 8009c56:	6a24      	ldr	r4, [r4, #32]
 8009c58:	fbb3 f5f4 	udiv	r5, r3, r4
 8009c5c:	fb04 3315 	mls	r3, r4, r5, r3
 8009c60:	b92b      	cbnz	r3, 8009c6e <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8009c62:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009c64:	461a      	mov	r2, r3
 8009c66:	f000 ff41 	bl	800aaec <USBD_LL_Transmit>
    return USBD_OK;
 8009c6a:	2000      	movs	r0, #0
}
 8009c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 8009c74:	e7f9      	b.n	8009c6a <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 8009c76:	2002      	movs	r0, #2
 8009c78:	e7f8      	b.n	8009c6c <USBD_CDC_DataIn+0x32>

08009c7a <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 8009c7a:	2300      	movs	r3, #0
{
 8009c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c7e:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 8009c80:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8009c84:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c88:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c90:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c94:	d022      	beq.n	8009cdc <USBD_CDC_Setup+0x62>
 8009c96:	2b20      	cmp	r3, #32
 8009c98:	d13a      	bne.n	8009d10 <USBD_CDC_Setup+0x96>
      if (req->wLength)
 8009c9a:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c9c:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8009c9e:	b1ba      	cbz	r2, 8009cd0 <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 8009ca0:	0639      	lsls	r1, r7, #24
 8009ca2:	d50b      	bpl.n	8009cbc <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ca4:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 8009ca8:	4618      	mov	r0, r3
 8009caa:	688f      	ldr	r7, [r1, #8]
 8009cac:	4631      	mov	r1, r6
 8009cae:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009cb0:	4631      	mov	r1, r6
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009cb6:	f000 fc4d 	bl	800a554 <USBD_CtlSendData>
 8009cba:	e006      	b.n	8009cca <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009cbc:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 8009cbe:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009cc2:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009cc6:	f000 fc5a 	bl	800a57e <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8009cca:	2000      	movs	r0, #0
}
 8009ccc:	b003      	add	sp, #12
 8009cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009cd0:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 8009cd4:	6884      	ldr	r4, [r0, #8]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	47a0      	blx	r4
 8009cda:	e7f6      	b.n	8009cca <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 8009cdc:	784b      	ldrb	r3, [r1, #1]
 8009cde:	2b0a      	cmp	r3, #10
 8009ce0:	d00a      	beq.n	8009cf8 <USBD_CDC_Setup+0x7e>
 8009ce2:	2b0b      	cmp	r3, #11
 8009ce4:	d010      	beq.n	8009d08 <USBD_CDC_Setup+0x8e>
 8009ce6:	b99b      	cbnz	r3, 8009d10 <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009cec:	2b03      	cmp	r3, #3
 8009cee:	d10f      	bne.n	8009d10 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	f10d 0106 	add.w	r1, sp, #6
 8009cf6:	e7de      	b.n	8009cb6 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cf8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009cfc:	2b03      	cmp	r3, #3
 8009cfe:	d107      	bne.n	8009d10 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009d00:	2201      	movs	r2, #1
 8009d02:	f10d 0105 	add.w	r1, sp, #5
 8009d06:	e7d6      	b.n	8009cb6 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d08:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009d0c:	2b03      	cmp	r3, #3
 8009d0e:	d0dc      	beq.n	8009cca <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 8009d10:	4620      	mov	r0, r4
 8009d12:	4629      	mov	r1, r5
 8009d14:	f000 fbf7 	bl	800a506 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d18:	2002      	movs	r0, #2
 8009d1a:	e7d7      	b.n	8009ccc <USBD_CDC_Setup+0x52>

08009d1c <USBD_CDC_DeInit>:
{
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009d20:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009d22:	2181      	movs	r1, #129	@ 0x81
 8009d24:	f000 fead 	bl	800aa82 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009d28:	2101      	movs	r1, #1
 8009d2a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009d2c:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009d2e:	f000 fea8 	bl	800aa82 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009d32:	2182      	movs	r1, #130	@ 0x82
 8009d34:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009d36:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009d3a:	f000 fea2 	bl	800aa82 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8009d3e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009d42:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8009d44:	b14b      	cbz	r3, 8009d5a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009d46:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009d4e:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8009d52:	f000 fee5 	bl	800ab20 <USBD_static_free>
    pdev->pClassData = NULL;
 8009d56:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	bd38      	pop	{r3, r4, r5, pc}

08009d5e <USBD_CDC_Init>:
{
 8009d5e:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d60:	7c03      	ldrb	r3, [r0, #16]
{
 8009d62:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d64:	bba3      	cbnz	r3, 8009dd0 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d6a:	2181      	movs	r1, #129	@ 0x81
 8009d6c:	2202      	movs	r2, #2
 8009d6e:	f000 fe7c 	bl	800aa6a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d72:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d74:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d78:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d7a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f000 fe73 	bl	800aa6a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d84:	2308      	movs	r3, #8
 8009d86:	2203      	movs	r2, #3
 8009d88:	2182      	movs	r1, #130	@ 0x82
 8009d8a:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d8c:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d90:	f000 fe6b 	bl	800aa6a <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d94:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009d98:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d9a:	f000 febd 	bl	800ab18 <USBD_static_malloc>
 8009d9e:	4606      	mov	r6, r0
 8009da0:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8009da4:	b1f8      	cbz	r0, 8009de6 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009da6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4798      	blx	r3
    hcdc->TxState = 0U;
 8009dae:	2300      	movs	r3, #0
 8009db0:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009db4:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009db8:	7c23      	ldrb	r3, [r4, #16]
 8009dba:	b993      	cbnz	r3, 8009de2 <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009dbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 8009dc8:	f000 fe99 	bl	800aafe <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8009dcc:	2000      	movs	r0, #0
}
 8009dce:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009dd0:	2340      	movs	r3, #64	@ 0x40
 8009dd2:	2181      	movs	r1, #129	@ 0x81
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	f000 fe48 	bl	800aa6a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009dda:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009ddc:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009dde:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009de0:	e7cb      	b.n	8009d7a <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009de2:	2340      	movs	r3, #64	@ 0x40
 8009de4:	e7ec      	b.n	8009dc0 <USBD_CDC_Init+0x62>
    ret = 1U;
 8009de6:	4628      	mov	r0, r5
 8009de8:	e7f1      	b.n	8009dce <USBD_CDC_Init+0x70>

08009dea <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8009dea:	b119      	cbz	r1, 8009df4 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8009dec:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 8009df0:	2000      	movs	r0, #0
 8009df2:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8009df4:	2002      	movs	r0, #2
  }

  return ret;
}
 8009df6:	4770      	bx	lr

08009df8 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009df8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8009dfc:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8009dfe:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009e02:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 8009e06:	4770      	bx	lr

08009e08 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8009e08:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 8009e0c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8009e0e:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 8009e12:	4770      	bx	lr

08009e14 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e14:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 8009e18:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8009e1a:	b182      	cbz	r2, 8009e3e <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8009e1c:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 8009e20:	2301      	movs	r3, #1
 8009e22:	b974      	cbnz	r4, 8009e42 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009e24:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009e28:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009e2c:	2181      	movs	r1, #129	@ 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009e2e:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009e30:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	f000 fe59 	bl	800aaec <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8009e3a:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8009e3c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8009e3e:	2002      	movs	r0, #2
 8009e40:	e7fc      	b.n	8009e3c <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8009e42:	4618      	mov	r0, r3
 8009e44:	e7fa      	b.n	8009e3c <USBD_CDC_TransmitPacket+0x28>

08009e46 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e46:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 8009e4a:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009e4c:	b162      	cbz	r2, 8009e68 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e4e:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009e50:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e54:	b933      	cbnz	r3, 8009e64 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8009e56:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	f000 fe4f 	bl	800aafe <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009e60:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8009e62:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8009e64:	2340      	movs	r3, #64	@ 0x40
 8009e66:	e7f8      	b.n	8009e5a <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8009e68:	2002      	movs	r0, #2
 8009e6a:	e7fa      	b.n	8009e62 <USBD_CDC_ReceivePacket+0x1c>

08009e6c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009e6c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009e6e:	b180      	cbz	r0, 8009e92 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009e70:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009e74:	b113      	cbz	r3, 8009e7c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8009e76:	2300      	movs	r3, #0
 8009e78:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009e7c:	b109      	cbz	r1, 8009e82 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8009e7e:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e82:	2301      	movs	r3, #1
  pdev->id = id;
 8009e84:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e86:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009e8a:	f000 fda5 	bl	800a9d8 <USBD_LL_Init>

  return USBD_OK;
 8009e8e:	2000      	movs	r0, #0
}
 8009e90:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8009e92:	2002      	movs	r0, #2
 8009e94:	e7fc      	b.n	8009e90 <USBD_Init+0x24>

08009e96 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8009e96:	b119      	cbz	r1, 8009ea0 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009e98:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8009e9c:	2000      	movs	r0, #0
 8009e9e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009ea0:	2002      	movs	r0, #2
  }

  return status;
}
 8009ea2:	4770      	bx	lr

08009ea4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009ea4:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009ea6:	f000 fdd7 	bl	800aa58 <USBD_LL_Start>

  return USBD_OK;
}
 8009eaa:	2000      	movs	r0, #0
 8009eac:	bd08      	pop	{r3, pc}

08009eae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009eae:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8009eb0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009eb4:	b133      	cbz	r3, 8009ec4 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4798      	blx	r3
 8009eba:	3800      	subs	r0, #0
 8009ebc:	bf18      	it	ne
 8009ebe:	2001      	movne	r0, #1
 8009ec0:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8009ec2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009ec4:	2002      	movs	r0, #2
 8009ec6:	e7fc      	b.n	8009ec2 <USBD_SetClassConfig+0x14>

08009ec8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009ec8:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009eca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	4798      	blx	r3

  return USBD_OK;
}
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	bd08      	pop	{r3, pc}

08009ed6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ed6:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ed8:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 8009edc:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f000 fb06 	bl	800a4f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ee4:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8009ee6:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8009eea:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8009eee:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 8009ef2:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8009ef6:	f001 031f 	and.w	r3, r1, #31
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d008      	beq.n	8009f10 <USBD_LL_SetupStage+0x3a>
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d00b      	beq.n	8009f1a <USBD_LL_SetupStage+0x44>
 8009f02:	b97b      	cbnz	r3, 8009f24 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009f04:	4629      	mov	r1, r5
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 f8fa 	bl	800a100 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8009f10:	4629      	mov	r1, r5
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 fa3c 	bl	800a390 <USBD_StdItfReq>
      break;
 8009f18:	e7f8      	b.n	8009f0c <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f000 fa5b 	bl	800a3d8 <USBD_StdEPReq>
      break;
 8009f22:	e7f3      	b.n	8009f0c <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f24:	4620      	mov	r0, r4
 8009f26:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8009f2a:	f000 fdb3 	bl	800aa94 <USBD_LL_StallEP>
      break;
 8009f2e:	e7ed      	b.n	8009f0c <USBD_LL_SetupStage+0x36>

08009f30 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	4604      	mov	r4, r0
 8009f34:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009f36:	bb39      	cbnz	r1, 8009f88 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f38:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8009f3c:	2a03      	cmp	r2, #3
 8009f3e:	d11c      	bne.n	8009f7a <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f40:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 8009f44:	4295      	cmp	r5, r2
 8009f46:	d90b      	bls.n	8009f60 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 8009f48:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 8009f4a:	42aa      	cmp	r2, r5
 8009f4c:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 8009f4e:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8009f52:	bf8c      	ite	hi
 8009f54:	b2aa      	uxthhi	r2, r5
 8009f56:	b292      	uxthls	r2, r2
 8009f58:	f000 fb1e 	bl	800a598 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8009f5c:	2000      	movs	r0, #0
}
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f60:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	b123      	cbz	r3, 8009f72 <USBD_LL_DataOutStage+0x42>
 8009f68:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8009f6c:	2a03      	cmp	r2, #3
 8009f6e:	d100      	bne.n	8009f72 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 8009f70:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8009f72:	4620      	mov	r0, r4
 8009f74:	f000 fb18 	bl	800a5a8 <USBD_CtlSendStatus>
 8009f78:	e7f0      	b.n	8009f5c <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009f7a:	2a05      	cmp	r2, #5
 8009f7c:	d1ee      	bne.n	8009f5c <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 8009f7e:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009f82:	f000 fd87 	bl	800aa94 <USBD_LL_StallEP>
 8009f86:	e7e9      	b.n	8009f5c <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f88:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	b12b      	cbz	r3, 8009f9c <USBD_LL_DataOutStage+0x6c>
 8009f90:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8009f94:	2a03      	cmp	r2, #3
 8009f96:	d101      	bne.n	8009f9c <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8009f98:	4798      	blx	r3
 8009f9a:	e7df      	b.n	8009f5c <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 8009f9c:	2002      	movs	r0, #2
 8009f9e:	e7de      	b.n	8009f5e <USBD_LL_DataOutStage+0x2e>

08009fa0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009fa6:	460f      	mov	r7, r1
 8009fa8:	2900      	cmp	r1, #0
 8009faa:	d149      	bne.n	800a040 <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009fac:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8009fb0:	2a02      	cmp	r2, #2
 8009fb2:	d13a      	bne.n	800a02a <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fb4:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 8009fb8:	42b5      	cmp	r5, r6
 8009fba:	d911      	bls.n	8009fe0 <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 8009fbc:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009fbe:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 8009fc0:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009fc2:	b2aa      	uxth	r2, r5
 8009fc4:	f000 fad3 	bl	800a56e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fc8:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fca:	461a      	mov	r2, r3
 8009fcc:	4619      	mov	r1, r3
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f000 fd95 	bl	800aafe <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009fd4:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d02d      	beq.n	800a038 <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8009fdc:	2000      	movs	r0, #0
}
 8009fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009fe0:	69c3      	ldr	r3, [r0, #28]
 8009fe2:	fbb3 f5f6 	udiv	r5, r3, r6
 8009fe6:	fb06 3515 	mls	r5, r6, r5, r3
 8009fea:	b965      	cbnz	r5, 800a006 <USBD_LL_DataInStage+0x66>
 8009fec:	429e      	cmp	r6, r3
 8009fee:	d80a      	bhi.n	800a006 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8009ff0:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d206      	bcs.n	800a006 <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ff8:	462a      	mov	r2, r5
 8009ffa:	f000 fab8 	bl	800a56e <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ffe:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 800a000:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a004:	e7e1      	b.n	8009fca <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a006:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	b12b      	cbz	r3, 800a01a <USBD_LL_DataInStage+0x7a>
 800a00e:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 800a012:	2a03      	cmp	r2, #3
 800a014:	d101      	bne.n	800a01a <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 800a016:	4620      	mov	r0, r4
 800a018:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800a01a:	2180      	movs	r1, #128	@ 0x80
 800a01c:	4620      	mov	r0, r4
 800a01e:	f000 fd39 	bl	800aa94 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a022:	4620      	mov	r0, r4
 800a024:	f000 facb 	bl	800a5be <USBD_CtlReceiveStatus>
 800a028:	e7d4      	b.n	8009fd4 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a02a:	f032 0304 	bics.w	r3, r2, #4
 800a02e:	d1d1      	bne.n	8009fd4 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800a030:	2180      	movs	r1, #128	@ 0x80
 800a032:	f000 fd2f 	bl	800aa94 <USBD_LL_StallEP>
 800a036:	e7cd      	b.n	8009fd4 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 800a038:	2300      	movs	r3, #0
 800a03a:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 800a03e:	e7cd      	b.n	8009fdc <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 800a040:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a044:	695b      	ldr	r3, [r3, #20]
 800a046:	b12b      	cbz	r3, 800a054 <USBD_LL_DataInStage+0xb4>
 800a048:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a04c:	2a03      	cmp	r2, #3
 800a04e:	d101      	bne.n	800a054 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 800a050:	4798      	blx	r3
 800a052:	e7c3      	b.n	8009fdc <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 800a054:	2002      	movs	r0, #2
 800a056:	e7c2      	b.n	8009fde <USBD_LL_DataInStage+0x3e>

0800a058 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a058:	2200      	movs	r2, #0
{
 800a05a:	b570      	push	{r4, r5, r6, lr}
 800a05c:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a05e:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a060:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a062:	4611      	mov	r1, r2
 800a064:	2340      	movs	r3, #64	@ 0x40
 800a066:	f000 fd00 	bl	800aa6a <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a06a:	4633      	mov	r3, r6
 800a06c:	2180      	movs	r1, #128	@ 0x80
 800a06e:	2200      	movs	r2, #0
 800a070:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a072:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a076:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a07a:	f000 fcf6 	bl	800aa6a <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800a07e:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800a080:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a084:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a086:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a088:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a08c:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a090:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800a092:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 800a096:	b123      	cbz	r3, 800a0a2 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a098:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800a09c:	4620      	mov	r0, r4
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	4798      	blx	r3
  }

  return USBD_OK;
}
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	bd70      	pop	{r4, r5, r6, pc}

0800a0a6 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800a0a6:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	4770      	bx	lr

0800a0ac <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800a0ac:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a0b0:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a0b4:	2304      	movs	r3, #4
 800a0b6:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	4770      	bx	lr

0800a0be <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a0be:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a0c2:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800a0c4:	bf04      	itt	eq
 800a0c6:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 800a0ca:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800a0ce:	2000      	movs	r0, #0
 800a0d0:	4770      	bx	lr

0800a0d2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a0d2:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0d4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a0d8:	2a03      	cmp	r2, #3
 800a0da:	d104      	bne.n	800a0e6 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800a0dc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a0e0:	69db      	ldr	r3, [r3, #28]
 800a0e2:	b103      	cbz	r3, 800a0e6 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800a0e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	bd08      	pop	{r3, pc}

0800a0ea <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800a0ea:	b510      	push	{r4, lr}
 800a0ec:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800a0ee:	2180      	movs	r1, #128	@ 0x80
 800a0f0:	f000 fcd0 	bl	800aa94 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a0f4:	4620      	mov	r0, r4
}
 800a0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	f000 bcca 	b.w	800aa94 <USBD_LL_StallEP>

0800a100 <USBD_StdDevReq>:
{
 800a100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a102:	780b      	ldrb	r3, [r1, #0]
 800a104:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a106:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a10a:	2b20      	cmp	r3, #32
{
 800a10c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a10e:	d006      	beq.n	800a11e <USBD_StdDevReq+0x1e>
 800a110:	2b40      	cmp	r3, #64	@ 0x40
 800a112:	d004      	beq.n	800a11e <USBD_StdDevReq+0x1e>
 800a114:	b163      	cbz	r3, 800a130 <USBD_StdDevReq+0x30>
        USBD_CtlError(pdev, req);
 800a116:	4620      	mov	r0, r4
 800a118:	f7ff ffe7 	bl	800a0ea <USBD_CtlError.constprop.0>
        break;
 800a11c:	e005      	b.n	800a12a <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 800a11e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800a122:	4629      	mov	r1, r5
 800a124:	4620      	mov	r0, r4
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	4798      	blx	r3
}
 800a12a:	2000      	movs	r0, #0
 800a12c:	b003      	add	sp, #12
 800a12e:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 800a130:	784b      	ldrb	r3, [r1, #1]
 800a132:	2b09      	cmp	r3, #9
 800a134:	d8ef      	bhi.n	800a116 <USBD_StdDevReq+0x16>
 800a136:	a201      	add	r2, pc, #4	@ (adr r2, 800a13c <USBD_StdDevReq+0x3c>)
 800a138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13c:	0800a33f 	.word	0x0800a33f
 800a140:	0800a375 	.word	0x0800a375
 800a144:	0800a117 	.word	0x0800a117
 800a148:	0800a367 	.word	0x0800a367
 800a14c:	0800a117 	.word	0x0800a117
 800a150:	0800a265 	.word	0x0800a265
 800a154:	0800a165 	.word	0x0800a165
 800a158:	0800a117 	.word	0x0800a117
 800a15c:	0800a30f 	.word	0x0800a30f
 800a160:	0800a2a7 	.word	0x0800a2a7
  uint16_t len = 0U;
 800a164:	2300      	movs	r3, #0
 800a166:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800a16a:	884b      	ldrh	r3, [r1, #2]
 800a16c:	0a1a      	lsrs	r2, r3, #8
 800a16e:	3a01      	subs	r2, #1
 800a170:	2a06      	cmp	r2, #6
 800a172:	d8d0      	bhi.n	800a116 <USBD_StdDevReq+0x16>
 800a174:	a101      	add	r1, pc, #4	@ (adr r1, 800a17c <USBD_StdDevReq+0x7c>)
 800a176:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a17a:	bf00      	nop
 800a17c:	0800a199 	.word	0x0800a199
 800a180:	0800a1bd 	.word	0x0800a1bd
 800a184:	0800a1d7 	.word	0x0800a1d7
 800a188:	0800a117 	.word	0x0800a117
 800a18c:	0800a117 	.word	0x0800a117
 800a190:	0800a21b 	.word	0x0800a21b
 800a194:	0800a231 	.word	0x0800a231
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a198:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800a19c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a19e:	7c20      	ldrb	r0, [r4, #16]
 800a1a0:	f10d 0106 	add.w	r1, sp, #6
 800a1a4:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800a1a6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a1aa:	88eb      	ldrh	r3, [r5, #6]
 800a1ac:	2a00      	cmp	r2, #0
 800a1ae:	d054      	beq.n	800a25a <USBD_StdDevReq+0x15a>
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d149      	bne.n	800a248 <USBD_StdDevReq+0x148>
        USBD_CtlSendStatus(pdev);
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f000 f9f7 	bl	800a5a8 <USBD_CtlSendStatus>
 800a1ba:	e7b6      	b.n	800a12a <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1bc:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 800a1be:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1c2:	b932      	cbnz	r2, 800a1d2 <USBD_StdDevReq+0xd2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1c6:	f10d 0006 	add.w	r0, sp, #6
 800a1ca:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1cc:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a1ce:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a1d0:	e7e9      	b.n	800a1a6 <USBD_StdDevReq+0xa6>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d4:	e7f7      	b.n	800a1c6 <USBD_StdDevReq+0xc6>
      switch ((uint8_t)(req->wValue))
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	2b05      	cmp	r3, #5
 800a1da:	d89c      	bhi.n	800a116 <USBD_StdDevReq+0x16>
 800a1dc:	e8df f003 	tbb	[pc, r3]
 800a1e0:	110d0903 	.word	0x110d0903
 800a1e4:	1915      	.short	0x1915
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a1e6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800a1ea:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1d6      	bne.n	800a19e <USBD_StdDevReq+0x9e>
 800a1f0:	e791      	b.n	800a116 <USBD_StdDevReq+0x16>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a1f2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	e7f8      	b.n	800a1ec <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a1fa:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	e7f4      	b.n	800a1ec <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a202:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	e7f0      	b.n	800a1ec <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a20a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	e7ec      	b.n	800a1ec <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a212:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	e7e8      	b.n	800a1ec <USBD_StdDevReq+0xec>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a21a:	7c03      	ldrb	r3, [r0, #16]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f47f af7a 	bne.w	800a116 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a222:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a226:	f10d 0006 	add.w	r0, sp, #6
 800a22a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a22c:	4798      	blx	r3
  if (err != 0U)
 800a22e:	e7ba      	b.n	800a1a6 <USBD_StdDevReq+0xa6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a230:	7c03      	ldrb	r3, [r0, #16]
 800a232:	2b00      	cmp	r3, #0
 800a234:	f47f af6f 	bne.w	800a116 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a238:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a23c:	f10d 0006 	add.w	r0, sp, #6
 800a240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a242:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a244:	2307      	movs	r3, #7
 800a246:	e7c2      	b.n	800a1ce <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 800a248:	429a      	cmp	r2, r3
 800a24a:	bf28      	it	cs
 800a24c:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a24e:	4601      	mov	r1, r0
 800a250:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800a252:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a256:	f000 f97d 	bl	800a554 <USBD_CtlSendData>
    if (req->wLength == 0U)
 800a25a:	88eb      	ldrh	r3, [r5, #6]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f47f af64 	bne.w	800a12a <USBD_StdDevReq+0x2a>
 800a262:	e7a7      	b.n	800a1b4 <USBD_StdDevReq+0xb4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a264:	888b      	ldrh	r3, [r1, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	f47f af55 	bne.w	800a116 <USBD_StdDevReq+0x16>
 800a26c:	88cb      	ldrh	r3, [r1, #6]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f47f af51 	bne.w	800a116 <USBD_StdDevReq+0x16>
 800a274:	884d      	ldrh	r5, [r1, #2]
 800a276:	2d7f      	cmp	r5, #127	@ 0x7f
 800a278:	f63f af4d 	bhi.w	800a116 <USBD_StdDevReq+0x16>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a27c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a280:	2b03      	cmp	r3, #3
 800a282:	f43f af48 	beq.w	800a116 <USBD_StdDevReq+0x16>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a286:	b2ed      	uxtb	r5, r5
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a288:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 800a28a:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a28e:	f000 fc24 	bl	800aada <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a292:	4620      	mov	r0, r4
 800a294:	f000 f988 	bl	800a5a8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800a298:	b11d      	cbz	r5, 800a2a2 <USBD_StdDevReq+0x1a2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a29a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a29c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a2a0:	e743      	b.n	800a12a <USBD_StdDevReq+0x2a>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e7fa      	b.n	800a29c <USBD_StdDevReq+0x19c>
  cfgidx = (uint8_t)(req->wValue);
 800a2a6:	7889      	ldrb	r1, [r1, #2]
 800a2a8:	4d38      	ldr	r5, [pc, #224]	@ (800a38c <USBD_StdDevReq+0x28c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2aa:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800a2ac:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2ae:	f63f af32 	bhi.w	800a116 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 800a2b2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d008      	beq.n	800a2cc <USBD_StdDevReq+0x1cc>
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d015      	beq.n	800a2ea <USBD_StdDevReq+0x1ea>
        USBD_CtlError(pdev, req);
 800a2be:	f7ff ff14 	bl	800a0ea <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	7829      	ldrb	r1, [r5, #0]
 800a2c6:	f7ff fdff 	bl	8009ec8 <USBD_ClrClassConfig>
        break;
 800a2ca:	e72e      	b.n	800a12a <USBD_StdDevReq+0x2a>
        if (cfgidx)
 800a2cc:	2900      	cmp	r1, #0
 800a2ce:	f43f af71 	beq.w	800a1b4 <USBD_StdDevReq+0xb4>
          pdev->dev_config = cfgidx;
 800a2d2:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2d4:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800a2d6:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2d8:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f7ff fde6 	bl	8009eae <USBD_SetClassConfig>
 800a2e2:	2802      	cmp	r0, #2
 800a2e4:	f47f af66 	bne.w	800a1b4 <USBD_StdDevReq+0xb4>
 800a2e8:	e715      	b.n	800a116 <USBD_StdDevReq+0x16>
        if (cfgidx == 0U)
 800a2ea:	b931      	cbnz	r1, 800a2fa <USBD_StdDevReq+0x1fa>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2ec:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800a2ee:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2f0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 800a2f4:	f7ff fde8 	bl	8009ec8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a2f8:	e75c      	b.n	800a1b4 <USBD_StdDevReq+0xb4>
        else if (cfgidx != pdev->dev_config)
 800a2fa:	6841      	ldr	r1, [r0, #4]
 800a2fc:	2901      	cmp	r1, #1
 800a2fe:	f43f af59 	beq.w	800a1b4 <USBD_StdDevReq+0xb4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a302:	b2c9      	uxtb	r1, r1
 800a304:	f7ff fde0 	bl	8009ec8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a308:	7829      	ldrb	r1, [r5, #0]
 800a30a:	6061      	str	r1, [r4, #4]
 800a30c:	e7e6      	b.n	800a2dc <USBD_StdDevReq+0x1dc>
  if (req->wLength != 1U)
 800a30e:	88ca      	ldrh	r2, [r1, #6]
 800a310:	2a01      	cmp	r2, #1
 800a312:	f47f af00 	bne.w	800a116 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 800a316:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d80a      	bhi.n	800a334 <USBD_StdDevReq+0x234>
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f43f aef9 	beq.w	800a116 <USBD_StdDevReq+0x16>
        pdev->dev_default_config = 0U;
 800a324:	4601      	mov	r1, r0
 800a326:	2300      	movs	r3, #0
 800a328:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a32c:	4620      	mov	r0, r4
 800a32e:	f000 f911 	bl	800a554 <USBD_CtlSendData>
      break;
 800a332:	e6fa      	b.n	800a12a <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 800a334:	2b03      	cmp	r3, #3
 800a336:	f47f aeee 	bne.w	800a116 <USBD_StdDevReq+0x16>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a33a:	1d01      	adds	r1, r0, #4
 800a33c:	e7f6      	b.n	800a32c <USBD_StdDevReq+0x22c>
  switch (pdev->dev_state)
 800a33e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a342:	3b01      	subs	r3, #1
 800a344:	2b02      	cmp	r3, #2
 800a346:	f63f aee6 	bhi.w	800a116 <USBD_StdDevReq+0x16>
      if (req->wLength != 0x2U)
 800a34a:	88ca      	ldrh	r2, [r1, #6]
 800a34c:	2a02      	cmp	r2, #2
 800a34e:	f47f aee2 	bne.w	800a116 <USBD_StdDevReq+0x16>
      if (pdev->dev_remote_wakeup)
 800a352:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800a356:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a358:	2b00      	cmp	r3, #0
 800a35a:	bf0c      	ite	eq
 800a35c:	2301      	moveq	r3, #1
 800a35e:	2303      	movne	r3, #3
 800a360:	f841 3f0c 	str.w	r3, [r1, #12]!
 800a364:	e7e2      	b.n	800a32c <USBD_StdDevReq+0x22c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a366:	884b      	ldrh	r3, [r1, #2]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	f47f aede 	bne.w	800a12a <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800a36e:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 800a372:	e71f      	b.n	800a1b4 <USBD_StdDevReq+0xb4>
  switch (pdev->dev_state)
 800a374:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a378:	3b01      	subs	r3, #1
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	f63f aecb 	bhi.w	800a116 <USBD_StdDevReq+0x16>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a380:	884b      	ldrh	r3, [r1, #2]
 800a382:	2b01      	cmp	r3, #1
 800a384:	f47f aed1 	bne.w	800a12a <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800a388:	2300      	movs	r3, #0
 800a38a:	e7f0      	b.n	800a36e <USBD_StdDevReq+0x26e>
 800a38c:	20000ae4 	.word	0x20000ae4

0800a390 <USBD_StdItfReq>:
{
 800a390:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a392:	780b      	ldrb	r3, [r1, #0]
{
 800a394:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a396:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800a39a:	065b      	lsls	r3, r3, #25
{
 800a39c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a39e:	d501      	bpl.n	800a3a4 <USBD_StdItfReq+0x14>
 800a3a0:	2a40      	cmp	r2, #64	@ 0x40
 800a3a2:	d115      	bne.n	800a3d0 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 800a3a4:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d810      	bhi.n	800a3d0 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a3ae:	792b      	ldrb	r3, [r5, #4]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d80d      	bhi.n	800a3d0 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3b4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	4620      	mov	r0, r4
 800a3be:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a3c0:	88eb      	ldrh	r3, [r5, #6]
 800a3c2:	b91b      	cbnz	r3, 800a3cc <USBD_StdItfReq+0x3c>
 800a3c4:	b910      	cbnz	r0, 800a3cc <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f000 f8ee 	bl	800a5a8 <USBD_CtlSendStatus>
}
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f7ff fe8a 	bl	800a0ea <USBD_CtlError.constprop.0>
          break;
 800a3d6:	e7f9      	b.n	800a3cc <USBD_StdItfReq+0x3c>

0800a3d8 <USBD_StdEPReq>:
{
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	780a      	ldrb	r2, [r1, #0]
 800a3dc:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 800a3de:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3e2:	2a20      	cmp	r2, #32
{
 800a3e4:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 800a3e6:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3e8:	d006      	beq.n	800a3f8 <USBD_StdEPReq+0x20>
 800a3ea:	2a40      	cmp	r2, #64	@ 0x40
 800a3ec:	d004      	beq.n	800a3f8 <USBD_StdEPReq+0x20>
 800a3ee:	b15a      	cbz	r2, 800a408 <USBD_StdEPReq+0x30>
              USBD_CtlError(pdev, req);
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f7ff fe7a 	bl	800a0ea <USBD_CtlError.constprop.0>
              break;
 800a3f6:	e005      	b.n	800a404 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 800a3f8:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	4620      	mov	r0, r4
 800a400:	6892      	ldr	r2, [r2, #8]
 800a402:	4790      	blx	r2
}
 800a404:	2000      	movs	r0, #0
 800a406:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800a408:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800a40a:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 800a40c:	2a01      	cmp	r2, #1
 800a40e:	d035      	beq.n	800a47c <USBD_StdEPReq+0xa4>
 800a410:	2a03      	cmp	r2, #3
 800a412:	d021      	beq.n	800a458 <USBD_StdEPReq+0x80>
 800a414:	2a00      	cmp	r2, #0
 800a416:	d1eb      	bne.n	800a3f0 <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 800a418:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d044      	beq.n	800a4aa <USBD_StdEPReq+0xd2>
 800a420:	2b03      	cmp	r3, #3
 800a422:	d1e5      	bne.n	800a3f0 <USBD_StdEPReq+0x18>
              if ((ep_addr & 0x80U) == 0x80U)
 800a424:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a426:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800a42a:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a42e:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800a432:	d04b      	beq.n	800a4cc <USBD_StdEPReq+0xf4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a434:	699b      	ldr	r3, [r3, #24]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d0da      	beq.n	800a3f0 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a43a:	2514      	movs	r5, #20
 800a43c:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800a440:	fb03 5505 	mla	r5, r3, r5, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a444:	2980      	cmp	r1, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a446:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a448:	d04b      	beq.n	800a4e2 <USBD_StdEPReq+0x10a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a44a:	4620      	mov	r0, r4
 800a44c:	f000 fb34 	bl	800aab8 <USBD_LL_IsStallEP>
 800a450:	2800      	cmp	r0, #0
 800a452:	d04b      	beq.n	800a4ec <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 800a454:	2301      	movs	r3, #1
 800a456:	e045      	b.n	800a4e4 <USBD_StdEPReq+0x10c>
          switch (pdev->dev_state)
 800a458:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a45c:	2a02      	cmp	r2, #2
 800a45e:	d01b      	beq.n	800a498 <USBD_StdEPReq+0xc0>
 800a460:	2a03      	cmp	r2, #3
 800a462:	d1c5      	bne.n	800a3f0 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a464:	885a      	ldrh	r2, [r3, #2]
 800a466:	b92a      	cbnz	r2, 800a474 <USBD_StdEPReq+0x9c>
                if ((ep_addr != 0x00U) &&
 800a468:	064a      	lsls	r2, r1, #25
 800a46a:	d003      	beq.n	800a474 <USBD_StdEPReq+0x9c>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a46c:	88db      	ldrh	r3, [r3, #6]
 800a46e:	b90b      	cbnz	r3, 800a474 <USBD_StdEPReq+0x9c>
                  USBD_LL_StallEP(pdev, ep_addr);
 800a470:	f000 fb10 	bl	800aa94 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800a474:	4620      	mov	r0, r4
 800a476:	f000 f897 	bl	800a5a8 <USBD_CtlSendStatus>
              break;
 800a47a:	e7c3      	b.n	800a404 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 800a47c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a480:	2a02      	cmp	r2, #2
 800a482:	d009      	beq.n	800a498 <USBD_StdEPReq+0xc0>
 800a484:	2a03      	cmp	r2, #3
 800a486:	d1b3      	bne.n	800a3f0 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a488:	885b      	ldrh	r3, [r3, #2]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1ba      	bne.n	800a404 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800a48e:	064d      	lsls	r5, r1, #25
 800a490:	d0f0      	beq.n	800a474 <USBD_StdEPReq+0x9c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a492:	f000 fb08 	bl	800aaa6 <USBD_LL_ClearStallEP>
 800a496:	e7ed      	b.n	800a474 <USBD_StdEPReq+0x9c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a498:	064b      	lsls	r3, r1, #25
 800a49a:	d0a9      	beq.n	800a3f0 <USBD_StdEPReq+0x18>
                USBD_LL_StallEP(pdev, ep_addr);
 800a49c:	f000 fafa 	bl	800aa94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a4a0:	2180      	movs	r1, #128	@ 0x80
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f000 faf6 	bl	800aa94 <USBD_LL_StallEP>
 800a4a8:	e7ac      	b.n	800a404 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4aa:	064a      	lsls	r2, r1, #25
 800a4ac:	d1a0      	bne.n	800a3f0 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4ae:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 800a4b0:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a4b4:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4b8:	bf4c      	ite	mi
 800a4ba:	f100 0114 	addmi.w	r1, r0, #20
 800a4be:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 800a4c2:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f000 f845 	bl	800a554 <USBD_CtlSendData>
              break;
 800a4ca:	e79b      	b.n	800a404 <USBD_StdEPReq+0x2c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a4cc:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d08d      	beq.n	800a3f0 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4d4:	2514      	movs	r5, #20
 800a4d6:	fb05 0501 	mla	r5, r5, r1, r0
 800a4da:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a4de:	2900      	cmp	r1, #0
 800a4e0:	d1b3      	bne.n	800a44a <USBD_StdEPReq+0x72>
                pep->status = 0x0000U;
 800a4e2:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 800a4e4:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	4629      	mov	r1, r5
 800a4ea:	e7eb      	b.n	800a4c4 <USBD_StdEPReq+0xec>
                pep->status = 0x0000U;
 800a4ec:	6028      	str	r0, [r5, #0]
 800a4ee:	e7fa      	b.n	800a4e6 <USBD_StdEPReq+0x10e>

0800a4f0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800a4f0:	780b      	ldrb	r3, [r1, #0]
 800a4f2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a4f4:	784b      	ldrb	r3, [r1, #1]
 800a4f6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a4f8:	884b      	ldrh	r3, [r1, #2]
 800a4fa:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a4fc:	888b      	ldrh	r3, [r1, #4]
 800a4fe:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a500:	88cb      	ldrh	r3, [r1, #6]
 800a502:	80c3      	strh	r3, [r0, #6]
}
 800a504:	4770      	bx	lr

0800a506 <USBD_CtlError>:
{
 800a506:	b510      	push	{r4, lr}
 800a508:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800a50a:	2180      	movs	r1, #128	@ 0x80
 800a50c:	f000 fac2 	bl	800aa94 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a510:	4620      	mov	r0, r4
}
 800a512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800a516:	2100      	movs	r1, #0
 800a518:	f000 babc 	b.w	800aa94 <USBD_LL_StallEP>

0800a51c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a51c:	b570      	push	{r4, r5, r6, lr}
 800a51e:	460d      	mov	r5, r1
 800a520:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 800a522:	4604      	mov	r4, r0
 800a524:	b170      	cbz	r0, 800a544 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800a526:	f7fa fe1d 	bl	8005164 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a52a:	b2c3      	uxtb	r3, r0
 800a52c:	3301      	adds	r3, #1
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a532:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a534:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 800a536:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a538:	706b      	strb	r3, [r5, #1]
 800a53a:	2302      	movs	r3, #2
 800a53c:	3c01      	subs	r4, #1
    while (*desc != '\0')
 800a53e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800a542:	b901      	cbnz	r1, 800a546 <USBD_GetString+0x2a>
}
 800a544:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 800a546:	1c5a      	adds	r2, r3, #1
 800a548:	54e9      	strb	r1, [r5, r3]
 800a54a:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800a54c:	3302      	adds	r3, #2
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	54a8      	strb	r0, [r5, r2]
 800a552:	e7f4      	b.n	800a53e <USBD_GetString+0x22>

0800a554 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a554:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a556:	2202      	movs	r2, #2
{
 800a558:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800a55a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a55e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a562:	460a      	mov	r2, r1
 800a564:	2100      	movs	r1, #0
 800a566:	f000 fac1 	bl	800aaec <USBD_LL_Transmit>

  return USBD_OK;
}
 800a56a:	2000      	movs	r0, #0
 800a56c:	bd10      	pop	{r4, pc}

0800a56e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a56e:	b508      	push	{r3, lr}
 800a570:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a572:	460a      	mov	r2, r1
 800a574:	2100      	movs	r1, #0
 800a576:	f000 fab9 	bl	800aaec <USBD_LL_Transmit>

  return USBD_OK;
}
 800a57a:	2000      	movs	r0, #0
 800a57c:	bd08      	pop	{r3, pc}

0800a57e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a57e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a580:	2203      	movs	r2, #3
{
 800a582:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800a584:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a588:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a58c:	460a      	mov	r2, r1
 800a58e:	2100      	movs	r1, #0
 800a590:	f000 fab5 	bl	800aafe <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a594:	2000      	movs	r0, #0
 800a596:	bd10      	pop	{r4, pc}

0800a598 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a598:	b508      	push	{r3, lr}
 800a59a:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a59c:	460a      	mov	r2, r1
 800a59e:	2100      	movs	r1, #0
 800a5a0:	f000 faad 	bl	800aafe <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a5a4:	2000      	movs	r0, #0
 800a5a6:	bd08      	pop	{r3, pc}

0800a5a8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a5a8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a5aa:	2304      	movs	r3, #4
 800a5ac:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	f000 fa99 	bl	800aaec <USBD_LL_Transmit>

  return USBD_OK;
}
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	bd08      	pop	{r3, pc}

0800a5be <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5be:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5c0:	2305      	movs	r3, #5
 800a5c2:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	f000 fa97 	bl	800aafe <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	bd08      	pop	{r3, pc}

0800a5d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	490e      	ldr	r1, [pc, #56]	@ (800a614 <MX_USB_DEVICE_Init+0x40>)
 800a5da:	480f      	ldr	r0, [pc, #60]	@ (800a618 <MX_USB_DEVICE_Init+0x44>)
 800a5dc:	f7ff fc46 	bl	8009e6c <USBD_Init>
 800a5e0:	b108      	cbz	r0, 800a5e6 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800a5e2:	f7fb fc23 	bl	8005e2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a5e6:	490d      	ldr	r1, [pc, #52]	@ (800a61c <MX_USB_DEVICE_Init+0x48>)
 800a5e8:	480b      	ldr	r0, [pc, #44]	@ (800a618 <MX_USB_DEVICE_Init+0x44>)
 800a5ea:	f7ff fc54 	bl	8009e96 <USBD_RegisterClass>
 800a5ee:	b108      	cbz	r0, 800a5f4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800a5f0:	f7fb fc1c 	bl	8005e2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5f4:	490a      	ldr	r1, [pc, #40]	@ (800a620 <MX_USB_DEVICE_Init+0x4c>)
 800a5f6:	4808      	ldr	r0, [pc, #32]	@ (800a618 <MX_USB_DEVICE_Init+0x44>)
 800a5f8:	f7ff fbf7 	bl	8009dea <USBD_CDC_RegisterInterface>
 800a5fc:	b108      	cbz	r0, 800a602 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800a5fe:	f7fb fc15 	bl	8005e2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a602:	4805      	ldr	r0, [pc, #20]	@ (800a618 <MX_USB_DEVICE_Init+0x44>)
 800a604:	f7ff fc4e 	bl	8009ea4 <USBD_Start>
 800a608:	b118      	cbz	r0, 800a612 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a60a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800a60e:	f7fb bc0d 	b.w	8005e2c <Error_Handler>
}
 800a612:	bd08      	pop	{r3, pc}
 800a614:	20000174 	.word	0x20000174
 800a618:	20000ae8 	.word	0x20000ae8
 800a61c:	200000e0 	.word	0x200000e0
 800a620:	20000124 	.word	0x20000124

0800a624 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800a624:	2000      	movs	r0, #0
 800a626:	4770      	bx	lr

0800a628 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a628:	2820      	cmp	r0, #32
 800a62a:	d003      	beq.n	800a634 <CDC_Control_FS+0xc>
 800a62c:	2821      	cmp	r0, #33	@ 0x21
 800a62e:	d017      	beq.n	800a660 <CDC_Control_FS+0x38>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800a630:	2000      	movs	r0, #0
 800a632:	4770      	bx	lr
    	LineCoding.bitrate = (uint32_t)(pbuf[0]);
 800a634:	780b      	ldrb	r3, [r1, #0]
 800a636:	4a13      	ldr	r2, [pc, #76]	@ (800a684 <CDC_Control_FS+0x5c>)
 800a638:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 800a63a:	7848      	ldrb	r0, [r1, #1]
 800a63c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a640:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 800a642:	7888      	ldrb	r0, [r1, #2]
 800a644:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a648:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 800a64a:	78c8      	ldrb	r0, [r1, #3]
 800a64c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a650:	6013      	str	r3, [r2, #0]
    	LineCoding.format   = pbuf[4];
 800a652:	790b      	ldrb	r3, [r1, #4]
 800a654:	7113      	strb	r3, [r2, #4]
    	LineCoding.paritytype = pbuf[5];
 800a656:	794b      	ldrb	r3, [r1, #5]
 800a658:	7153      	strb	r3, [r2, #5]
    	LineCoding.datatype = pbuf[6];
 800a65a:	798b      	ldrb	r3, [r1, #6]
 800a65c:	7193      	strb	r3, [r2, #6]
    break;
 800a65e:	e7e7      	b.n	800a630 <CDC_Control_FS+0x8>
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800a660:	4b08      	ldr	r3, [pc, #32]	@ (800a684 <CDC_Control_FS+0x5c>)
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	700a      	strb	r2, [r1, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	0a12      	lsrs	r2, r2, #8
 800a66a:	704a      	strb	r2, [r1, #1]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800a66c:	885a      	ldrh	r2, [r3, #2]
 800a66e:	708a      	strb	r2, [r1, #2]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 800a670:	78da      	ldrb	r2, [r3, #3]
 800a672:	70ca      	strb	r2, [r1, #3]
    	pbuf[4] = LineCoding.format;
 800a674:	791a      	ldrb	r2, [r3, #4]
 800a676:	710a      	strb	r2, [r1, #4]
    	pbuf[5] = LineCoding.paritytype;
 800a678:	795a      	ldrb	r2, [r3, #5]
 800a67a:	714a      	strb	r2, [r1, #5]
    	pbuf[6] = LineCoding.datatype;
 800a67c:	799b      	ldrb	r3, [r3, #6]
 800a67e:	718b      	strb	r3, [r1, #6]
    break;
 800a680:	e7d6      	b.n	800a630 <CDC_Control_FS+0x8>
 800a682:	bf00      	nop
 800a684:	20000138 	.word	0x20000138

0800a688 <CDC_Init_FS>:
{
 800a688:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a68a:	4c06      	ldr	r4, [pc, #24]	@ (800a6a4 <CDC_Init_FS+0x1c>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	4620      	mov	r0, r4
 800a690:	4905      	ldr	r1, [pc, #20]	@ (800a6a8 <CDC_Init_FS+0x20>)
 800a692:	f7ff fbb1 	bl	8009df8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a696:	4620      	mov	r0, r4
 800a698:	4904      	ldr	r1, [pc, #16]	@ (800a6ac <CDC_Init_FS+0x24>)
 800a69a:	f7ff fbb5 	bl	8009e08 <USBD_CDC_SetRxBuffer>
}
 800a69e:	2000      	movs	r0, #0
 800a6a0:	bd10      	pop	{r4, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20000ae8 	.word	0x20000ae8
 800a6a8:	20000dac 	.word	0x20000dac
 800a6ac:	20000fac 	.word	0x20000fac

0800a6b0 <cdcAvailable>:
  ret = (rx_in - rx_out) % rx_len;
 800a6b0:	4b05      	ldr	r3, [pc, #20]	@ (800a6c8 <cdcAvailable+0x18>)
 800a6b2:	4a06      	ldr	r2, [pc, #24]	@ (800a6cc <cdcAvailable+0x1c>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	6812      	ldr	r2, [r2, #0]
 800a6b8:	1a9b      	subs	r3, r3, r2
 800a6ba:	4a05      	ldr	r2, [pc, #20]	@ (800a6d0 <cdcAvailable+0x20>)
 800a6bc:	6812      	ldr	r2, [r2, #0]
 800a6be:	fbb3 f0f2 	udiv	r0, r3, r2
}
 800a6c2:	fb02 3010 	mls	r0, r2, r0, r3
 800a6c6:	4770      	bx	lr
 800a6c8:	200013b4 	.word	0x200013b4
 800a6cc:	200013b0 	.word	0x200013b0
 800a6d0:	20000134 	.word	0x20000134

0800a6d4 <cdcRead>:
{
 800a6d4:	b510      	push	{r4, lr}
  ret = rx_buf[rx_out];
 800a6d6:	4a08      	ldr	r2, [pc, #32]	@ (800a6f8 <cdcRead+0x24>)
 800a6d8:	4908      	ldr	r1, [pc, #32]	@ (800a6fc <cdcRead+0x28>)
 800a6da:	6813      	ldr	r3, [r2, #0]
 800a6dc:	5cc8      	ldrb	r0, [r1, r3]
  if(rx_out != rx_in)
 800a6de:	4908      	ldr	r1, [pc, #32]	@ (800a700 <cdcRead+0x2c>)
 800a6e0:	6809      	ldr	r1, [r1, #0]
 800a6e2:	428b      	cmp	r3, r1
 800a6e4:	d007      	beq.n	800a6f6 <cdcRead+0x22>
	  rx_out = (rx_out + 1) % rx_len;
 800a6e6:	4907      	ldr	r1, [pc, #28]	@ (800a704 <cdcRead+0x30>)
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	6809      	ldr	r1, [r1, #0]
 800a6ec:	fbb3 f4f1 	udiv	r4, r3, r1
 800a6f0:	fb01 3314 	mls	r3, r1, r4, r3
 800a6f4:	6013      	str	r3, [r2, #0]
}
 800a6f6:	bd10      	pop	{r4, pc}
 800a6f8:	200013b0 	.word	0x200013b0
 800a6fc:	200011ad 	.word	0x200011ad
 800a700:	200013b4 	.word	0x200013b4
 800a704:	20000134 	.word	0x20000134

0800a708 <cdcDataIn>:
  rx_buf[rx_in] =rx_data;    //오버라이트
 800a708:	4a08      	ldr	r2, [pc, #32]	@ (800a72c <cdcDataIn+0x24>)
 800a70a:	4909      	ldr	r1, [pc, #36]	@ (800a730 <cdcDataIn+0x28>)
 800a70c:	6813      	ldr	r3, [r2, #0]
 800a70e:	54c8      	strb	r0, [r1, r3]
  next_rx_in = (rx_in +1) % rx_len;
 800a710:	4908      	ldr	r1, [pc, #32]	@ (800a734 <cdcDataIn+0x2c>)
 800a712:	3301      	adds	r3, #1
 800a714:	6809      	ldr	r1, [r1, #0]
 800a716:	fbb3 f0f1 	udiv	r0, r3, r1
 800a71a:	fb01 3310 	mls	r3, r1, r0, r3
  if(next_rx_in != rx_out)
 800a71e:	4906      	ldr	r1, [pc, #24]	@ (800a738 <cdcDataIn+0x30>)
 800a720:	6809      	ldr	r1, [r1, #0]
 800a722:	4299      	cmp	r1, r3
	  rx_in = next_rx_in;
 800a724:	bf18      	it	ne
 800a726:	6013      	strne	r3, [r2, #0]
}
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	200013b4 	.word	0x200013b4
 800a730:	200011ad 	.word	0x200011ad
 800a734:	20000134 	.word	0x20000134
 800a738:	200013b0 	.word	0x200013b0

0800a73c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a73c:	b570      	push	{r4, r5, r6, lr}
 800a73e:	4605      	mov	r5, r0
 800a740:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */

	for(int i=0;i<*Len;i++)
 800a742:	2400      	movs	r4, #0
 800a744:	6833      	ldr	r3, [r6, #0]
 800a746:	42a3      	cmp	r3, r4
 800a748:	d810      	bhi.n	800a76c <CDC_Receive_FS+0x30>
	  }

	uint32_t buf_len;

	//수신 버퍼에서 비어있는 데이터 양
	buf_len = (rx_len - cdcAvailable()) - 1;
 800a74a:	4b0d      	ldr	r3, [pc, #52]	@ (800a780 <CDC_Receive_FS+0x44>)
 800a74c:	681c      	ldr	r4, [r3, #0]
 800a74e:	f7ff ffaf 	bl	800a6b0 <cdcAvailable>
 800a752:	3c01      	subs	r4, #1
 800a754:	1a24      	subs	r4, r4, r0


	if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 800a756:	2c3f      	cmp	r4, #63	@ 0x3f
 800a758:	d90d      	bls.n	800a776 <CDC_Receive_FS+0x3a>
	{
		//다음 데이터도 보내줘
		 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a75a:	4629      	mov	r1, r5
 800a75c:	4809      	ldr	r0, [pc, #36]	@ (800a784 <CDC_Receive_FS+0x48>)
 800a75e:	f7ff fb53 	bl	8009e08 <USBD_CDC_SetRxBuffer>
		 USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a762:	4808      	ldr	r0, [pc, #32]	@ (800a784 <CDC_Receive_FS+0x48>)
 800a764:	f7ff fb6f 	bl	8009e46 <USBD_CDC_ReceivePacket>




  /* USER CODE END 6 */
}
 800a768:	2000      	movs	r0, #0
 800a76a:	bd70      	pop	{r4, r5, r6, pc}
		  cdcDataIn(Buf[i]);
 800a76c:	5d28      	ldrb	r0, [r5, r4]
 800a76e:	f7ff ffcb 	bl	800a708 <cdcDataIn>
	for(int i=0;i<*Len;i++)
 800a772:	3401      	adds	r4, #1
 800a774:	e7e6      	b.n	800a744 <CDC_Receive_FS+0x8>
		rx_full = true;
 800a776:	2201      	movs	r2, #1
 800a778:	4b03      	ldr	r3, [pc, #12]	@ (800a788 <CDC_Receive_FS+0x4c>)
 800a77a:	701a      	strb	r2, [r3, #0]
 800a77c:	e7f4      	b.n	800a768 <CDC_Receive_FS+0x2c>
 800a77e:	bf00      	nop
 800a780:	20000134 	.word	0x20000134
 800a784:	20000ae8 	.word	0x20000ae8
 800a788:	200011ac 	.word	0x200011ac

0800a78c <USBD_CDC_SOF>:
{
 800a78c:	b538      	push	{r3, r4, r5, lr}
	if(rx_full == true)
 800a78e:	4d09      	ldr	r5, [pc, #36]	@ (800a7b4 <USBD_CDC_SOF+0x28>)
{
 800a790:	4604      	mov	r4, r0
	if(rx_full == true)
 800a792:	782b      	ldrb	r3, [r5, #0]
 800a794:	b163      	cbz	r3, 800a7b0 <USBD_CDC_SOF+0x24>
			buf_len = (rx_len - cdcAvailable()) - 1;
 800a796:	4b08      	ldr	r3, [pc, #32]	@ (800a7b8 <USBD_CDC_SOF+0x2c>)
 800a798:	6819      	ldr	r1, [r3, #0]
 800a79a:	f7ff ff89 	bl	800a6b0 <cdcAvailable>
 800a79e:	3901      	subs	r1, #1
 800a7a0:	1a09      	subs	r1, r1, r0
			if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 800a7a2:	293f      	cmp	r1, #63	@ 0x3f
 800a7a4:	d904      	bls.n	800a7b0 <USBD_CDC_SOF+0x24>
				 USBD_CDC_ReceivePacket(pdev);
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f7ff fb4d 	bl	8009e46 <USBD_CDC_ReceivePacket>
				 rx_full = false;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	702b      	strb	r3, [r5, #0]
}
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	bd38      	pop	{r3, r4, r5, pc}
 800a7b4:	200011ac 	.word	0x200011ac
 800a7b8:	20000134 	.word	0x20000134

0800a7bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a7bc:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a7be:	4c09      	ldr	r4, [pc, #36]	@ (800a7e4 <CDC_Transmit_FS+0x28>)
{
 800a7c0:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a7c2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 800a7c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a7ca:	b943      	cbnz	r3, 800a7de <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a7cc:	4601      	mov	r1, r0
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f7ff fb12 	bl	8009df8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a7d4:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800a7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a7da:	f7ff bb1b 	b.w	8009e14 <USBD_CDC_TransmitPacket>
}
 800a7de:	2001      	movs	r0, #1
 800a7e0:	bd10      	pop	{r4, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20000ae8 	.word	0x20000ae8

0800a7e8 <cdcWrite>:
{
 800a7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	4606      	mov	r6, r0
  pre_time = millis();
 800a7ee:	f7fb fa9b 	bl	8005d28 <millis>
 800a7f2:	4605      	mov	r5, r0
	  ret = CDC_Transmit_FS(p_data,length);
 800a7f4:	b2a7      	uxth	r7, r4
 800a7f6:	4639      	mov	r1, r7
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7ff ffdf 	bl	800a7bc <CDC_Transmit_FS>
    if(ret == USBD_OK)
 800a7fe:	b110      	cbz	r0, 800a806 <cdcWrite+0x1e>
    else if(ret ==USBD_FAIL)
 800a800:	2802      	cmp	r0, #2
 800a802:	d102      	bne.n	800a80a <cdcWrite+0x22>
    	return 0;
 800a804:	2400      	movs	r4, #0
}
 800a806:	4620      	mov	r0, r4
 800a808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(millis()-pre_time >= 100)
 800a80a:	f7fb fa8d 	bl	8005d28 <millis>
 800a80e:	1b43      	subs	r3, r0, r5
 800a810:	2b63      	cmp	r3, #99	@ 0x63
 800a812:	d9f0      	bls.n	800a7f6 <cdcWrite+0xe>
 800a814:	e7f6      	b.n	800a804 <cdcWrite+0x1c>
	...

0800a818 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a818:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800a81a:	4801      	ldr	r0, [pc, #4]	@ (800a820 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800a81c:	800b      	strh	r3, [r1, #0]
}
 800a81e:	4770      	bx	lr
 800a820:	20000160 	.word	0x20000160

0800a824 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a824:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800a826:	4801      	ldr	r0, [pc, #4]	@ (800a82c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800a828:	800b      	strh	r3, [r1, #0]
}
 800a82a:	4770      	bx	lr
 800a82c:	2000015c 	.word	0x2000015c

0800a830 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a830:	2300      	movs	r3, #0
 800a832:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800a834:	461e      	mov	r6, r3
 800a836:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 800a838:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800a83a:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800a83e:	bf34      	ite	cc
 800a840:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a842:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a844:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800a848:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800a84c:	3301      	adds	r3, #1
 800a84e:	b2dc      	uxtb	r4, r3
 800a850:	42a2      	cmp	r2, r4
    value = value << 4;
 800a852:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800a856:	d8ef      	bhi.n	800a838 <IntToUnicode+0x8>
  }
}
 800a858:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a85c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800a85c:	231a      	movs	r3, #26
{
 800a85e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800a860:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a862:	4b0a      	ldr	r3, [pc, #40]	@ (800a88c <USBD_FS_SerialStrDescriptor+0x30>)
 800a864:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 800a868:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 800a86c:	1880      	adds	r0, r0, r2
 800a86e:	d00a      	beq.n	800a886 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a870:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a874:	4906      	ldr	r1, [pc, #24]	@ (800a890 <USBD_FS_SerialStrDescriptor+0x34>)
 800a876:	2208      	movs	r2, #8
 800a878:	f7ff ffda 	bl	800a830 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a87c:	2204      	movs	r2, #4
 800a87e:	4620      	mov	r0, r4
 800a880:	3110      	adds	r1, #16
 800a882:	f7ff ffd5 	bl	800a830 <IntToUnicode>
}
 800a886:	4803      	ldr	r0, [pc, #12]	@ (800a894 <USBD_FS_SerialStrDescriptor+0x38>)
 800a888:	bd10      	pop	{r4, pc}
 800a88a:	bf00      	nop
 800a88c:	1ffff000 	.word	0x1ffff000
 800a890:	20000142 	.word	0x20000142
 800a894:	20000140 	.word	0x20000140

0800a898 <USBD_FS_ManufacturerStrDescriptor>:
{
 800a898:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a89a:	4c04      	ldr	r4, [pc, #16]	@ (800a8ac <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800a89c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a89e:	4804      	ldr	r0, [pc, #16]	@ (800a8b0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	f7ff fe3b 	bl	800a51c <USBD_GetString>
}
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	bd10      	pop	{r4, pc}
 800a8aa:	bf00      	nop
 800a8ac:	200013b8 	.word	0x200013b8
 800a8b0:	0800de26 	.word	0x0800de26

0800a8b4 <USBD_FS_ProductStrDescriptor>:
{
 800a8b4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8b6:	4c04      	ldr	r4, [pc, #16]	@ (800a8c8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800a8b8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8ba:	4804      	ldr	r0, [pc, #16]	@ (800a8cc <USBD_FS_ProductStrDescriptor+0x18>)
 800a8bc:	4621      	mov	r1, r4
 800a8be:	f7ff fe2d 	bl	800a51c <USBD_GetString>
}
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	bd10      	pop	{r4, pc}
 800a8c6:	bf00      	nop
 800a8c8:	200013b8 	.word	0x200013b8
 800a8cc:	0800de39 	.word	0x0800de39

0800a8d0 <USBD_FS_ConfigStrDescriptor>:
{
 800a8d0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8d2:	4c04      	ldr	r4, [pc, #16]	@ (800a8e4 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800a8d4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8d6:	4804      	ldr	r0, [pc, #16]	@ (800a8e8 <USBD_FS_ConfigStrDescriptor+0x18>)
 800a8d8:	4621      	mov	r1, r4
 800a8da:	f7ff fe1f 	bl	800a51c <USBD_GetString>
}
 800a8de:	4620      	mov	r0, r4
 800a8e0:	bd10      	pop	{r4, pc}
 800a8e2:	bf00      	nop
 800a8e4:	200013b8 	.word	0x200013b8
 800a8e8:	0800de4f 	.word	0x0800de4f

0800a8ec <USBD_FS_InterfaceStrDescriptor>:
{
 800a8ec:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8ee:	4c04      	ldr	r4, [pc, #16]	@ (800a900 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800a8f0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8f2:	4804      	ldr	r0, [pc, #16]	@ (800a904 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	f7ff fe11 	bl	800a51c <USBD_GetString>
}
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	bd10      	pop	{r4, pc}
 800a8fe:	bf00      	nop
 800a900:	200013b8 	.word	0x200013b8
 800a904:	0800de5a 	.word	0x0800de5a

0800a908 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800a908:	b118      	cbz	r0, 800a912 <USBD_Get_USB_Status+0xa>
 800a90a:	2802      	cmp	r0, #2
 800a90c:	bf0c      	ite	eq
 800a90e:	2001      	moveq	r0, #1
 800a910:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800a912:	4770      	bx	lr

0800a914 <HAL_PCD_MspInit>:
{
 800a914:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800a916:	4b0e      	ldr	r3, [pc, #56]	@ (800a950 <HAL_PCD_MspInit+0x3c>)
 800a918:	6802      	ldr	r2, [r0, #0]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d115      	bne.n	800a94a <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 800a91e:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 800a922:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a924:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800a926:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a92a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a92c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800a92e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a930:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800a932:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a936:	9301      	str	r3, [sp, #4]
 800a938:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a93a:	f7fc fa55 	bl	8006de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a93e:	2014      	movs	r0, #20
}
 800a940:	b003      	add	sp, #12
 800a942:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a946:	f7fc ba7f 	b.w	8006e48 <HAL_NVIC_EnableIRQ>
}
 800a94a:	b003      	add	sp, #12
 800a94c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a950:	40005c00 	.word	0x40005c00

0800a954 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a954:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 800a958:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800a95c:	f7ff babb 	b.w	8009ed6 <USBD_LL_SetupStage>

0800a960 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a960:	2328      	movs	r3, #40	@ 0x28
 800a962:	fb03 0301 	mla	r3, r3, r1, r0
 800a966:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800a96a:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800a96e:	f7ff badf 	b.w	8009f30 <USBD_LL_DataOutStage>

0800a972 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a972:	2328      	movs	r3, #40	@ 0x28
 800a974:	fb03 0301 	mla	r3, r3, r1, r0
 800a978:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800a97c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a97e:	f7ff bb0f 	b.w	8009fa0 <USBD_LL_DataInStage>

0800a982 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a982:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800a986:	f7ff bba4 	b.w	800a0d2 <USBD_LL_SOF>

0800a98a <HAL_PCD_ResetCallback>:
{
 800a98a:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a98c:	7983      	ldrb	r3, [r0, #6]
{
 800a98e:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a990:	2b02      	cmp	r3, #2
 800a992:	d001      	beq.n	800a998 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800a994:	f7fb fa4a 	bl	8005e2c <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a998:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 800a99c:	2101      	movs	r1, #1
 800a99e:	f7ff fb82 	bl	800a0a6 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9a2:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 800a9a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9aa:	f7ff bb55 	b.w	800a058 <USBD_LL_Reset>
	...

0800a9b0 <HAL_PCD_SuspendCallback>:
{
 800a9b0:	b510      	push	{r4, lr}
 800a9b2:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a9b4:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800a9b8:	f7ff fb78 	bl	800a0ac <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800a9bc:	7aa3      	ldrb	r3, [r4, #10]
 800a9be:	b123      	cbz	r3, 800a9ca <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9c0:	4a02      	ldr	r2, [pc, #8]	@ (800a9cc <HAL_PCD_SuspendCallback+0x1c>)
 800a9c2:	6913      	ldr	r3, [r2, #16]
 800a9c4:	f043 0306 	orr.w	r3, r3, #6
 800a9c8:	6113      	str	r3, [r2, #16]
}
 800a9ca:	bd10      	pop	{r4, pc}
 800a9cc:	e000ed00 	.word	0xe000ed00

0800a9d0 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a9d0:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800a9d4:	f7ff bb73 	b.w	800a0be <USBD_LL_Resume>

0800a9d8 <USBD_LL_Init>:
{
 800a9d8:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 800a9da:	4b1d      	ldr	r3, [pc, #116]	@ (800aa50 <USBD_LL_Init+0x78>)
{
 800a9dc:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800a9de:	481d      	ldr	r0, [pc, #116]	@ (800aa54 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 800a9e0:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a9e2:	2308      	movs	r3, #8
 800a9e4:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a9ea:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 800a9ec:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a9f0:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a9f4:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a9f6:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a9f8:	f7fc fd3a 	bl	8007470 <HAL_PCD_Init>
 800a9fc:	b108      	cbz	r0, 800aa02 <USBD_LL_Init+0x2a>
    Error_Handler( );
 800a9fe:	f7fb fa15 	bl	8005e2c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aa02:	2200      	movs	r2, #0
 800aa04:	2318      	movs	r3, #24
 800aa06:	4611      	mov	r1, r2
 800aa08:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800aa0c:	f7fd fbbb 	bl	8008186 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aa10:	2358      	movs	r3, #88	@ 0x58
 800aa12:	2200      	movs	r2, #0
 800aa14:	2180      	movs	r1, #128	@ 0x80
 800aa16:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800aa1a:	f7fd fbb4 	bl	8008186 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800aa1e:	23c0      	movs	r3, #192	@ 0xc0
 800aa20:	2200      	movs	r2, #0
 800aa22:	2181      	movs	r1, #129	@ 0x81
 800aa24:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800aa28:	f7fd fbad 	bl	8008186 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800aa2c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800aa30:	2200      	movs	r2, #0
 800aa32:	2101      	movs	r1, #1
 800aa34:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800aa38:	f7fd fba5 	bl	8008186 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800aa3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa40:	2200      	movs	r2, #0
 800aa42:	2182      	movs	r1, #130	@ 0x82
 800aa44:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800aa48:	f7fd fb9d 	bl	8008186 <HAL_PCDEx_PMAConfig>
}
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	bd10      	pop	{r4, pc}
 800aa50:	40005c00 	.word	0x40005c00
 800aa54:	200017d8 	.word	0x200017d8

0800aa58 <USBD_LL_Start>:
{
 800aa58:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800aa5a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800aa5e:	f7fc fd6a 	bl	8007536 <HAL_PCD_Start>
}
 800aa62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa66:	f7ff bf4f 	b.w	800a908 <USBD_Get_USB_Status>

0800aa6a <USBD_LL_OpenEP>:
{
 800aa6a:	b510      	push	{r4, lr}
 800aa6c:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa6e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 800aa72:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa74:	4623      	mov	r3, r4
 800aa76:	f7fd fa8f 	bl	8007f98 <HAL_PCD_EP_Open>
}
 800aa7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa7e:	f7ff bf43 	b.w	800a908 <USBD_Get_USB_Status>

0800aa82 <USBD_LL_CloseEP>:
{
 800aa82:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa84:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800aa88:	f7fd fab6 	bl	8007ff8 <HAL_PCD_EP_Close>
}
 800aa8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa90:	f7ff bf3a 	b.w	800a908 <USBD_Get_USB_Status>

0800aa94 <USBD_LL_StallEP>:
{
 800aa94:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa96:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800aa9a:	f7fd fb0c 	bl	80080b6 <HAL_PCD_EP_SetStall>
}
 800aa9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa2:	f7ff bf31 	b.w	800a908 <USBD_Get_USB_Status>

0800aaa6 <USBD_LL_ClearStallEP>:
{
 800aaa6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aaa8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800aaac:	f7fd fb39 	bl	8008122 <HAL_PCD_EP_ClrStall>
}
 800aab0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aab4:	f7ff bf28 	b.w	800a908 <USBD_Get_USB_Status>

0800aab8 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aab8:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 800aaba:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aabe:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aac2:	bf1b      	ittet	ne
 800aac4:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 800aac8:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aacc:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aad0:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aad2:	bf08      	it	eq
 800aad4:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 800aad8:	4770      	bx	lr

0800aada <USBD_LL_SetUSBAddress>:
{
 800aada:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aadc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800aae0:	f7fc fd42 	bl	8007568 <HAL_PCD_SetAddress>
}
 800aae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aae8:	f7ff bf0e 	b.w	800a908 <USBD_Get_USB_Status>

0800aaec <USBD_LL_Transmit>:
{
 800aaec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aaee:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800aaf2:	f7fd fac8 	bl	8008086 <HAL_PCD_EP_Transmit>
}
 800aaf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aafa:	f7ff bf05 	b.w	800a908 <USBD_Get_USB_Status>

0800aafe <USBD_LL_PrepareReceive>:
{
 800aafe:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab00:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800ab04:	f7fd faa0 	bl	8008048 <HAL_PCD_EP_Receive>
}
 800ab08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab0c:	f7ff befc 	b.w	800a908 <USBD_Get_USB_Status>

0800ab10 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab10:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800ab14:	f7fd baaf 	b.w	8008076 <HAL_PCD_EP_GetRxCount>

0800ab18 <USBD_static_malloc>:
}
 800ab18:	4800      	ldr	r0, [pc, #0]	@ (800ab1c <USBD_static_malloc+0x4>)
 800ab1a:	4770      	bx	lr
 800ab1c:	200015b8 	.word	0x200015b8

0800ab20 <USBD_static_free>:
}
 800ab20:	4770      	bx	lr

0800ab22 <HAL_PCDEx_SetConnectionState>:
}
 800ab22:	4770      	bx	lr

0800ab24 <main>:




int main(void)
{
 800ab24:	b508      	push	{r3, lr}
	hwInit();
 800ab26:	f7fc f8df 	bl	8006ce8 <hwInit>
	apInit();
 800ab2a:	f7fb f8c1 	bl	8005cb0 <apInit>

	apMain();
 800ab2e:	f7fb f8d7 	bl	8005ce0 <apMain>

	return 0;
}
 800ab32:	2000      	movs	r0, #0
 800ab34:	bd08      	pop	{r3, pc}

0800ab36 <sulp>:
 800ab36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3a:	460f      	mov	r7, r1
 800ab3c:	4690      	mov	r8, r2
 800ab3e:	f002 f8a7 	bl	800cc90 <__ulp>
 800ab42:	4604      	mov	r4, r0
 800ab44:	460d      	mov	r5, r1
 800ab46:	f1b8 0f00 	cmp.w	r8, #0
 800ab4a:	d011      	beq.n	800ab70 <sulp+0x3a>
 800ab4c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ab50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	dd0b      	ble.n	800ab70 <sulp+0x3a>
 800ab58:	2400      	movs	r4, #0
 800ab5a:	051b      	lsls	r3, r3, #20
 800ab5c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ab60:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ab64:	4622      	mov	r2, r4
 800ab66:	462b      	mov	r3, r5
 800ab68:	f7fa fcc0 	bl	80054ec <__aeabi_dmul>
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	460d      	mov	r5, r1
 800ab70:	4620      	mov	r0, r4
 800ab72:	4629      	mov	r1, r5
 800ab74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ab78 <_strtod_l>:
 800ab78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7c:	b09f      	sub	sp, #124	@ 0x7c
 800ab7e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ab80:	2200      	movs	r2, #0
 800ab82:	460c      	mov	r4, r1
 800ab84:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab86:	f04f 0a00 	mov.w	sl, #0
 800ab8a:	f04f 0b00 	mov.w	fp, #0
 800ab8e:	460a      	mov	r2, r1
 800ab90:	9005      	str	r0, [sp, #20]
 800ab92:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab94:	7811      	ldrb	r1, [r2, #0]
 800ab96:	292b      	cmp	r1, #43	@ 0x2b
 800ab98:	d048      	beq.n	800ac2c <_strtod_l+0xb4>
 800ab9a:	d836      	bhi.n	800ac0a <_strtod_l+0x92>
 800ab9c:	290d      	cmp	r1, #13
 800ab9e:	d830      	bhi.n	800ac02 <_strtod_l+0x8a>
 800aba0:	2908      	cmp	r1, #8
 800aba2:	d830      	bhi.n	800ac06 <_strtod_l+0x8e>
 800aba4:	2900      	cmp	r1, #0
 800aba6:	d039      	beq.n	800ac1c <_strtod_l+0xa4>
 800aba8:	2200      	movs	r2, #0
 800abaa:	920e      	str	r2, [sp, #56]	@ 0x38
 800abac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800abae:	782a      	ldrb	r2, [r5, #0]
 800abb0:	2a30      	cmp	r2, #48	@ 0x30
 800abb2:	f040 80b0 	bne.w	800ad16 <_strtod_l+0x19e>
 800abb6:	786a      	ldrb	r2, [r5, #1]
 800abb8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800abbc:	2a58      	cmp	r2, #88	@ 0x58
 800abbe:	d16c      	bne.n	800ac9a <_strtod_l+0x122>
 800abc0:	9302      	str	r3, [sp, #8]
 800abc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abc4:	4a8f      	ldr	r2, [pc, #572]	@ (800ae04 <_strtod_l+0x28c>)
 800abc6:	9301      	str	r3, [sp, #4]
 800abc8:	ab1a      	add	r3, sp, #104	@ 0x68
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	9805      	ldr	r0, [sp, #20]
 800abce:	ab1b      	add	r3, sp, #108	@ 0x6c
 800abd0:	a919      	add	r1, sp, #100	@ 0x64
 800abd2:	f001 f95f 	bl	800be94 <__gethex>
 800abd6:	f010 060f 	ands.w	r6, r0, #15
 800abda:	4604      	mov	r4, r0
 800abdc:	d005      	beq.n	800abea <_strtod_l+0x72>
 800abde:	2e06      	cmp	r6, #6
 800abe0:	d126      	bne.n	800ac30 <_strtod_l+0xb8>
 800abe2:	2300      	movs	r3, #0
 800abe4:	3501      	adds	r5, #1
 800abe6:	9519      	str	r5, [sp, #100]	@ 0x64
 800abe8:	930e      	str	r3, [sp, #56]	@ 0x38
 800abea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abec:	2b00      	cmp	r3, #0
 800abee:	f040 8582 	bne.w	800b6f6 <_strtod_l+0xb7e>
 800abf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abf4:	b1bb      	cbz	r3, 800ac26 <_strtod_l+0xae>
 800abf6:	4650      	mov	r0, sl
 800abf8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800abfc:	b01f      	add	sp, #124	@ 0x7c
 800abfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac02:	2920      	cmp	r1, #32
 800ac04:	d1d0      	bne.n	800aba8 <_strtod_l+0x30>
 800ac06:	3201      	adds	r2, #1
 800ac08:	e7c3      	b.n	800ab92 <_strtod_l+0x1a>
 800ac0a:	292d      	cmp	r1, #45	@ 0x2d
 800ac0c:	d1cc      	bne.n	800aba8 <_strtod_l+0x30>
 800ac0e:	2101      	movs	r1, #1
 800ac10:	910e      	str	r1, [sp, #56]	@ 0x38
 800ac12:	1c51      	adds	r1, r2, #1
 800ac14:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac16:	7852      	ldrb	r2, [r2, #1]
 800ac18:	2a00      	cmp	r2, #0
 800ac1a:	d1c7      	bne.n	800abac <_strtod_l+0x34>
 800ac1c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac1e:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f040 8566 	bne.w	800b6f2 <_strtod_l+0xb7a>
 800ac26:	4650      	mov	r0, sl
 800ac28:	4659      	mov	r1, fp
 800ac2a:	e7e7      	b.n	800abfc <_strtod_l+0x84>
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	e7ef      	b.n	800ac10 <_strtod_l+0x98>
 800ac30:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac32:	b13a      	cbz	r2, 800ac44 <_strtod_l+0xcc>
 800ac34:	2135      	movs	r1, #53	@ 0x35
 800ac36:	a81c      	add	r0, sp, #112	@ 0x70
 800ac38:	f002 f91a 	bl	800ce70 <__copybits>
 800ac3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac3e:	9805      	ldr	r0, [sp, #20]
 800ac40:	f001 fcfa 	bl	800c638 <_Bfree>
 800ac44:	3e01      	subs	r6, #1
 800ac46:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ac48:	2e04      	cmp	r6, #4
 800ac4a:	d806      	bhi.n	800ac5a <_strtod_l+0xe2>
 800ac4c:	e8df f006 	tbb	[pc, r6]
 800ac50:	201d0314 	.word	0x201d0314
 800ac54:	14          	.byte	0x14
 800ac55:	00          	.byte	0x00
 800ac56:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ac5a:	05e1      	lsls	r1, r4, #23
 800ac5c:	bf48      	it	mi
 800ac5e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ac62:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac66:	0d1b      	lsrs	r3, r3, #20
 800ac68:	051b      	lsls	r3, r3, #20
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1bd      	bne.n	800abea <_strtod_l+0x72>
 800ac6e:	f001 f813 	bl	800bc98 <__errno>
 800ac72:	2322      	movs	r3, #34	@ 0x22
 800ac74:	6003      	str	r3, [r0, #0]
 800ac76:	e7b8      	b.n	800abea <_strtod_l+0x72>
 800ac78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ac80:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ac84:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac88:	e7e7      	b.n	800ac5a <_strtod_l+0xe2>
 800ac8a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ae08 <_strtod_l+0x290>
 800ac8e:	e7e4      	b.n	800ac5a <_strtod_l+0xe2>
 800ac90:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ac94:	f04f 3aff 	mov.w	sl, #4294967295
 800ac98:	e7df      	b.n	800ac5a <_strtod_l+0xe2>
 800ac9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac9c:	1c5a      	adds	r2, r3, #1
 800ac9e:	9219      	str	r2, [sp, #100]	@ 0x64
 800aca0:	785b      	ldrb	r3, [r3, #1]
 800aca2:	2b30      	cmp	r3, #48	@ 0x30
 800aca4:	d0f9      	beq.n	800ac9a <_strtod_l+0x122>
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d09f      	beq.n	800abea <_strtod_l+0x72>
 800acaa:	2301      	movs	r3, #1
 800acac:	2700      	movs	r7, #0
 800acae:	220a      	movs	r2, #10
 800acb0:	46b9      	mov	r9, r7
 800acb2:	9308      	str	r3, [sp, #32]
 800acb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acb6:	970b      	str	r7, [sp, #44]	@ 0x2c
 800acb8:	930c      	str	r3, [sp, #48]	@ 0x30
 800acba:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800acbc:	7805      	ldrb	r5, [r0, #0]
 800acbe:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800acc2:	b2d9      	uxtb	r1, r3
 800acc4:	2909      	cmp	r1, #9
 800acc6:	d928      	bls.n	800ad1a <_strtod_l+0x1a2>
 800acc8:	2201      	movs	r2, #1
 800acca:	4950      	ldr	r1, [pc, #320]	@ (800ae0c <_strtod_l+0x294>)
 800accc:	f000 ff60 	bl	800bb90 <strncmp>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d032      	beq.n	800ad3a <_strtod_l+0x1c2>
 800acd4:	2000      	movs	r0, #0
 800acd6:	462a      	mov	r2, r5
 800acd8:	4603      	mov	r3, r0
 800acda:	464d      	mov	r5, r9
 800acdc:	900a      	str	r0, [sp, #40]	@ 0x28
 800acde:	2a65      	cmp	r2, #101	@ 0x65
 800ace0:	d001      	beq.n	800ace6 <_strtod_l+0x16e>
 800ace2:	2a45      	cmp	r2, #69	@ 0x45
 800ace4:	d114      	bne.n	800ad10 <_strtod_l+0x198>
 800ace6:	b91d      	cbnz	r5, 800acf0 <_strtod_l+0x178>
 800ace8:	9a08      	ldr	r2, [sp, #32]
 800acea:	4302      	orrs	r2, r0
 800acec:	d096      	beq.n	800ac1c <_strtod_l+0xa4>
 800acee:	2500      	movs	r5, #0
 800acf0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800acf2:	1c62      	adds	r2, r4, #1
 800acf4:	9219      	str	r2, [sp, #100]	@ 0x64
 800acf6:	7862      	ldrb	r2, [r4, #1]
 800acf8:	2a2b      	cmp	r2, #43	@ 0x2b
 800acfa:	d07a      	beq.n	800adf2 <_strtod_l+0x27a>
 800acfc:	2a2d      	cmp	r2, #45	@ 0x2d
 800acfe:	d07e      	beq.n	800adfe <_strtod_l+0x286>
 800ad00:	f04f 0c00 	mov.w	ip, #0
 800ad04:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ad08:	2909      	cmp	r1, #9
 800ad0a:	f240 8085 	bls.w	800ae18 <_strtod_l+0x2a0>
 800ad0e:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad10:	f04f 0800 	mov.w	r8, #0
 800ad14:	e0a5      	b.n	800ae62 <_strtod_l+0x2ea>
 800ad16:	2300      	movs	r3, #0
 800ad18:	e7c8      	b.n	800acac <_strtod_l+0x134>
 800ad1a:	f1b9 0f08 	cmp.w	r9, #8
 800ad1e:	bfd8      	it	le
 800ad20:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ad22:	f100 0001 	add.w	r0, r0, #1
 800ad26:	bfd6      	itet	le
 800ad28:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad2c:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ad30:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ad32:	f109 0901 	add.w	r9, r9, #1
 800ad36:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad38:	e7bf      	b.n	800acba <_strtod_l+0x142>
 800ad3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad40:	785a      	ldrb	r2, [r3, #1]
 800ad42:	f1b9 0f00 	cmp.w	r9, #0
 800ad46:	d03b      	beq.n	800adc0 <_strtod_l+0x248>
 800ad48:	464d      	mov	r5, r9
 800ad4a:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad4c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ad50:	2b09      	cmp	r3, #9
 800ad52:	d912      	bls.n	800ad7a <_strtod_l+0x202>
 800ad54:	2301      	movs	r3, #1
 800ad56:	e7c2      	b.n	800acde <_strtod_l+0x166>
 800ad58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	1c5a      	adds	r2, r3, #1
 800ad5e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad60:	785a      	ldrb	r2, [r3, #1]
 800ad62:	2a30      	cmp	r2, #48	@ 0x30
 800ad64:	d0f8      	beq.n	800ad58 <_strtod_l+0x1e0>
 800ad66:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ad6a:	2b08      	cmp	r3, #8
 800ad6c:	f200 84c8 	bhi.w	800b700 <_strtod_l+0xb88>
 800ad70:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad72:	2000      	movs	r0, #0
 800ad74:	4605      	mov	r5, r0
 800ad76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad78:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad7a:	3a30      	subs	r2, #48	@ 0x30
 800ad7c:	f100 0301 	add.w	r3, r0, #1
 800ad80:	d018      	beq.n	800adb4 <_strtod_l+0x23c>
 800ad82:	462e      	mov	r6, r5
 800ad84:	f04f 0e0a 	mov.w	lr, #10
 800ad88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad8a:	4419      	add	r1, r3
 800ad8c:	910a      	str	r1, [sp, #40]	@ 0x28
 800ad8e:	1c71      	adds	r1, r6, #1
 800ad90:	eba1 0c05 	sub.w	ip, r1, r5
 800ad94:	4563      	cmp	r3, ip
 800ad96:	dc15      	bgt.n	800adc4 <_strtod_l+0x24c>
 800ad98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ad9c:	182b      	adds	r3, r5, r0
 800ad9e:	2b08      	cmp	r3, #8
 800ada0:	f105 0501 	add.w	r5, r5, #1
 800ada4:	4405      	add	r5, r0
 800ada6:	dc1a      	bgt.n	800adde <_strtod_l+0x266>
 800ada8:	230a      	movs	r3, #10
 800adaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adac:	fb03 2301 	mla	r3, r3, r1, r2
 800adb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adb2:	2300      	movs	r3, #0
 800adb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adb6:	4618      	mov	r0, r3
 800adb8:	1c51      	adds	r1, r2, #1
 800adba:	9119      	str	r1, [sp, #100]	@ 0x64
 800adbc:	7852      	ldrb	r2, [r2, #1]
 800adbe:	e7c5      	b.n	800ad4c <_strtod_l+0x1d4>
 800adc0:	4648      	mov	r0, r9
 800adc2:	e7ce      	b.n	800ad62 <_strtod_l+0x1ea>
 800adc4:	2e08      	cmp	r6, #8
 800adc6:	dc05      	bgt.n	800add4 <_strtod_l+0x25c>
 800adc8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800adca:	fb0e f606 	mul.w	r6, lr, r6
 800adce:	960b      	str	r6, [sp, #44]	@ 0x2c
 800add0:	460e      	mov	r6, r1
 800add2:	e7dc      	b.n	800ad8e <_strtod_l+0x216>
 800add4:	2910      	cmp	r1, #16
 800add6:	bfd8      	it	le
 800add8:	fb0e f707 	mulle.w	r7, lr, r7
 800addc:	e7f8      	b.n	800add0 <_strtod_l+0x258>
 800adde:	2b0f      	cmp	r3, #15
 800ade0:	bfdc      	itt	le
 800ade2:	230a      	movle	r3, #10
 800ade4:	fb03 2707 	mlale	r7, r3, r7, r2
 800ade8:	e7e3      	b.n	800adb2 <_strtod_l+0x23a>
 800adea:	2300      	movs	r3, #0
 800adec:	930a      	str	r3, [sp, #40]	@ 0x28
 800adee:	2301      	movs	r3, #1
 800adf0:	e77a      	b.n	800ace8 <_strtod_l+0x170>
 800adf2:	f04f 0c00 	mov.w	ip, #0
 800adf6:	1ca2      	adds	r2, r4, #2
 800adf8:	9219      	str	r2, [sp, #100]	@ 0x64
 800adfa:	78a2      	ldrb	r2, [r4, #2]
 800adfc:	e782      	b.n	800ad04 <_strtod_l+0x18c>
 800adfe:	f04f 0c01 	mov.w	ip, #1
 800ae02:	e7f8      	b.n	800adf6 <_strtod_l+0x27e>
 800ae04:	0800e01c 	.word	0x0800e01c
 800ae08:	7ff00000 	.word	0x7ff00000
 800ae0c:	0800ddc5 	.word	0x0800ddc5
 800ae10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae12:	1c51      	adds	r1, r2, #1
 800ae14:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae16:	7852      	ldrb	r2, [r2, #1]
 800ae18:	2a30      	cmp	r2, #48	@ 0x30
 800ae1a:	d0f9      	beq.n	800ae10 <_strtod_l+0x298>
 800ae1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ae20:	2908      	cmp	r1, #8
 800ae22:	f63f af75 	bhi.w	800ad10 <_strtod_l+0x198>
 800ae26:	f04f 080a 	mov.w	r8, #10
 800ae2a:	3a30      	subs	r2, #48	@ 0x30
 800ae2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae30:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ae32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae34:	1c56      	adds	r6, r2, #1
 800ae36:	9619      	str	r6, [sp, #100]	@ 0x64
 800ae38:	7852      	ldrb	r2, [r2, #1]
 800ae3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ae3e:	f1be 0f09 	cmp.w	lr, #9
 800ae42:	d939      	bls.n	800aeb8 <_strtod_l+0x340>
 800ae44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ae46:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ae4a:	1a76      	subs	r6, r6, r1
 800ae4c:	2e08      	cmp	r6, #8
 800ae4e:	dc03      	bgt.n	800ae58 <_strtod_l+0x2e0>
 800ae50:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae52:	4588      	cmp	r8, r1
 800ae54:	bfa8      	it	ge
 800ae56:	4688      	movge	r8, r1
 800ae58:	f1bc 0f00 	cmp.w	ip, #0
 800ae5c:	d001      	beq.n	800ae62 <_strtod_l+0x2ea>
 800ae5e:	f1c8 0800 	rsb	r8, r8, #0
 800ae62:	2d00      	cmp	r5, #0
 800ae64:	d14e      	bne.n	800af04 <_strtod_l+0x38c>
 800ae66:	9908      	ldr	r1, [sp, #32]
 800ae68:	4308      	orrs	r0, r1
 800ae6a:	f47f aebe 	bne.w	800abea <_strtod_l+0x72>
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	f47f aed4 	bne.w	800ac1c <_strtod_l+0xa4>
 800ae74:	2a69      	cmp	r2, #105	@ 0x69
 800ae76:	d028      	beq.n	800aeca <_strtod_l+0x352>
 800ae78:	dc25      	bgt.n	800aec6 <_strtod_l+0x34e>
 800ae7a:	2a49      	cmp	r2, #73	@ 0x49
 800ae7c:	d025      	beq.n	800aeca <_strtod_l+0x352>
 800ae7e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ae80:	f47f aecc 	bne.w	800ac1c <_strtod_l+0xa4>
 800ae84:	4999      	ldr	r1, [pc, #612]	@ (800b0ec <_strtod_l+0x574>)
 800ae86:	a819      	add	r0, sp, #100	@ 0x64
 800ae88:	f001 fa26 	bl	800c2d8 <__match>
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	f43f aec5 	beq.w	800ac1c <_strtod_l+0xa4>
 800ae92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	2b28      	cmp	r3, #40	@ 0x28
 800ae98:	d12e      	bne.n	800aef8 <_strtod_l+0x380>
 800ae9a:	4995      	ldr	r1, [pc, #596]	@ (800b0f0 <_strtod_l+0x578>)
 800ae9c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ae9e:	a819      	add	r0, sp, #100	@ 0x64
 800aea0:	f001 fa2e 	bl	800c300 <__hexnan>
 800aea4:	2805      	cmp	r0, #5
 800aea6:	d127      	bne.n	800aef8 <_strtod_l+0x380>
 800aea8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aeaa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800aeae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800aeb2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800aeb6:	e698      	b.n	800abea <_strtod_l+0x72>
 800aeb8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aeba:	fb08 2101 	mla	r1, r8, r1, r2
 800aebe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800aec2:	9209      	str	r2, [sp, #36]	@ 0x24
 800aec4:	e7b5      	b.n	800ae32 <_strtod_l+0x2ba>
 800aec6:	2a6e      	cmp	r2, #110	@ 0x6e
 800aec8:	e7da      	b.n	800ae80 <_strtod_l+0x308>
 800aeca:	498a      	ldr	r1, [pc, #552]	@ (800b0f4 <_strtod_l+0x57c>)
 800aecc:	a819      	add	r0, sp, #100	@ 0x64
 800aece:	f001 fa03 	bl	800c2d8 <__match>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	f43f aea2 	beq.w	800ac1c <_strtod_l+0xa4>
 800aed8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeda:	4987      	ldr	r1, [pc, #540]	@ (800b0f8 <_strtod_l+0x580>)
 800aedc:	3b01      	subs	r3, #1
 800aede:	a819      	add	r0, sp, #100	@ 0x64
 800aee0:	9319      	str	r3, [sp, #100]	@ 0x64
 800aee2:	f001 f9f9 	bl	800c2d8 <__match>
 800aee6:	b910      	cbnz	r0, 800aeee <_strtod_l+0x376>
 800aee8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeea:	3301      	adds	r3, #1
 800aeec:	9319      	str	r3, [sp, #100]	@ 0x64
 800aeee:	f04f 0a00 	mov.w	sl, #0
 800aef2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800b0fc <_strtod_l+0x584>
 800aef6:	e678      	b.n	800abea <_strtod_l+0x72>
 800aef8:	4881      	ldr	r0, [pc, #516]	@ (800b100 <_strtod_l+0x588>)
 800aefa:	f000 ff11 	bl	800bd20 <nan>
 800aefe:	4682      	mov	sl, r0
 800af00:	468b      	mov	fp, r1
 800af02:	e672      	b.n	800abea <_strtod_l+0x72>
 800af04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af06:	f1b9 0f00 	cmp.w	r9, #0
 800af0a:	bf08      	it	eq
 800af0c:	46a9      	moveq	r9, r5
 800af0e:	eba8 0303 	sub.w	r3, r8, r3
 800af12:	2d10      	cmp	r5, #16
 800af14:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800af16:	462c      	mov	r4, r5
 800af18:	9309      	str	r3, [sp, #36]	@ 0x24
 800af1a:	bfa8      	it	ge
 800af1c:	2410      	movge	r4, #16
 800af1e:	f7fa fa6b 	bl	80053f8 <__aeabi_ui2d>
 800af22:	2d09      	cmp	r5, #9
 800af24:	4682      	mov	sl, r0
 800af26:	468b      	mov	fp, r1
 800af28:	dc11      	bgt.n	800af4e <_strtod_l+0x3d6>
 800af2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f43f ae5c 	beq.w	800abea <_strtod_l+0x72>
 800af32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af34:	dd76      	ble.n	800b024 <_strtod_l+0x4ac>
 800af36:	2b16      	cmp	r3, #22
 800af38:	dc5d      	bgt.n	800aff6 <_strtod_l+0x47e>
 800af3a:	4972      	ldr	r1, [pc, #456]	@ (800b104 <_strtod_l+0x58c>)
 800af3c:	4652      	mov	r2, sl
 800af3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af42:	465b      	mov	r3, fp
 800af44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af48:	f7fa fad0 	bl	80054ec <__aeabi_dmul>
 800af4c:	e7d7      	b.n	800aefe <_strtod_l+0x386>
 800af4e:	4b6d      	ldr	r3, [pc, #436]	@ (800b104 <_strtod_l+0x58c>)
 800af50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800af58:	f7fa fac8 	bl	80054ec <__aeabi_dmul>
 800af5c:	4682      	mov	sl, r0
 800af5e:	4638      	mov	r0, r7
 800af60:	468b      	mov	fp, r1
 800af62:	f7fa fa49 	bl	80053f8 <__aeabi_ui2d>
 800af66:	4602      	mov	r2, r0
 800af68:	460b      	mov	r3, r1
 800af6a:	4650      	mov	r0, sl
 800af6c:	4659      	mov	r1, fp
 800af6e:	f7fa f907 	bl	8005180 <__adddf3>
 800af72:	2d0f      	cmp	r5, #15
 800af74:	4682      	mov	sl, r0
 800af76:	468b      	mov	fp, r1
 800af78:	ddd7      	ble.n	800af2a <_strtod_l+0x3b2>
 800af7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af7c:	1b2c      	subs	r4, r5, r4
 800af7e:	441c      	add	r4, r3
 800af80:	2c00      	cmp	r4, #0
 800af82:	f340 8093 	ble.w	800b0ac <_strtod_l+0x534>
 800af86:	f014 030f 	ands.w	r3, r4, #15
 800af8a:	d00a      	beq.n	800afa2 <_strtod_l+0x42a>
 800af8c:	495d      	ldr	r1, [pc, #372]	@ (800b104 <_strtod_l+0x58c>)
 800af8e:	4652      	mov	r2, sl
 800af90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af98:	465b      	mov	r3, fp
 800af9a:	f7fa faa7 	bl	80054ec <__aeabi_dmul>
 800af9e:	4682      	mov	sl, r0
 800afa0:	468b      	mov	fp, r1
 800afa2:	f034 040f 	bics.w	r4, r4, #15
 800afa6:	d073      	beq.n	800b090 <_strtod_l+0x518>
 800afa8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800afac:	dd49      	ble.n	800b042 <_strtod_l+0x4ca>
 800afae:	2400      	movs	r4, #0
 800afb0:	46a0      	mov	r8, r4
 800afb2:	46a1      	mov	r9, r4
 800afb4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800afb6:	2322      	movs	r3, #34	@ 0x22
 800afb8:	f04f 0a00 	mov.w	sl, #0
 800afbc:	9a05      	ldr	r2, [sp, #20]
 800afbe:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800b0fc <_strtod_l+0x584>
 800afc2:	6013      	str	r3, [r2, #0]
 800afc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f43f ae0f 	beq.w	800abea <_strtod_l+0x72>
 800afcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afce:	9805      	ldr	r0, [sp, #20]
 800afd0:	f001 fb32 	bl	800c638 <_Bfree>
 800afd4:	4649      	mov	r1, r9
 800afd6:	9805      	ldr	r0, [sp, #20]
 800afd8:	f001 fb2e 	bl	800c638 <_Bfree>
 800afdc:	4641      	mov	r1, r8
 800afde:	9805      	ldr	r0, [sp, #20]
 800afe0:	f001 fb2a 	bl	800c638 <_Bfree>
 800afe4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800afe6:	9805      	ldr	r0, [sp, #20]
 800afe8:	f001 fb26 	bl	800c638 <_Bfree>
 800afec:	4621      	mov	r1, r4
 800afee:	9805      	ldr	r0, [sp, #20]
 800aff0:	f001 fb22 	bl	800c638 <_Bfree>
 800aff4:	e5f9      	b.n	800abea <_strtod_l+0x72>
 800aff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aff8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800affc:	4293      	cmp	r3, r2
 800affe:	dbbc      	blt.n	800af7a <_strtod_l+0x402>
 800b000:	4c40      	ldr	r4, [pc, #256]	@ (800b104 <_strtod_l+0x58c>)
 800b002:	f1c5 050f 	rsb	r5, r5, #15
 800b006:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b00a:	4652      	mov	r2, sl
 800b00c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b010:	465b      	mov	r3, fp
 800b012:	f7fa fa6b 	bl	80054ec <__aeabi_dmul>
 800b016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b018:	1b5d      	subs	r5, r3, r5
 800b01a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b01e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b022:	e791      	b.n	800af48 <_strtod_l+0x3d0>
 800b024:	3316      	adds	r3, #22
 800b026:	dba8      	blt.n	800af7a <_strtod_l+0x402>
 800b028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b02a:	4650      	mov	r0, sl
 800b02c:	eba3 0808 	sub.w	r8, r3, r8
 800b030:	4b34      	ldr	r3, [pc, #208]	@ (800b104 <_strtod_l+0x58c>)
 800b032:	4659      	mov	r1, fp
 800b034:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b038:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b03c:	f7fa fb80 	bl	8005740 <__aeabi_ddiv>
 800b040:	e75d      	b.n	800aefe <_strtod_l+0x386>
 800b042:	2300      	movs	r3, #0
 800b044:	4650      	mov	r0, sl
 800b046:	4659      	mov	r1, fp
 800b048:	461e      	mov	r6, r3
 800b04a:	4f2f      	ldr	r7, [pc, #188]	@ (800b108 <_strtod_l+0x590>)
 800b04c:	1124      	asrs	r4, r4, #4
 800b04e:	2c01      	cmp	r4, #1
 800b050:	dc21      	bgt.n	800b096 <_strtod_l+0x51e>
 800b052:	b10b      	cbz	r3, 800b058 <_strtod_l+0x4e0>
 800b054:	4682      	mov	sl, r0
 800b056:	468b      	mov	fp, r1
 800b058:	492b      	ldr	r1, [pc, #172]	@ (800b108 <_strtod_l+0x590>)
 800b05a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b05e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b062:	4652      	mov	r2, sl
 800b064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b068:	465b      	mov	r3, fp
 800b06a:	f7fa fa3f 	bl	80054ec <__aeabi_dmul>
 800b06e:	4b23      	ldr	r3, [pc, #140]	@ (800b0fc <_strtod_l+0x584>)
 800b070:	460a      	mov	r2, r1
 800b072:	400b      	ands	r3, r1
 800b074:	4925      	ldr	r1, [pc, #148]	@ (800b10c <_strtod_l+0x594>)
 800b076:	4682      	mov	sl, r0
 800b078:	428b      	cmp	r3, r1
 800b07a:	d898      	bhi.n	800afae <_strtod_l+0x436>
 800b07c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b080:	428b      	cmp	r3, r1
 800b082:	bf86      	itte	hi
 800b084:	f04f 3aff 	movhi.w	sl, #4294967295
 800b088:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800b110 <_strtod_l+0x598>
 800b08c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b090:	2300      	movs	r3, #0
 800b092:	9308      	str	r3, [sp, #32]
 800b094:	e076      	b.n	800b184 <_strtod_l+0x60c>
 800b096:	07e2      	lsls	r2, r4, #31
 800b098:	d504      	bpl.n	800b0a4 <_strtod_l+0x52c>
 800b09a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b09e:	f7fa fa25 	bl	80054ec <__aeabi_dmul>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	3601      	adds	r6, #1
 800b0a6:	1064      	asrs	r4, r4, #1
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	e7d0      	b.n	800b04e <_strtod_l+0x4d6>
 800b0ac:	d0f0      	beq.n	800b090 <_strtod_l+0x518>
 800b0ae:	4264      	negs	r4, r4
 800b0b0:	f014 020f 	ands.w	r2, r4, #15
 800b0b4:	d00a      	beq.n	800b0cc <_strtod_l+0x554>
 800b0b6:	4b13      	ldr	r3, [pc, #76]	@ (800b104 <_strtod_l+0x58c>)
 800b0b8:	4650      	mov	r0, sl
 800b0ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0be:	4659      	mov	r1, fp
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	f7fa fb3c 	bl	8005740 <__aeabi_ddiv>
 800b0c8:	4682      	mov	sl, r0
 800b0ca:	468b      	mov	fp, r1
 800b0cc:	1124      	asrs	r4, r4, #4
 800b0ce:	d0df      	beq.n	800b090 <_strtod_l+0x518>
 800b0d0:	2c1f      	cmp	r4, #31
 800b0d2:	dd1f      	ble.n	800b114 <_strtod_l+0x59c>
 800b0d4:	2400      	movs	r4, #0
 800b0d6:	46a0      	mov	r8, r4
 800b0d8:	46a1      	mov	r9, r4
 800b0da:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b0dc:	2322      	movs	r3, #34	@ 0x22
 800b0de:	9a05      	ldr	r2, [sp, #20]
 800b0e0:	f04f 0a00 	mov.w	sl, #0
 800b0e4:	f04f 0b00 	mov.w	fp, #0
 800b0e8:	6013      	str	r3, [r2, #0]
 800b0ea:	e76b      	b.n	800afc4 <_strtod_l+0x44c>
 800b0ec:	0800de71 	.word	0x0800de71
 800b0f0:	0800e008 	.word	0x0800e008
 800b0f4:	0800de68 	.word	0x0800de68
 800b0f8:	0800de6b 	.word	0x0800de6b
 800b0fc:	7ff00000 	.word	0x7ff00000
 800b100:	0800dd77 	.word	0x0800dd77
 800b104:	0800e190 	.word	0x0800e190
 800b108:	0800e168 	.word	0x0800e168
 800b10c:	7ca00000 	.word	0x7ca00000
 800b110:	7fefffff 	.word	0x7fefffff
 800b114:	f014 0310 	ands.w	r3, r4, #16
 800b118:	bf18      	it	ne
 800b11a:	236a      	movne	r3, #106	@ 0x6a
 800b11c:	4650      	mov	r0, sl
 800b11e:	9308      	str	r3, [sp, #32]
 800b120:	4659      	mov	r1, fp
 800b122:	2300      	movs	r3, #0
 800b124:	4e77      	ldr	r6, [pc, #476]	@ (800b304 <_strtod_l+0x78c>)
 800b126:	07e7      	lsls	r7, r4, #31
 800b128:	d504      	bpl.n	800b134 <_strtod_l+0x5bc>
 800b12a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b12e:	f7fa f9dd 	bl	80054ec <__aeabi_dmul>
 800b132:	2301      	movs	r3, #1
 800b134:	1064      	asrs	r4, r4, #1
 800b136:	f106 0608 	add.w	r6, r6, #8
 800b13a:	d1f4      	bne.n	800b126 <_strtod_l+0x5ae>
 800b13c:	b10b      	cbz	r3, 800b142 <_strtod_l+0x5ca>
 800b13e:	4682      	mov	sl, r0
 800b140:	468b      	mov	fp, r1
 800b142:	9b08      	ldr	r3, [sp, #32]
 800b144:	b1b3      	cbz	r3, 800b174 <_strtod_l+0x5fc>
 800b146:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b14a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b14e:	2b00      	cmp	r3, #0
 800b150:	4659      	mov	r1, fp
 800b152:	dd0f      	ble.n	800b174 <_strtod_l+0x5fc>
 800b154:	2b1f      	cmp	r3, #31
 800b156:	dd58      	ble.n	800b20a <_strtod_l+0x692>
 800b158:	2b34      	cmp	r3, #52	@ 0x34
 800b15a:	bfd8      	it	le
 800b15c:	f04f 33ff 	movle.w	r3, #4294967295
 800b160:	f04f 0a00 	mov.w	sl, #0
 800b164:	bfcf      	iteee	gt
 800b166:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b16a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b16e:	4093      	lslle	r3, r2
 800b170:	ea03 0b01 	andle.w	fp, r3, r1
 800b174:	2200      	movs	r2, #0
 800b176:	2300      	movs	r3, #0
 800b178:	4650      	mov	r0, sl
 800b17a:	4659      	mov	r1, fp
 800b17c:	f7fa fc1e 	bl	80059bc <__aeabi_dcmpeq>
 800b180:	2800      	cmp	r0, #0
 800b182:	d1a7      	bne.n	800b0d4 <_strtod_l+0x55c>
 800b184:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b186:	464a      	mov	r2, r9
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b18c:	462b      	mov	r3, r5
 800b18e:	9805      	ldr	r0, [sp, #20]
 800b190:	f001 faba 	bl	800c708 <__s2b>
 800b194:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b196:	2800      	cmp	r0, #0
 800b198:	f43f af09 	beq.w	800afae <_strtod_l+0x436>
 800b19c:	2400      	movs	r4, #0
 800b19e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1a2:	2a00      	cmp	r2, #0
 800b1a4:	eba3 0308 	sub.w	r3, r3, r8
 800b1a8:	bfa8      	it	ge
 800b1aa:	2300      	movge	r3, #0
 800b1ac:	46a0      	mov	r8, r4
 800b1ae:	9312      	str	r3, [sp, #72]	@ 0x48
 800b1b0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b1b4:	9316      	str	r3, [sp, #88]	@ 0x58
 800b1b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1b8:	9805      	ldr	r0, [sp, #20]
 800b1ba:	6859      	ldr	r1, [r3, #4]
 800b1bc:	f001 f9fc 	bl	800c5b8 <_Balloc>
 800b1c0:	4681      	mov	r9, r0
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	f43f aef7 	beq.w	800afb6 <_strtod_l+0x43e>
 800b1c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1ca:	300c      	adds	r0, #12
 800b1cc:	691a      	ldr	r2, [r3, #16]
 800b1ce:	f103 010c 	add.w	r1, r3, #12
 800b1d2:	3202      	adds	r2, #2
 800b1d4:	0092      	lsls	r2, r2, #2
 800b1d6:	f000 fd94 	bl	800bd02 <memcpy>
 800b1da:	ab1c      	add	r3, sp, #112	@ 0x70
 800b1dc:	9301      	str	r3, [sp, #4]
 800b1de:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	4652      	mov	r2, sl
 800b1e4:	465b      	mov	r3, fp
 800b1e6:	9805      	ldr	r0, [sp, #20]
 800b1e8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b1ec:	f001 fdb8 	bl	800cd60 <__d2b>
 800b1f0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	f43f aedf 	beq.w	800afb6 <_strtod_l+0x43e>
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	9805      	ldr	r0, [sp, #20]
 800b1fc:	f001 fb1a 	bl	800c834 <__i2b>
 800b200:	4680      	mov	r8, r0
 800b202:	b948      	cbnz	r0, 800b218 <_strtod_l+0x6a0>
 800b204:	f04f 0800 	mov.w	r8, #0
 800b208:	e6d5      	b.n	800afb6 <_strtod_l+0x43e>
 800b20a:	f04f 32ff 	mov.w	r2, #4294967295
 800b20e:	fa02 f303 	lsl.w	r3, r2, r3
 800b212:	ea03 0a0a 	and.w	sl, r3, sl
 800b216:	e7ad      	b.n	800b174 <_strtod_l+0x5fc>
 800b218:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b21a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b21c:	2d00      	cmp	r5, #0
 800b21e:	bfab      	itete	ge
 800b220:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b222:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b224:	18ef      	addge	r7, r5, r3
 800b226:	1b5e      	sublt	r6, r3, r5
 800b228:	9b08      	ldr	r3, [sp, #32]
 800b22a:	bfa8      	it	ge
 800b22c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b22e:	eba5 0503 	sub.w	r5, r5, r3
 800b232:	4415      	add	r5, r2
 800b234:	4b34      	ldr	r3, [pc, #208]	@ (800b308 <_strtod_l+0x790>)
 800b236:	f105 35ff 	add.w	r5, r5, #4294967295
 800b23a:	bfb8      	it	lt
 800b23c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b23e:	429d      	cmp	r5, r3
 800b240:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b244:	da50      	bge.n	800b2e8 <_strtod_l+0x770>
 800b246:	1b5b      	subs	r3, r3, r5
 800b248:	2b1f      	cmp	r3, #31
 800b24a:	f04f 0101 	mov.w	r1, #1
 800b24e:	eba2 0203 	sub.w	r2, r2, r3
 800b252:	dc3d      	bgt.n	800b2d0 <_strtod_l+0x758>
 800b254:	fa01 f303 	lsl.w	r3, r1, r3
 800b258:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b25a:	2300      	movs	r3, #0
 800b25c:	9310      	str	r3, [sp, #64]	@ 0x40
 800b25e:	18bd      	adds	r5, r7, r2
 800b260:	9b08      	ldr	r3, [sp, #32]
 800b262:	42af      	cmp	r7, r5
 800b264:	4416      	add	r6, r2
 800b266:	441e      	add	r6, r3
 800b268:	463b      	mov	r3, r7
 800b26a:	bfa8      	it	ge
 800b26c:	462b      	movge	r3, r5
 800b26e:	42b3      	cmp	r3, r6
 800b270:	bfa8      	it	ge
 800b272:	4633      	movge	r3, r6
 800b274:	2b00      	cmp	r3, #0
 800b276:	bfc2      	ittt	gt
 800b278:	1aed      	subgt	r5, r5, r3
 800b27a:	1af6      	subgt	r6, r6, r3
 800b27c:	1aff      	subgt	r7, r7, r3
 800b27e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b280:	2b00      	cmp	r3, #0
 800b282:	dd16      	ble.n	800b2b2 <_strtod_l+0x73a>
 800b284:	4641      	mov	r1, r8
 800b286:	461a      	mov	r2, r3
 800b288:	9805      	ldr	r0, [sp, #20]
 800b28a:	f001 fb8b 	bl	800c9a4 <__pow5mult>
 800b28e:	4680      	mov	r8, r0
 800b290:	2800      	cmp	r0, #0
 800b292:	d0b7      	beq.n	800b204 <_strtod_l+0x68c>
 800b294:	4601      	mov	r1, r0
 800b296:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b298:	9805      	ldr	r0, [sp, #20]
 800b29a:	f001 fae1 	bl	800c860 <__multiply>
 800b29e:	900a      	str	r0, [sp, #40]	@ 0x28
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	f43f ae88 	beq.w	800afb6 <_strtod_l+0x43e>
 800b2a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2a8:	9805      	ldr	r0, [sp, #20]
 800b2aa:	f001 f9c5 	bl	800c638 <_Bfree>
 800b2ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2b2:	2d00      	cmp	r5, #0
 800b2b4:	dc1d      	bgt.n	800b2f2 <_strtod_l+0x77a>
 800b2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	dd27      	ble.n	800b30c <_strtod_l+0x794>
 800b2bc:	4649      	mov	r1, r9
 800b2be:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b2c0:	9805      	ldr	r0, [sp, #20]
 800b2c2:	f001 fb6f 	bl	800c9a4 <__pow5mult>
 800b2c6:	4681      	mov	r9, r0
 800b2c8:	bb00      	cbnz	r0, 800b30c <_strtod_l+0x794>
 800b2ca:	f04f 0900 	mov.w	r9, #0
 800b2ce:	e672      	b.n	800afb6 <_strtod_l+0x43e>
 800b2d0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b2d4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b2d8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b2dc:	35e2      	adds	r5, #226	@ 0xe2
 800b2de:	fa01 f305 	lsl.w	r3, r1, r5
 800b2e2:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2e4:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b2e6:	e7ba      	b.n	800b25e <_strtod_l+0x6e6>
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2f0:	e7b5      	b.n	800b25e <_strtod_l+0x6e6>
 800b2f2:	462a      	mov	r2, r5
 800b2f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2f6:	9805      	ldr	r0, [sp, #20]
 800b2f8:	f001 fbae 	bl	800ca58 <__lshift>
 800b2fc:	901a      	str	r0, [sp, #104]	@ 0x68
 800b2fe:	2800      	cmp	r0, #0
 800b300:	d1d9      	bne.n	800b2b6 <_strtod_l+0x73e>
 800b302:	e658      	b.n	800afb6 <_strtod_l+0x43e>
 800b304:	0800e030 	.word	0x0800e030
 800b308:	fffffc02 	.word	0xfffffc02
 800b30c:	2e00      	cmp	r6, #0
 800b30e:	dd07      	ble.n	800b320 <_strtod_l+0x7a8>
 800b310:	4649      	mov	r1, r9
 800b312:	4632      	mov	r2, r6
 800b314:	9805      	ldr	r0, [sp, #20]
 800b316:	f001 fb9f 	bl	800ca58 <__lshift>
 800b31a:	4681      	mov	r9, r0
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d0d4      	beq.n	800b2ca <_strtod_l+0x752>
 800b320:	2f00      	cmp	r7, #0
 800b322:	dd08      	ble.n	800b336 <_strtod_l+0x7be>
 800b324:	4641      	mov	r1, r8
 800b326:	463a      	mov	r2, r7
 800b328:	9805      	ldr	r0, [sp, #20]
 800b32a:	f001 fb95 	bl	800ca58 <__lshift>
 800b32e:	4680      	mov	r8, r0
 800b330:	2800      	cmp	r0, #0
 800b332:	f43f ae40 	beq.w	800afb6 <_strtod_l+0x43e>
 800b336:	464a      	mov	r2, r9
 800b338:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b33a:	9805      	ldr	r0, [sp, #20]
 800b33c:	f001 fc14 	bl	800cb68 <__mdiff>
 800b340:	4604      	mov	r4, r0
 800b342:	2800      	cmp	r0, #0
 800b344:	f43f ae37 	beq.w	800afb6 <_strtod_l+0x43e>
 800b348:	68c3      	ldr	r3, [r0, #12]
 800b34a:	4641      	mov	r1, r8
 800b34c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b34e:	2300      	movs	r3, #0
 800b350:	60c3      	str	r3, [r0, #12]
 800b352:	f001 fbed 	bl	800cb30 <__mcmp>
 800b356:	2800      	cmp	r0, #0
 800b358:	da3d      	bge.n	800b3d6 <_strtod_l+0x85e>
 800b35a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b35c:	ea53 030a 	orrs.w	r3, r3, sl
 800b360:	d163      	bne.n	800b42a <_strtod_l+0x8b2>
 800b362:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b366:	2b00      	cmp	r3, #0
 800b368:	d15f      	bne.n	800b42a <_strtod_l+0x8b2>
 800b36a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b36e:	0d1b      	lsrs	r3, r3, #20
 800b370:	051b      	lsls	r3, r3, #20
 800b372:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b376:	d958      	bls.n	800b42a <_strtod_l+0x8b2>
 800b378:	6963      	ldr	r3, [r4, #20]
 800b37a:	b913      	cbnz	r3, 800b382 <_strtod_l+0x80a>
 800b37c:	6923      	ldr	r3, [r4, #16]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	dd53      	ble.n	800b42a <_strtod_l+0x8b2>
 800b382:	4621      	mov	r1, r4
 800b384:	2201      	movs	r2, #1
 800b386:	9805      	ldr	r0, [sp, #20]
 800b388:	f001 fb66 	bl	800ca58 <__lshift>
 800b38c:	4641      	mov	r1, r8
 800b38e:	4604      	mov	r4, r0
 800b390:	f001 fbce 	bl	800cb30 <__mcmp>
 800b394:	2800      	cmp	r0, #0
 800b396:	dd48      	ble.n	800b42a <_strtod_l+0x8b2>
 800b398:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b39c:	9a08      	ldr	r2, [sp, #32]
 800b39e:	0d1b      	lsrs	r3, r3, #20
 800b3a0:	051b      	lsls	r3, r3, #20
 800b3a2:	2a00      	cmp	r2, #0
 800b3a4:	d062      	beq.n	800b46c <_strtod_l+0x8f4>
 800b3a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b3aa:	d85f      	bhi.n	800b46c <_strtod_l+0x8f4>
 800b3ac:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b3b0:	f67f ae94 	bls.w	800b0dc <_strtod_l+0x564>
 800b3b4:	4650      	mov	r0, sl
 800b3b6:	4659      	mov	r1, fp
 800b3b8:	4ba3      	ldr	r3, [pc, #652]	@ (800b648 <_strtod_l+0xad0>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f7fa f896 	bl	80054ec <__aeabi_dmul>
 800b3c0:	4ba2      	ldr	r3, [pc, #648]	@ (800b64c <_strtod_l+0xad4>)
 800b3c2:	4682      	mov	sl, r0
 800b3c4:	400b      	ands	r3, r1
 800b3c6:	468b      	mov	fp, r1
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f47f adff 	bne.w	800afcc <_strtod_l+0x454>
 800b3ce:	2322      	movs	r3, #34	@ 0x22
 800b3d0:	9a05      	ldr	r2, [sp, #20]
 800b3d2:	6013      	str	r3, [r2, #0]
 800b3d4:	e5fa      	b.n	800afcc <_strtod_l+0x454>
 800b3d6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b3da:	d165      	bne.n	800b4a8 <_strtod_l+0x930>
 800b3dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b3de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3e2:	b35a      	cbz	r2, 800b43c <_strtod_l+0x8c4>
 800b3e4:	4a9a      	ldr	r2, [pc, #616]	@ (800b650 <_strtod_l+0xad8>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d12b      	bne.n	800b442 <_strtod_l+0x8ca>
 800b3ea:	9b08      	ldr	r3, [sp, #32]
 800b3ec:	4651      	mov	r1, sl
 800b3ee:	b303      	cbz	r3, 800b432 <_strtod_l+0x8ba>
 800b3f0:	465a      	mov	r2, fp
 800b3f2:	4b96      	ldr	r3, [pc, #600]	@ (800b64c <_strtod_l+0xad4>)
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fe:	d81b      	bhi.n	800b438 <_strtod_l+0x8c0>
 800b400:	0d1b      	lsrs	r3, r3, #20
 800b402:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b406:	fa02 f303 	lsl.w	r3, r2, r3
 800b40a:	4299      	cmp	r1, r3
 800b40c:	d119      	bne.n	800b442 <_strtod_l+0x8ca>
 800b40e:	4b91      	ldr	r3, [pc, #580]	@ (800b654 <_strtod_l+0xadc>)
 800b410:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b412:	429a      	cmp	r2, r3
 800b414:	d102      	bne.n	800b41c <_strtod_l+0x8a4>
 800b416:	3101      	adds	r1, #1
 800b418:	f43f adcd 	beq.w	800afb6 <_strtod_l+0x43e>
 800b41c:	f04f 0a00 	mov.w	sl, #0
 800b420:	4b8a      	ldr	r3, [pc, #552]	@ (800b64c <_strtod_l+0xad4>)
 800b422:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b424:	401a      	ands	r2, r3
 800b426:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b42a:	9b08      	ldr	r3, [sp, #32]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d1c1      	bne.n	800b3b4 <_strtod_l+0x83c>
 800b430:	e5cc      	b.n	800afcc <_strtod_l+0x454>
 800b432:	f04f 33ff 	mov.w	r3, #4294967295
 800b436:	e7e8      	b.n	800b40a <_strtod_l+0x892>
 800b438:	4613      	mov	r3, r2
 800b43a:	e7e6      	b.n	800b40a <_strtod_l+0x892>
 800b43c:	ea53 030a 	orrs.w	r3, r3, sl
 800b440:	d0aa      	beq.n	800b398 <_strtod_l+0x820>
 800b442:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b444:	b1db      	cbz	r3, 800b47e <_strtod_l+0x906>
 800b446:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b448:	4213      	tst	r3, r2
 800b44a:	d0ee      	beq.n	800b42a <_strtod_l+0x8b2>
 800b44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b44e:	4650      	mov	r0, sl
 800b450:	4659      	mov	r1, fp
 800b452:	9a08      	ldr	r2, [sp, #32]
 800b454:	b1bb      	cbz	r3, 800b486 <_strtod_l+0x90e>
 800b456:	f7ff fb6e 	bl	800ab36 <sulp>
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b462:	f7f9 fe8d 	bl	8005180 <__adddf3>
 800b466:	4682      	mov	sl, r0
 800b468:	468b      	mov	fp, r1
 800b46a:	e7de      	b.n	800b42a <_strtod_l+0x8b2>
 800b46c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b470:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b474:	f04f 3aff 	mov.w	sl, #4294967295
 800b478:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b47c:	e7d5      	b.n	800b42a <_strtod_l+0x8b2>
 800b47e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b480:	ea13 0f0a 	tst.w	r3, sl
 800b484:	e7e1      	b.n	800b44a <_strtod_l+0x8d2>
 800b486:	f7ff fb56 	bl	800ab36 <sulp>
 800b48a:	4602      	mov	r2, r0
 800b48c:	460b      	mov	r3, r1
 800b48e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b492:	f7f9 fe73 	bl	800517c <__aeabi_dsub>
 800b496:	2200      	movs	r2, #0
 800b498:	2300      	movs	r3, #0
 800b49a:	4682      	mov	sl, r0
 800b49c:	468b      	mov	fp, r1
 800b49e:	f7fa fa8d 	bl	80059bc <__aeabi_dcmpeq>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d0c1      	beq.n	800b42a <_strtod_l+0x8b2>
 800b4a6:	e619      	b.n	800b0dc <_strtod_l+0x564>
 800b4a8:	4641      	mov	r1, r8
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f001 fcb0 	bl	800ce10 <__ratio>
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4b6:	4606      	mov	r6, r0
 800b4b8:	460f      	mov	r7, r1
 800b4ba:	f7fa fa93 	bl	80059e4 <__aeabi_dcmple>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d06d      	beq.n	800b59e <_strtod_l+0xa26>
 800b4c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d178      	bne.n	800b5ba <_strtod_l+0xa42>
 800b4c8:	f1ba 0f00 	cmp.w	sl, #0
 800b4cc:	d156      	bne.n	800b57c <_strtod_l+0xa04>
 800b4ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d158      	bne.n	800b58a <_strtod_l+0xa12>
 800b4d8:	2200      	movs	r2, #0
 800b4da:	4630      	mov	r0, r6
 800b4dc:	4639      	mov	r1, r7
 800b4de:	4b5e      	ldr	r3, [pc, #376]	@ (800b658 <_strtod_l+0xae0>)
 800b4e0:	f7fa fa76 	bl	80059d0 <__aeabi_dcmplt>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d157      	bne.n	800b598 <_strtod_l+0xa20>
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	4639      	mov	r1, r7
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	4b5b      	ldr	r3, [pc, #364]	@ (800b65c <_strtod_l+0xae4>)
 800b4f0:	f7f9 fffc 	bl	80054ec <__aeabi_dmul>
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	460f      	mov	r7, r1
 800b4f8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b4fc:	9606      	str	r6, [sp, #24]
 800b4fe:	9307      	str	r3, [sp, #28]
 800b500:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b504:	4d51      	ldr	r5, [pc, #324]	@ (800b64c <_strtod_l+0xad4>)
 800b506:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b50a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b50c:	401d      	ands	r5, r3
 800b50e:	4b54      	ldr	r3, [pc, #336]	@ (800b660 <_strtod_l+0xae8>)
 800b510:	429d      	cmp	r5, r3
 800b512:	f040 80ab 	bne.w	800b66c <_strtod_l+0xaf4>
 800b516:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b518:	4650      	mov	r0, sl
 800b51a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b51e:	4659      	mov	r1, fp
 800b520:	f001 fbb6 	bl	800cc90 <__ulp>
 800b524:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b528:	f7f9 ffe0 	bl	80054ec <__aeabi_dmul>
 800b52c:	4652      	mov	r2, sl
 800b52e:	465b      	mov	r3, fp
 800b530:	f7f9 fe26 	bl	8005180 <__adddf3>
 800b534:	460b      	mov	r3, r1
 800b536:	4945      	ldr	r1, [pc, #276]	@ (800b64c <_strtod_l+0xad4>)
 800b538:	4a4a      	ldr	r2, [pc, #296]	@ (800b664 <_strtod_l+0xaec>)
 800b53a:	4019      	ands	r1, r3
 800b53c:	4291      	cmp	r1, r2
 800b53e:	4682      	mov	sl, r0
 800b540:	d942      	bls.n	800b5c8 <_strtod_l+0xa50>
 800b542:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b544:	4b43      	ldr	r3, [pc, #268]	@ (800b654 <_strtod_l+0xadc>)
 800b546:	429a      	cmp	r2, r3
 800b548:	d103      	bne.n	800b552 <_strtod_l+0x9da>
 800b54a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b54c:	3301      	adds	r3, #1
 800b54e:	f43f ad32 	beq.w	800afb6 <_strtod_l+0x43e>
 800b552:	f04f 3aff 	mov.w	sl, #4294967295
 800b556:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800b654 <_strtod_l+0xadc>
 800b55a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b55c:	9805      	ldr	r0, [sp, #20]
 800b55e:	f001 f86b 	bl	800c638 <_Bfree>
 800b562:	4649      	mov	r1, r9
 800b564:	9805      	ldr	r0, [sp, #20]
 800b566:	f001 f867 	bl	800c638 <_Bfree>
 800b56a:	4641      	mov	r1, r8
 800b56c:	9805      	ldr	r0, [sp, #20]
 800b56e:	f001 f863 	bl	800c638 <_Bfree>
 800b572:	4621      	mov	r1, r4
 800b574:	9805      	ldr	r0, [sp, #20]
 800b576:	f001 f85f 	bl	800c638 <_Bfree>
 800b57a:	e61c      	b.n	800b1b6 <_strtod_l+0x63e>
 800b57c:	f1ba 0f01 	cmp.w	sl, #1
 800b580:	d103      	bne.n	800b58a <_strtod_l+0xa12>
 800b582:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b584:	2b00      	cmp	r3, #0
 800b586:	f43f ada9 	beq.w	800b0dc <_strtod_l+0x564>
 800b58a:	2200      	movs	r2, #0
 800b58c:	4b36      	ldr	r3, [pc, #216]	@ (800b668 <_strtod_l+0xaf0>)
 800b58e:	2600      	movs	r6, #0
 800b590:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b594:	4f30      	ldr	r7, [pc, #192]	@ (800b658 <_strtod_l+0xae0>)
 800b596:	e7b3      	b.n	800b500 <_strtod_l+0x988>
 800b598:	2600      	movs	r6, #0
 800b59a:	4f30      	ldr	r7, [pc, #192]	@ (800b65c <_strtod_l+0xae4>)
 800b59c:	e7ac      	b.n	800b4f8 <_strtod_l+0x980>
 800b59e:	4630      	mov	r0, r6
 800b5a0:	4639      	mov	r1, r7
 800b5a2:	4b2e      	ldr	r3, [pc, #184]	@ (800b65c <_strtod_l+0xae4>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f7f9 ffa1 	bl	80054ec <__aeabi_dmul>
 800b5aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ac:	4606      	mov	r6, r0
 800b5ae:	460f      	mov	r7, r1
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d0a1      	beq.n	800b4f8 <_strtod_l+0x980>
 800b5b4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b5b8:	e7a2      	b.n	800b500 <_strtod_l+0x988>
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	4b26      	ldr	r3, [pc, #152]	@ (800b658 <_strtod_l+0xae0>)
 800b5be:	4616      	mov	r6, r2
 800b5c0:	461f      	mov	r7, r3
 800b5c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5c6:	e79b      	b.n	800b500 <_strtod_l+0x988>
 800b5c8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b5cc:	9b08      	ldr	r3, [sp, #32]
 800b5ce:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1c1      	bne.n	800b55a <_strtod_l+0x9e2>
 800b5d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b5da:	0d1b      	lsrs	r3, r3, #20
 800b5dc:	051b      	lsls	r3, r3, #20
 800b5de:	429d      	cmp	r5, r3
 800b5e0:	d1bb      	bne.n	800b55a <_strtod_l+0x9e2>
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	4639      	mov	r1, r7
 800b5e6:	f7fa fb2d 	bl	8005c44 <__aeabi_d2lz>
 800b5ea:	f7f9 ff51 	bl	8005490 <__aeabi_l2d>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	f7f9 fdc1 	bl	800517c <__aeabi_dsub>
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b602:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b606:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b608:	ea46 060a 	orr.w	r6, r6, sl
 800b60c:	431e      	orrs	r6, r3
 800b60e:	d06a      	beq.n	800b6e6 <_strtod_l+0xb6e>
 800b610:	a309      	add	r3, pc, #36	@ (adr r3, 800b638 <_strtod_l+0xac0>)
 800b612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b616:	f7fa f9db 	bl	80059d0 <__aeabi_dcmplt>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	f47f acd6 	bne.w	800afcc <_strtod_l+0x454>
 800b620:	a307      	add	r3, pc, #28	@ (adr r3, 800b640 <_strtod_l+0xac8>)
 800b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b62a:	f7fa f9ef 	bl	8005a0c <__aeabi_dcmpgt>
 800b62e:	2800      	cmp	r0, #0
 800b630:	d093      	beq.n	800b55a <_strtod_l+0x9e2>
 800b632:	e4cb      	b.n	800afcc <_strtod_l+0x454>
 800b634:	f3af 8000 	nop.w
 800b638:	94a03595 	.word	0x94a03595
 800b63c:	3fdfffff 	.word	0x3fdfffff
 800b640:	35afe535 	.word	0x35afe535
 800b644:	3fe00000 	.word	0x3fe00000
 800b648:	39500000 	.word	0x39500000
 800b64c:	7ff00000 	.word	0x7ff00000
 800b650:	000fffff 	.word	0x000fffff
 800b654:	7fefffff 	.word	0x7fefffff
 800b658:	3ff00000 	.word	0x3ff00000
 800b65c:	3fe00000 	.word	0x3fe00000
 800b660:	7fe00000 	.word	0x7fe00000
 800b664:	7c9fffff 	.word	0x7c9fffff
 800b668:	bff00000 	.word	0xbff00000
 800b66c:	9b08      	ldr	r3, [sp, #32]
 800b66e:	b323      	cbz	r3, 800b6ba <_strtod_l+0xb42>
 800b670:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b674:	d821      	bhi.n	800b6ba <_strtod_l+0xb42>
 800b676:	a328      	add	r3, pc, #160	@ (adr r3, 800b718 <_strtod_l+0xba0>)
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	4630      	mov	r0, r6
 800b67e:	4639      	mov	r1, r7
 800b680:	f7fa f9b0 	bl	80059e4 <__aeabi_dcmple>
 800b684:	b1a0      	cbz	r0, 800b6b0 <_strtod_l+0xb38>
 800b686:	4639      	mov	r1, r7
 800b688:	4630      	mov	r0, r6
 800b68a:	f7fa f9df 	bl	8005a4c <__aeabi_d2uiz>
 800b68e:	2801      	cmp	r0, #1
 800b690:	bf38      	it	cc
 800b692:	2001      	movcc	r0, #1
 800b694:	f7f9 feb0 	bl	80053f8 <__aeabi_ui2d>
 800b698:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b69a:	4606      	mov	r6, r0
 800b69c:	460f      	mov	r7, r1
 800b69e:	b9fb      	cbnz	r3, 800b6e0 <_strtod_l+0xb68>
 800b6a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6a4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b6a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b6a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b6ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b6b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b6b6:	1b5b      	subs	r3, r3, r5
 800b6b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b6ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b6c2:	f001 fae5 	bl	800cc90 <__ulp>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	4650      	mov	r0, sl
 800b6cc:	4659      	mov	r1, fp
 800b6ce:	f7f9 ff0d 	bl	80054ec <__aeabi_dmul>
 800b6d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b6d6:	f7f9 fd53 	bl	8005180 <__adddf3>
 800b6da:	4682      	mov	sl, r0
 800b6dc:	468b      	mov	fp, r1
 800b6de:	e775      	b.n	800b5cc <_strtod_l+0xa54>
 800b6e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b6e4:	e7e0      	b.n	800b6a8 <_strtod_l+0xb30>
 800b6e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b720 <_strtod_l+0xba8>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	f7fa f970 	bl	80059d0 <__aeabi_dcmplt>
 800b6f0:	e79d      	b.n	800b62e <_strtod_l+0xab6>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b6f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6f8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b6fa:	6013      	str	r3, [r2, #0]
 800b6fc:	f7ff ba79 	b.w	800abf2 <_strtod_l+0x7a>
 800b700:	2a65      	cmp	r2, #101	@ 0x65
 800b702:	f43f ab72 	beq.w	800adea <_strtod_l+0x272>
 800b706:	2a45      	cmp	r2, #69	@ 0x45
 800b708:	f43f ab6f 	beq.w	800adea <_strtod_l+0x272>
 800b70c:	2301      	movs	r3, #1
 800b70e:	f7ff bbaa 	b.w	800ae66 <_strtod_l+0x2ee>
 800b712:	bf00      	nop
 800b714:	f3af 8000 	nop.w
 800b718:	ffc00000 	.word	0xffc00000
 800b71c:	41dfffff 	.word	0x41dfffff
 800b720:	94a03595 	.word	0x94a03595
 800b724:	3fcfffff 	.word	0x3fcfffff

0800b728 <strtof>:
 800b728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b72c:	4d24      	ldr	r5, [pc, #144]	@ (800b7c0 <strtof+0x98>)
 800b72e:	460a      	mov	r2, r1
 800b730:	4b24      	ldr	r3, [pc, #144]	@ (800b7c4 <strtof+0x9c>)
 800b732:	4601      	mov	r1, r0
 800b734:	6828      	ldr	r0, [r5, #0]
 800b736:	f7ff fa1f 	bl	800ab78 <_strtod_l>
 800b73a:	4602      	mov	r2, r0
 800b73c:	460b      	mov	r3, r1
 800b73e:	4606      	mov	r6, r0
 800b740:	460f      	mov	r7, r1
 800b742:	f7fa f96d 	bl	8005a20 <__aeabi_dcmpun>
 800b746:	b168      	cbz	r0, 800b764 <strtof+0x3c>
 800b748:	2f00      	cmp	r7, #0
 800b74a:	481f      	ldr	r0, [pc, #124]	@ (800b7c8 <strtof+0xa0>)
 800b74c:	da06      	bge.n	800b75c <strtof+0x34>
 800b74e:	f000 faed 	bl	800bd2c <nanf>
 800b752:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800b756:	4620      	mov	r0, r4
 800b758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b75c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b760:	f000 bae4 	b.w	800bd2c <nanf>
 800b764:	4639      	mov	r1, r7
 800b766:	4630      	mov	r0, r6
 800b768:	f7fa f990 	bl	8005a8c <__aeabi_d2f>
 800b76c:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800b770:	4604      	mov	r4, r0
 800b772:	4916      	ldr	r1, [pc, #88]	@ (800b7cc <strtof+0xa4>)
 800b774:	4640      	mov	r0, r8
 800b776:	f7fa fa4f 	bl	8005c18 <__aeabi_fcmpun>
 800b77a:	b9b0      	cbnz	r0, 800b7aa <strtof+0x82>
 800b77c:	4640      	mov	r0, r8
 800b77e:	4913      	ldr	r1, [pc, #76]	@ (800b7cc <strtof+0xa4>)
 800b780:	f7fa fa2c 	bl	8005bdc <__aeabi_fcmple>
 800b784:	b988      	cbnz	r0, 800b7aa <strtof+0x82>
 800b786:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 800b78a:	f04f 32ff 	mov.w	r2, #4294967295
 800b78e:	4630      	mov	r0, r6
 800b790:	4649      	mov	r1, r9
 800b792:	4b0f      	ldr	r3, [pc, #60]	@ (800b7d0 <strtof+0xa8>)
 800b794:	f7fa f944 	bl	8005a20 <__aeabi_dcmpun>
 800b798:	b970      	cbnz	r0, 800b7b8 <strtof+0x90>
 800b79a:	f04f 32ff 	mov.w	r2, #4294967295
 800b79e:	4630      	mov	r0, r6
 800b7a0:	4649      	mov	r1, r9
 800b7a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b7d0 <strtof+0xa8>)
 800b7a4:	f7fa f91e 	bl	80059e4 <__aeabi_dcmple>
 800b7a8:	b930      	cbnz	r0, 800b7b8 <strtof+0x90>
 800b7aa:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800b7ae:	d1d2      	bne.n	800b756 <strtof+0x2e>
 800b7b0:	4b08      	ldr	r3, [pc, #32]	@ (800b7d4 <strtof+0xac>)
 800b7b2:	403b      	ands	r3, r7
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d0ce      	beq.n	800b756 <strtof+0x2e>
 800b7b8:	2222      	movs	r2, #34	@ 0x22
 800b7ba:	682b      	ldr	r3, [r5, #0]
 800b7bc:	601a      	str	r2, [r3, #0]
 800b7be:	e7ca      	b.n	800b756 <strtof+0x2e>
 800b7c0:	20000308 	.word	0x20000308
 800b7c4:	2000019c 	.word	0x2000019c
 800b7c8:	0800dd77 	.word	0x0800dd77
 800b7cc:	7f7fffff 	.word	0x7f7fffff
 800b7d0:	7fefffff 	.word	0x7fefffff
 800b7d4:	7ff00000 	.word	0x7ff00000

0800b7d8 <_strtoul_l.isra.0>:
 800b7d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7dc:	4686      	mov	lr, r0
 800b7de:	460d      	mov	r5, r1
 800b7e0:	4e33      	ldr	r6, [pc, #204]	@ (800b8b0 <_strtoul_l.isra.0+0xd8>)
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7e8:	5d37      	ldrb	r7, [r6, r4]
 800b7ea:	f017 0708 	ands.w	r7, r7, #8
 800b7ee:	d1f8      	bne.n	800b7e2 <_strtoul_l.isra.0+0xa>
 800b7f0:	2c2d      	cmp	r4, #45	@ 0x2d
 800b7f2:	d110      	bne.n	800b816 <_strtoul_l.isra.0+0x3e>
 800b7f4:	2701      	movs	r7, #1
 800b7f6:	782c      	ldrb	r4, [r5, #0]
 800b7f8:	1c85      	adds	r5, r0, #2
 800b7fa:	f033 0010 	bics.w	r0, r3, #16
 800b7fe:	d115      	bne.n	800b82c <_strtoul_l.isra.0+0x54>
 800b800:	2c30      	cmp	r4, #48	@ 0x30
 800b802:	d10d      	bne.n	800b820 <_strtoul_l.isra.0+0x48>
 800b804:	7828      	ldrb	r0, [r5, #0]
 800b806:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b80a:	2858      	cmp	r0, #88	@ 0x58
 800b80c:	d108      	bne.n	800b820 <_strtoul_l.isra.0+0x48>
 800b80e:	786c      	ldrb	r4, [r5, #1]
 800b810:	3502      	adds	r5, #2
 800b812:	2310      	movs	r3, #16
 800b814:	e00a      	b.n	800b82c <_strtoul_l.isra.0+0x54>
 800b816:	2c2b      	cmp	r4, #43	@ 0x2b
 800b818:	bf04      	itt	eq
 800b81a:	782c      	ldrbeq	r4, [r5, #0]
 800b81c:	1c85      	addeq	r5, r0, #2
 800b81e:	e7ec      	b.n	800b7fa <_strtoul_l.isra.0+0x22>
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1f6      	bne.n	800b812 <_strtoul_l.isra.0+0x3a>
 800b824:	2c30      	cmp	r4, #48	@ 0x30
 800b826:	bf14      	ite	ne
 800b828:	230a      	movne	r3, #10
 800b82a:	2308      	moveq	r3, #8
 800b82c:	f04f 38ff 	mov.w	r8, #4294967295
 800b830:	fbb8 f8f3 	udiv	r8, r8, r3
 800b834:	2600      	movs	r6, #0
 800b836:	fb03 f908 	mul.w	r9, r3, r8
 800b83a:	4630      	mov	r0, r6
 800b83c:	ea6f 0909 	mvn.w	r9, r9
 800b840:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b844:	f1bc 0f09 	cmp.w	ip, #9
 800b848:	d810      	bhi.n	800b86c <_strtoul_l.isra.0+0x94>
 800b84a:	4664      	mov	r4, ip
 800b84c:	42a3      	cmp	r3, r4
 800b84e:	dd1e      	ble.n	800b88e <_strtoul_l.isra.0+0xb6>
 800b850:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b854:	d007      	beq.n	800b866 <_strtoul_l.isra.0+0x8e>
 800b856:	4580      	cmp	r8, r0
 800b858:	d316      	bcc.n	800b888 <_strtoul_l.isra.0+0xb0>
 800b85a:	d101      	bne.n	800b860 <_strtoul_l.isra.0+0x88>
 800b85c:	45a1      	cmp	r9, r4
 800b85e:	db13      	blt.n	800b888 <_strtoul_l.isra.0+0xb0>
 800b860:	2601      	movs	r6, #1
 800b862:	fb00 4003 	mla	r0, r0, r3, r4
 800b866:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b86a:	e7e9      	b.n	800b840 <_strtoul_l.isra.0+0x68>
 800b86c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b870:	f1bc 0f19 	cmp.w	ip, #25
 800b874:	d801      	bhi.n	800b87a <_strtoul_l.isra.0+0xa2>
 800b876:	3c37      	subs	r4, #55	@ 0x37
 800b878:	e7e8      	b.n	800b84c <_strtoul_l.isra.0+0x74>
 800b87a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b87e:	f1bc 0f19 	cmp.w	ip, #25
 800b882:	d804      	bhi.n	800b88e <_strtoul_l.isra.0+0xb6>
 800b884:	3c57      	subs	r4, #87	@ 0x57
 800b886:	e7e1      	b.n	800b84c <_strtoul_l.isra.0+0x74>
 800b888:	f04f 36ff 	mov.w	r6, #4294967295
 800b88c:	e7eb      	b.n	800b866 <_strtoul_l.isra.0+0x8e>
 800b88e:	1c73      	adds	r3, r6, #1
 800b890:	d106      	bne.n	800b8a0 <_strtoul_l.isra.0+0xc8>
 800b892:	2322      	movs	r3, #34	@ 0x22
 800b894:	4630      	mov	r0, r6
 800b896:	f8ce 3000 	str.w	r3, [lr]
 800b89a:	b932      	cbnz	r2, 800b8aa <_strtoul_l.isra.0+0xd2>
 800b89c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8a0:	b107      	cbz	r7, 800b8a4 <_strtoul_l.isra.0+0xcc>
 800b8a2:	4240      	negs	r0, r0
 800b8a4:	2a00      	cmp	r2, #0
 800b8a6:	d0f9      	beq.n	800b89c <_strtoul_l.isra.0+0xc4>
 800b8a8:	b106      	cbz	r6, 800b8ac <_strtoul_l.isra.0+0xd4>
 800b8aa:	1e69      	subs	r1, r5, #1
 800b8ac:	6011      	str	r1, [r2, #0]
 800b8ae:	e7f5      	b.n	800b89c <_strtoul_l.isra.0+0xc4>
 800b8b0:	0800e059 	.word	0x0800e059

0800b8b4 <strtoul>:
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	460a      	mov	r2, r1
 800b8b8:	4601      	mov	r1, r0
 800b8ba:	4802      	ldr	r0, [pc, #8]	@ (800b8c4 <strtoul+0x10>)
 800b8bc:	6800      	ldr	r0, [r0, #0]
 800b8be:	f7ff bf8b 	b.w	800b7d8 <_strtoul_l.isra.0>
 800b8c2:	bf00      	nop
 800b8c4:	20000308 	.word	0x20000308

0800b8c8 <std>:
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	b510      	push	{r4, lr}
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	e9c0 3300 	strd	r3, r3, [r0]
 800b8d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8d6:	6083      	str	r3, [r0, #8]
 800b8d8:	8181      	strh	r1, [r0, #12]
 800b8da:	6643      	str	r3, [r0, #100]	@ 0x64
 800b8dc:	81c2      	strh	r2, [r0, #14]
 800b8de:	6183      	str	r3, [r0, #24]
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	2208      	movs	r2, #8
 800b8e4:	305c      	adds	r0, #92	@ 0x5c
 800b8e6:	f000 f94b 	bl	800bb80 <memset>
 800b8ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b920 <std+0x58>)
 800b8ec:	6224      	str	r4, [r4, #32]
 800b8ee:	6263      	str	r3, [r4, #36]	@ 0x24
 800b8f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b924 <std+0x5c>)
 800b8f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b8f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b928 <std+0x60>)
 800b8f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b8f8:	4b0c      	ldr	r3, [pc, #48]	@ (800b92c <std+0x64>)
 800b8fa:	6323      	str	r3, [r4, #48]	@ 0x30
 800b8fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b930 <std+0x68>)
 800b8fe:	429c      	cmp	r4, r3
 800b900:	d006      	beq.n	800b910 <std+0x48>
 800b902:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b906:	4294      	cmp	r4, r2
 800b908:	d002      	beq.n	800b910 <std+0x48>
 800b90a:	33d0      	adds	r3, #208	@ 0xd0
 800b90c:	429c      	cmp	r4, r3
 800b90e:	d105      	bne.n	800b91c <std+0x54>
 800b910:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b918:	f000 b9e8 	b.w	800bcec <__retarget_lock_init_recursive>
 800b91c:	bd10      	pop	{r4, pc}
 800b91e:	bf00      	nop
 800b920:	0800ba4d 	.word	0x0800ba4d
 800b924:	0800ba6f 	.word	0x0800ba6f
 800b928:	0800baa7 	.word	0x0800baa7
 800b92c:	0800bacb 	.word	0x0800bacb
 800b930:	20001ab0 	.word	0x20001ab0

0800b934 <stdio_exit_handler>:
 800b934:	4a02      	ldr	r2, [pc, #8]	@ (800b940 <stdio_exit_handler+0xc>)
 800b936:	4903      	ldr	r1, [pc, #12]	@ (800b944 <stdio_exit_handler+0x10>)
 800b938:	4803      	ldr	r0, [pc, #12]	@ (800b948 <stdio_exit_handler+0x14>)
 800b93a:	f000 b869 	b.w	800ba10 <_fwalk_sglue>
 800b93e:	bf00      	nop
 800b940:	20000190 	.word	0x20000190
 800b944:	0800d5e1 	.word	0x0800d5e1
 800b948:	2000030c 	.word	0x2000030c

0800b94c <cleanup_stdio>:
 800b94c:	6841      	ldr	r1, [r0, #4]
 800b94e:	4b0c      	ldr	r3, [pc, #48]	@ (800b980 <cleanup_stdio+0x34>)
 800b950:	b510      	push	{r4, lr}
 800b952:	4299      	cmp	r1, r3
 800b954:	4604      	mov	r4, r0
 800b956:	d001      	beq.n	800b95c <cleanup_stdio+0x10>
 800b958:	f001 fe42 	bl	800d5e0 <_fflush_r>
 800b95c:	68a1      	ldr	r1, [r4, #8]
 800b95e:	4b09      	ldr	r3, [pc, #36]	@ (800b984 <cleanup_stdio+0x38>)
 800b960:	4299      	cmp	r1, r3
 800b962:	d002      	beq.n	800b96a <cleanup_stdio+0x1e>
 800b964:	4620      	mov	r0, r4
 800b966:	f001 fe3b 	bl	800d5e0 <_fflush_r>
 800b96a:	68e1      	ldr	r1, [r4, #12]
 800b96c:	4b06      	ldr	r3, [pc, #24]	@ (800b988 <cleanup_stdio+0x3c>)
 800b96e:	4299      	cmp	r1, r3
 800b970:	d004      	beq.n	800b97c <cleanup_stdio+0x30>
 800b972:	4620      	mov	r0, r4
 800b974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b978:	f001 be32 	b.w	800d5e0 <_fflush_r>
 800b97c:	bd10      	pop	{r4, pc}
 800b97e:	bf00      	nop
 800b980:	20001ab0 	.word	0x20001ab0
 800b984:	20001b18 	.word	0x20001b18
 800b988:	20001b80 	.word	0x20001b80

0800b98c <global_stdio_init.part.0>:
 800b98c:	b510      	push	{r4, lr}
 800b98e:	4b0b      	ldr	r3, [pc, #44]	@ (800b9bc <global_stdio_init.part.0+0x30>)
 800b990:	4c0b      	ldr	r4, [pc, #44]	@ (800b9c0 <global_stdio_init.part.0+0x34>)
 800b992:	4a0c      	ldr	r2, [pc, #48]	@ (800b9c4 <global_stdio_init.part.0+0x38>)
 800b994:	4620      	mov	r0, r4
 800b996:	601a      	str	r2, [r3, #0]
 800b998:	2104      	movs	r1, #4
 800b99a:	2200      	movs	r2, #0
 800b99c:	f7ff ff94 	bl	800b8c8 <std>
 800b9a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	2109      	movs	r1, #9
 800b9a8:	f7ff ff8e 	bl	800b8c8 <std>
 800b9ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b9b0:	2202      	movs	r2, #2
 800b9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9b6:	2112      	movs	r1, #18
 800b9b8:	f7ff bf86 	b.w	800b8c8 <std>
 800b9bc:	20001be8 	.word	0x20001be8
 800b9c0:	20001ab0 	.word	0x20001ab0
 800b9c4:	0800b935 	.word	0x0800b935

0800b9c8 <__sfp_lock_acquire>:
 800b9c8:	4801      	ldr	r0, [pc, #4]	@ (800b9d0 <__sfp_lock_acquire+0x8>)
 800b9ca:	f000 b990 	b.w	800bcee <__retarget_lock_acquire_recursive>
 800b9ce:	bf00      	nop
 800b9d0:	20001bf1 	.word	0x20001bf1

0800b9d4 <__sfp_lock_release>:
 800b9d4:	4801      	ldr	r0, [pc, #4]	@ (800b9dc <__sfp_lock_release+0x8>)
 800b9d6:	f000 b98b 	b.w	800bcf0 <__retarget_lock_release_recursive>
 800b9da:	bf00      	nop
 800b9dc:	20001bf1 	.word	0x20001bf1

0800b9e0 <__sinit>:
 800b9e0:	b510      	push	{r4, lr}
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	f7ff fff0 	bl	800b9c8 <__sfp_lock_acquire>
 800b9e8:	6a23      	ldr	r3, [r4, #32]
 800b9ea:	b11b      	cbz	r3, 800b9f4 <__sinit+0x14>
 800b9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9f0:	f7ff bff0 	b.w	800b9d4 <__sfp_lock_release>
 800b9f4:	4b04      	ldr	r3, [pc, #16]	@ (800ba08 <__sinit+0x28>)
 800b9f6:	6223      	str	r3, [r4, #32]
 800b9f8:	4b04      	ldr	r3, [pc, #16]	@ (800ba0c <__sinit+0x2c>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d1f5      	bne.n	800b9ec <__sinit+0xc>
 800ba00:	f7ff ffc4 	bl	800b98c <global_stdio_init.part.0>
 800ba04:	e7f2      	b.n	800b9ec <__sinit+0xc>
 800ba06:	bf00      	nop
 800ba08:	0800b94d 	.word	0x0800b94d
 800ba0c:	20001be8 	.word	0x20001be8

0800ba10 <_fwalk_sglue>:
 800ba10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba14:	4607      	mov	r7, r0
 800ba16:	4688      	mov	r8, r1
 800ba18:	4614      	mov	r4, r2
 800ba1a:	2600      	movs	r6, #0
 800ba1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba20:	f1b9 0901 	subs.w	r9, r9, #1
 800ba24:	d505      	bpl.n	800ba32 <_fwalk_sglue+0x22>
 800ba26:	6824      	ldr	r4, [r4, #0]
 800ba28:	2c00      	cmp	r4, #0
 800ba2a:	d1f7      	bne.n	800ba1c <_fwalk_sglue+0xc>
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba32:	89ab      	ldrh	r3, [r5, #12]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d907      	bls.n	800ba48 <_fwalk_sglue+0x38>
 800ba38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	d003      	beq.n	800ba48 <_fwalk_sglue+0x38>
 800ba40:	4629      	mov	r1, r5
 800ba42:	4638      	mov	r0, r7
 800ba44:	47c0      	blx	r8
 800ba46:	4306      	orrs	r6, r0
 800ba48:	3568      	adds	r5, #104	@ 0x68
 800ba4a:	e7e9      	b.n	800ba20 <_fwalk_sglue+0x10>

0800ba4c <__sread>:
 800ba4c:	b510      	push	{r4, lr}
 800ba4e:	460c      	mov	r4, r1
 800ba50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba54:	f000 f8fc 	bl	800bc50 <_read_r>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	bfab      	itete	ge
 800ba5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ba60:	181b      	addge	r3, r3, r0
 800ba62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba66:	bfac      	ite	ge
 800ba68:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba6a:	81a3      	strhlt	r3, [r4, #12]
 800ba6c:	bd10      	pop	{r4, pc}

0800ba6e <__swrite>:
 800ba6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba72:	461f      	mov	r7, r3
 800ba74:	898b      	ldrh	r3, [r1, #12]
 800ba76:	4605      	mov	r5, r0
 800ba78:	05db      	lsls	r3, r3, #23
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	4616      	mov	r6, r2
 800ba7e:	d505      	bpl.n	800ba8c <__swrite+0x1e>
 800ba80:	2302      	movs	r3, #2
 800ba82:	2200      	movs	r2, #0
 800ba84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba88:	f000 f8d0 	bl	800bc2c <_lseek_r>
 800ba8c:	89a3      	ldrh	r3, [r4, #12]
 800ba8e:	4632      	mov	r2, r6
 800ba90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba94:	81a3      	strh	r3, [r4, #12]
 800ba96:	4628      	mov	r0, r5
 800ba98:	463b      	mov	r3, r7
 800ba9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baa2:	f000 b8e7 	b.w	800bc74 <_write_r>

0800baa6 <__sseek>:
 800baa6:	b510      	push	{r4, lr}
 800baa8:	460c      	mov	r4, r1
 800baaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baae:	f000 f8bd 	bl	800bc2c <_lseek_r>
 800bab2:	1c43      	adds	r3, r0, #1
 800bab4:	89a3      	ldrh	r3, [r4, #12]
 800bab6:	bf15      	itete	ne
 800bab8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800baba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800babe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bac2:	81a3      	strheq	r3, [r4, #12]
 800bac4:	bf18      	it	ne
 800bac6:	81a3      	strhne	r3, [r4, #12]
 800bac8:	bd10      	pop	{r4, pc}

0800baca <__sclose>:
 800baca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bace:	f000 b89d 	b.w	800bc0c <_close_r>

0800bad2 <_vsniprintf_r>:
 800bad2:	b530      	push	{r4, r5, lr}
 800bad4:	4614      	mov	r4, r2
 800bad6:	2c00      	cmp	r4, #0
 800bad8:	4605      	mov	r5, r0
 800bada:	461a      	mov	r2, r3
 800badc:	b09b      	sub	sp, #108	@ 0x6c
 800bade:	da05      	bge.n	800baec <_vsniprintf_r+0x1a>
 800bae0:	238b      	movs	r3, #139	@ 0x8b
 800bae2:	6003      	str	r3, [r0, #0]
 800bae4:	f04f 30ff 	mov.w	r0, #4294967295
 800bae8:	b01b      	add	sp, #108	@ 0x6c
 800baea:	bd30      	pop	{r4, r5, pc}
 800baec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800baf0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800baf4:	f04f 0300 	mov.w	r3, #0
 800baf8:	9319      	str	r3, [sp, #100]	@ 0x64
 800bafa:	bf0c      	ite	eq
 800bafc:	4623      	moveq	r3, r4
 800bafe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb02:	9302      	str	r3, [sp, #8]
 800bb04:	9305      	str	r3, [sp, #20]
 800bb06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb0a:	9100      	str	r1, [sp, #0]
 800bb0c:	9104      	str	r1, [sp, #16]
 800bb0e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bb12:	4669      	mov	r1, sp
 800bb14:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800bb16:	f001 fa57 	bl	800cfc8 <_svfiprintf_r>
 800bb1a:	1c43      	adds	r3, r0, #1
 800bb1c:	bfbc      	itt	lt
 800bb1e:	238b      	movlt	r3, #139	@ 0x8b
 800bb20:	602b      	strlt	r3, [r5, #0]
 800bb22:	2c00      	cmp	r4, #0
 800bb24:	d0e0      	beq.n	800bae8 <_vsniprintf_r+0x16>
 800bb26:	2200      	movs	r2, #0
 800bb28:	9b00      	ldr	r3, [sp, #0]
 800bb2a:	701a      	strb	r2, [r3, #0]
 800bb2c:	e7dc      	b.n	800bae8 <_vsniprintf_r+0x16>
	...

0800bb30 <vsniprintf>:
 800bb30:	b507      	push	{r0, r1, r2, lr}
 800bb32:	9300      	str	r3, [sp, #0]
 800bb34:	4613      	mov	r3, r2
 800bb36:	460a      	mov	r2, r1
 800bb38:	4601      	mov	r1, r0
 800bb3a:	4803      	ldr	r0, [pc, #12]	@ (800bb48 <vsniprintf+0x18>)
 800bb3c:	6800      	ldr	r0, [r0, #0]
 800bb3e:	f7ff ffc8 	bl	800bad2 <_vsniprintf_r>
 800bb42:	b003      	add	sp, #12
 800bb44:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb48:	20000308 	.word	0x20000308

0800bb4c <memmove>:
 800bb4c:	4288      	cmp	r0, r1
 800bb4e:	b510      	push	{r4, lr}
 800bb50:	eb01 0402 	add.w	r4, r1, r2
 800bb54:	d902      	bls.n	800bb5c <memmove+0x10>
 800bb56:	4284      	cmp	r4, r0
 800bb58:	4623      	mov	r3, r4
 800bb5a:	d807      	bhi.n	800bb6c <memmove+0x20>
 800bb5c:	1e43      	subs	r3, r0, #1
 800bb5e:	42a1      	cmp	r1, r4
 800bb60:	d008      	beq.n	800bb74 <memmove+0x28>
 800bb62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb6a:	e7f8      	b.n	800bb5e <memmove+0x12>
 800bb6c:	4601      	mov	r1, r0
 800bb6e:	4402      	add	r2, r0
 800bb70:	428a      	cmp	r2, r1
 800bb72:	d100      	bne.n	800bb76 <memmove+0x2a>
 800bb74:	bd10      	pop	{r4, pc}
 800bb76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb7e:	e7f7      	b.n	800bb70 <memmove+0x24>

0800bb80 <memset>:
 800bb80:	4603      	mov	r3, r0
 800bb82:	4402      	add	r2, r0
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d100      	bne.n	800bb8a <memset+0xa>
 800bb88:	4770      	bx	lr
 800bb8a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb8e:	e7f9      	b.n	800bb84 <memset+0x4>

0800bb90 <strncmp>:
 800bb90:	b510      	push	{r4, lr}
 800bb92:	b16a      	cbz	r2, 800bbb0 <strncmp+0x20>
 800bb94:	3901      	subs	r1, #1
 800bb96:	1884      	adds	r4, r0, r2
 800bb98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d103      	bne.n	800bbac <strncmp+0x1c>
 800bba4:	42a0      	cmp	r0, r4
 800bba6:	d001      	beq.n	800bbac <strncmp+0x1c>
 800bba8:	2a00      	cmp	r2, #0
 800bbaa:	d1f5      	bne.n	800bb98 <strncmp+0x8>
 800bbac:	1ad0      	subs	r0, r2, r3
 800bbae:	bd10      	pop	{r4, pc}
 800bbb0:	4610      	mov	r0, r2
 800bbb2:	e7fc      	b.n	800bbae <strncmp+0x1e>

0800bbb4 <__strtok_r>:
 800bbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	b908      	cbnz	r0, 800bbbe <__strtok_r+0xa>
 800bbba:	6814      	ldr	r4, [r2, #0]
 800bbbc:	b144      	cbz	r4, 800bbd0 <__strtok_r+0x1c>
 800bbbe:	460f      	mov	r7, r1
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bbc6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bbca:	b91e      	cbnz	r6, 800bbd4 <__strtok_r+0x20>
 800bbcc:	b965      	cbnz	r5, 800bbe8 <__strtok_r+0x34>
 800bbce:	6015      	str	r5, [r2, #0]
 800bbd0:	2000      	movs	r0, #0
 800bbd2:	e005      	b.n	800bbe0 <__strtok_r+0x2c>
 800bbd4:	42b5      	cmp	r5, r6
 800bbd6:	d1f6      	bne.n	800bbc6 <__strtok_r+0x12>
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1f0      	bne.n	800bbbe <__strtok_r+0xa>
 800bbdc:	6014      	str	r4, [r2, #0]
 800bbde:	7003      	strb	r3, [r0, #0]
 800bbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbe2:	461c      	mov	r4, r3
 800bbe4:	e00c      	b.n	800bc00 <__strtok_r+0x4c>
 800bbe6:	b91d      	cbnz	r5, 800bbf0 <__strtok_r+0x3c>
 800bbe8:	460e      	mov	r6, r1
 800bbea:	4627      	mov	r7, r4
 800bbec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbf0:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bbf4:	42ab      	cmp	r3, r5
 800bbf6:	d1f6      	bne.n	800bbe6 <__strtok_r+0x32>
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d0f2      	beq.n	800bbe2 <__strtok_r+0x2e>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	703b      	strb	r3, [r7, #0]
 800bc00:	6014      	str	r4, [r2, #0]
 800bc02:	e7ed      	b.n	800bbe0 <__strtok_r+0x2c>

0800bc04 <strtok_r>:
 800bc04:	2301      	movs	r3, #1
 800bc06:	f7ff bfd5 	b.w	800bbb4 <__strtok_r>
	...

0800bc0c <_close_r>:
 800bc0c:	b538      	push	{r3, r4, r5, lr}
 800bc0e:	2300      	movs	r3, #0
 800bc10:	4d05      	ldr	r5, [pc, #20]	@ (800bc28 <_close_r+0x1c>)
 800bc12:	4604      	mov	r4, r0
 800bc14:	4608      	mov	r0, r1
 800bc16:	602b      	str	r3, [r5, #0]
 800bc18:	f7fa f974 	bl	8005f04 <_close>
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	d102      	bne.n	800bc26 <_close_r+0x1a>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	b103      	cbz	r3, 800bc26 <_close_r+0x1a>
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	20001bec 	.word	0x20001bec

0800bc2c <_lseek_r>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	4604      	mov	r4, r0
 800bc30:	4608      	mov	r0, r1
 800bc32:	4611      	mov	r1, r2
 800bc34:	2200      	movs	r2, #0
 800bc36:	4d05      	ldr	r5, [pc, #20]	@ (800bc4c <_lseek_r+0x20>)
 800bc38:	602a      	str	r2, [r5, #0]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	f7fa f96c 	bl	8005f18 <_lseek>
 800bc40:	1c43      	adds	r3, r0, #1
 800bc42:	d102      	bne.n	800bc4a <_lseek_r+0x1e>
 800bc44:	682b      	ldr	r3, [r5, #0]
 800bc46:	b103      	cbz	r3, 800bc4a <_lseek_r+0x1e>
 800bc48:	6023      	str	r3, [r4, #0]
 800bc4a:	bd38      	pop	{r3, r4, r5, pc}
 800bc4c:	20001bec 	.word	0x20001bec

0800bc50 <_read_r>:
 800bc50:	b538      	push	{r3, r4, r5, lr}
 800bc52:	4604      	mov	r4, r0
 800bc54:	4608      	mov	r0, r1
 800bc56:	4611      	mov	r1, r2
 800bc58:	2200      	movs	r2, #0
 800bc5a:	4d05      	ldr	r5, [pc, #20]	@ (800bc70 <_read_r+0x20>)
 800bc5c:	602a      	str	r2, [r5, #0]
 800bc5e:	461a      	mov	r2, r3
 800bc60:	f7fa f934 	bl	8005ecc <_read>
 800bc64:	1c43      	adds	r3, r0, #1
 800bc66:	d102      	bne.n	800bc6e <_read_r+0x1e>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	b103      	cbz	r3, 800bc6e <_read_r+0x1e>
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	20001bec 	.word	0x20001bec

0800bc74 <_write_r>:
 800bc74:	b538      	push	{r3, r4, r5, lr}
 800bc76:	4604      	mov	r4, r0
 800bc78:	4608      	mov	r0, r1
 800bc7a:	4611      	mov	r1, r2
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	4d05      	ldr	r5, [pc, #20]	@ (800bc94 <_write_r+0x20>)
 800bc80:	602a      	str	r2, [r5, #0]
 800bc82:	461a      	mov	r2, r3
 800bc84:	f7fa f930 	bl	8005ee8 <_write>
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	d102      	bne.n	800bc92 <_write_r+0x1e>
 800bc8c:	682b      	ldr	r3, [r5, #0]
 800bc8e:	b103      	cbz	r3, 800bc92 <_write_r+0x1e>
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	bd38      	pop	{r3, r4, r5, pc}
 800bc94:	20001bec 	.word	0x20001bec

0800bc98 <__errno>:
 800bc98:	4b01      	ldr	r3, [pc, #4]	@ (800bca0 <__errno+0x8>)
 800bc9a:	6818      	ldr	r0, [r3, #0]
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	20000308 	.word	0x20000308

0800bca4 <__libc_init_array>:
 800bca4:	b570      	push	{r4, r5, r6, lr}
 800bca6:	2600      	movs	r6, #0
 800bca8:	4d0c      	ldr	r5, [pc, #48]	@ (800bcdc <__libc_init_array+0x38>)
 800bcaa:	4c0d      	ldr	r4, [pc, #52]	@ (800bce0 <__libc_init_array+0x3c>)
 800bcac:	1b64      	subs	r4, r4, r5
 800bcae:	10a4      	asrs	r4, r4, #2
 800bcb0:	42a6      	cmp	r6, r4
 800bcb2:	d109      	bne.n	800bcc8 <__libc_init_array+0x24>
 800bcb4:	f001 fffe 	bl	800dcb4 <_init>
 800bcb8:	2600      	movs	r6, #0
 800bcba:	4d0a      	ldr	r5, [pc, #40]	@ (800bce4 <__libc_init_array+0x40>)
 800bcbc:	4c0a      	ldr	r4, [pc, #40]	@ (800bce8 <__libc_init_array+0x44>)
 800bcbe:	1b64      	subs	r4, r4, r5
 800bcc0:	10a4      	asrs	r4, r4, #2
 800bcc2:	42a6      	cmp	r6, r4
 800bcc4:	d105      	bne.n	800bcd2 <__libc_init_array+0x2e>
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}
 800bcc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bccc:	4798      	blx	r3
 800bcce:	3601      	adds	r6, #1
 800bcd0:	e7ee      	b.n	800bcb0 <__libc_init_array+0xc>
 800bcd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcd6:	4798      	blx	r3
 800bcd8:	3601      	adds	r6, #1
 800bcda:	e7f2      	b.n	800bcc2 <__libc_init_array+0x1e>
 800bcdc:	0800e260 	.word	0x0800e260
 800bce0:	0800e260 	.word	0x0800e260
 800bce4:	0800e260 	.word	0x0800e260
 800bce8:	0800e264 	.word	0x0800e264

0800bcec <__retarget_lock_init_recursive>:
 800bcec:	4770      	bx	lr

0800bcee <__retarget_lock_acquire_recursive>:
 800bcee:	4770      	bx	lr

0800bcf0 <__retarget_lock_release_recursive>:
 800bcf0:	4770      	bx	lr

0800bcf2 <strcpy>:
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcf8:	f803 2b01 	strb.w	r2, [r3], #1
 800bcfc:	2a00      	cmp	r2, #0
 800bcfe:	d1f9      	bne.n	800bcf4 <strcpy+0x2>
 800bd00:	4770      	bx	lr

0800bd02 <memcpy>:
 800bd02:	440a      	add	r2, r1
 800bd04:	4291      	cmp	r1, r2
 800bd06:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd0a:	d100      	bne.n	800bd0e <memcpy+0xc>
 800bd0c:	4770      	bx	lr
 800bd0e:	b510      	push	{r4, lr}
 800bd10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd14:	4291      	cmp	r1, r2
 800bd16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd1a:	d1f9      	bne.n	800bd10 <memcpy+0xe>
 800bd1c:	bd10      	pop	{r4, pc}
	...

0800bd20 <nan>:
 800bd20:	2000      	movs	r0, #0
 800bd22:	4901      	ldr	r1, [pc, #4]	@ (800bd28 <nan+0x8>)
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	7ff80000 	.word	0x7ff80000

0800bd2c <nanf>:
 800bd2c:	4800      	ldr	r0, [pc, #0]	@ (800bd30 <nanf+0x4>)
 800bd2e:	4770      	bx	lr
 800bd30:	7fc00000 	.word	0x7fc00000

0800bd34 <_free_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4605      	mov	r5, r0
 800bd38:	2900      	cmp	r1, #0
 800bd3a:	d040      	beq.n	800bdbe <_free_r+0x8a>
 800bd3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd40:	1f0c      	subs	r4, r1, #4
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	bfb8      	it	lt
 800bd46:	18e4      	addlt	r4, r4, r3
 800bd48:	f000 fc2a 	bl	800c5a0 <__malloc_lock>
 800bd4c:	4a1c      	ldr	r2, [pc, #112]	@ (800bdc0 <_free_r+0x8c>)
 800bd4e:	6813      	ldr	r3, [r2, #0]
 800bd50:	b933      	cbnz	r3, 800bd60 <_free_r+0x2c>
 800bd52:	6063      	str	r3, [r4, #4]
 800bd54:	6014      	str	r4, [r2, #0]
 800bd56:	4628      	mov	r0, r5
 800bd58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd5c:	f000 bc26 	b.w	800c5ac <__malloc_unlock>
 800bd60:	42a3      	cmp	r3, r4
 800bd62:	d908      	bls.n	800bd76 <_free_r+0x42>
 800bd64:	6820      	ldr	r0, [r4, #0]
 800bd66:	1821      	adds	r1, r4, r0
 800bd68:	428b      	cmp	r3, r1
 800bd6a:	bf01      	itttt	eq
 800bd6c:	6819      	ldreq	r1, [r3, #0]
 800bd6e:	685b      	ldreq	r3, [r3, #4]
 800bd70:	1809      	addeq	r1, r1, r0
 800bd72:	6021      	streq	r1, [r4, #0]
 800bd74:	e7ed      	b.n	800bd52 <_free_r+0x1e>
 800bd76:	461a      	mov	r2, r3
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	b10b      	cbz	r3, 800bd80 <_free_r+0x4c>
 800bd7c:	42a3      	cmp	r3, r4
 800bd7e:	d9fa      	bls.n	800bd76 <_free_r+0x42>
 800bd80:	6811      	ldr	r1, [r2, #0]
 800bd82:	1850      	adds	r0, r2, r1
 800bd84:	42a0      	cmp	r0, r4
 800bd86:	d10b      	bne.n	800bda0 <_free_r+0x6c>
 800bd88:	6820      	ldr	r0, [r4, #0]
 800bd8a:	4401      	add	r1, r0
 800bd8c:	1850      	adds	r0, r2, r1
 800bd8e:	4283      	cmp	r3, r0
 800bd90:	6011      	str	r1, [r2, #0]
 800bd92:	d1e0      	bne.n	800bd56 <_free_r+0x22>
 800bd94:	6818      	ldr	r0, [r3, #0]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	4408      	add	r0, r1
 800bd9a:	6010      	str	r0, [r2, #0]
 800bd9c:	6053      	str	r3, [r2, #4]
 800bd9e:	e7da      	b.n	800bd56 <_free_r+0x22>
 800bda0:	d902      	bls.n	800bda8 <_free_r+0x74>
 800bda2:	230c      	movs	r3, #12
 800bda4:	602b      	str	r3, [r5, #0]
 800bda6:	e7d6      	b.n	800bd56 <_free_r+0x22>
 800bda8:	6820      	ldr	r0, [r4, #0]
 800bdaa:	1821      	adds	r1, r4, r0
 800bdac:	428b      	cmp	r3, r1
 800bdae:	bf01      	itttt	eq
 800bdb0:	6819      	ldreq	r1, [r3, #0]
 800bdb2:	685b      	ldreq	r3, [r3, #4]
 800bdb4:	1809      	addeq	r1, r1, r0
 800bdb6:	6021      	streq	r1, [r4, #0]
 800bdb8:	6063      	str	r3, [r4, #4]
 800bdba:	6054      	str	r4, [r2, #4]
 800bdbc:	e7cb      	b.n	800bd56 <_free_r+0x22>
 800bdbe:	bd38      	pop	{r3, r4, r5, pc}
 800bdc0:	20001bf8 	.word	0x20001bf8

0800bdc4 <rshift>:
 800bdc4:	6903      	ldr	r3, [r0, #16]
 800bdc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bdce:	f100 0414 	add.w	r4, r0, #20
 800bdd2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bdd6:	dd46      	ble.n	800be66 <rshift+0xa2>
 800bdd8:	f011 011f 	ands.w	r1, r1, #31
 800bddc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bde0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bde4:	d10c      	bne.n	800be00 <rshift+0x3c>
 800bde6:	4629      	mov	r1, r5
 800bde8:	f100 0710 	add.w	r7, r0, #16
 800bdec:	42b1      	cmp	r1, r6
 800bdee:	d335      	bcc.n	800be5c <rshift+0x98>
 800bdf0:	1a9b      	subs	r3, r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	1eea      	subs	r2, r5, #3
 800bdf6:	4296      	cmp	r6, r2
 800bdf8:	bf38      	it	cc
 800bdfa:	2300      	movcc	r3, #0
 800bdfc:	4423      	add	r3, r4
 800bdfe:	e015      	b.n	800be2c <rshift+0x68>
 800be00:	46a1      	mov	r9, r4
 800be02:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800be06:	f1c1 0820 	rsb	r8, r1, #32
 800be0a:	40cf      	lsrs	r7, r1
 800be0c:	f105 0e04 	add.w	lr, r5, #4
 800be10:	4576      	cmp	r6, lr
 800be12:	46f4      	mov	ip, lr
 800be14:	d816      	bhi.n	800be44 <rshift+0x80>
 800be16:	1a9a      	subs	r2, r3, r2
 800be18:	0092      	lsls	r2, r2, #2
 800be1a:	3a04      	subs	r2, #4
 800be1c:	3501      	adds	r5, #1
 800be1e:	42ae      	cmp	r6, r5
 800be20:	bf38      	it	cc
 800be22:	2200      	movcc	r2, #0
 800be24:	18a3      	adds	r3, r4, r2
 800be26:	50a7      	str	r7, [r4, r2]
 800be28:	b107      	cbz	r7, 800be2c <rshift+0x68>
 800be2a:	3304      	adds	r3, #4
 800be2c:	42a3      	cmp	r3, r4
 800be2e:	eba3 0204 	sub.w	r2, r3, r4
 800be32:	bf08      	it	eq
 800be34:	2300      	moveq	r3, #0
 800be36:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800be3a:	6102      	str	r2, [r0, #16]
 800be3c:	bf08      	it	eq
 800be3e:	6143      	streq	r3, [r0, #20]
 800be40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be44:	f8dc c000 	ldr.w	ip, [ip]
 800be48:	fa0c fc08 	lsl.w	ip, ip, r8
 800be4c:	ea4c 0707 	orr.w	r7, ip, r7
 800be50:	f849 7b04 	str.w	r7, [r9], #4
 800be54:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be58:	40cf      	lsrs	r7, r1
 800be5a:	e7d9      	b.n	800be10 <rshift+0x4c>
 800be5c:	f851 cb04 	ldr.w	ip, [r1], #4
 800be60:	f847 cf04 	str.w	ip, [r7, #4]!
 800be64:	e7c2      	b.n	800bdec <rshift+0x28>
 800be66:	4623      	mov	r3, r4
 800be68:	e7e0      	b.n	800be2c <rshift+0x68>

0800be6a <__hexdig_fun>:
 800be6a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800be6e:	2b09      	cmp	r3, #9
 800be70:	d802      	bhi.n	800be78 <__hexdig_fun+0xe>
 800be72:	3820      	subs	r0, #32
 800be74:	b2c0      	uxtb	r0, r0
 800be76:	4770      	bx	lr
 800be78:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800be7c:	2b05      	cmp	r3, #5
 800be7e:	d801      	bhi.n	800be84 <__hexdig_fun+0x1a>
 800be80:	3847      	subs	r0, #71	@ 0x47
 800be82:	e7f7      	b.n	800be74 <__hexdig_fun+0xa>
 800be84:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800be88:	2b05      	cmp	r3, #5
 800be8a:	d801      	bhi.n	800be90 <__hexdig_fun+0x26>
 800be8c:	3827      	subs	r0, #39	@ 0x27
 800be8e:	e7f1      	b.n	800be74 <__hexdig_fun+0xa>
 800be90:	2000      	movs	r0, #0
 800be92:	4770      	bx	lr

0800be94 <__gethex>:
 800be94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be98:	468a      	mov	sl, r1
 800be9a:	4690      	mov	r8, r2
 800be9c:	b085      	sub	sp, #20
 800be9e:	9302      	str	r3, [sp, #8]
 800bea0:	680b      	ldr	r3, [r1, #0]
 800bea2:	9001      	str	r0, [sp, #4]
 800bea4:	1c9c      	adds	r4, r3, #2
 800bea6:	46a1      	mov	r9, r4
 800bea8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800beac:	2830      	cmp	r0, #48	@ 0x30
 800beae:	d0fa      	beq.n	800bea6 <__gethex+0x12>
 800beb0:	eba9 0303 	sub.w	r3, r9, r3
 800beb4:	f1a3 0b02 	sub.w	fp, r3, #2
 800beb8:	f7ff ffd7 	bl	800be6a <__hexdig_fun>
 800bebc:	4605      	mov	r5, r0
 800bebe:	2800      	cmp	r0, #0
 800bec0:	d168      	bne.n	800bf94 <__gethex+0x100>
 800bec2:	2201      	movs	r2, #1
 800bec4:	4648      	mov	r0, r9
 800bec6:	499f      	ldr	r1, [pc, #636]	@ (800c144 <__gethex+0x2b0>)
 800bec8:	f7ff fe62 	bl	800bb90 <strncmp>
 800becc:	4607      	mov	r7, r0
 800bece:	2800      	cmp	r0, #0
 800bed0:	d167      	bne.n	800bfa2 <__gethex+0x10e>
 800bed2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bed6:	4626      	mov	r6, r4
 800bed8:	f7ff ffc7 	bl	800be6a <__hexdig_fun>
 800bedc:	2800      	cmp	r0, #0
 800bede:	d062      	beq.n	800bfa6 <__gethex+0x112>
 800bee0:	4623      	mov	r3, r4
 800bee2:	7818      	ldrb	r0, [r3, #0]
 800bee4:	4699      	mov	r9, r3
 800bee6:	2830      	cmp	r0, #48	@ 0x30
 800bee8:	f103 0301 	add.w	r3, r3, #1
 800beec:	d0f9      	beq.n	800bee2 <__gethex+0x4e>
 800beee:	f7ff ffbc 	bl	800be6a <__hexdig_fun>
 800bef2:	fab0 f580 	clz	r5, r0
 800bef6:	f04f 0b01 	mov.w	fp, #1
 800befa:	096d      	lsrs	r5, r5, #5
 800befc:	464a      	mov	r2, r9
 800befe:	4616      	mov	r6, r2
 800bf00:	7830      	ldrb	r0, [r6, #0]
 800bf02:	3201      	adds	r2, #1
 800bf04:	f7ff ffb1 	bl	800be6a <__hexdig_fun>
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d1f8      	bne.n	800befe <__gethex+0x6a>
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	4630      	mov	r0, r6
 800bf10:	498c      	ldr	r1, [pc, #560]	@ (800c144 <__gethex+0x2b0>)
 800bf12:	f7ff fe3d 	bl	800bb90 <strncmp>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d13f      	bne.n	800bf9a <__gethex+0x106>
 800bf1a:	b944      	cbnz	r4, 800bf2e <__gethex+0x9a>
 800bf1c:	1c74      	adds	r4, r6, #1
 800bf1e:	4622      	mov	r2, r4
 800bf20:	4616      	mov	r6, r2
 800bf22:	7830      	ldrb	r0, [r6, #0]
 800bf24:	3201      	adds	r2, #1
 800bf26:	f7ff ffa0 	bl	800be6a <__hexdig_fun>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	d1f8      	bne.n	800bf20 <__gethex+0x8c>
 800bf2e:	1ba4      	subs	r4, r4, r6
 800bf30:	00a7      	lsls	r7, r4, #2
 800bf32:	7833      	ldrb	r3, [r6, #0]
 800bf34:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bf38:	2b50      	cmp	r3, #80	@ 0x50
 800bf3a:	d13e      	bne.n	800bfba <__gethex+0x126>
 800bf3c:	7873      	ldrb	r3, [r6, #1]
 800bf3e:	2b2b      	cmp	r3, #43	@ 0x2b
 800bf40:	d033      	beq.n	800bfaa <__gethex+0x116>
 800bf42:	2b2d      	cmp	r3, #45	@ 0x2d
 800bf44:	d034      	beq.n	800bfb0 <__gethex+0x11c>
 800bf46:	2400      	movs	r4, #0
 800bf48:	1c71      	adds	r1, r6, #1
 800bf4a:	7808      	ldrb	r0, [r1, #0]
 800bf4c:	f7ff ff8d 	bl	800be6a <__hexdig_fun>
 800bf50:	1e43      	subs	r3, r0, #1
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	2b18      	cmp	r3, #24
 800bf56:	d830      	bhi.n	800bfba <__gethex+0x126>
 800bf58:	f1a0 0210 	sub.w	r2, r0, #16
 800bf5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf60:	f7ff ff83 	bl	800be6a <__hexdig_fun>
 800bf64:	f100 3cff 	add.w	ip, r0, #4294967295
 800bf68:	fa5f fc8c 	uxtb.w	ip, ip
 800bf6c:	f1bc 0f18 	cmp.w	ip, #24
 800bf70:	f04f 030a 	mov.w	r3, #10
 800bf74:	d91e      	bls.n	800bfb4 <__gethex+0x120>
 800bf76:	b104      	cbz	r4, 800bf7a <__gethex+0xe6>
 800bf78:	4252      	negs	r2, r2
 800bf7a:	4417      	add	r7, r2
 800bf7c:	f8ca 1000 	str.w	r1, [sl]
 800bf80:	b1ed      	cbz	r5, 800bfbe <__gethex+0x12a>
 800bf82:	f1bb 0f00 	cmp.w	fp, #0
 800bf86:	bf0c      	ite	eq
 800bf88:	2506      	moveq	r5, #6
 800bf8a:	2500      	movne	r5, #0
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	b005      	add	sp, #20
 800bf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf94:	2500      	movs	r5, #0
 800bf96:	462c      	mov	r4, r5
 800bf98:	e7b0      	b.n	800befc <__gethex+0x68>
 800bf9a:	2c00      	cmp	r4, #0
 800bf9c:	d1c7      	bne.n	800bf2e <__gethex+0x9a>
 800bf9e:	4627      	mov	r7, r4
 800bfa0:	e7c7      	b.n	800bf32 <__gethex+0x9e>
 800bfa2:	464e      	mov	r6, r9
 800bfa4:	462f      	mov	r7, r5
 800bfa6:	2501      	movs	r5, #1
 800bfa8:	e7c3      	b.n	800bf32 <__gethex+0x9e>
 800bfaa:	2400      	movs	r4, #0
 800bfac:	1cb1      	adds	r1, r6, #2
 800bfae:	e7cc      	b.n	800bf4a <__gethex+0xb6>
 800bfb0:	2401      	movs	r4, #1
 800bfb2:	e7fb      	b.n	800bfac <__gethex+0x118>
 800bfb4:	fb03 0002 	mla	r0, r3, r2, r0
 800bfb8:	e7ce      	b.n	800bf58 <__gethex+0xc4>
 800bfba:	4631      	mov	r1, r6
 800bfbc:	e7de      	b.n	800bf7c <__gethex+0xe8>
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	eba6 0309 	sub.w	r3, r6, r9
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	2b07      	cmp	r3, #7
 800bfc8:	dc0a      	bgt.n	800bfe0 <__gethex+0x14c>
 800bfca:	9801      	ldr	r0, [sp, #4]
 800bfcc:	f000 faf4 	bl	800c5b8 <_Balloc>
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	b940      	cbnz	r0, 800bfe6 <__gethex+0x152>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	21e4      	movs	r1, #228	@ 0xe4
 800bfd8:	4b5b      	ldr	r3, [pc, #364]	@ (800c148 <__gethex+0x2b4>)
 800bfda:	485c      	ldr	r0, [pc, #368]	@ (800c14c <__gethex+0x2b8>)
 800bfdc:	f001 fb46 	bl	800d66c <__assert_func>
 800bfe0:	3101      	adds	r1, #1
 800bfe2:	105b      	asrs	r3, r3, #1
 800bfe4:	e7ef      	b.n	800bfc6 <__gethex+0x132>
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	f100 0a14 	add.w	sl, r0, #20
 800bfec:	4655      	mov	r5, sl
 800bfee:	469b      	mov	fp, r3
 800bff0:	45b1      	cmp	r9, r6
 800bff2:	d337      	bcc.n	800c064 <__gethex+0x1d0>
 800bff4:	f845 bb04 	str.w	fp, [r5], #4
 800bff8:	eba5 050a 	sub.w	r5, r5, sl
 800bffc:	10ad      	asrs	r5, r5, #2
 800bffe:	6125      	str	r5, [r4, #16]
 800c000:	4658      	mov	r0, fp
 800c002:	f000 fbcb 	bl	800c79c <__hi0bits>
 800c006:	016d      	lsls	r5, r5, #5
 800c008:	f8d8 6000 	ldr.w	r6, [r8]
 800c00c:	1a2d      	subs	r5, r5, r0
 800c00e:	42b5      	cmp	r5, r6
 800c010:	dd54      	ble.n	800c0bc <__gethex+0x228>
 800c012:	1bad      	subs	r5, r5, r6
 800c014:	4629      	mov	r1, r5
 800c016:	4620      	mov	r0, r4
 800c018:	f000 ff4d 	bl	800ceb6 <__any_on>
 800c01c:	4681      	mov	r9, r0
 800c01e:	b178      	cbz	r0, 800c040 <__gethex+0x1ac>
 800c020:	f04f 0901 	mov.w	r9, #1
 800c024:	1e6b      	subs	r3, r5, #1
 800c026:	1159      	asrs	r1, r3, #5
 800c028:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c02c:	f003 021f 	and.w	r2, r3, #31
 800c030:	fa09 f202 	lsl.w	r2, r9, r2
 800c034:	420a      	tst	r2, r1
 800c036:	d003      	beq.n	800c040 <__gethex+0x1ac>
 800c038:	454b      	cmp	r3, r9
 800c03a:	dc36      	bgt.n	800c0aa <__gethex+0x216>
 800c03c:	f04f 0902 	mov.w	r9, #2
 800c040:	4629      	mov	r1, r5
 800c042:	4620      	mov	r0, r4
 800c044:	f7ff febe 	bl	800bdc4 <rshift>
 800c048:	442f      	add	r7, r5
 800c04a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c04e:	42bb      	cmp	r3, r7
 800c050:	da42      	bge.n	800c0d8 <__gethex+0x244>
 800c052:	4621      	mov	r1, r4
 800c054:	9801      	ldr	r0, [sp, #4]
 800c056:	f000 faef 	bl	800c638 <_Bfree>
 800c05a:	2300      	movs	r3, #0
 800c05c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c05e:	25a3      	movs	r5, #163	@ 0xa3
 800c060:	6013      	str	r3, [r2, #0]
 800c062:	e793      	b.n	800bf8c <__gethex+0xf8>
 800c064:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c068:	2a2e      	cmp	r2, #46	@ 0x2e
 800c06a:	d012      	beq.n	800c092 <__gethex+0x1fe>
 800c06c:	2b20      	cmp	r3, #32
 800c06e:	d104      	bne.n	800c07a <__gethex+0x1e6>
 800c070:	f845 bb04 	str.w	fp, [r5], #4
 800c074:	f04f 0b00 	mov.w	fp, #0
 800c078:	465b      	mov	r3, fp
 800c07a:	7830      	ldrb	r0, [r6, #0]
 800c07c:	9303      	str	r3, [sp, #12]
 800c07e:	f7ff fef4 	bl	800be6a <__hexdig_fun>
 800c082:	9b03      	ldr	r3, [sp, #12]
 800c084:	f000 000f 	and.w	r0, r0, #15
 800c088:	4098      	lsls	r0, r3
 800c08a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c08e:	3304      	adds	r3, #4
 800c090:	e7ae      	b.n	800bff0 <__gethex+0x15c>
 800c092:	45b1      	cmp	r9, r6
 800c094:	d8ea      	bhi.n	800c06c <__gethex+0x1d8>
 800c096:	2201      	movs	r2, #1
 800c098:	4630      	mov	r0, r6
 800c09a:	492a      	ldr	r1, [pc, #168]	@ (800c144 <__gethex+0x2b0>)
 800c09c:	9303      	str	r3, [sp, #12]
 800c09e:	f7ff fd77 	bl	800bb90 <strncmp>
 800c0a2:	9b03      	ldr	r3, [sp, #12]
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	d1e1      	bne.n	800c06c <__gethex+0x1d8>
 800c0a8:	e7a2      	b.n	800bff0 <__gethex+0x15c>
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	1ea9      	subs	r1, r5, #2
 800c0ae:	f000 ff02 	bl	800ceb6 <__any_on>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	d0c2      	beq.n	800c03c <__gethex+0x1a8>
 800c0b6:	f04f 0903 	mov.w	r9, #3
 800c0ba:	e7c1      	b.n	800c040 <__gethex+0x1ac>
 800c0bc:	da09      	bge.n	800c0d2 <__gethex+0x23e>
 800c0be:	1b75      	subs	r5, r6, r5
 800c0c0:	4621      	mov	r1, r4
 800c0c2:	462a      	mov	r2, r5
 800c0c4:	9801      	ldr	r0, [sp, #4]
 800c0c6:	f000 fcc7 	bl	800ca58 <__lshift>
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	1b7f      	subs	r7, r7, r5
 800c0ce:	f100 0a14 	add.w	sl, r0, #20
 800c0d2:	f04f 0900 	mov.w	r9, #0
 800c0d6:	e7b8      	b.n	800c04a <__gethex+0x1b6>
 800c0d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c0dc:	42bd      	cmp	r5, r7
 800c0de:	dd6f      	ble.n	800c1c0 <__gethex+0x32c>
 800c0e0:	1bed      	subs	r5, r5, r7
 800c0e2:	42ae      	cmp	r6, r5
 800c0e4:	dc34      	bgt.n	800c150 <__gethex+0x2bc>
 800c0e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d022      	beq.n	800c134 <__gethex+0x2a0>
 800c0ee:	2b03      	cmp	r3, #3
 800c0f0:	d024      	beq.n	800c13c <__gethex+0x2a8>
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d115      	bne.n	800c122 <__gethex+0x28e>
 800c0f6:	42ae      	cmp	r6, r5
 800c0f8:	d113      	bne.n	800c122 <__gethex+0x28e>
 800c0fa:	2e01      	cmp	r6, #1
 800c0fc:	d10b      	bne.n	800c116 <__gethex+0x282>
 800c0fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c102:	9a02      	ldr	r2, [sp, #8]
 800c104:	2562      	movs	r5, #98	@ 0x62
 800c106:	6013      	str	r3, [r2, #0]
 800c108:	2301      	movs	r3, #1
 800c10a:	6123      	str	r3, [r4, #16]
 800c10c:	f8ca 3000 	str.w	r3, [sl]
 800c110:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c112:	601c      	str	r4, [r3, #0]
 800c114:	e73a      	b.n	800bf8c <__gethex+0xf8>
 800c116:	4620      	mov	r0, r4
 800c118:	1e71      	subs	r1, r6, #1
 800c11a:	f000 fecc 	bl	800ceb6 <__any_on>
 800c11e:	2800      	cmp	r0, #0
 800c120:	d1ed      	bne.n	800c0fe <__gethex+0x26a>
 800c122:	4621      	mov	r1, r4
 800c124:	9801      	ldr	r0, [sp, #4]
 800c126:	f000 fa87 	bl	800c638 <_Bfree>
 800c12a:	2300      	movs	r3, #0
 800c12c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c12e:	2550      	movs	r5, #80	@ 0x50
 800c130:	6013      	str	r3, [r2, #0]
 800c132:	e72b      	b.n	800bf8c <__gethex+0xf8>
 800c134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1f3      	bne.n	800c122 <__gethex+0x28e>
 800c13a:	e7e0      	b.n	800c0fe <__gethex+0x26a>
 800c13c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1dd      	bne.n	800c0fe <__gethex+0x26a>
 800c142:	e7ee      	b.n	800c122 <__gethex+0x28e>
 800c144:	0800ddc5 	.word	0x0800ddc5
 800c148:	0800de7a 	.word	0x0800de7a
 800c14c:	0800de8b 	.word	0x0800de8b
 800c150:	1e6f      	subs	r7, r5, #1
 800c152:	f1b9 0f00 	cmp.w	r9, #0
 800c156:	d130      	bne.n	800c1ba <__gethex+0x326>
 800c158:	b127      	cbz	r7, 800c164 <__gethex+0x2d0>
 800c15a:	4639      	mov	r1, r7
 800c15c:	4620      	mov	r0, r4
 800c15e:	f000 feaa 	bl	800ceb6 <__any_on>
 800c162:	4681      	mov	r9, r0
 800c164:	2301      	movs	r3, #1
 800c166:	4629      	mov	r1, r5
 800c168:	1b76      	subs	r6, r6, r5
 800c16a:	2502      	movs	r5, #2
 800c16c:	117a      	asrs	r2, r7, #5
 800c16e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c172:	f007 071f 	and.w	r7, r7, #31
 800c176:	40bb      	lsls	r3, r7
 800c178:	4213      	tst	r3, r2
 800c17a:	4620      	mov	r0, r4
 800c17c:	bf18      	it	ne
 800c17e:	f049 0902 	orrne.w	r9, r9, #2
 800c182:	f7ff fe1f 	bl	800bdc4 <rshift>
 800c186:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c18a:	f1b9 0f00 	cmp.w	r9, #0
 800c18e:	d047      	beq.n	800c220 <__gethex+0x38c>
 800c190:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c194:	2b02      	cmp	r3, #2
 800c196:	d015      	beq.n	800c1c4 <__gethex+0x330>
 800c198:	2b03      	cmp	r3, #3
 800c19a:	d017      	beq.n	800c1cc <__gethex+0x338>
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d109      	bne.n	800c1b4 <__gethex+0x320>
 800c1a0:	f019 0f02 	tst.w	r9, #2
 800c1a4:	d006      	beq.n	800c1b4 <__gethex+0x320>
 800c1a6:	f8da 3000 	ldr.w	r3, [sl]
 800c1aa:	ea49 0903 	orr.w	r9, r9, r3
 800c1ae:	f019 0f01 	tst.w	r9, #1
 800c1b2:	d10e      	bne.n	800c1d2 <__gethex+0x33e>
 800c1b4:	f045 0510 	orr.w	r5, r5, #16
 800c1b8:	e032      	b.n	800c220 <__gethex+0x38c>
 800c1ba:	f04f 0901 	mov.w	r9, #1
 800c1be:	e7d1      	b.n	800c164 <__gethex+0x2d0>
 800c1c0:	2501      	movs	r5, #1
 800c1c2:	e7e2      	b.n	800c18a <__gethex+0x2f6>
 800c1c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1c6:	f1c3 0301 	rsb	r3, r3, #1
 800c1ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d0f0      	beq.n	800c1b4 <__gethex+0x320>
 800c1d2:	f04f 0c00 	mov.w	ip, #0
 800c1d6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c1da:	f104 0314 	add.w	r3, r4, #20
 800c1de:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c1e2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c1f0:	d01b      	beq.n	800c22a <__gethex+0x396>
 800c1f2:	3201      	adds	r2, #1
 800c1f4:	6002      	str	r2, [r0, #0]
 800c1f6:	2d02      	cmp	r5, #2
 800c1f8:	f104 0314 	add.w	r3, r4, #20
 800c1fc:	d13c      	bne.n	800c278 <__gethex+0x3e4>
 800c1fe:	f8d8 2000 	ldr.w	r2, [r8]
 800c202:	3a01      	subs	r2, #1
 800c204:	42b2      	cmp	r2, r6
 800c206:	d109      	bne.n	800c21c <__gethex+0x388>
 800c208:	2201      	movs	r2, #1
 800c20a:	1171      	asrs	r1, r6, #5
 800c20c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c210:	f006 061f 	and.w	r6, r6, #31
 800c214:	fa02 f606 	lsl.w	r6, r2, r6
 800c218:	421e      	tst	r6, r3
 800c21a:	d13a      	bne.n	800c292 <__gethex+0x3fe>
 800c21c:	f045 0520 	orr.w	r5, r5, #32
 800c220:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c222:	601c      	str	r4, [r3, #0]
 800c224:	9b02      	ldr	r3, [sp, #8]
 800c226:	601f      	str	r7, [r3, #0]
 800c228:	e6b0      	b.n	800bf8c <__gethex+0xf8>
 800c22a:	4299      	cmp	r1, r3
 800c22c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c230:	d8d9      	bhi.n	800c1e6 <__gethex+0x352>
 800c232:	68a3      	ldr	r3, [r4, #8]
 800c234:	459b      	cmp	fp, r3
 800c236:	db17      	blt.n	800c268 <__gethex+0x3d4>
 800c238:	6861      	ldr	r1, [r4, #4]
 800c23a:	9801      	ldr	r0, [sp, #4]
 800c23c:	3101      	adds	r1, #1
 800c23e:	f000 f9bb 	bl	800c5b8 <_Balloc>
 800c242:	4681      	mov	r9, r0
 800c244:	b918      	cbnz	r0, 800c24e <__gethex+0x3ba>
 800c246:	4602      	mov	r2, r0
 800c248:	2184      	movs	r1, #132	@ 0x84
 800c24a:	4b19      	ldr	r3, [pc, #100]	@ (800c2b0 <__gethex+0x41c>)
 800c24c:	e6c5      	b.n	800bfda <__gethex+0x146>
 800c24e:	6922      	ldr	r2, [r4, #16]
 800c250:	f104 010c 	add.w	r1, r4, #12
 800c254:	3202      	adds	r2, #2
 800c256:	0092      	lsls	r2, r2, #2
 800c258:	300c      	adds	r0, #12
 800c25a:	f7ff fd52 	bl	800bd02 <memcpy>
 800c25e:	4621      	mov	r1, r4
 800c260:	9801      	ldr	r0, [sp, #4]
 800c262:	f000 f9e9 	bl	800c638 <_Bfree>
 800c266:	464c      	mov	r4, r9
 800c268:	6923      	ldr	r3, [r4, #16]
 800c26a:	1c5a      	adds	r2, r3, #1
 800c26c:	6122      	str	r2, [r4, #16]
 800c26e:	2201      	movs	r2, #1
 800c270:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c274:	615a      	str	r2, [r3, #20]
 800c276:	e7be      	b.n	800c1f6 <__gethex+0x362>
 800c278:	6922      	ldr	r2, [r4, #16]
 800c27a:	455a      	cmp	r2, fp
 800c27c:	dd0b      	ble.n	800c296 <__gethex+0x402>
 800c27e:	2101      	movs	r1, #1
 800c280:	4620      	mov	r0, r4
 800c282:	f7ff fd9f 	bl	800bdc4 <rshift>
 800c286:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c28a:	3701      	adds	r7, #1
 800c28c:	42bb      	cmp	r3, r7
 800c28e:	f6ff aee0 	blt.w	800c052 <__gethex+0x1be>
 800c292:	2501      	movs	r5, #1
 800c294:	e7c2      	b.n	800c21c <__gethex+0x388>
 800c296:	f016 061f 	ands.w	r6, r6, #31
 800c29a:	d0fa      	beq.n	800c292 <__gethex+0x3fe>
 800c29c:	4453      	add	r3, sl
 800c29e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c2a2:	f000 fa7b 	bl	800c79c <__hi0bits>
 800c2a6:	f1c6 0620 	rsb	r6, r6, #32
 800c2aa:	42b0      	cmp	r0, r6
 800c2ac:	dbe7      	blt.n	800c27e <__gethex+0x3ea>
 800c2ae:	e7f0      	b.n	800c292 <__gethex+0x3fe>
 800c2b0:	0800de7a 	.word	0x0800de7a

0800c2b4 <L_shift>:
 800c2b4:	f1c2 0208 	rsb	r2, r2, #8
 800c2b8:	0092      	lsls	r2, r2, #2
 800c2ba:	b570      	push	{r4, r5, r6, lr}
 800c2bc:	f1c2 0620 	rsb	r6, r2, #32
 800c2c0:	6843      	ldr	r3, [r0, #4]
 800c2c2:	6804      	ldr	r4, [r0, #0]
 800c2c4:	fa03 f506 	lsl.w	r5, r3, r6
 800c2c8:	432c      	orrs	r4, r5
 800c2ca:	40d3      	lsrs	r3, r2
 800c2cc:	6004      	str	r4, [r0, #0]
 800c2ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800c2d2:	4288      	cmp	r0, r1
 800c2d4:	d3f4      	bcc.n	800c2c0 <L_shift+0xc>
 800c2d6:	bd70      	pop	{r4, r5, r6, pc}

0800c2d8 <__match>:
 800c2d8:	b530      	push	{r4, r5, lr}
 800c2da:	6803      	ldr	r3, [r0, #0]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2e2:	b914      	cbnz	r4, 800c2ea <__match+0x12>
 800c2e4:	6003      	str	r3, [r0, #0]
 800c2e6:	2001      	movs	r0, #1
 800c2e8:	bd30      	pop	{r4, r5, pc}
 800c2ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c2f2:	2d19      	cmp	r5, #25
 800c2f4:	bf98      	it	ls
 800c2f6:	3220      	addls	r2, #32
 800c2f8:	42a2      	cmp	r2, r4
 800c2fa:	d0f0      	beq.n	800c2de <__match+0x6>
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	e7f3      	b.n	800c2e8 <__match+0x10>

0800c300 <__hexnan>:
 800c300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c304:	2500      	movs	r5, #0
 800c306:	680b      	ldr	r3, [r1, #0]
 800c308:	4682      	mov	sl, r0
 800c30a:	115e      	asrs	r6, r3, #5
 800c30c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c310:	f013 031f 	ands.w	r3, r3, #31
 800c314:	bf18      	it	ne
 800c316:	3604      	addne	r6, #4
 800c318:	1f37      	subs	r7, r6, #4
 800c31a:	4690      	mov	r8, r2
 800c31c:	46b9      	mov	r9, r7
 800c31e:	463c      	mov	r4, r7
 800c320:	46ab      	mov	fp, r5
 800c322:	b087      	sub	sp, #28
 800c324:	6801      	ldr	r1, [r0, #0]
 800c326:	9301      	str	r3, [sp, #4]
 800c328:	f846 5c04 	str.w	r5, [r6, #-4]
 800c32c:	9502      	str	r5, [sp, #8]
 800c32e:	784a      	ldrb	r2, [r1, #1]
 800c330:	1c4b      	adds	r3, r1, #1
 800c332:	9303      	str	r3, [sp, #12]
 800c334:	b342      	cbz	r2, 800c388 <__hexnan+0x88>
 800c336:	4610      	mov	r0, r2
 800c338:	9105      	str	r1, [sp, #20]
 800c33a:	9204      	str	r2, [sp, #16]
 800c33c:	f7ff fd95 	bl	800be6a <__hexdig_fun>
 800c340:	2800      	cmp	r0, #0
 800c342:	d151      	bne.n	800c3e8 <__hexnan+0xe8>
 800c344:	9a04      	ldr	r2, [sp, #16]
 800c346:	9905      	ldr	r1, [sp, #20]
 800c348:	2a20      	cmp	r2, #32
 800c34a:	d818      	bhi.n	800c37e <__hexnan+0x7e>
 800c34c:	9b02      	ldr	r3, [sp, #8]
 800c34e:	459b      	cmp	fp, r3
 800c350:	dd13      	ble.n	800c37a <__hexnan+0x7a>
 800c352:	454c      	cmp	r4, r9
 800c354:	d206      	bcs.n	800c364 <__hexnan+0x64>
 800c356:	2d07      	cmp	r5, #7
 800c358:	dc04      	bgt.n	800c364 <__hexnan+0x64>
 800c35a:	462a      	mov	r2, r5
 800c35c:	4649      	mov	r1, r9
 800c35e:	4620      	mov	r0, r4
 800c360:	f7ff ffa8 	bl	800c2b4 <L_shift>
 800c364:	4544      	cmp	r4, r8
 800c366:	d952      	bls.n	800c40e <__hexnan+0x10e>
 800c368:	2300      	movs	r3, #0
 800c36a:	f1a4 0904 	sub.w	r9, r4, #4
 800c36e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c372:	461d      	mov	r5, r3
 800c374:	464c      	mov	r4, r9
 800c376:	f8cd b008 	str.w	fp, [sp, #8]
 800c37a:	9903      	ldr	r1, [sp, #12]
 800c37c:	e7d7      	b.n	800c32e <__hexnan+0x2e>
 800c37e:	2a29      	cmp	r2, #41	@ 0x29
 800c380:	d157      	bne.n	800c432 <__hexnan+0x132>
 800c382:	3102      	adds	r1, #2
 800c384:	f8ca 1000 	str.w	r1, [sl]
 800c388:	f1bb 0f00 	cmp.w	fp, #0
 800c38c:	d051      	beq.n	800c432 <__hexnan+0x132>
 800c38e:	454c      	cmp	r4, r9
 800c390:	d206      	bcs.n	800c3a0 <__hexnan+0xa0>
 800c392:	2d07      	cmp	r5, #7
 800c394:	dc04      	bgt.n	800c3a0 <__hexnan+0xa0>
 800c396:	462a      	mov	r2, r5
 800c398:	4649      	mov	r1, r9
 800c39a:	4620      	mov	r0, r4
 800c39c:	f7ff ff8a 	bl	800c2b4 <L_shift>
 800c3a0:	4544      	cmp	r4, r8
 800c3a2:	d936      	bls.n	800c412 <__hexnan+0x112>
 800c3a4:	4623      	mov	r3, r4
 800c3a6:	f1a8 0204 	sub.w	r2, r8, #4
 800c3aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800c3ae:	429f      	cmp	r7, r3
 800c3b0:	f842 1f04 	str.w	r1, [r2, #4]!
 800c3b4:	d2f9      	bcs.n	800c3aa <__hexnan+0xaa>
 800c3b6:	1b3b      	subs	r3, r7, r4
 800c3b8:	f023 0303 	bic.w	r3, r3, #3
 800c3bc:	3304      	adds	r3, #4
 800c3be:	3401      	adds	r4, #1
 800c3c0:	3e03      	subs	r6, #3
 800c3c2:	42b4      	cmp	r4, r6
 800c3c4:	bf88      	it	hi
 800c3c6:	2304      	movhi	r3, #4
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	4443      	add	r3, r8
 800c3cc:	f843 2b04 	str.w	r2, [r3], #4
 800c3d0:	429f      	cmp	r7, r3
 800c3d2:	d2fb      	bcs.n	800c3cc <__hexnan+0xcc>
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	b91b      	cbnz	r3, 800c3e0 <__hexnan+0xe0>
 800c3d8:	4547      	cmp	r7, r8
 800c3da:	d128      	bne.n	800c42e <__hexnan+0x12e>
 800c3dc:	2301      	movs	r3, #1
 800c3de:	603b      	str	r3, [r7, #0]
 800c3e0:	2005      	movs	r0, #5
 800c3e2:	b007      	add	sp, #28
 800c3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e8:	3501      	adds	r5, #1
 800c3ea:	2d08      	cmp	r5, #8
 800c3ec:	f10b 0b01 	add.w	fp, fp, #1
 800c3f0:	dd06      	ble.n	800c400 <__hexnan+0x100>
 800c3f2:	4544      	cmp	r4, r8
 800c3f4:	d9c1      	bls.n	800c37a <__hexnan+0x7a>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	2501      	movs	r5, #1
 800c3fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800c3fe:	3c04      	subs	r4, #4
 800c400:	6822      	ldr	r2, [r4, #0]
 800c402:	f000 000f 	and.w	r0, r0, #15
 800c406:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c40a:	6020      	str	r0, [r4, #0]
 800c40c:	e7b5      	b.n	800c37a <__hexnan+0x7a>
 800c40e:	2508      	movs	r5, #8
 800c410:	e7b3      	b.n	800c37a <__hexnan+0x7a>
 800c412:	9b01      	ldr	r3, [sp, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d0dd      	beq.n	800c3d4 <__hexnan+0xd4>
 800c418:	f04f 32ff 	mov.w	r2, #4294967295
 800c41c:	f1c3 0320 	rsb	r3, r3, #32
 800c420:	40da      	lsrs	r2, r3
 800c422:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c426:	4013      	ands	r3, r2
 800c428:	f846 3c04 	str.w	r3, [r6, #-4]
 800c42c:	e7d2      	b.n	800c3d4 <__hexnan+0xd4>
 800c42e:	3f04      	subs	r7, #4
 800c430:	e7d0      	b.n	800c3d4 <__hexnan+0xd4>
 800c432:	2004      	movs	r0, #4
 800c434:	e7d5      	b.n	800c3e2 <__hexnan+0xe2>
	...

0800c438 <sbrk_aligned>:
 800c438:	b570      	push	{r4, r5, r6, lr}
 800c43a:	4e0f      	ldr	r6, [pc, #60]	@ (800c478 <sbrk_aligned+0x40>)
 800c43c:	460c      	mov	r4, r1
 800c43e:	6831      	ldr	r1, [r6, #0]
 800c440:	4605      	mov	r5, r0
 800c442:	b911      	cbnz	r1, 800c44a <sbrk_aligned+0x12>
 800c444:	f001 f8f4 	bl	800d630 <_sbrk_r>
 800c448:	6030      	str	r0, [r6, #0]
 800c44a:	4621      	mov	r1, r4
 800c44c:	4628      	mov	r0, r5
 800c44e:	f001 f8ef 	bl	800d630 <_sbrk_r>
 800c452:	1c43      	adds	r3, r0, #1
 800c454:	d103      	bne.n	800c45e <sbrk_aligned+0x26>
 800c456:	f04f 34ff 	mov.w	r4, #4294967295
 800c45a:	4620      	mov	r0, r4
 800c45c:	bd70      	pop	{r4, r5, r6, pc}
 800c45e:	1cc4      	adds	r4, r0, #3
 800c460:	f024 0403 	bic.w	r4, r4, #3
 800c464:	42a0      	cmp	r0, r4
 800c466:	d0f8      	beq.n	800c45a <sbrk_aligned+0x22>
 800c468:	1a21      	subs	r1, r4, r0
 800c46a:	4628      	mov	r0, r5
 800c46c:	f001 f8e0 	bl	800d630 <_sbrk_r>
 800c470:	3001      	adds	r0, #1
 800c472:	d1f2      	bne.n	800c45a <sbrk_aligned+0x22>
 800c474:	e7ef      	b.n	800c456 <sbrk_aligned+0x1e>
 800c476:	bf00      	nop
 800c478:	20001bf4 	.word	0x20001bf4

0800c47c <_malloc_r>:
 800c47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c480:	1ccd      	adds	r5, r1, #3
 800c482:	f025 0503 	bic.w	r5, r5, #3
 800c486:	3508      	adds	r5, #8
 800c488:	2d0c      	cmp	r5, #12
 800c48a:	bf38      	it	cc
 800c48c:	250c      	movcc	r5, #12
 800c48e:	2d00      	cmp	r5, #0
 800c490:	4606      	mov	r6, r0
 800c492:	db01      	blt.n	800c498 <_malloc_r+0x1c>
 800c494:	42a9      	cmp	r1, r5
 800c496:	d904      	bls.n	800c4a2 <_malloc_r+0x26>
 800c498:	230c      	movs	r3, #12
 800c49a:	6033      	str	r3, [r6, #0]
 800c49c:	2000      	movs	r0, #0
 800c49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c578 <_malloc_r+0xfc>
 800c4a6:	f000 f87b 	bl	800c5a0 <__malloc_lock>
 800c4aa:	f8d8 3000 	ldr.w	r3, [r8]
 800c4ae:	461c      	mov	r4, r3
 800c4b0:	bb44      	cbnz	r4, 800c504 <_malloc_r+0x88>
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	f7ff ffbf 	bl	800c438 <sbrk_aligned>
 800c4ba:	1c43      	adds	r3, r0, #1
 800c4bc:	4604      	mov	r4, r0
 800c4be:	d158      	bne.n	800c572 <_malloc_r+0xf6>
 800c4c0:	f8d8 4000 	ldr.w	r4, [r8]
 800c4c4:	4627      	mov	r7, r4
 800c4c6:	2f00      	cmp	r7, #0
 800c4c8:	d143      	bne.n	800c552 <_malloc_r+0xd6>
 800c4ca:	2c00      	cmp	r4, #0
 800c4cc:	d04b      	beq.n	800c566 <_malloc_r+0xea>
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	4639      	mov	r1, r7
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	eb04 0903 	add.w	r9, r4, r3
 800c4d8:	f001 f8aa 	bl	800d630 <_sbrk_r>
 800c4dc:	4581      	cmp	r9, r0
 800c4de:	d142      	bne.n	800c566 <_malloc_r+0xea>
 800c4e0:	6821      	ldr	r1, [r4, #0]
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	1a6d      	subs	r5, r5, r1
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	f7ff ffa6 	bl	800c438 <sbrk_aligned>
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	d03a      	beq.n	800c566 <_malloc_r+0xea>
 800c4f0:	6823      	ldr	r3, [r4, #0]
 800c4f2:	442b      	add	r3, r5
 800c4f4:	6023      	str	r3, [r4, #0]
 800c4f6:	f8d8 3000 	ldr.w	r3, [r8]
 800c4fa:	685a      	ldr	r2, [r3, #4]
 800c4fc:	bb62      	cbnz	r2, 800c558 <_malloc_r+0xdc>
 800c4fe:	f8c8 7000 	str.w	r7, [r8]
 800c502:	e00f      	b.n	800c524 <_malloc_r+0xa8>
 800c504:	6822      	ldr	r2, [r4, #0]
 800c506:	1b52      	subs	r2, r2, r5
 800c508:	d420      	bmi.n	800c54c <_malloc_r+0xd0>
 800c50a:	2a0b      	cmp	r2, #11
 800c50c:	d917      	bls.n	800c53e <_malloc_r+0xc2>
 800c50e:	1961      	adds	r1, r4, r5
 800c510:	42a3      	cmp	r3, r4
 800c512:	6025      	str	r5, [r4, #0]
 800c514:	bf18      	it	ne
 800c516:	6059      	strne	r1, [r3, #4]
 800c518:	6863      	ldr	r3, [r4, #4]
 800c51a:	bf08      	it	eq
 800c51c:	f8c8 1000 	streq.w	r1, [r8]
 800c520:	5162      	str	r2, [r4, r5]
 800c522:	604b      	str	r3, [r1, #4]
 800c524:	4630      	mov	r0, r6
 800c526:	f000 f841 	bl	800c5ac <__malloc_unlock>
 800c52a:	f104 000b 	add.w	r0, r4, #11
 800c52e:	1d23      	adds	r3, r4, #4
 800c530:	f020 0007 	bic.w	r0, r0, #7
 800c534:	1ac2      	subs	r2, r0, r3
 800c536:	bf1c      	itt	ne
 800c538:	1a1b      	subne	r3, r3, r0
 800c53a:	50a3      	strne	r3, [r4, r2]
 800c53c:	e7af      	b.n	800c49e <_malloc_r+0x22>
 800c53e:	6862      	ldr	r2, [r4, #4]
 800c540:	42a3      	cmp	r3, r4
 800c542:	bf0c      	ite	eq
 800c544:	f8c8 2000 	streq.w	r2, [r8]
 800c548:	605a      	strne	r2, [r3, #4]
 800c54a:	e7eb      	b.n	800c524 <_malloc_r+0xa8>
 800c54c:	4623      	mov	r3, r4
 800c54e:	6864      	ldr	r4, [r4, #4]
 800c550:	e7ae      	b.n	800c4b0 <_malloc_r+0x34>
 800c552:	463c      	mov	r4, r7
 800c554:	687f      	ldr	r7, [r7, #4]
 800c556:	e7b6      	b.n	800c4c6 <_malloc_r+0x4a>
 800c558:	461a      	mov	r2, r3
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	42a3      	cmp	r3, r4
 800c55e:	d1fb      	bne.n	800c558 <_malloc_r+0xdc>
 800c560:	2300      	movs	r3, #0
 800c562:	6053      	str	r3, [r2, #4]
 800c564:	e7de      	b.n	800c524 <_malloc_r+0xa8>
 800c566:	230c      	movs	r3, #12
 800c568:	4630      	mov	r0, r6
 800c56a:	6033      	str	r3, [r6, #0]
 800c56c:	f000 f81e 	bl	800c5ac <__malloc_unlock>
 800c570:	e794      	b.n	800c49c <_malloc_r+0x20>
 800c572:	6005      	str	r5, [r0, #0]
 800c574:	e7d6      	b.n	800c524 <_malloc_r+0xa8>
 800c576:	bf00      	nop
 800c578:	20001bf8 	.word	0x20001bf8

0800c57c <__ascii_mbtowc>:
 800c57c:	b082      	sub	sp, #8
 800c57e:	b901      	cbnz	r1, 800c582 <__ascii_mbtowc+0x6>
 800c580:	a901      	add	r1, sp, #4
 800c582:	b142      	cbz	r2, 800c596 <__ascii_mbtowc+0x1a>
 800c584:	b14b      	cbz	r3, 800c59a <__ascii_mbtowc+0x1e>
 800c586:	7813      	ldrb	r3, [r2, #0]
 800c588:	600b      	str	r3, [r1, #0]
 800c58a:	7812      	ldrb	r2, [r2, #0]
 800c58c:	1e10      	subs	r0, r2, #0
 800c58e:	bf18      	it	ne
 800c590:	2001      	movne	r0, #1
 800c592:	b002      	add	sp, #8
 800c594:	4770      	bx	lr
 800c596:	4610      	mov	r0, r2
 800c598:	e7fb      	b.n	800c592 <__ascii_mbtowc+0x16>
 800c59a:	f06f 0001 	mvn.w	r0, #1
 800c59e:	e7f8      	b.n	800c592 <__ascii_mbtowc+0x16>

0800c5a0 <__malloc_lock>:
 800c5a0:	4801      	ldr	r0, [pc, #4]	@ (800c5a8 <__malloc_lock+0x8>)
 800c5a2:	f7ff bba4 	b.w	800bcee <__retarget_lock_acquire_recursive>
 800c5a6:	bf00      	nop
 800c5a8:	20001bf0 	.word	0x20001bf0

0800c5ac <__malloc_unlock>:
 800c5ac:	4801      	ldr	r0, [pc, #4]	@ (800c5b4 <__malloc_unlock+0x8>)
 800c5ae:	f7ff bb9f 	b.w	800bcf0 <__retarget_lock_release_recursive>
 800c5b2:	bf00      	nop
 800c5b4:	20001bf0 	.word	0x20001bf0

0800c5b8 <_Balloc>:
 800c5b8:	b570      	push	{r4, r5, r6, lr}
 800c5ba:	69c6      	ldr	r6, [r0, #28]
 800c5bc:	4604      	mov	r4, r0
 800c5be:	460d      	mov	r5, r1
 800c5c0:	b976      	cbnz	r6, 800c5e0 <_Balloc+0x28>
 800c5c2:	2010      	movs	r0, #16
 800c5c4:	f001 f884 	bl	800d6d0 <malloc>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	61e0      	str	r0, [r4, #28]
 800c5cc:	b920      	cbnz	r0, 800c5d8 <_Balloc+0x20>
 800c5ce:	216b      	movs	r1, #107	@ 0x6b
 800c5d0:	4b17      	ldr	r3, [pc, #92]	@ (800c630 <_Balloc+0x78>)
 800c5d2:	4818      	ldr	r0, [pc, #96]	@ (800c634 <_Balloc+0x7c>)
 800c5d4:	f001 f84a 	bl	800d66c <__assert_func>
 800c5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5dc:	6006      	str	r6, [r0, #0]
 800c5de:	60c6      	str	r6, [r0, #12]
 800c5e0:	69e6      	ldr	r6, [r4, #28]
 800c5e2:	68f3      	ldr	r3, [r6, #12]
 800c5e4:	b183      	cbz	r3, 800c608 <_Balloc+0x50>
 800c5e6:	69e3      	ldr	r3, [r4, #28]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5ee:	b9b8      	cbnz	r0, 800c620 <_Balloc+0x68>
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	fa01 f605 	lsl.w	r6, r1, r5
 800c5f6:	1d72      	adds	r2, r6, #5
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	0092      	lsls	r2, r2, #2
 800c5fc:	f001 f854 	bl	800d6a8 <_calloc_r>
 800c600:	b160      	cbz	r0, 800c61c <_Balloc+0x64>
 800c602:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c606:	e00e      	b.n	800c626 <_Balloc+0x6e>
 800c608:	2221      	movs	r2, #33	@ 0x21
 800c60a:	2104      	movs	r1, #4
 800c60c:	4620      	mov	r0, r4
 800c60e:	f001 f84b 	bl	800d6a8 <_calloc_r>
 800c612:	69e3      	ldr	r3, [r4, #28]
 800c614:	60f0      	str	r0, [r6, #12]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1e4      	bne.n	800c5e6 <_Balloc+0x2e>
 800c61c:	2000      	movs	r0, #0
 800c61e:	bd70      	pop	{r4, r5, r6, pc}
 800c620:	6802      	ldr	r2, [r0, #0]
 800c622:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c626:	2300      	movs	r3, #0
 800c628:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c62c:	e7f7      	b.n	800c61e <_Balloc+0x66>
 800c62e:	bf00      	nop
 800c630:	0800deeb 	.word	0x0800deeb
 800c634:	0800df02 	.word	0x0800df02

0800c638 <_Bfree>:
 800c638:	b570      	push	{r4, r5, r6, lr}
 800c63a:	69c6      	ldr	r6, [r0, #28]
 800c63c:	4605      	mov	r5, r0
 800c63e:	460c      	mov	r4, r1
 800c640:	b976      	cbnz	r6, 800c660 <_Bfree+0x28>
 800c642:	2010      	movs	r0, #16
 800c644:	f001 f844 	bl	800d6d0 <malloc>
 800c648:	4602      	mov	r2, r0
 800c64a:	61e8      	str	r0, [r5, #28]
 800c64c:	b920      	cbnz	r0, 800c658 <_Bfree+0x20>
 800c64e:	218f      	movs	r1, #143	@ 0x8f
 800c650:	4b08      	ldr	r3, [pc, #32]	@ (800c674 <_Bfree+0x3c>)
 800c652:	4809      	ldr	r0, [pc, #36]	@ (800c678 <_Bfree+0x40>)
 800c654:	f001 f80a 	bl	800d66c <__assert_func>
 800c658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c65c:	6006      	str	r6, [r0, #0]
 800c65e:	60c6      	str	r6, [r0, #12]
 800c660:	b13c      	cbz	r4, 800c672 <_Bfree+0x3a>
 800c662:	69eb      	ldr	r3, [r5, #28]
 800c664:	6862      	ldr	r2, [r4, #4]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c66c:	6021      	str	r1, [r4, #0]
 800c66e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c672:	bd70      	pop	{r4, r5, r6, pc}
 800c674:	0800deeb 	.word	0x0800deeb
 800c678:	0800df02 	.word	0x0800df02

0800c67c <__multadd>:
 800c67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c680:	4607      	mov	r7, r0
 800c682:	460c      	mov	r4, r1
 800c684:	461e      	mov	r6, r3
 800c686:	2000      	movs	r0, #0
 800c688:	690d      	ldr	r5, [r1, #16]
 800c68a:	f101 0c14 	add.w	ip, r1, #20
 800c68e:	f8dc 3000 	ldr.w	r3, [ip]
 800c692:	3001      	adds	r0, #1
 800c694:	b299      	uxth	r1, r3
 800c696:	fb02 6101 	mla	r1, r2, r1, r6
 800c69a:	0c1e      	lsrs	r6, r3, #16
 800c69c:	0c0b      	lsrs	r3, r1, #16
 800c69e:	fb02 3306 	mla	r3, r2, r6, r3
 800c6a2:	b289      	uxth	r1, r1
 800c6a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c6a8:	4285      	cmp	r5, r0
 800c6aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c6ae:	f84c 1b04 	str.w	r1, [ip], #4
 800c6b2:	dcec      	bgt.n	800c68e <__multadd+0x12>
 800c6b4:	b30e      	cbz	r6, 800c6fa <__multadd+0x7e>
 800c6b6:	68a3      	ldr	r3, [r4, #8]
 800c6b8:	42ab      	cmp	r3, r5
 800c6ba:	dc19      	bgt.n	800c6f0 <__multadd+0x74>
 800c6bc:	6861      	ldr	r1, [r4, #4]
 800c6be:	4638      	mov	r0, r7
 800c6c0:	3101      	adds	r1, #1
 800c6c2:	f7ff ff79 	bl	800c5b8 <_Balloc>
 800c6c6:	4680      	mov	r8, r0
 800c6c8:	b928      	cbnz	r0, 800c6d6 <__multadd+0x5a>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	21ba      	movs	r1, #186	@ 0xba
 800c6ce:	4b0c      	ldr	r3, [pc, #48]	@ (800c700 <__multadd+0x84>)
 800c6d0:	480c      	ldr	r0, [pc, #48]	@ (800c704 <__multadd+0x88>)
 800c6d2:	f000 ffcb 	bl	800d66c <__assert_func>
 800c6d6:	6922      	ldr	r2, [r4, #16]
 800c6d8:	f104 010c 	add.w	r1, r4, #12
 800c6dc:	3202      	adds	r2, #2
 800c6de:	0092      	lsls	r2, r2, #2
 800c6e0:	300c      	adds	r0, #12
 800c6e2:	f7ff fb0e 	bl	800bd02 <memcpy>
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	4638      	mov	r0, r7
 800c6ea:	f7ff ffa5 	bl	800c638 <_Bfree>
 800c6ee:	4644      	mov	r4, r8
 800c6f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6f4:	3501      	adds	r5, #1
 800c6f6:	615e      	str	r6, [r3, #20]
 800c6f8:	6125      	str	r5, [r4, #16]
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c700:	0800de7a 	.word	0x0800de7a
 800c704:	0800df02 	.word	0x0800df02

0800c708 <__s2b>:
 800c708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c70c:	4615      	mov	r5, r2
 800c70e:	2209      	movs	r2, #9
 800c710:	461f      	mov	r7, r3
 800c712:	3308      	adds	r3, #8
 800c714:	460c      	mov	r4, r1
 800c716:	fb93 f3f2 	sdiv	r3, r3, r2
 800c71a:	4606      	mov	r6, r0
 800c71c:	2201      	movs	r2, #1
 800c71e:	2100      	movs	r1, #0
 800c720:	429a      	cmp	r2, r3
 800c722:	db09      	blt.n	800c738 <__s2b+0x30>
 800c724:	4630      	mov	r0, r6
 800c726:	f7ff ff47 	bl	800c5b8 <_Balloc>
 800c72a:	b940      	cbnz	r0, 800c73e <__s2b+0x36>
 800c72c:	4602      	mov	r2, r0
 800c72e:	21d3      	movs	r1, #211	@ 0xd3
 800c730:	4b18      	ldr	r3, [pc, #96]	@ (800c794 <__s2b+0x8c>)
 800c732:	4819      	ldr	r0, [pc, #100]	@ (800c798 <__s2b+0x90>)
 800c734:	f000 ff9a 	bl	800d66c <__assert_func>
 800c738:	0052      	lsls	r2, r2, #1
 800c73a:	3101      	adds	r1, #1
 800c73c:	e7f0      	b.n	800c720 <__s2b+0x18>
 800c73e:	9b08      	ldr	r3, [sp, #32]
 800c740:	2d09      	cmp	r5, #9
 800c742:	6143      	str	r3, [r0, #20]
 800c744:	f04f 0301 	mov.w	r3, #1
 800c748:	6103      	str	r3, [r0, #16]
 800c74a:	dd16      	ble.n	800c77a <__s2b+0x72>
 800c74c:	f104 0909 	add.w	r9, r4, #9
 800c750:	46c8      	mov	r8, r9
 800c752:	442c      	add	r4, r5
 800c754:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c758:	4601      	mov	r1, r0
 800c75a:	220a      	movs	r2, #10
 800c75c:	4630      	mov	r0, r6
 800c75e:	3b30      	subs	r3, #48	@ 0x30
 800c760:	f7ff ff8c 	bl	800c67c <__multadd>
 800c764:	45a0      	cmp	r8, r4
 800c766:	d1f5      	bne.n	800c754 <__s2b+0x4c>
 800c768:	f1a5 0408 	sub.w	r4, r5, #8
 800c76c:	444c      	add	r4, r9
 800c76e:	1b2d      	subs	r5, r5, r4
 800c770:	1963      	adds	r3, r4, r5
 800c772:	42bb      	cmp	r3, r7
 800c774:	db04      	blt.n	800c780 <__s2b+0x78>
 800c776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c77a:	2509      	movs	r5, #9
 800c77c:	340a      	adds	r4, #10
 800c77e:	e7f6      	b.n	800c76e <__s2b+0x66>
 800c780:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c784:	4601      	mov	r1, r0
 800c786:	220a      	movs	r2, #10
 800c788:	4630      	mov	r0, r6
 800c78a:	3b30      	subs	r3, #48	@ 0x30
 800c78c:	f7ff ff76 	bl	800c67c <__multadd>
 800c790:	e7ee      	b.n	800c770 <__s2b+0x68>
 800c792:	bf00      	nop
 800c794:	0800de7a 	.word	0x0800de7a
 800c798:	0800df02 	.word	0x0800df02

0800c79c <__hi0bits>:
 800c79c:	4603      	mov	r3, r0
 800c79e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c7a2:	bf3a      	itte	cc
 800c7a4:	0403      	lslcc	r3, r0, #16
 800c7a6:	2010      	movcc	r0, #16
 800c7a8:	2000      	movcs	r0, #0
 800c7aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c7ae:	bf3c      	itt	cc
 800c7b0:	021b      	lslcc	r3, r3, #8
 800c7b2:	3008      	addcc	r0, #8
 800c7b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7b8:	bf3c      	itt	cc
 800c7ba:	011b      	lslcc	r3, r3, #4
 800c7bc:	3004      	addcc	r0, #4
 800c7be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7c2:	bf3c      	itt	cc
 800c7c4:	009b      	lslcc	r3, r3, #2
 800c7c6:	3002      	addcc	r0, #2
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	db05      	blt.n	800c7d8 <__hi0bits+0x3c>
 800c7cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c7d0:	f100 0001 	add.w	r0, r0, #1
 800c7d4:	bf08      	it	eq
 800c7d6:	2020      	moveq	r0, #32
 800c7d8:	4770      	bx	lr

0800c7da <__lo0bits>:
 800c7da:	6803      	ldr	r3, [r0, #0]
 800c7dc:	4602      	mov	r2, r0
 800c7de:	f013 0007 	ands.w	r0, r3, #7
 800c7e2:	d00b      	beq.n	800c7fc <__lo0bits+0x22>
 800c7e4:	07d9      	lsls	r1, r3, #31
 800c7e6:	d421      	bmi.n	800c82c <__lo0bits+0x52>
 800c7e8:	0798      	lsls	r0, r3, #30
 800c7ea:	bf49      	itett	mi
 800c7ec:	085b      	lsrmi	r3, r3, #1
 800c7ee:	089b      	lsrpl	r3, r3, #2
 800c7f0:	2001      	movmi	r0, #1
 800c7f2:	6013      	strmi	r3, [r2, #0]
 800c7f4:	bf5c      	itt	pl
 800c7f6:	2002      	movpl	r0, #2
 800c7f8:	6013      	strpl	r3, [r2, #0]
 800c7fa:	4770      	bx	lr
 800c7fc:	b299      	uxth	r1, r3
 800c7fe:	b909      	cbnz	r1, 800c804 <__lo0bits+0x2a>
 800c800:	2010      	movs	r0, #16
 800c802:	0c1b      	lsrs	r3, r3, #16
 800c804:	b2d9      	uxtb	r1, r3
 800c806:	b909      	cbnz	r1, 800c80c <__lo0bits+0x32>
 800c808:	3008      	adds	r0, #8
 800c80a:	0a1b      	lsrs	r3, r3, #8
 800c80c:	0719      	lsls	r1, r3, #28
 800c80e:	bf04      	itt	eq
 800c810:	091b      	lsreq	r3, r3, #4
 800c812:	3004      	addeq	r0, #4
 800c814:	0799      	lsls	r1, r3, #30
 800c816:	bf04      	itt	eq
 800c818:	089b      	lsreq	r3, r3, #2
 800c81a:	3002      	addeq	r0, #2
 800c81c:	07d9      	lsls	r1, r3, #31
 800c81e:	d403      	bmi.n	800c828 <__lo0bits+0x4e>
 800c820:	085b      	lsrs	r3, r3, #1
 800c822:	f100 0001 	add.w	r0, r0, #1
 800c826:	d003      	beq.n	800c830 <__lo0bits+0x56>
 800c828:	6013      	str	r3, [r2, #0]
 800c82a:	4770      	bx	lr
 800c82c:	2000      	movs	r0, #0
 800c82e:	4770      	bx	lr
 800c830:	2020      	movs	r0, #32
 800c832:	4770      	bx	lr

0800c834 <__i2b>:
 800c834:	b510      	push	{r4, lr}
 800c836:	460c      	mov	r4, r1
 800c838:	2101      	movs	r1, #1
 800c83a:	f7ff febd 	bl	800c5b8 <_Balloc>
 800c83e:	4602      	mov	r2, r0
 800c840:	b928      	cbnz	r0, 800c84e <__i2b+0x1a>
 800c842:	f240 1145 	movw	r1, #325	@ 0x145
 800c846:	4b04      	ldr	r3, [pc, #16]	@ (800c858 <__i2b+0x24>)
 800c848:	4804      	ldr	r0, [pc, #16]	@ (800c85c <__i2b+0x28>)
 800c84a:	f000 ff0f 	bl	800d66c <__assert_func>
 800c84e:	2301      	movs	r3, #1
 800c850:	6144      	str	r4, [r0, #20]
 800c852:	6103      	str	r3, [r0, #16]
 800c854:	bd10      	pop	{r4, pc}
 800c856:	bf00      	nop
 800c858:	0800de7a 	.word	0x0800de7a
 800c85c:	0800df02 	.word	0x0800df02

0800c860 <__multiply>:
 800c860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c864:	4617      	mov	r7, r2
 800c866:	690a      	ldr	r2, [r1, #16]
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	4689      	mov	r9, r1
 800c86c:	429a      	cmp	r2, r3
 800c86e:	bfa2      	ittt	ge
 800c870:	463b      	movge	r3, r7
 800c872:	460f      	movge	r7, r1
 800c874:	4699      	movge	r9, r3
 800c876:	693d      	ldr	r5, [r7, #16]
 800c878:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	6879      	ldr	r1, [r7, #4]
 800c880:	eb05 060a 	add.w	r6, r5, sl
 800c884:	42b3      	cmp	r3, r6
 800c886:	b085      	sub	sp, #20
 800c888:	bfb8      	it	lt
 800c88a:	3101      	addlt	r1, #1
 800c88c:	f7ff fe94 	bl	800c5b8 <_Balloc>
 800c890:	b930      	cbnz	r0, 800c8a0 <__multiply+0x40>
 800c892:	4602      	mov	r2, r0
 800c894:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c898:	4b40      	ldr	r3, [pc, #256]	@ (800c99c <__multiply+0x13c>)
 800c89a:	4841      	ldr	r0, [pc, #260]	@ (800c9a0 <__multiply+0x140>)
 800c89c:	f000 fee6 	bl	800d66c <__assert_func>
 800c8a0:	f100 0414 	add.w	r4, r0, #20
 800c8a4:	4623      	mov	r3, r4
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c8ac:	4573      	cmp	r3, lr
 800c8ae:	d320      	bcc.n	800c8f2 <__multiply+0x92>
 800c8b0:	f107 0814 	add.w	r8, r7, #20
 800c8b4:	f109 0114 	add.w	r1, r9, #20
 800c8b8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c8bc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c8c0:	9302      	str	r3, [sp, #8]
 800c8c2:	1beb      	subs	r3, r5, r7
 800c8c4:	3b15      	subs	r3, #21
 800c8c6:	f023 0303 	bic.w	r3, r3, #3
 800c8ca:	3304      	adds	r3, #4
 800c8cc:	3715      	adds	r7, #21
 800c8ce:	42bd      	cmp	r5, r7
 800c8d0:	bf38      	it	cc
 800c8d2:	2304      	movcc	r3, #4
 800c8d4:	9301      	str	r3, [sp, #4]
 800c8d6:	9b02      	ldr	r3, [sp, #8]
 800c8d8:	9103      	str	r1, [sp, #12]
 800c8da:	428b      	cmp	r3, r1
 800c8dc:	d80c      	bhi.n	800c8f8 <__multiply+0x98>
 800c8de:	2e00      	cmp	r6, #0
 800c8e0:	dd03      	ble.n	800c8ea <__multiply+0x8a>
 800c8e2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d055      	beq.n	800c996 <__multiply+0x136>
 800c8ea:	6106      	str	r6, [r0, #16]
 800c8ec:	b005      	add	sp, #20
 800c8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f2:	f843 2b04 	str.w	r2, [r3], #4
 800c8f6:	e7d9      	b.n	800c8ac <__multiply+0x4c>
 800c8f8:	f8b1 a000 	ldrh.w	sl, [r1]
 800c8fc:	f1ba 0f00 	cmp.w	sl, #0
 800c900:	d01f      	beq.n	800c942 <__multiply+0xe2>
 800c902:	46c4      	mov	ip, r8
 800c904:	46a1      	mov	r9, r4
 800c906:	2700      	movs	r7, #0
 800c908:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c90c:	f8d9 3000 	ldr.w	r3, [r9]
 800c910:	fa1f fb82 	uxth.w	fp, r2
 800c914:	b29b      	uxth	r3, r3
 800c916:	fb0a 330b 	mla	r3, sl, fp, r3
 800c91a:	443b      	add	r3, r7
 800c91c:	f8d9 7000 	ldr.w	r7, [r9]
 800c920:	0c12      	lsrs	r2, r2, #16
 800c922:	0c3f      	lsrs	r7, r7, #16
 800c924:	fb0a 7202 	mla	r2, sl, r2, r7
 800c928:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c932:	4565      	cmp	r5, ip
 800c934:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c938:	f849 3b04 	str.w	r3, [r9], #4
 800c93c:	d8e4      	bhi.n	800c908 <__multiply+0xa8>
 800c93e:	9b01      	ldr	r3, [sp, #4]
 800c940:	50e7      	str	r7, [r4, r3]
 800c942:	9b03      	ldr	r3, [sp, #12]
 800c944:	3104      	adds	r1, #4
 800c946:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c94a:	f1b9 0f00 	cmp.w	r9, #0
 800c94e:	d020      	beq.n	800c992 <__multiply+0x132>
 800c950:	4647      	mov	r7, r8
 800c952:	46a4      	mov	ip, r4
 800c954:	f04f 0a00 	mov.w	sl, #0
 800c958:	6823      	ldr	r3, [r4, #0]
 800c95a:	f8b7 b000 	ldrh.w	fp, [r7]
 800c95e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c962:	b29b      	uxth	r3, r3
 800c964:	fb09 220b 	mla	r2, r9, fp, r2
 800c968:	4452      	add	r2, sl
 800c96a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c96e:	f84c 3b04 	str.w	r3, [ip], #4
 800c972:	f857 3b04 	ldr.w	r3, [r7], #4
 800c976:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c97a:	f8bc 3000 	ldrh.w	r3, [ip]
 800c97e:	42bd      	cmp	r5, r7
 800c980:	fb09 330a 	mla	r3, r9, sl, r3
 800c984:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c988:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c98c:	d8e5      	bhi.n	800c95a <__multiply+0xfa>
 800c98e:	9a01      	ldr	r2, [sp, #4]
 800c990:	50a3      	str	r3, [r4, r2]
 800c992:	3404      	adds	r4, #4
 800c994:	e79f      	b.n	800c8d6 <__multiply+0x76>
 800c996:	3e01      	subs	r6, #1
 800c998:	e7a1      	b.n	800c8de <__multiply+0x7e>
 800c99a:	bf00      	nop
 800c99c:	0800de7a 	.word	0x0800de7a
 800c9a0:	0800df02 	.word	0x0800df02

0800c9a4 <__pow5mult>:
 800c9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9a8:	4615      	mov	r5, r2
 800c9aa:	f012 0203 	ands.w	r2, r2, #3
 800c9ae:	4607      	mov	r7, r0
 800c9b0:	460e      	mov	r6, r1
 800c9b2:	d007      	beq.n	800c9c4 <__pow5mult+0x20>
 800c9b4:	4c25      	ldr	r4, [pc, #148]	@ (800ca4c <__pow5mult+0xa8>)
 800c9b6:	3a01      	subs	r2, #1
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9be:	f7ff fe5d 	bl	800c67c <__multadd>
 800c9c2:	4606      	mov	r6, r0
 800c9c4:	10ad      	asrs	r5, r5, #2
 800c9c6:	d03d      	beq.n	800ca44 <__pow5mult+0xa0>
 800c9c8:	69fc      	ldr	r4, [r7, #28]
 800c9ca:	b97c      	cbnz	r4, 800c9ec <__pow5mult+0x48>
 800c9cc:	2010      	movs	r0, #16
 800c9ce:	f000 fe7f 	bl	800d6d0 <malloc>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	61f8      	str	r0, [r7, #28]
 800c9d6:	b928      	cbnz	r0, 800c9e4 <__pow5mult+0x40>
 800c9d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c9dc:	4b1c      	ldr	r3, [pc, #112]	@ (800ca50 <__pow5mult+0xac>)
 800c9de:	481d      	ldr	r0, [pc, #116]	@ (800ca54 <__pow5mult+0xb0>)
 800c9e0:	f000 fe44 	bl	800d66c <__assert_func>
 800c9e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9e8:	6004      	str	r4, [r0, #0]
 800c9ea:	60c4      	str	r4, [r0, #12]
 800c9ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c9f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9f4:	b94c      	cbnz	r4, 800ca0a <__pow5mult+0x66>
 800c9f6:	f240 2171 	movw	r1, #625	@ 0x271
 800c9fa:	4638      	mov	r0, r7
 800c9fc:	f7ff ff1a 	bl	800c834 <__i2b>
 800ca00:	2300      	movs	r3, #0
 800ca02:	4604      	mov	r4, r0
 800ca04:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca08:	6003      	str	r3, [r0, #0]
 800ca0a:	f04f 0900 	mov.w	r9, #0
 800ca0e:	07eb      	lsls	r3, r5, #31
 800ca10:	d50a      	bpl.n	800ca28 <__pow5mult+0x84>
 800ca12:	4631      	mov	r1, r6
 800ca14:	4622      	mov	r2, r4
 800ca16:	4638      	mov	r0, r7
 800ca18:	f7ff ff22 	bl	800c860 <__multiply>
 800ca1c:	4680      	mov	r8, r0
 800ca1e:	4631      	mov	r1, r6
 800ca20:	4638      	mov	r0, r7
 800ca22:	f7ff fe09 	bl	800c638 <_Bfree>
 800ca26:	4646      	mov	r6, r8
 800ca28:	106d      	asrs	r5, r5, #1
 800ca2a:	d00b      	beq.n	800ca44 <__pow5mult+0xa0>
 800ca2c:	6820      	ldr	r0, [r4, #0]
 800ca2e:	b938      	cbnz	r0, 800ca40 <__pow5mult+0x9c>
 800ca30:	4622      	mov	r2, r4
 800ca32:	4621      	mov	r1, r4
 800ca34:	4638      	mov	r0, r7
 800ca36:	f7ff ff13 	bl	800c860 <__multiply>
 800ca3a:	6020      	str	r0, [r4, #0]
 800ca3c:	f8c0 9000 	str.w	r9, [r0]
 800ca40:	4604      	mov	r4, r0
 800ca42:	e7e4      	b.n	800ca0e <__pow5mult+0x6a>
 800ca44:	4630      	mov	r0, r6
 800ca46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca4a:	bf00      	nop
 800ca4c:	0800e15c 	.word	0x0800e15c
 800ca50:	0800deeb 	.word	0x0800deeb
 800ca54:	0800df02 	.word	0x0800df02

0800ca58 <__lshift>:
 800ca58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca5c:	460c      	mov	r4, r1
 800ca5e:	4607      	mov	r7, r0
 800ca60:	4691      	mov	r9, r2
 800ca62:	6923      	ldr	r3, [r4, #16]
 800ca64:	6849      	ldr	r1, [r1, #4]
 800ca66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca6a:	68a3      	ldr	r3, [r4, #8]
 800ca6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca70:	f108 0601 	add.w	r6, r8, #1
 800ca74:	42b3      	cmp	r3, r6
 800ca76:	db0b      	blt.n	800ca90 <__lshift+0x38>
 800ca78:	4638      	mov	r0, r7
 800ca7a:	f7ff fd9d 	bl	800c5b8 <_Balloc>
 800ca7e:	4605      	mov	r5, r0
 800ca80:	b948      	cbnz	r0, 800ca96 <__lshift+0x3e>
 800ca82:	4602      	mov	r2, r0
 800ca84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca88:	4b27      	ldr	r3, [pc, #156]	@ (800cb28 <__lshift+0xd0>)
 800ca8a:	4828      	ldr	r0, [pc, #160]	@ (800cb2c <__lshift+0xd4>)
 800ca8c:	f000 fdee 	bl	800d66c <__assert_func>
 800ca90:	3101      	adds	r1, #1
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	e7ee      	b.n	800ca74 <__lshift+0x1c>
 800ca96:	2300      	movs	r3, #0
 800ca98:	f100 0114 	add.w	r1, r0, #20
 800ca9c:	f100 0210 	add.w	r2, r0, #16
 800caa0:	4618      	mov	r0, r3
 800caa2:	4553      	cmp	r3, sl
 800caa4:	db33      	blt.n	800cb0e <__lshift+0xb6>
 800caa6:	6920      	ldr	r0, [r4, #16]
 800caa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800caac:	f104 0314 	add.w	r3, r4, #20
 800cab0:	f019 091f 	ands.w	r9, r9, #31
 800cab4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cab8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cabc:	d02b      	beq.n	800cb16 <__lshift+0xbe>
 800cabe:	468a      	mov	sl, r1
 800cac0:	2200      	movs	r2, #0
 800cac2:	f1c9 0e20 	rsb	lr, r9, #32
 800cac6:	6818      	ldr	r0, [r3, #0]
 800cac8:	fa00 f009 	lsl.w	r0, r0, r9
 800cacc:	4310      	orrs	r0, r2
 800cace:	f84a 0b04 	str.w	r0, [sl], #4
 800cad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cad6:	459c      	cmp	ip, r3
 800cad8:	fa22 f20e 	lsr.w	r2, r2, lr
 800cadc:	d8f3      	bhi.n	800cac6 <__lshift+0x6e>
 800cade:	ebac 0304 	sub.w	r3, ip, r4
 800cae2:	3b15      	subs	r3, #21
 800cae4:	f023 0303 	bic.w	r3, r3, #3
 800cae8:	3304      	adds	r3, #4
 800caea:	f104 0015 	add.w	r0, r4, #21
 800caee:	4560      	cmp	r0, ip
 800caf0:	bf88      	it	hi
 800caf2:	2304      	movhi	r3, #4
 800caf4:	50ca      	str	r2, [r1, r3]
 800caf6:	b10a      	cbz	r2, 800cafc <__lshift+0xa4>
 800caf8:	f108 0602 	add.w	r6, r8, #2
 800cafc:	3e01      	subs	r6, #1
 800cafe:	4638      	mov	r0, r7
 800cb00:	4621      	mov	r1, r4
 800cb02:	612e      	str	r6, [r5, #16]
 800cb04:	f7ff fd98 	bl	800c638 <_Bfree>
 800cb08:	4628      	mov	r0, r5
 800cb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb12:	3301      	adds	r3, #1
 800cb14:	e7c5      	b.n	800caa2 <__lshift+0x4a>
 800cb16:	3904      	subs	r1, #4
 800cb18:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb1c:	459c      	cmp	ip, r3
 800cb1e:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb22:	d8f9      	bhi.n	800cb18 <__lshift+0xc0>
 800cb24:	e7ea      	b.n	800cafc <__lshift+0xa4>
 800cb26:	bf00      	nop
 800cb28:	0800de7a 	.word	0x0800de7a
 800cb2c:	0800df02 	.word	0x0800df02

0800cb30 <__mcmp>:
 800cb30:	4603      	mov	r3, r0
 800cb32:	690a      	ldr	r2, [r1, #16]
 800cb34:	6900      	ldr	r0, [r0, #16]
 800cb36:	b530      	push	{r4, r5, lr}
 800cb38:	1a80      	subs	r0, r0, r2
 800cb3a:	d10e      	bne.n	800cb5a <__mcmp+0x2a>
 800cb3c:	3314      	adds	r3, #20
 800cb3e:	3114      	adds	r1, #20
 800cb40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb50:	4295      	cmp	r5, r2
 800cb52:	d003      	beq.n	800cb5c <__mcmp+0x2c>
 800cb54:	d205      	bcs.n	800cb62 <__mcmp+0x32>
 800cb56:	f04f 30ff 	mov.w	r0, #4294967295
 800cb5a:	bd30      	pop	{r4, r5, pc}
 800cb5c:	42a3      	cmp	r3, r4
 800cb5e:	d3f3      	bcc.n	800cb48 <__mcmp+0x18>
 800cb60:	e7fb      	b.n	800cb5a <__mcmp+0x2a>
 800cb62:	2001      	movs	r0, #1
 800cb64:	e7f9      	b.n	800cb5a <__mcmp+0x2a>
	...

0800cb68 <__mdiff>:
 800cb68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6c:	4689      	mov	r9, r1
 800cb6e:	4606      	mov	r6, r0
 800cb70:	4611      	mov	r1, r2
 800cb72:	4648      	mov	r0, r9
 800cb74:	4614      	mov	r4, r2
 800cb76:	f7ff ffdb 	bl	800cb30 <__mcmp>
 800cb7a:	1e05      	subs	r5, r0, #0
 800cb7c:	d112      	bne.n	800cba4 <__mdiff+0x3c>
 800cb7e:	4629      	mov	r1, r5
 800cb80:	4630      	mov	r0, r6
 800cb82:	f7ff fd19 	bl	800c5b8 <_Balloc>
 800cb86:	4602      	mov	r2, r0
 800cb88:	b928      	cbnz	r0, 800cb96 <__mdiff+0x2e>
 800cb8a:	f240 2137 	movw	r1, #567	@ 0x237
 800cb8e:	4b3e      	ldr	r3, [pc, #248]	@ (800cc88 <__mdiff+0x120>)
 800cb90:	483e      	ldr	r0, [pc, #248]	@ (800cc8c <__mdiff+0x124>)
 800cb92:	f000 fd6b 	bl	800d66c <__assert_func>
 800cb96:	2301      	movs	r3, #1
 800cb98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	b003      	add	sp, #12
 800cba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba4:	bfbc      	itt	lt
 800cba6:	464b      	movlt	r3, r9
 800cba8:	46a1      	movlt	r9, r4
 800cbaa:	4630      	mov	r0, r6
 800cbac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cbb0:	bfba      	itte	lt
 800cbb2:	461c      	movlt	r4, r3
 800cbb4:	2501      	movlt	r5, #1
 800cbb6:	2500      	movge	r5, #0
 800cbb8:	f7ff fcfe 	bl	800c5b8 <_Balloc>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	b918      	cbnz	r0, 800cbc8 <__mdiff+0x60>
 800cbc0:	f240 2145 	movw	r1, #581	@ 0x245
 800cbc4:	4b30      	ldr	r3, [pc, #192]	@ (800cc88 <__mdiff+0x120>)
 800cbc6:	e7e3      	b.n	800cb90 <__mdiff+0x28>
 800cbc8:	f100 0b14 	add.w	fp, r0, #20
 800cbcc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cbd0:	f109 0310 	add.w	r3, r9, #16
 800cbd4:	60c5      	str	r5, [r0, #12]
 800cbd6:	f04f 0c00 	mov.w	ip, #0
 800cbda:	f109 0514 	add.w	r5, r9, #20
 800cbde:	46d9      	mov	r9, fp
 800cbe0:	6926      	ldr	r6, [r4, #16]
 800cbe2:	f104 0e14 	add.w	lr, r4, #20
 800cbe6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cbea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cbee:	9301      	str	r3, [sp, #4]
 800cbf0:	9b01      	ldr	r3, [sp, #4]
 800cbf2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cbf6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cbfa:	b281      	uxth	r1, r0
 800cbfc:	9301      	str	r3, [sp, #4]
 800cbfe:	fa1f f38a 	uxth.w	r3, sl
 800cc02:	1a5b      	subs	r3, r3, r1
 800cc04:	0c00      	lsrs	r0, r0, #16
 800cc06:	4463      	add	r3, ip
 800cc08:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cc0c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cc16:	4576      	cmp	r6, lr
 800cc18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc1c:	f849 3b04 	str.w	r3, [r9], #4
 800cc20:	d8e6      	bhi.n	800cbf0 <__mdiff+0x88>
 800cc22:	1b33      	subs	r3, r6, r4
 800cc24:	3b15      	subs	r3, #21
 800cc26:	f023 0303 	bic.w	r3, r3, #3
 800cc2a:	3415      	adds	r4, #21
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	42a6      	cmp	r6, r4
 800cc30:	bf38      	it	cc
 800cc32:	2304      	movcc	r3, #4
 800cc34:	441d      	add	r5, r3
 800cc36:	445b      	add	r3, fp
 800cc38:	461e      	mov	r6, r3
 800cc3a:	462c      	mov	r4, r5
 800cc3c:	4544      	cmp	r4, r8
 800cc3e:	d30e      	bcc.n	800cc5e <__mdiff+0xf6>
 800cc40:	f108 0103 	add.w	r1, r8, #3
 800cc44:	1b49      	subs	r1, r1, r5
 800cc46:	f021 0103 	bic.w	r1, r1, #3
 800cc4a:	3d03      	subs	r5, #3
 800cc4c:	45a8      	cmp	r8, r5
 800cc4e:	bf38      	it	cc
 800cc50:	2100      	movcc	r1, #0
 800cc52:	440b      	add	r3, r1
 800cc54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc58:	b199      	cbz	r1, 800cc82 <__mdiff+0x11a>
 800cc5a:	6117      	str	r7, [r2, #16]
 800cc5c:	e79e      	b.n	800cb9c <__mdiff+0x34>
 800cc5e:	46e6      	mov	lr, ip
 800cc60:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc64:	fa1f fc81 	uxth.w	ip, r1
 800cc68:	44f4      	add	ip, lr
 800cc6a:	0c08      	lsrs	r0, r1, #16
 800cc6c:	4471      	add	r1, lr
 800cc6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc72:	b289      	uxth	r1, r1
 800cc74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc7c:	f846 1b04 	str.w	r1, [r6], #4
 800cc80:	e7dc      	b.n	800cc3c <__mdiff+0xd4>
 800cc82:	3f01      	subs	r7, #1
 800cc84:	e7e6      	b.n	800cc54 <__mdiff+0xec>
 800cc86:	bf00      	nop
 800cc88:	0800de7a 	.word	0x0800de7a
 800cc8c:	0800df02 	.word	0x0800df02

0800cc90 <__ulp>:
 800cc90:	4b0e      	ldr	r3, [pc, #56]	@ (800cccc <__ulp+0x3c>)
 800cc92:	400b      	ands	r3, r1
 800cc94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	dc08      	bgt.n	800ccae <__ulp+0x1e>
 800cc9c:	425b      	negs	r3, r3
 800cc9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cca2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cca6:	da04      	bge.n	800ccb2 <__ulp+0x22>
 800cca8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ccac:	4113      	asrs	r3, r2
 800ccae:	2200      	movs	r2, #0
 800ccb0:	e008      	b.n	800ccc4 <__ulp+0x34>
 800ccb2:	f1a2 0314 	sub.w	r3, r2, #20
 800ccb6:	2b1e      	cmp	r3, #30
 800ccb8:	bfd6      	itet	le
 800ccba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ccbe:	2201      	movgt	r2, #1
 800ccc0:	40da      	lsrle	r2, r3
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	4610      	mov	r0, r2
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	7ff00000 	.word	0x7ff00000

0800ccd0 <__b2d>:
 800ccd0:	6902      	ldr	r2, [r0, #16]
 800ccd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd4:	f100 0614 	add.w	r6, r0, #20
 800ccd8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800ccdc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800cce0:	4f1e      	ldr	r7, [pc, #120]	@ (800cd5c <__b2d+0x8c>)
 800cce2:	4620      	mov	r0, r4
 800cce4:	f7ff fd5a 	bl	800c79c <__hi0bits>
 800cce8:	4603      	mov	r3, r0
 800ccea:	f1c0 0020 	rsb	r0, r0, #32
 800ccee:	2b0a      	cmp	r3, #10
 800ccf0:	f1a2 0504 	sub.w	r5, r2, #4
 800ccf4:	6008      	str	r0, [r1, #0]
 800ccf6:	dc12      	bgt.n	800cd1e <__b2d+0x4e>
 800ccf8:	42ae      	cmp	r6, r5
 800ccfa:	bf2c      	ite	cs
 800ccfc:	2200      	movcs	r2, #0
 800ccfe:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800cd02:	f1c3 0c0b 	rsb	ip, r3, #11
 800cd06:	3315      	adds	r3, #21
 800cd08:	fa24 fe0c 	lsr.w	lr, r4, ip
 800cd0c:	fa04 f303 	lsl.w	r3, r4, r3
 800cd10:	fa22 f20c 	lsr.w	r2, r2, ip
 800cd14:	ea4e 0107 	orr.w	r1, lr, r7
 800cd18:	431a      	orrs	r2, r3
 800cd1a:	4610      	mov	r0, r2
 800cd1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd1e:	42ae      	cmp	r6, r5
 800cd20:	bf36      	itet	cc
 800cd22:	f1a2 0508 	subcc.w	r5, r2, #8
 800cd26:	2200      	movcs	r2, #0
 800cd28:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800cd2c:	3b0b      	subs	r3, #11
 800cd2e:	d012      	beq.n	800cd56 <__b2d+0x86>
 800cd30:	f1c3 0720 	rsb	r7, r3, #32
 800cd34:	fa22 f107 	lsr.w	r1, r2, r7
 800cd38:	409c      	lsls	r4, r3
 800cd3a:	430c      	orrs	r4, r1
 800cd3c:	42b5      	cmp	r5, r6
 800cd3e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800cd42:	bf94      	ite	ls
 800cd44:	2400      	movls	r4, #0
 800cd46:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800cd4a:	409a      	lsls	r2, r3
 800cd4c:	40fc      	lsrs	r4, r7
 800cd4e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cd52:	4322      	orrs	r2, r4
 800cd54:	e7e1      	b.n	800cd1a <__b2d+0x4a>
 800cd56:	ea44 0107 	orr.w	r1, r4, r7
 800cd5a:	e7de      	b.n	800cd1a <__b2d+0x4a>
 800cd5c:	3ff00000 	.word	0x3ff00000

0800cd60 <__d2b>:
 800cd60:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800cd64:	2101      	movs	r1, #1
 800cd66:	4690      	mov	r8, r2
 800cd68:	4699      	mov	r9, r3
 800cd6a:	9e08      	ldr	r6, [sp, #32]
 800cd6c:	f7ff fc24 	bl	800c5b8 <_Balloc>
 800cd70:	4604      	mov	r4, r0
 800cd72:	b930      	cbnz	r0, 800cd82 <__d2b+0x22>
 800cd74:	4602      	mov	r2, r0
 800cd76:	f240 310f 	movw	r1, #783	@ 0x30f
 800cd7a:	4b23      	ldr	r3, [pc, #140]	@ (800ce08 <__d2b+0xa8>)
 800cd7c:	4823      	ldr	r0, [pc, #140]	@ (800ce0c <__d2b+0xac>)
 800cd7e:	f000 fc75 	bl	800d66c <__assert_func>
 800cd82:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd8a:	b10d      	cbz	r5, 800cd90 <__d2b+0x30>
 800cd8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd90:	9301      	str	r3, [sp, #4]
 800cd92:	f1b8 0300 	subs.w	r3, r8, #0
 800cd96:	d024      	beq.n	800cde2 <__d2b+0x82>
 800cd98:	4668      	mov	r0, sp
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	f7ff fd1d 	bl	800c7da <__lo0bits>
 800cda0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cda4:	b1d8      	cbz	r0, 800cdde <__d2b+0x7e>
 800cda6:	f1c0 0320 	rsb	r3, r0, #32
 800cdaa:	fa02 f303 	lsl.w	r3, r2, r3
 800cdae:	430b      	orrs	r3, r1
 800cdb0:	40c2      	lsrs	r2, r0
 800cdb2:	6163      	str	r3, [r4, #20]
 800cdb4:	9201      	str	r2, [sp, #4]
 800cdb6:	9b01      	ldr	r3, [sp, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	bf0c      	ite	eq
 800cdbc:	2201      	moveq	r2, #1
 800cdbe:	2202      	movne	r2, #2
 800cdc0:	61a3      	str	r3, [r4, #24]
 800cdc2:	6122      	str	r2, [r4, #16]
 800cdc4:	b1ad      	cbz	r5, 800cdf2 <__d2b+0x92>
 800cdc6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cdca:	4405      	add	r5, r0
 800cdcc:	6035      	str	r5, [r6, #0]
 800cdce:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cdd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd4:	6018      	str	r0, [r3, #0]
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	b002      	add	sp, #8
 800cdda:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800cdde:	6161      	str	r1, [r4, #20]
 800cde0:	e7e9      	b.n	800cdb6 <__d2b+0x56>
 800cde2:	a801      	add	r0, sp, #4
 800cde4:	f7ff fcf9 	bl	800c7da <__lo0bits>
 800cde8:	9b01      	ldr	r3, [sp, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	6163      	str	r3, [r4, #20]
 800cdee:	3020      	adds	r0, #32
 800cdf0:	e7e7      	b.n	800cdc2 <__d2b+0x62>
 800cdf2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cdf6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cdfa:	6030      	str	r0, [r6, #0]
 800cdfc:	6918      	ldr	r0, [r3, #16]
 800cdfe:	f7ff fccd 	bl	800c79c <__hi0bits>
 800ce02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce06:	e7e4      	b.n	800cdd2 <__d2b+0x72>
 800ce08:	0800de7a 	.word	0x0800de7a
 800ce0c:	0800df02 	.word	0x0800df02

0800ce10 <__ratio>:
 800ce10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce14:	b085      	sub	sp, #20
 800ce16:	e9cd 1000 	strd	r1, r0, [sp]
 800ce1a:	a902      	add	r1, sp, #8
 800ce1c:	f7ff ff58 	bl	800ccd0 <__b2d>
 800ce20:	468b      	mov	fp, r1
 800ce22:	4606      	mov	r6, r0
 800ce24:	460f      	mov	r7, r1
 800ce26:	9800      	ldr	r0, [sp, #0]
 800ce28:	a903      	add	r1, sp, #12
 800ce2a:	f7ff ff51 	bl	800ccd0 <__b2d>
 800ce2e:	460d      	mov	r5, r1
 800ce30:	9b01      	ldr	r3, [sp, #4]
 800ce32:	4689      	mov	r9, r1
 800ce34:	6919      	ldr	r1, [r3, #16]
 800ce36:	9b00      	ldr	r3, [sp, #0]
 800ce38:	4604      	mov	r4, r0
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	1ac9      	subs	r1, r1, r3
 800ce40:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ce44:	1a9b      	subs	r3, r3, r2
 800ce46:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	bfcd      	iteet	gt
 800ce4e:	463a      	movgt	r2, r7
 800ce50:	462a      	movle	r2, r5
 800ce52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ce56:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ce5a:	bfd8      	it	le
 800ce5c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ce60:	464b      	mov	r3, r9
 800ce62:	4622      	mov	r2, r4
 800ce64:	4659      	mov	r1, fp
 800ce66:	f7f8 fc6b 	bl	8005740 <__aeabi_ddiv>
 800ce6a:	b005      	add	sp, #20
 800ce6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce70 <__copybits>:
 800ce70:	3901      	subs	r1, #1
 800ce72:	b570      	push	{r4, r5, r6, lr}
 800ce74:	1149      	asrs	r1, r1, #5
 800ce76:	6914      	ldr	r4, [r2, #16]
 800ce78:	3101      	adds	r1, #1
 800ce7a:	f102 0314 	add.w	r3, r2, #20
 800ce7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ce86:	1f05      	subs	r5, r0, #4
 800ce88:	42a3      	cmp	r3, r4
 800ce8a:	d30c      	bcc.n	800cea6 <__copybits+0x36>
 800ce8c:	1aa3      	subs	r3, r4, r2
 800ce8e:	3b11      	subs	r3, #17
 800ce90:	f023 0303 	bic.w	r3, r3, #3
 800ce94:	3211      	adds	r2, #17
 800ce96:	42a2      	cmp	r2, r4
 800ce98:	bf88      	it	hi
 800ce9a:	2300      	movhi	r3, #0
 800ce9c:	4418      	add	r0, r3
 800ce9e:	2300      	movs	r3, #0
 800cea0:	4288      	cmp	r0, r1
 800cea2:	d305      	bcc.n	800ceb0 <__copybits+0x40>
 800cea4:	bd70      	pop	{r4, r5, r6, pc}
 800cea6:	f853 6b04 	ldr.w	r6, [r3], #4
 800ceaa:	f845 6f04 	str.w	r6, [r5, #4]!
 800ceae:	e7eb      	b.n	800ce88 <__copybits+0x18>
 800ceb0:	f840 3b04 	str.w	r3, [r0], #4
 800ceb4:	e7f4      	b.n	800cea0 <__copybits+0x30>

0800ceb6 <__any_on>:
 800ceb6:	f100 0214 	add.w	r2, r0, #20
 800ceba:	6900      	ldr	r0, [r0, #16]
 800cebc:	114b      	asrs	r3, r1, #5
 800cebe:	4298      	cmp	r0, r3
 800cec0:	b510      	push	{r4, lr}
 800cec2:	db11      	blt.n	800cee8 <__any_on+0x32>
 800cec4:	dd0a      	ble.n	800cedc <__any_on+0x26>
 800cec6:	f011 011f 	ands.w	r1, r1, #31
 800ceca:	d007      	beq.n	800cedc <__any_on+0x26>
 800cecc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ced0:	fa24 f001 	lsr.w	r0, r4, r1
 800ced4:	fa00 f101 	lsl.w	r1, r0, r1
 800ced8:	428c      	cmp	r4, r1
 800ceda:	d10b      	bne.n	800cef4 <__any_on+0x3e>
 800cedc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d803      	bhi.n	800ceec <__any_on+0x36>
 800cee4:	2000      	movs	r0, #0
 800cee6:	bd10      	pop	{r4, pc}
 800cee8:	4603      	mov	r3, r0
 800ceea:	e7f7      	b.n	800cedc <__any_on+0x26>
 800ceec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cef0:	2900      	cmp	r1, #0
 800cef2:	d0f5      	beq.n	800cee0 <__any_on+0x2a>
 800cef4:	2001      	movs	r0, #1
 800cef6:	e7f6      	b.n	800cee6 <__any_on+0x30>

0800cef8 <__ascii_wctomb>:
 800cef8:	4603      	mov	r3, r0
 800cefa:	4608      	mov	r0, r1
 800cefc:	b141      	cbz	r1, 800cf10 <__ascii_wctomb+0x18>
 800cefe:	2aff      	cmp	r2, #255	@ 0xff
 800cf00:	d904      	bls.n	800cf0c <__ascii_wctomb+0x14>
 800cf02:	228a      	movs	r2, #138	@ 0x8a
 800cf04:	f04f 30ff 	mov.w	r0, #4294967295
 800cf08:	601a      	str	r2, [r3, #0]
 800cf0a:	4770      	bx	lr
 800cf0c:	2001      	movs	r0, #1
 800cf0e:	700a      	strb	r2, [r1, #0]
 800cf10:	4770      	bx	lr

0800cf12 <__ssputs_r>:
 800cf12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf16:	461f      	mov	r7, r3
 800cf18:	688e      	ldr	r6, [r1, #8]
 800cf1a:	4682      	mov	sl, r0
 800cf1c:	42be      	cmp	r6, r7
 800cf1e:	460c      	mov	r4, r1
 800cf20:	4690      	mov	r8, r2
 800cf22:	680b      	ldr	r3, [r1, #0]
 800cf24:	d82d      	bhi.n	800cf82 <__ssputs_r+0x70>
 800cf26:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf2a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf2e:	d026      	beq.n	800cf7e <__ssputs_r+0x6c>
 800cf30:	6965      	ldr	r5, [r4, #20]
 800cf32:	6909      	ldr	r1, [r1, #16]
 800cf34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf38:	eba3 0901 	sub.w	r9, r3, r1
 800cf3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf40:	1c7b      	adds	r3, r7, #1
 800cf42:	444b      	add	r3, r9
 800cf44:	106d      	asrs	r5, r5, #1
 800cf46:	429d      	cmp	r5, r3
 800cf48:	bf38      	it	cc
 800cf4a:	461d      	movcc	r5, r3
 800cf4c:	0553      	lsls	r3, r2, #21
 800cf4e:	d527      	bpl.n	800cfa0 <__ssputs_r+0x8e>
 800cf50:	4629      	mov	r1, r5
 800cf52:	f7ff fa93 	bl	800c47c <_malloc_r>
 800cf56:	4606      	mov	r6, r0
 800cf58:	b360      	cbz	r0, 800cfb4 <__ssputs_r+0xa2>
 800cf5a:	464a      	mov	r2, r9
 800cf5c:	6921      	ldr	r1, [r4, #16]
 800cf5e:	f7fe fed0 	bl	800bd02 <memcpy>
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cf68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf6c:	81a3      	strh	r3, [r4, #12]
 800cf6e:	6126      	str	r6, [r4, #16]
 800cf70:	444e      	add	r6, r9
 800cf72:	6026      	str	r6, [r4, #0]
 800cf74:	463e      	mov	r6, r7
 800cf76:	6165      	str	r5, [r4, #20]
 800cf78:	eba5 0509 	sub.w	r5, r5, r9
 800cf7c:	60a5      	str	r5, [r4, #8]
 800cf7e:	42be      	cmp	r6, r7
 800cf80:	d900      	bls.n	800cf84 <__ssputs_r+0x72>
 800cf82:	463e      	mov	r6, r7
 800cf84:	4632      	mov	r2, r6
 800cf86:	4641      	mov	r1, r8
 800cf88:	6820      	ldr	r0, [r4, #0]
 800cf8a:	f7fe fddf 	bl	800bb4c <memmove>
 800cf8e:	2000      	movs	r0, #0
 800cf90:	68a3      	ldr	r3, [r4, #8]
 800cf92:	1b9b      	subs	r3, r3, r6
 800cf94:	60a3      	str	r3, [r4, #8]
 800cf96:	6823      	ldr	r3, [r4, #0]
 800cf98:	4433      	add	r3, r6
 800cf9a:	6023      	str	r3, [r4, #0]
 800cf9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfa0:	462a      	mov	r2, r5
 800cfa2:	f000 fb9d 	bl	800d6e0 <_realloc_r>
 800cfa6:	4606      	mov	r6, r0
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d1e0      	bne.n	800cf6e <__ssputs_r+0x5c>
 800cfac:	4650      	mov	r0, sl
 800cfae:	6921      	ldr	r1, [r4, #16]
 800cfb0:	f7fe fec0 	bl	800bd34 <_free_r>
 800cfb4:	230c      	movs	r3, #12
 800cfb6:	f8ca 3000 	str.w	r3, [sl]
 800cfba:	89a3      	ldrh	r3, [r4, #12]
 800cfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfc4:	81a3      	strh	r3, [r4, #12]
 800cfc6:	e7e9      	b.n	800cf9c <__ssputs_r+0x8a>

0800cfc8 <_svfiprintf_r>:
 800cfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfcc:	4698      	mov	r8, r3
 800cfce:	898b      	ldrh	r3, [r1, #12]
 800cfd0:	4607      	mov	r7, r0
 800cfd2:	061b      	lsls	r3, r3, #24
 800cfd4:	460d      	mov	r5, r1
 800cfd6:	4614      	mov	r4, r2
 800cfd8:	b09d      	sub	sp, #116	@ 0x74
 800cfda:	d510      	bpl.n	800cffe <_svfiprintf_r+0x36>
 800cfdc:	690b      	ldr	r3, [r1, #16]
 800cfde:	b973      	cbnz	r3, 800cffe <_svfiprintf_r+0x36>
 800cfe0:	2140      	movs	r1, #64	@ 0x40
 800cfe2:	f7ff fa4b 	bl	800c47c <_malloc_r>
 800cfe6:	6028      	str	r0, [r5, #0]
 800cfe8:	6128      	str	r0, [r5, #16]
 800cfea:	b930      	cbnz	r0, 800cffa <_svfiprintf_r+0x32>
 800cfec:	230c      	movs	r3, #12
 800cfee:	603b      	str	r3, [r7, #0]
 800cff0:	f04f 30ff 	mov.w	r0, #4294967295
 800cff4:	b01d      	add	sp, #116	@ 0x74
 800cff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cffa:	2340      	movs	r3, #64	@ 0x40
 800cffc:	616b      	str	r3, [r5, #20]
 800cffe:	2300      	movs	r3, #0
 800d000:	9309      	str	r3, [sp, #36]	@ 0x24
 800d002:	2320      	movs	r3, #32
 800d004:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d008:	2330      	movs	r3, #48	@ 0x30
 800d00a:	f04f 0901 	mov.w	r9, #1
 800d00e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d012:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d1ac <_svfiprintf_r+0x1e4>
 800d016:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d01a:	4623      	mov	r3, r4
 800d01c:	469a      	mov	sl, r3
 800d01e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d022:	b10a      	cbz	r2, 800d028 <_svfiprintf_r+0x60>
 800d024:	2a25      	cmp	r2, #37	@ 0x25
 800d026:	d1f9      	bne.n	800d01c <_svfiprintf_r+0x54>
 800d028:	ebba 0b04 	subs.w	fp, sl, r4
 800d02c:	d00b      	beq.n	800d046 <_svfiprintf_r+0x7e>
 800d02e:	465b      	mov	r3, fp
 800d030:	4622      	mov	r2, r4
 800d032:	4629      	mov	r1, r5
 800d034:	4638      	mov	r0, r7
 800d036:	f7ff ff6c 	bl	800cf12 <__ssputs_r>
 800d03a:	3001      	adds	r0, #1
 800d03c:	f000 80a7 	beq.w	800d18e <_svfiprintf_r+0x1c6>
 800d040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d042:	445a      	add	r2, fp
 800d044:	9209      	str	r2, [sp, #36]	@ 0x24
 800d046:	f89a 3000 	ldrb.w	r3, [sl]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f000 809f 	beq.w	800d18e <_svfiprintf_r+0x1c6>
 800d050:	2300      	movs	r3, #0
 800d052:	f04f 32ff 	mov.w	r2, #4294967295
 800d056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d05a:	f10a 0a01 	add.w	sl, sl, #1
 800d05e:	9304      	str	r3, [sp, #16]
 800d060:	9307      	str	r3, [sp, #28]
 800d062:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d066:	931a      	str	r3, [sp, #104]	@ 0x68
 800d068:	4654      	mov	r4, sl
 800d06a:	2205      	movs	r2, #5
 800d06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d070:	484e      	ldr	r0, [pc, #312]	@ (800d1ac <_svfiprintf_r+0x1e4>)
 800d072:	f000 faed 	bl	800d650 <memchr>
 800d076:	9a04      	ldr	r2, [sp, #16]
 800d078:	b9d8      	cbnz	r0, 800d0b2 <_svfiprintf_r+0xea>
 800d07a:	06d0      	lsls	r0, r2, #27
 800d07c:	bf44      	itt	mi
 800d07e:	2320      	movmi	r3, #32
 800d080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d084:	0711      	lsls	r1, r2, #28
 800d086:	bf44      	itt	mi
 800d088:	232b      	movmi	r3, #43	@ 0x2b
 800d08a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d08e:	f89a 3000 	ldrb.w	r3, [sl]
 800d092:	2b2a      	cmp	r3, #42	@ 0x2a
 800d094:	d015      	beq.n	800d0c2 <_svfiprintf_r+0xfa>
 800d096:	4654      	mov	r4, sl
 800d098:	2000      	movs	r0, #0
 800d09a:	f04f 0c0a 	mov.w	ip, #10
 800d09e:	9a07      	ldr	r2, [sp, #28]
 800d0a0:	4621      	mov	r1, r4
 800d0a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0a6:	3b30      	subs	r3, #48	@ 0x30
 800d0a8:	2b09      	cmp	r3, #9
 800d0aa:	d94b      	bls.n	800d144 <_svfiprintf_r+0x17c>
 800d0ac:	b1b0      	cbz	r0, 800d0dc <_svfiprintf_r+0x114>
 800d0ae:	9207      	str	r2, [sp, #28]
 800d0b0:	e014      	b.n	800d0dc <_svfiprintf_r+0x114>
 800d0b2:	eba0 0308 	sub.w	r3, r0, r8
 800d0b6:	fa09 f303 	lsl.w	r3, r9, r3
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	46a2      	mov	sl, r4
 800d0be:	9304      	str	r3, [sp, #16]
 800d0c0:	e7d2      	b.n	800d068 <_svfiprintf_r+0xa0>
 800d0c2:	9b03      	ldr	r3, [sp, #12]
 800d0c4:	1d19      	adds	r1, r3, #4
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	9103      	str	r1, [sp, #12]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	bfbb      	ittet	lt
 800d0ce:	425b      	neglt	r3, r3
 800d0d0:	f042 0202 	orrlt.w	r2, r2, #2
 800d0d4:	9307      	strge	r3, [sp, #28]
 800d0d6:	9307      	strlt	r3, [sp, #28]
 800d0d8:	bfb8      	it	lt
 800d0da:	9204      	strlt	r2, [sp, #16]
 800d0dc:	7823      	ldrb	r3, [r4, #0]
 800d0de:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0e0:	d10a      	bne.n	800d0f8 <_svfiprintf_r+0x130>
 800d0e2:	7863      	ldrb	r3, [r4, #1]
 800d0e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0e6:	d132      	bne.n	800d14e <_svfiprintf_r+0x186>
 800d0e8:	9b03      	ldr	r3, [sp, #12]
 800d0ea:	3402      	adds	r4, #2
 800d0ec:	1d1a      	adds	r2, r3, #4
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	9203      	str	r2, [sp, #12]
 800d0f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0f6:	9305      	str	r3, [sp, #20]
 800d0f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d1b0 <_svfiprintf_r+0x1e8>
 800d0fc:	2203      	movs	r2, #3
 800d0fe:	4650      	mov	r0, sl
 800d100:	7821      	ldrb	r1, [r4, #0]
 800d102:	f000 faa5 	bl	800d650 <memchr>
 800d106:	b138      	cbz	r0, 800d118 <_svfiprintf_r+0x150>
 800d108:	2240      	movs	r2, #64	@ 0x40
 800d10a:	9b04      	ldr	r3, [sp, #16]
 800d10c:	eba0 000a 	sub.w	r0, r0, sl
 800d110:	4082      	lsls	r2, r0
 800d112:	4313      	orrs	r3, r2
 800d114:	3401      	adds	r4, #1
 800d116:	9304      	str	r3, [sp, #16]
 800d118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d11c:	2206      	movs	r2, #6
 800d11e:	4825      	ldr	r0, [pc, #148]	@ (800d1b4 <_svfiprintf_r+0x1ec>)
 800d120:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d124:	f000 fa94 	bl	800d650 <memchr>
 800d128:	2800      	cmp	r0, #0
 800d12a:	d036      	beq.n	800d19a <_svfiprintf_r+0x1d2>
 800d12c:	4b22      	ldr	r3, [pc, #136]	@ (800d1b8 <_svfiprintf_r+0x1f0>)
 800d12e:	bb1b      	cbnz	r3, 800d178 <_svfiprintf_r+0x1b0>
 800d130:	9b03      	ldr	r3, [sp, #12]
 800d132:	3307      	adds	r3, #7
 800d134:	f023 0307 	bic.w	r3, r3, #7
 800d138:	3308      	adds	r3, #8
 800d13a:	9303      	str	r3, [sp, #12]
 800d13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d13e:	4433      	add	r3, r6
 800d140:	9309      	str	r3, [sp, #36]	@ 0x24
 800d142:	e76a      	b.n	800d01a <_svfiprintf_r+0x52>
 800d144:	460c      	mov	r4, r1
 800d146:	2001      	movs	r0, #1
 800d148:	fb0c 3202 	mla	r2, ip, r2, r3
 800d14c:	e7a8      	b.n	800d0a0 <_svfiprintf_r+0xd8>
 800d14e:	2300      	movs	r3, #0
 800d150:	f04f 0c0a 	mov.w	ip, #10
 800d154:	4619      	mov	r1, r3
 800d156:	3401      	adds	r4, #1
 800d158:	9305      	str	r3, [sp, #20]
 800d15a:	4620      	mov	r0, r4
 800d15c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d160:	3a30      	subs	r2, #48	@ 0x30
 800d162:	2a09      	cmp	r2, #9
 800d164:	d903      	bls.n	800d16e <_svfiprintf_r+0x1a6>
 800d166:	2b00      	cmp	r3, #0
 800d168:	d0c6      	beq.n	800d0f8 <_svfiprintf_r+0x130>
 800d16a:	9105      	str	r1, [sp, #20]
 800d16c:	e7c4      	b.n	800d0f8 <_svfiprintf_r+0x130>
 800d16e:	4604      	mov	r4, r0
 800d170:	2301      	movs	r3, #1
 800d172:	fb0c 2101 	mla	r1, ip, r1, r2
 800d176:	e7f0      	b.n	800d15a <_svfiprintf_r+0x192>
 800d178:	ab03      	add	r3, sp, #12
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	462a      	mov	r2, r5
 800d17e:	4638      	mov	r0, r7
 800d180:	4b0e      	ldr	r3, [pc, #56]	@ (800d1bc <_svfiprintf_r+0x1f4>)
 800d182:	a904      	add	r1, sp, #16
 800d184:	f3af 8000 	nop.w
 800d188:	1c42      	adds	r2, r0, #1
 800d18a:	4606      	mov	r6, r0
 800d18c:	d1d6      	bne.n	800d13c <_svfiprintf_r+0x174>
 800d18e:	89ab      	ldrh	r3, [r5, #12]
 800d190:	065b      	lsls	r3, r3, #25
 800d192:	f53f af2d 	bmi.w	800cff0 <_svfiprintf_r+0x28>
 800d196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d198:	e72c      	b.n	800cff4 <_svfiprintf_r+0x2c>
 800d19a:	ab03      	add	r3, sp, #12
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	462a      	mov	r2, r5
 800d1a0:	4638      	mov	r0, r7
 800d1a2:	4b06      	ldr	r3, [pc, #24]	@ (800d1bc <_svfiprintf_r+0x1f4>)
 800d1a4:	a904      	add	r1, sp, #16
 800d1a6:	f000 f87d 	bl	800d2a4 <_printf_i>
 800d1aa:	e7ed      	b.n	800d188 <_svfiprintf_r+0x1c0>
 800d1ac:	0800df5b 	.word	0x0800df5b
 800d1b0:	0800df61 	.word	0x0800df61
 800d1b4:	0800df65 	.word	0x0800df65
 800d1b8:	00000000 	.word	0x00000000
 800d1bc:	0800cf13 	.word	0x0800cf13

0800d1c0 <_printf_common>:
 800d1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c4:	4616      	mov	r6, r2
 800d1c6:	4698      	mov	r8, r3
 800d1c8:	688a      	ldr	r2, [r1, #8]
 800d1ca:	690b      	ldr	r3, [r1, #16]
 800d1cc:	4607      	mov	r7, r0
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	bfb8      	it	lt
 800d1d2:	4613      	movlt	r3, r2
 800d1d4:	6033      	str	r3, [r6, #0]
 800d1d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1da:	460c      	mov	r4, r1
 800d1dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d1e0:	b10a      	cbz	r2, 800d1e6 <_printf_common+0x26>
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	6033      	str	r3, [r6, #0]
 800d1e6:	6823      	ldr	r3, [r4, #0]
 800d1e8:	0699      	lsls	r1, r3, #26
 800d1ea:	bf42      	ittt	mi
 800d1ec:	6833      	ldrmi	r3, [r6, #0]
 800d1ee:	3302      	addmi	r3, #2
 800d1f0:	6033      	strmi	r3, [r6, #0]
 800d1f2:	6825      	ldr	r5, [r4, #0]
 800d1f4:	f015 0506 	ands.w	r5, r5, #6
 800d1f8:	d106      	bne.n	800d208 <_printf_common+0x48>
 800d1fa:	f104 0a19 	add.w	sl, r4, #25
 800d1fe:	68e3      	ldr	r3, [r4, #12]
 800d200:	6832      	ldr	r2, [r6, #0]
 800d202:	1a9b      	subs	r3, r3, r2
 800d204:	42ab      	cmp	r3, r5
 800d206:	dc2b      	bgt.n	800d260 <_printf_common+0xa0>
 800d208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d20c:	6822      	ldr	r2, [r4, #0]
 800d20e:	3b00      	subs	r3, #0
 800d210:	bf18      	it	ne
 800d212:	2301      	movne	r3, #1
 800d214:	0692      	lsls	r2, r2, #26
 800d216:	d430      	bmi.n	800d27a <_printf_common+0xba>
 800d218:	4641      	mov	r1, r8
 800d21a:	4638      	mov	r0, r7
 800d21c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d220:	47c8      	blx	r9
 800d222:	3001      	adds	r0, #1
 800d224:	d023      	beq.n	800d26e <_printf_common+0xae>
 800d226:	6823      	ldr	r3, [r4, #0]
 800d228:	6922      	ldr	r2, [r4, #16]
 800d22a:	f003 0306 	and.w	r3, r3, #6
 800d22e:	2b04      	cmp	r3, #4
 800d230:	bf14      	ite	ne
 800d232:	2500      	movne	r5, #0
 800d234:	6833      	ldreq	r3, [r6, #0]
 800d236:	f04f 0600 	mov.w	r6, #0
 800d23a:	bf08      	it	eq
 800d23c:	68e5      	ldreq	r5, [r4, #12]
 800d23e:	f104 041a 	add.w	r4, r4, #26
 800d242:	bf08      	it	eq
 800d244:	1aed      	subeq	r5, r5, r3
 800d246:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d24a:	bf08      	it	eq
 800d24c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d250:	4293      	cmp	r3, r2
 800d252:	bfc4      	itt	gt
 800d254:	1a9b      	subgt	r3, r3, r2
 800d256:	18ed      	addgt	r5, r5, r3
 800d258:	42b5      	cmp	r5, r6
 800d25a:	d11a      	bne.n	800d292 <_printf_common+0xd2>
 800d25c:	2000      	movs	r0, #0
 800d25e:	e008      	b.n	800d272 <_printf_common+0xb2>
 800d260:	2301      	movs	r3, #1
 800d262:	4652      	mov	r2, sl
 800d264:	4641      	mov	r1, r8
 800d266:	4638      	mov	r0, r7
 800d268:	47c8      	blx	r9
 800d26a:	3001      	adds	r0, #1
 800d26c:	d103      	bne.n	800d276 <_printf_common+0xb6>
 800d26e:	f04f 30ff 	mov.w	r0, #4294967295
 800d272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d276:	3501      	adds	r5, #1
 800d278:	e7c1      	b.n	800d1fe <_printf_common+0x3e>
 800d27a:	2030      	movs	r0, #48	@ 0x30
 800d27c:	18e1      	adds	r1, r4, r3
 800d27e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d282:	1c5a      	adds	r2, r3, #1
 800d284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d288:	4422      	add	r2, r4
 800d28a:	3302      	adds	r3, #2
 800d28c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d290:	e7c2      	b.n	800d218 <_printf_common+0x58>
 800d292:	2301      	movs	r3, #1
 800d294:	4622      	mov	r2, r4
 800d296:	4641      	mov	r1, r8
 800d298:	4638      	mov	r0, r7
 800d29a:	47c8      	blx	r9
 800d29c:	3001      	adds	r0, #1
 800d29e:	d0e6      	beq.n	800d26e <_printf_common+0xae>
 800d2a0:	3601      	adds	r6, #1
 800d2a2:	e7d9      	b.n	800d258 <_printf_common+0x98>

0800d2a4 <_printf_i>:
 800d2a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a8:	7e0f      	ldrb	r7, [r1, #24]
 800d2aa:	4691      	mov	r9, r2
 800d2ac:	2f78      	cmp	r7, #120	@ 0x78
 800d2ae:	4680      	mov	r8, r0
 800d2b0:	460c      	mov	r4, r1
 800d2b2:	469a      	mov	sl, r3
 800d2b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d2b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d2ba:	d807      	bhi.n	800d2cc <_printf_i+0x28>
 800d2bc:	2f62      	cmp	r7, #98	@ 0x62
 800d2be:	d80a      	bhi.n	800d2d6 <_printf_i+0x32>
 800d2c0:	2f00      	cmp	r7, #0
 800d2c2:	f000 80d1 	beq.w	800d468 <_printf_i+0x1c4>
 800d2c6:	2f58      	cmp	r7, #88	@ 0x58
 800d2c8:	f000 80b8 	beq.w	800d43c <_printf_i+0x198>
 800d2cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d2d4:	e03a      	b.n	800d34c <_printf_i+0xa8>
 800d2d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d2da:	2b15      	cmp	r3, #21
 800d2dc:	d8f6      	bhi.n	800d2cc <_printf_i+0x28>
 800d2de:	a101      	add	r1, pc, #4	@ (adr r1, 800d2e4 <_printf_i+0x40>)
 800d2e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2e4:	0800d33d 	.word	0x0800d33d
 800d2e8:	0800d351 	.word	0x0800d351
 800d2ec:	0800d2cd 	.word	0x0800d2cd
 800d2f0:	0800d2cd 	.word	0x0800d2cd
 800d2f4:	0800d2cd 	.word	0x0800d2cd
 800d2f8:	0800d2cd 	.word	0x0800d2cd
 800d2fc:	0800d351 	.word	0x0800d351
 800d300:	0800d2cd 	.word	0x0800d2cd
 800d304:	0800d2cd 	.word	0x0800d2cd
 800d308:	0800d2cd 	.word	0x0800d2cd
 800d30c:	0800d2cd 	.word	0x0800d2cd
 800d310:	0800d44f 	.word	0x0800d44f
 800d314:	0800d37b 	.word	0x0800d37b
 800d318:	0800d409 	.word	0x0800d409
 800d31c:	0800d2cd 	.word	0x0800d2cd
 800d320:	0800d2cd 	.word	0x0800d2cd
 800d324:	0800d471 	.word	0x0800d471
 800d328:	0800d2cd 	.word	0x0800d2cd
 800d32c:	0800d37b 	.word	0x0800d37b
 800d330:	0800d2cd 	.word	0x0800d2cd
 800d334:	0800d2cd 	.word	0x0800d2cd
 800d338:	0800d411 	.word	0x0800d411
 800d33c:	6833      	ldr	r3, [r6, #0]
 800d33e:	1d1a      	adds	r2, r3, #4
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	6032      	str	r2, [r6, #0]
 800d344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d34c:	2301      	movs	r3, #1
 800d34e:	e09c      	b.n	800d48a <_printf_i+0x1e6>
 800d350:	6833      	ldr	r3, [r6, #0]
 800d352:	6820      	ldr	r0, [r4, #0]
 800d354:	1d19      	adds	r1, r3, #4
 800d356:	6031      	str	r1, [r6, #0]
 800d358:	0606      	lsls	r6, r0, #24
 800d35a:	d501      	bpl.n	800d360 <_printf_i+0xbc>
 800d35c:	681d      	ldr	r5, [r3, #0]
 800d35e:	e003      	b.n	800d368 <_printf_i+0xc4>
 800d360:	0645      	lsls	r5, r0, #25
 800d362:	d5fb      	bpl.n	800d35c <_printf_i+0xb8>
 800d364:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d368:	2d00      	cmp	r5, #0
 800d36a:	da03      	bge.n	800d374 <_printf_i+0xd0>
 800d36c:	232d      	movs	r3, #45	@ 0x2d
 800d36e:	426d      	negs	r5, r5
 800d370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d374:	230a      	movs	r3, #10
 800d376:	4858      	ldr	r0, [pc, #352]	@ (800d4d8 <_printf_i+0x234>)
 800d378:	e011      	b.n	800d39e <_printf_i+0xfa>
 800d37a:	6821      	ldr	r1, [r4, #0]
 800d37c:	6833      	ldr	r3, [r6, #0]
 800d37e:	0608      	lsls	r0, r1, #24
 800d380:	f853 5b04 	ldr.w	r5, [r3], #4
 800d384:	d402      	bmi.n	800d38c <_printf_i+0xe8>
 800d386:	0649      	lsls	r1, r1, #25
 800d388:	bf48      	it	mi
 800d38a:	b2ad      	uxthmi	r5, r5
 800d38c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d38e:	6033      	str	r3, [r6, #0]
 800d390:	bf14      	ite	ne
 800d392:	230a      	movne	r3, #10
 800d394:	2308      	moveq	r3, #8
 800d396:	4850      	ldr	r0, [pc, #320]	@ (800d4d8 <_printf_i+0x234>)
 800d398:	2100      	movs	r1, #0
 800d39a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d39e:	6866      	ldr	r6, [r4, #4]
 800d3a0:	2e00      	cmp	r6, #0
 800d3a2:	60a6      	str	r6, [r4, #8]
 800d3a4:	db05      	blt.n	800d3b2 <_printf_i+0x10e>
 800d3a6:	6821      	ldr	r1, [r4, #0]
 800d3a8:	432e      	orrs	r6, r5
 800d3aa:	f021 0104 	bic.w	r1, r1, #4
 800d3ae:	6021      	str	r1, [r4, #0]
 800d3b0:	d04b      	beq.n	800d44a <_printf_i+0x1a6>
 800d3b2:	4616      	mov	r6, r2
 800d3b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800d3b8:	fb03 5711 	mls	r7, r3, r1, r5
 800d3bc:	5dc7      	ldrb	r7, [r0, r7]
 800d3be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d3c2:	462f      	mov	r7, r5
 800d3c4:	42bb      	cmp	r3, r7
 800d3c6:	460d      	mov	r5, r1
 800d3c8:	d9f4      	bls.n	800d3b4 <_printf_i+0x110>
 800d3ca:	2b08      	cmp	r3, #8
 800d3cc:	d10b      	bne.n	800d3e6 <_printf_i+0x142>
 800d3ce:	6823      	ldr	r3, [r4, #0]
 800d3d0:	07df      	lsls	r7, r3, #31
 800d3d2:	d508      	bpl.n	800d3e6 <_printf_i+0x142>
 800d3d4:	6923      	ldr	r3, [r4, #16]
 800d3d6:	6861      	ldr	r1, [r4, #4]
 800d3d8:	4299      	cmp	r1, r3
 800d3da:	bfde      	ittt	le
 800d3dc:	2330      	movle	r3, #48	@ 0x30
 800d3de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3e6:	1b92      	subs	r2, r2, r6
 800d3e8:	6122      	str	r2, [r4, #16]
 800d3ea:	464b      	mov	r3, r9
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	4640      	mov	r0, r8
 800d3f0:	f8cd a000 	str.w	sl, [sp]
 800d3f4:	aa03      	add	r2, sp, #12
 800d3f6:	f7ff fee3 	bl	800d1c0 <_printf_common>
 800d3fa:	3001      	adds	r0, #1
 800d3fc:	d14a      	bne.n	800d494 <_printf_i+0x1f0>
 800d3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d402:	b004      	add	sp, #16
 800d404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d408:	6823      	ldr	r3, [r4, #0]
 800d40a:	f043 0320 	orr.w	r3, r3, #32
 800d40e:	6023      	str	r3, [r4, #0]
 800d410:	2778      	movs	r7, #120	@ 0x78
 800d412:	4832      	ldr	r0, [pc, #200]	@ (800d4dc <_printf_i+0x238>)
 800d414:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	6831      	ldr	r1, [r6, #0]
 800d41c:	061f      	lsls	r7, r3, #24
 800d41e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d422:	d402      	bmi.n	800d42a <_printf_i+0x186>
 800d424:	065f      	lsls	r7, r3, #25
 800d426:	bf48      	it	mi
 800d428:	b2ad      	uxthmi	r5, r5
 800d42a:	6031      	str	r1, [r6, #0]
 800d42c:	07d9      	lsls	r1, r3, #31
 800d42e:	bf44      	itt	mi
 800d430:	f043 0320 	orrmi.w	r3, r3, #32
 800d434:	6023      	strmi	r3, [r4, #0]
 800d436:	b11d      	cbz	r5, 800d440 <_printf_i+0x19c>
 800d438:	2310      	movs	r3, #16
 800d43a:	e7ad      	b.n	800d398 <_printf_i+0xf4>
 800d43c:	4826      	ldr	r0, [pc, #152]	@ (800d4d8 <_printf_i+0x234>)
 800d43e:	e7e9      	b.n	800d414 <_printf_i+0x170>
 800d440:	6823      	ldr	r3, [r4, #0]
 800d442:	f023 0320 	bic.w	r3, r3, #32
 800d446:	6023      	str	r3, [r4, #0]
 800d448:	e7f6      	b.n	800d438 <_printf_i+0x194>
 800d44a:	4616      	mov	r6, r2
 800d44c:	e7bd      	b.n	800d3ca <_printf_i+0x126>
 800d44e:	6833      	ldr	r3, [r6, #0]
 800d450:	6825      	ldr	r5, [r4, #0]
 800d452:	1d18      	adds	r0, r3, #4
 800d454:	6961      	ldr	r1, [r4, #20]
 800d456:	6030      	str	r0, [r6, #0]
 800d458:	062e      	lsls	r6, r5, #24
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	d501      	bpl.n	800d462 <_printf_i+0x1be>
 800d45e:	6019      	str	r1, [r3, #0]
 800d460:	e002      	b.n	800d468 <_printf_i+0x1c4>
 800d462:	0668      	lsls	r0, r5, #25
 800d464:	d5fb      	bpl.n	800d45e <_printf_i+0x1ba>
 800d466:	8019      	strh	r1, [r3, #0]
 800d468:	2300      	movs	r3, #0
 800d46a:	4616      	mov	r6, r2
 800d46c:	6123      	str	r3, [r4, #16]
 800d46e:	e7bc      	b.n	800d3ea <_printf_i+0x146>
 800d470:	6833      	ldr	r3, [r6, #0]
 800d472:	2100      	movs	r1, #0
 800d474:	1d1a      	adds	r2, r3, #4
 800d476:	6032      	str	r2, [r6, #0]
 800d478:	681e      	ldr	r6, [r3, #0]
 800d47a:	6862      	ldr	r2, [r4, #4]
 800d47c:	4630      	mov	r0, r6
 800d47e:	f000 f8e7 	bl	800d650 <memchr>
 800d482:	b108      	cbz	r0, 800d488 <_printf_i+0x1e4>
 800d484:	1b80      	subs	r0, r0, r6
 800d486:	6060      	str	r0, [r4, #4]
 800d488:	6863      	ldr	r3, [r4, #4]
 800d48a:	6123      	str	r3, [r4, #16]
 800d48c:	2300      	movs	r3, #0
 800d48e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d492:	e7aa      	b.n	800d3ea <_printf_i+0x146>
 800d494:	4632      	mov	r2, r6
 800d496:	4649      	mov	r1, r9
 800d498:	4640      	mov	r0, r8
 800d49a:	6923      	ldr	r3, [r4, #16]
 800d49c:	47d0      	blx	sl
 800d49e:	3001      	adds	r0, #1
 800d4a0:	d0ad      	beq.n	800d3fe <_printf_i+0x15a>
 800d4a2:	6823      	ldr	r3, [r4, #0]
 800d4a4:	079b      	lsls	r3, r3, #30
 800d4a6:	d413      	bmi.n	800d4d0 <_printf_i+0x22c>
 800d4a8:	68e0      	ldr	r0, [r4, #12]
 800d4aa:	9b03      	ldr	r3, [sp, #12]
 800d4ac:	4298      	cmp	r0, r3
 800d4ae:	bfb8      	it	lt
 800d4b0:	4618      	movlt	r0, r3
 800d4b2:	e7a6      	b.n	800d402 <_printf_i+0x15e>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	4632      	mov	r2, r6
 800d4b8:	4649      	mov	r1, r9
 800d4ba:	4640      	mov	r0, r8
 800d4bc:	47d0      	blx	sl
 800d4be:	3001      	adds	r0, #1
 800d4c0:	d09d      	beq.n	800d3fe <_printf_i+0x15a>
 800d4c2:	3501      	adds	r5, #1
 800d4c4:	68e3      	ldr	r3, [r4, #12]
 800d4c6:	9903      	ldr	r1, [sp, #12]
 800d4c8:	1a5b      	subs	r3, r3, r1
 800d4ca:	42ab      	cmp	r3, r5
 800d4cc:	dcf2      	bgt.n	800d4b4 <_printf_i+0x210>
 800d4ce:	e7eb      	b.n	800d4a8 <_printf_i+0x204>
 800d4d0:	2500      	movs	r5, #0
 800d4d2:	f104 0619 	add.w	r6, r4, #25
 800d4d6:	e7f5      	b.n	800d4c4 <_printf_i+0x220>
 800d4d8:	0800df6c 	.word	0x0800df6c
 800d4dc:	0800df7d 	.word	0x0800df7d

0800d4e0 <__sflush_r>:
 800d4e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e6:	0716      	lsls	r6, r2, #28
 800d4e8:	4605      	mov	r5, r0
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	d454      	bmi.n	800d598 <__sflush_r+0xb8>
 800d4ee:	684b      	ldr	r3, [r1, #4]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	dc02      	bgt.n	800d4fa <__sflush_r+0x1a>
 800d4f4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	dd48      	ble.n	800d58c <__sflush_r+0xac>
 800d4fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4fc:	2e00      	cmp	r6, #0
 800d4fe:	d045      	beq.n	800d58c <__sflush_r+0xac>
 800d500:	2300      	movs	r3, #0
 800d502:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d506:	682f      	ldr	r7, [r5, #0]
 800d508:	6a21      	ldr	r1, [r4, #32]
 800d50a:	602b      	str	r3, [r5, #0]
 800d50c:	d030      	beq.n	800d570 <__sflush_r+0x90>
 800d50e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d510:	89a3      	ldrh	r3, [r4, #12]
 800d512:	0759      	lsls	r1, r3, #29
 800d514:	d505      	bpl.n	800d522 <__sflush_r+0x42>
 800d516:	6863      	ldr	r3, [r4, #4]
 800d518:	1ad2      	subs	r2, r2, r3
 800d51a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d51c:	b10b      	cbz	r3, 800d522 <__sflush_r+0x42>
 800d51e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d520:	1ad2      	subs	r2, r2, r3
 800d522:	2300      	movs	r3, #0
 800d524:	4628      	mov	r0, r5
 800d526:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d528:	6a21      	ldr	r1, [r4, #32]
 800d52a:	47b0      	blx	r6
 800d52c:	1c43      	adds	r3, r0, #1
 800d52e:	89a3      	ldrh	r3, [r4, #12]
 800d530:	d106      	bne.n	800d540 <__sflush_r+0x60>
 800d532:	6829      	ldr	r1, [r5, #0]
 800d534:	291d      	cmp	r1, #29
 800d536:	d82b      	bhi.n	800d590 <__sflush_r+0xb0>
 800d538:	4a28      	ldr	r2, [pc, #160]	@ (800d5dc <__sflush_r+0xfc>)
 800d53a:	40ca      	lsrs	r2, r1
 800d53c:	07d6      	lsls	r6, r2, #31
 800d53e:	d527      	bpl.n	800d590 <__sflush_r+0xb0>
 800d540:	2200      	movs	r2, #0
 800d542:	6062      	str	r2, [r4, #4]
 800d544:	6922      	ldr	r2, [r4, #16]
 800d546:	04d9      	lsls	r1, r3, #19
 800d548:	6022      	str	r2, [r4, #0]
 800d54a:	d504      	bpl.n	800d556 <__sflush_r+0x76>
 800d54c:	1c42      	adds	r2, r0, #1
 800d54e:	d101      	bne.n	800d554 <__sflush_r+0x74>
 800d550:	682b      	ldr	r3, [r5, #0]
 800d552:	b903      	cbnz	r3, 800d556 <__sflush_r+0x76>
 800d554:	6560      	str	r0, [r4, #84]	@ 0x54
 800d556:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d558:	602f      	str	r7, [r5, #0]
 800d55a:	b1b9      	cbz	r1, 800d58c <__sflush_r+0xac>
 800d55c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d560:	4299      	cmp	r1, r3
 800d562:	d002      	beq.n	800d56a <__sflush_r+0x8a>
 800d564:	4628      	mov	r0, r5
 800d566:	f7fe fbe5 	bl	800bd34 <_free_r>
 800d56a:	2300      	movs	r3, #0
 800d56c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d56e:	e00d      	b.n	800d58c <__sflush_r+0xac>
 800d570:	2301      	movs	r3, #1
 800d572:	4628      	mov	r0, r5
 800d574:	47b0      	blx	r6
 800d576:	4602      	mov	r2, r0
 800d578:	1c50      	adds	r0, r2, #1
 800d57a:	d1c9      	bne.n	800d510 <__sflush_r+0x30>
 800d57c:	682b      	ldr	r3, [r5, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d0c6      	beq.n	800d510 <__sflush_r+0x30>
 800d582:	2b1d      	cmp	r3, #29
 800d584:	d001      	beq.n	800d58a <__sflush_r+0xaa>
 800d586:	2b16      	cmp	r3, #22
 800d588:	d11d      	bne.n	800d5c6 <__sflush_r+0xe6>
 800d58a:	602f      	str	r7, [r5, #0]
 800d58c:	2000      	movs	r0, #0
 800d58e:	e021      	b.n	800d5d4 <__sflush_r+0xf4>
 800d590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d594:	b21b      	sxth	r3, r3
 800d596:	e01a      	b.n	800d5ce <__sflush_r+0xee>
 800d598:	690f      	ldr	r7, [r1, #16]
 800d59a:	2f00      	cmp	r7, #0
 800d59c:	d0f6      	beq.n	800d58c <__sflush_r+0xac>
 800d59e:	0793      	lsls	r3, r2, #30
 800d5a0:	bf18      	it	ne
 800d5a2:	2300      	movne	r3, #0
 800d5a4:	680e      	ldr	r6, [r1, #0]
 800d5a6:	bf08      	it	eq
 800d5a8:	694b      	ldreq	r3, [r1, #20]
 800d5aa:	1bf6      	subs	r6, r6, r7
 800d5ac:	600f      	str	r7, [r1, #0]
 800d5ae:	608b      	str	r3, [r1, #8]
 800d5b0:	2e00      	cmp	r6, #0
 800d5b2:	ddeb      	ble.n	800d58c <__sflush_r+0xac>
 800d5b4:	4633      	mov	r3, r6
 800d5b6:	463a      	mov	r2, r7
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	6a21      	ldr	r1, [r4, #32]
 800d5bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d5c0:	47e0      	blx	ip
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	dc07      	bgt.n	800d5d6 <__sflush_r+0xf6>
 800d5c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d2:	81a3      	strh	r3, [r4, #12]
 800d5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d6:	4407      	add	r7, r0
 800d5d8:	1a36      	subs	r6, r6, r0
 800d5da:	e7e9      	b.n	800d5b0 <__sflush_r+0xd0>
 800d5dc:	20400001 	.word	0x20400001

0800d5e0 <_fflush_r>:
 800d5e0:	b538      	push	{r3, r4, r5, lr}
 800d5e2:	690b      	ldr	r3, [r1, #16]
 800d5e4:	4605      	mov	r5, r0
 800d5e6:	460c      	mov	r4, r1
 800d5e8:	b913      	cbnz	r3, 800d5f0 <_fflush_r+0x10>
 800d5ea:	2500      	movs	r5, #0
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	bd38      	pop	{r3, r4, r5, pc}
 800d5f0:	b118      	cbz	r0, 800d5fa <_fflush_r+0x1a>
 800d5f2:	6a03      	ldr	r3, [r0, #32]
 800d5f4:	b90b      	cbnz	r3, 800d5fa <_fflush_r+0x1a>
 800d5f6:	f7fe f9f3 	bl	800b9e0 <__sinit>
 800d5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d0f3      	beq.n	800d5ea <_fflush_r+0xa>
 800d602:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d604:	07d0      	lsls	r0, r2, #31
 800d606:	d404      	bmi.n	800d612 <_fflush_r+0x32>
 800d608:	0599      	lsls	r1, r3, #22
 800d60a:	d402      	bmi.n	800d612 <_fflush_r+0x32>
 800d60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d60e:	f7fe fb6e 	bl	800bcee <__retarget_lock_acquire_recursive>
 800d612:	4628      	mov	r0, r5
 800d614:	4621      	mov	r1, r4
 800d616:	f7ff ff63 	bl	800d4e0 <__sflush_r>
 800d61a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d61c:	4605      	mov	r5, r0
 800d61e:	07da      	lsls	r2, r3, #31
 800d620:	d4e4      	bmi.n	800d5ec <_fflush_r+0xc>
 800d622:	89a3      	ldrh	r3, [r4, #12]
 800d624:	059b      	lsls	r3, r3, #22
 800d626:	d4e1      	bmi.n	800d5ec <_fflush_r+0xc>
 800d628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d62a:	f7fe fb61 	bl	800bcf0 <__retarget_lock_release_recursive>
 800d62e:	e7dd      	b.n	800d5ec <_fflush_r+0xc>

0800d630 <_sbrk_r>:
 800d630:	b538      	push	{r3, r4, r5, lr}
 800d632:	2300      	movs	r3, #0
 800d634:	4d05      	ldr	r5, [pc, #20]	@ (800d64c <_sbrk_r+0x1c>)
 800d636:	4604      	mov	r4, r0
 800d638:	4608      	mov	r0, r1
 800d63a:	602b      	str	r3, [r5, #0]
 800d63c:	f7f8 fc6e 	bl	8005f1c <_sbrk>
 800d640:	1c43      	adds	r3, r0, #1
 800d642:	d102      	bne.n	800d64a <_sbrk_r+0x1a>
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	b103      	cbz	r3, 800d64a <_sbrk_r+0x1a>
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	bd38      	pop	{r3, r4, r5, pc}
 800d64c:	20001bec 	.word	0x20001bec

0800d650 <memchr>:
 800d650:	4603      	mov	r3, r0
 800d652:	b510      	push	{r4, lr}
 800d654:	b2c9      	uxtb	r1, r1
 800d656:	4402      	add	r2, r0
 800d658:	4293      	cmp	r3, r2
 800d65a:	4618      	mov	r0, r3
 800d65c:	d101      	bne.n	800d662 <memchr+0x12>
 800d65e:	2000      	movs	r0, #0
 800d660:	e003      	b.n	800d66a <memchr+0x1a>
 800d662:	7804      	ldrb	r4, [r0, #0]
 800d664:	3301      	adds	r3, #1
 800d666:	428c      	cmp	r4, r1
 800d668:	d1f6      	bne.n	800d658 <memchr+0x8>
 800d66a:	bd10      	pop	{r4, pc}

0800d66c <__assert_func>:
 800d66c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d66e:	4614      	mov	r4, r2
 800d670:	461a      	mov	r2, r3
 800d672:	4b09      	ldr	r3, [pc, #36]	@ (800d698 <__assert_func+0x2c>)
 800d674:	4605      	mov	r5, r0
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	68d8      	ldr	r0, [r3, #12]
 800d67a:	b14c      	cbz	r4, 800d690 <__assert_func+0x24>
 800d67c:	4b07      	ldr	r3, [pc, #28]	@ (800d69c <__assert_func+0x30>)
 800d67e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d682:	9100      	str	r1, [sp, #0]
 800d684:	462b      	mov	r3, r5
 800d686:	4906      	ldr	r1, [pc, #24]	@ (800d6a0 <__assert_func+0x34>)
 800d688:	f000 f858 	bl	800d73c <fiprintf>
 800d68c:	f000 f868 	bl	800d760 <abort>
 800d690:	4b04      	ldr	r3, [pc, #16]	@ (800d6a4 <__assert_func+0x38>)
 800d692:	461c      	mov	r4, r3
 800d694:	e7f3      	b.n	800d67e <__assert_func+0x12>
 800d696:	bf00      	nop
 800d698:	20000308 	.word	0x20000308
 800d69c:	0800df8e 	.word	0x0800df8e
 800d6a0:	0800df9b 	.word	0x0800df9b
 800d6a4:	0800dd77 	.word	0x0800dd77

0800d6a8 <_calloc_r>:
 800d6a8:	b570      	push	{r4, r5, r6, lr}
 800d6aa:	fba1 5402 	umull	r5, r4, r1, r2
 800d6ae:	b934      	cbnz	r4, 800d6be <_calloc_r+0x16>
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	f7fe fee3 	bl	800c47c <_malloc_r>
 800d6b6:	4606      	mov	r6, r0
 800d6b8:	b928      	cbnz	r0, 800d6c6 <_calloc_r+0x1e>
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	bd70      	pop	{r4, r5, r6, pc}
 800d6be:	220c      	movs	r2, #12
 800d6c0:	2600      	movs	r6, #0
 800d6c2:	6002      	str	r2, [r0, #0]
 800d6c4:	e7f9      	b.n	800d6ba <_calloc_r+0x12>
 800d6c6:	462a      	mov	r2, r5
 800d6c8:	4621      	mov	r1, r4
 800d6ca:	f7fe fa59 	bl	800bb80 <memset>
 800d6ce:	e7f4      	b.n	800d6ba <_calloc_r+0x12>

0800d6d0 <malloc>:
 800d6d0:	4b02      	ldr	r3, [pc, #8]	@ (800d6dc <malloc+0xc>)
 800d6d2:	4601      	mov	r1, r0
 800d6d4:	6818      	ldr	r0, [r3, #0]
 800d6d6:	f7fe bed1 	b.w	800c47c <_malloc_r>
 800d6da:	bf00      	nop
 800d6dc:	20000308 	.word	0x20000308

0800d6e0 <_realloc_r>:
 800d6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e4:	4607      	mov	r7, r0
 800d6e6:	4614      	mov	r4, r2
 800d6e8:	460d      	mov	r5, r1
 800d6ea:	b921      	cbnz	r1, 800d6f6 <_realloc_r+0x16>
 800d6ec:	4611      	mov	r1, r2
 800d6ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f2:	f7fe bec3 	b.w	800c47c <_malloc_r>
 800d6f6:	b92a      	cbnz	r2, 800d704 <_realloc_r+0x24>
 800d6f8:	f7fe fb1c 	bl	800bd34 <_free_r>
 800d6fc:	4625      	mov	r5, r4
 800d6fe:	4628      	mov	r0, r5
 800d700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d704:	f000 f833 	bl	800d76e <_malloc_usable_size_r>
 800d708:	4284      	cmp	r4, r0
 800d70a:	4606      	mov	r6, r0
 800d70c:	d802      	bhi.n	800d714 <_realloc_r+0x34>
 800d70e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d712:	d8f4      	bhi.n	800d6fe <_realloc_r+0x1e>
 800d714:	4621      	mov	r1, r4
 800d716:	4638      	mov	r0, r7
 800d718:	f7fe feb0 	bl	800c47c <_malloc_r>
 800d71c:	4680      	mov	r8, r0
 800d71e:	b908      	cbnz	r0, 800d724 <_realloc_r+0x44>
 800d720:	4645      	mov	r5, r8
 800d722:	e7ec      	b.n	800d6fe <_realloc_r+0x1e>
 800d724:	42b4      	cmp	r4, r6
 800d726:	4622      	mov	r2, r4
 800d728:	4629      	mov	r1, r5
 800d72a:	bf28      	it	cs
 800d72c:	4632      	movcs	r2, r6
 800d72e:	f7fe fae8 	bl	800bd02 <memcpy>
 800d732:	4629      	mov	r1, r5
 800d734:	4638      	mov	r0, r7
 800d736:	f7fe fafd 	bl	800bd34 <_free_r>
 800d73a:	e7f1      	b.n	800d720 <_realloc_r+0x40>

0800d73c <fiprintf>:
 800d73c:	b40e      	push	{r1, r2, r3}
 800d73e:	b503      	push	{r0, r1, lr}
 800d740:	4601      	mov	r1, r0
 800d742:	ab03      	add	r3, sp, #12
 800d744:	4805      	ldr	r0, [pc, #20]	@ (800d75c <fiprintf+0x20>)
 800d746:	f853 2b04 	ldr.w	r2, [r3], #4
 800d74a:	6800      	ldr	r0, [r0, #0]
 800d74c:	9301      	str	r3, [sp, #4]
 800d74e:	f000 f83d 	bl	800d7cc <_vfiprintf_r>
 800d752:	b002      	add	sp, #8
 800d754:	f85d eb04 	ldr.w	lr, [sp], #4
 800d758:	b003      	add	sp, #12
 800d75a:	4770      	bx	lr
 800d75c:	20000308 	.word	0x20000308

0800d760 <abort>:
 800d760:	2006      	movs	r0, #6
 800d762:	b508      	push	{r3, lr}
 800d764:	f000 fa06 	bl	800db74 <raise>
 800d768:	2001      	movs	r0, #1
 800d76a:	f7f8 fba9 	bl	8005ec0 <_exit>

0800d76e <_malloc_usable_size_r>:
 800d76e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d772:	1f18      	subs	r0, r3, #4
 800d774:	2b00      	cmp	r3, #0
 800d776:	bfbc      	itt	lt
 800d778:	580b      	ldrlt	r3, [r1, r0]
 800d77a:	18c0      	addlt	r0, r0, r3
 800d77c:	4770      	bx	lr

0800d77e <__sfputc_r>:
 800d77e:	6893      	ldr	r3, [r2, #8]
 800d780:	b410      	push	{r4}
 800d782:	3b01      	subs	r3, #1
 800d784:	2b00      	cmp	r3, #0
 800d786:	6093      	str	r3, [r2, #8]
 800d788:	da07      	bge.n	800d79a <__sfputc_r+0x1c>
 800d78a:	6994      	ldr	r4, [r2, #24]
 800d78c:	42a3      	cmp	r3, r4
 800d78e:	db01      	blt.n	800d794 <__sfputc_r+0x16>
 800d790:	290a      	cmp	r1, #10
 800d792:	d102      	bne.n	800d79a <__sfputc_r+0x1c>
 800d794:	bc10      	pop	{r4}
 800d796:	f000 b931 	b.w	800d9fc <__swbuf_r>
 800d79a:	6813      	ldr	r3, [r2, #0]
 800d79c:	1c58      	adds	r0, r3, #1
 800d79e:	6010      	str	r0, [r2, #0]
 800d7a0:	7019      	strb	r1, [r3, #0]
 800d7a2:	4608      	mov	r0, r1
 800d7a4:	bc10      	pop	{r4}
 800d7a6:	4770      	bx	lr

0800d7a8 <__sfputs_r>:
 800d7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7aa:	4606      	mov	r6, r0
 800d7ac:	460f      	mov	r7, r1
 800d7ae:	4614      	mov	r4, r2
 800d7b0:	18d5      	adds	r5, r2, r3
 800d7b2:	42ac      	cmp	r4, r5
 800d7b4:	d101      	bne.n	800d7ba <__sfputs_r+0x12>
 800d7b6:	2000      	movs	r0, #0
 800d7b8:	e007      	b.n	800d7ca <__sfputs_r+0x22>
 800d7ba:	463a      	mov	r2, r7
 800d7bc:	4630      	mov	r0, r6
 800d7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c2:	f7ff ffdc 	bl	800d77e <__sfputc_r>
 800d7c6:	1c43      	adds	r3, r0, #1
 800d7c8:	d1f3      	bne.n	800d7b2 <__sfputs_r+0xa>
 800d7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d7cc <_vfiprintf_r>:
 800d7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d0:	460d      	mov	r5, r1
 800d7d2:	4614      	mov	r4, r2
 800d7d4:	4698      	mov	r8, r3
 800d7d6:	4606      	mov	r6, r0
 800d7d8:	b09d      	sub	sp, #116	@ 0x74
 800d7da:	b118      	cbz	r0, 800d7e4 <_vfiprintf_r+0x18>
 800d7dc:	6a03      	ldr	r3, [r0, #32]
 800d7de:	b90b      	cbnz	r3, 800d7e4 <_vfiprintf_r+0x18>
 800d7e0:	f7fe f8fe 	bl	800b9e0 <__sinit>
 800d7e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7e6:	07d9      	lsls	r1, r3, #31
 800d7e8:	d405      	bmi.n	800d7f6 <_vfiprintf_r+0x2a>
 800d7ea:	89ab      	ldrh	r3, [r5, #12]
 800d7ec:	059a      	lsls	r2, r3, #22
 800d7ee:	d402      	bmi.n	800d7f6 <_vfiprintf_r+0x2a>
 800d7f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7f2:	f7fe fa7c 	bl	800bcee <__retarget_lock_acquire_recursive>
 800d7f6:	89ab      	ldrh	r3, [r5, #12]
 800d7f8:	071b      	lsls	r3, r3, #28
 800d7fa:	d501      	bpl.n	800d800 <_vfiprintf_r+0x34>
 800d7fc:	692b      	ldr	r3, [r5, #16]
 800d7fe:	b99b      	cbnz	r3, 800d828 <_vfiprintf_r+0x5c>
 800d800:	4629      	mov	r1, r5
 800d802:	4630      	mov	r0, r6
 800d804:	f000 f938 	bl	800da78 <__swsetup_r>
 800d808:	b170      	cbz	r0, 800d828 <_vfiprintf_r+0x5c>
 800d80a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d80c:	07dc      	lsls	r4, r3, #31
 800d80e:	d504      	bpl.n	800d81a <_vfiprintf_r+0x4e>
 800d810:	f04f 30ff 	mov.w	r0, #4294967295
 800d814:	b01d      	add	sp, #116	@ 0x74
 800d816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d81a:	89ab      	ldrh	r3, [r5, #12]
 800d81c:	0598      	lsls	r0, r3, #22
 800d81e:	d4f7      	bmi.n	800d810 <_vfiprintf_r+0x44>
 800d820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d822:	f7fe fa65 	bl	800bcf0 <__retarget_lock_release_recursive>
 800d826:	e7f3      	b.n	800d810 <_vfiprintf_r+0x44>
 800d828:	2300      	movs	r3, #0
 800d82a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d82c:	2320      	movs	r3, #32
 800d82e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d832:	2330      	movs	r3, #48	@ 0x30
 800d834:	f04f 0901 	mov.w	r9, #1
 800d838:	f8cd 800c 	str.w	r8, [sp, #12]
 800d83c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d9e8 <_vfiprintf_r+0x21c>
 800d840:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d844:	4623      	mov	r3, r4
 800d846:	469a      	mov	sl, r3
 800d848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d84c:	b10a      	cbz	r2, 800d852 <_vfiprintf_r+0x86>
 800d84e:	2a25      	cmp	r2, #37	@ 0x25
 800d850:	d1f9      	bne.n	800d846 <_vfiprintf_r+0x7a>
 800d852:	ebba 0b04 	subs.w	fp, sl, r4
 800d856:	d00b      	beq.n	800d870 <_vfiprintf_r+0xa4>
 800d858:	465b      	mov	r3, fp
 800d85a:	4622      	mov	r2, r4
 800d85c:	4629      	mov	r1, r5
 800d85e:	4630      	mov	r0, r6
 800d860:	f7ff ffa2 	bl	800d7a8 <__sfputs_r>
 800d864:	3001      	adds	r0, #1
 800d866:	f000 80a7 	beq.w	800d9b8 <_vfiprintf_r+0x1ec>
 800d86a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d86c:	445a      	add	r2, fp
 800d86e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d870:	f89a 3000 	ldrb.w	r3, [sl]
 800d874:	2b00      	cmp	r3, #0
 800d876:	f000 809f 	beq.w	800d9b8 <_vfiprintf_r+0x1ec>
 800d87a:	2300      	movs	r3, #0
 800d87c:	f04f 32ff 	mov.w	r2, #4294967295
 800d880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d884:	f10a 0a01 	add.w	sl, sl, #1
 800d888:	9304      	str	r3, [sp, #16]
 800d88a:	9307      	str	r3, [sp, #28]
 800d88c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d890:	931a      	str	r3, [sp, #104]	@ 0x68
 800d892:	4654      	mov	r4, sl
 800d894:	2205      	movs	r2, #5
 800d896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d89a:	4853      	ldr	r0, [pc, #332]	@ (800d9e8 <_vfiprintf_r+0x21c>)
 800d89c:	f7ff fed8 	bl	800d650 <memchr>
 800d8a0:	9a04      	ldr	r2, [sp, #16]
 800d8a2:	b9d8      	cbnz	r0, 800d8dc <_vfiprintf_r+0x110>
 800d8a4:	06d1      	lsls	r1, r2, #27
 800d8a6:	bf44      	itt	mi
 800d8a8:	2320      	movmi	r3, #32
 800d8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8ae:	0713      	lsls	r3, r2, #28
 800d8b0:	bf44      	itt	mi
 800d8b2:	232b      	movmi	r3, #43	@ 0x2b
 800d8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8b8:	f89a 3000 	ldrb.w	r3, [sl]
 800d8bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8be:	d015      	beq.n	800d8ec <_vfiprintf_r+0x120>
 800d8c0:	4654      	mov	r4, sl
 800d8c2:	2000      	movs	r0, #0
 800d8c4:	f04f 0c0a 	mov.w	ip, #10
 800d8c8:	9a07      	ldr	r2, [sp, #28]
 800d8ca:	4621      	mov	r1, r4
 800d8cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8d0:	3b30      	subs	r3, #48	@ 0x30
 800d8d2:	2b09      	cmp	r3, #9
 800d8d4:	d94b      	bls.n	800d96e <_vfiprintf_r+0x1a2>
 800d8d6:	b1b0      	cbz	r0, 800d906 <_vfiprintf_r+0x13a>
 800d8d8:	9207      	str	r2, [sp, #28]
 800d8da:	e014      	b.n	800d906 <_vfiprintf_r+0x13a>
 800d8dc:	eba0 0308 	sub.w	r3, r0, r8
 800d8e0:	fa09 f303 	lsl.w	r3, r9, r3
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	46a2      	mov	sl, r4
 800d8e8:	9304      	str	r3, [sp, #16]
 800d8ea:	e7d2      	b.n	800d892 <_vfiprintf_r+0xc6>
 800d8ec:	9b03      	ldr	r3, [sp, #12]
 800d8ee:	1d19      	adds	r1, r3, #4
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	9103      	str	r1, [sp, #12]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	bfbb      	ittet	lt
 800d8f8:	425b      	neglt	r3, r3
 800d8fa:	f042 0202 	orrlt.w	r2, r2, #2
 800d8fe:	9307      	strge	r3, [sp, #28]
 800d900:	9307      	strlt	r3, [sp, #28]
 800d902:	bfb8      	it	lt
 800d904:	9204      	strlt	r2, [sp, #16]
 800d906:	7823      	ldrb	r3, [r4, #0]
 800d908:	2b2e      	cmp	r3, #46	@ 0x2e
 800d90a:	d10a      	bne.n	800d922 <_vfiprintf_r+0x156>
 800d90c:	7863      	ldrb	r3, [r4, #1]
 800d90e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d910:	d132      	bne.n	800d978 <_vfiprintf_r+0x1ac>
 800d912:	9b03      	ldr	r3, [sp, #12]
 800d914:	3402      	adds	r4, #2
 800d916:	1d1a      	adds	r2, r3, #4
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	9203      	str	r2, [sp, #12]
 800d91c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d920:	9305      	str	r3, [sp, #20]
 800d922:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d9ec <_vfiprintf_r+0x220>
 800d926:	2203      	movs	r2, #3
 800d928:	4650      	mov	r0, sl
 800d92a:	7821      	ldrb	r1, [r4, #0]
 800d92c:	f7ff fe90 	bl	800d650 <memchr>
 800d930:	b138      	cbz	r0, 800d942 <_vfiprintf_r+0x176>
 800d932:	2240      	movs	r2, #64	@ 0x40
 800d934:	9b04      	ldr	r3, [sp, #16]
 800d936:	eba0 000a 	sub.w	r0, r0, sl
 800d93a:	4082      	lsls	r2, r0
 800d93c:	4313      	orrs	r3, r2
 800d93e:	3401      	adds	r4, #1
 800d940:	9304      	str	r3, [sp, #16]
 800d942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d946:	2206      	movs	r2, #6
 800d948:	4829      	ldr	r0, [pc, #164]	@ (800d9f0 <_vfiprintf_r+0x224>)
 800d94a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d94e:	f7ff fe7f 	bl	800d650 <memchr>
 800d952:	2800      	cmp	r0, #0
 800d954:	d03f      	beq.n	800d9d6 <_vfiprintf_r+0x20a>
 800d956:	4b27      	ldr	r3, [pc, #156]	@ (800d9f4 <_vfiprintf_r+0x228>)
 800d958:	bb1b      	cbnz	r3, 800d9a2 <_vfiprintf_r+0x1d6>
 800d95a:	9b03      	ldr	r3, [sp, #12]
 800d95c:	3307      	adds	r3, #7
 800d95e:	f023 0307 	bic.w	r3, r3, #7
 800d962:	3308      	adds	r3, #8
 800d964:	9303      	str	r3, [sp, #12]
 800d966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d968:	443b      	add	r3, r7
 800d96a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d96c:	e76a      	b.n	800d844 <_vfiprintf_r+0x78>
 800d96e:	460c      	mov	r4, r1
 800d970:	2001      	movs	r0, #1
 800d972:	fb0c 3202 	mla	r2, ip, r2, r3
 800d976:	e7a8      	b.n	800d8ca <_vfiprintf_r+0xfe>
 800d978:	2300      	movs	r3, #0
 800d97a:	f04f 0c0a 	mov.w	ip, #10
 800d97e:	4619      	mov	r1, r3
 800d980:	3401      	adds	r4, #1
 800d982:	9305      	str	r3, [sp, #20]
 800d984:	4620      	mov	r0, r4
 800d986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d98a:	3a30      	subs	r2, #48	@ 0x30
 800d98c:	2a09      	cmp	r2, #9
 800d98e:	d903      	bls.n	800d998 <_vfiprintf_r+0x1cc>
 800d990:	2b00      	cmp	r3, #0
 800d992:	d0c6      	beq.n	800d922 <_vfiprintf_r+0x156>
 800d994:	9105      	str	r1, [sp, #20]
 800d996:	e7c4      	b.n	800d922 <_vfiprintf_r+0x156>
 800d998:	4604      	mov	r4, r0
 800d99a:	2301      	movs	r3, #1
 800d99c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9a0:	e7f0      	b.n	800d984 <_vfiprintf_r+0x1b8>
 800d9a2:	ab03      	add	r3, sp, #12
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	462a      	mov	r2, r5
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	4b13      	ldr	r3, [pc, #76]	@ (800d9f8 <_vfiprintf_r+0x22c>)
 800d9ac:	a904      	add	r1, sp, #16
 800d9ae:	f3af 8000 	nop.w
 800d9b2:	4607      	mov	r7, r0
 800d9b4:	1c78      	adds	r0, r7, #1
 800d9b6:	d1d6      	bne.n	800d966 <_vfiprintf_r+0x19a>
 800d9b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9ba:	07d9      	lsls	r1, r3, #31
 800d9bc:	d405      	bmi.n	800d9ca <_vfiprintf_r+0x1fe>
 800d9be:	89ab      	ldrh	r3, [r5, #12]
 800d9c0:	059a      	lsls	r2, r3, #22
 800d9c2:	d402      	bmi.n	800d9ca <_vfiprintf_r+0x1fe>
 800d9c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d9c6:	f7fe f993 	bl	800bcf0 <__retarget_lock_release_recursive>
 800d9ca:	89ab      	ldrh	r3, [r5, #12]
 800d9cc:	065b      	lsls	r3, r3, #25
 800d9ce:	f53f af1f 	bmi.w	800d810 <_vfiprintf_r+0x44>
 800d9d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9d4:	e71e      	b.n	800d814 <_vfiprintf_r+0x48>
 800d9d6:	ab03      	add	r3, sp, #12
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	462a      	mov	r2, r5
 800d9dc:	4630      	mov	r0, r6
 800d9de:	4b06      	ldr	r3, [pc, #24]	@ (800d9f8 <_vfiprintf_r+0x22c>)
 800d9e0:	a904      	add	r1, sp, #16
 800d9e2:	f7ff fc5f 	bl	800d2a4 <_printf_i>
 800d9e6:	e7e4      	b.n	800d9b2 <_vfiprintf_r+0x1e6>
 800d9e8:	0800df5b 	.word	0x0800df5b
 800d9ec:	0800df61 	.word	0x0800df61
 800d9f0:	0800df65 	.word	0x0800df65
 800d9f4:	00000000 	.word	0x00000000
 800d9f8:	0800d7a9 	.word	0x0800d7a9

0800d9fc <__swbuf_r>:
 800d9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9fe:	460e      	mov	r6, r1
 800da00:	4614      	mov	r4, r2
 800da02:	4605      	mov	r5, r0
 800da04:	b118      	cbz	r0, 800da0e <__swbuf_r+0x12>
 800da06:	6a03      	ldr	r3, [r0, #32]
 800da08:	b90b      	cbnz	r3, 800da0e <__swbuf_r+0x12>
 800da0a:	f7fd ffe9 	bl	800b9e0 <__sinit>
 800da0e:	69a3      	ldr	r3, [r4, #24]
 800da10:	60a3      	str	r3, [r4, #8]
 800da12:	89a3      	ldrh	r3, [r4, #12]
 800da14:	071a      	lsls	r2, r3, #28
 800da16:	d501      	bpl.n	800da1c <__swbuf_r+0x20>
 800da18:	6923      	ldr	r3, [r4, #16]
 800da1a:	b943      	cbnz	r3, 800da2e <__swbuf_r+0x32>
 800da1c:	4621      	mov	r1, r4
 800da1e:	4628      	mov	r0, r5
 800da20:	f000 f82a 	bl	800da78 <__swsetup_r>
 800da24:	b118      	cbz	r0, 800da2e <__swbuf_r+0x32>
 800da26:	f04f 37ff 	mov.w	r7, #4294967295
 800da2a:	4638      	mov	r0, r7
 800da2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da2e:	6823      	ldr	r3, [r4, #0]
 800da30:	6922      	ldr	r2, [r4, #16]
 800da32:	b2f6      	uxtb	r6, r6
 800da34:	1a98      	subs	r0, r3, r2
 800da36:	6963      	ldr	r3, [r4, #20]
 800da38:	4637      	mov	r7, r6
 800da3a:	4283      	cmp	r3, r0
 800da3c:	dc05      	bgt.n	800da4a <__swbuf_r+0x4e>
 800da3e:	4621      	mov	r1, r4
 800da40:	4628      	mov	r0, r5
 800da42:	f7ff fdcd 	bl	800d5e0 <_fflush_r>
 800da46:	2800      	cmp	r0, #0
 800da48:	d1ed      	bne.n	800da26 <__swbuf_r+0x2a>
 800da4a:	68a3      	ldr	r3, [r4, #8]
 800da4c:	3b01      	subs	r3, #1
 800da4e:	60a3      	str	r3, [r4, #8]
 800da50:	6823      	ldr	r3, [r4, #0]
 800da52:	1c5a      	adds	r2, r3, #1
 800da54:	6022      	str	r2, [r4, #0]
 800da56:	701e      	strb	r6, [r3, #0]
 800da58:	6962      	ldr	r2, [r4, #20]
 800da5a:	1c43      	adds	r3, r0, #1
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d004      	beq.n	800da6a <__swbuf_r+0x6e>
 800da60:	89a3      	ldrh	r3, [r4, #12]
 800da62:	07db      	lsls	r3, r3, #31
 800da64:	d5e1      	bpl.n	800da2a <__swbuf_r+0x2e>
 800da66:	2e0a      	cmp	r6, #10
 800da68:	d1df      	bne.n	800da2a <__swbuf_r+0x2e>
 800da6a:	4621      	mov	r1, r4
 800da6c:	4628      	mov	r0, r5
 800da6e:	f7ff fdb7 	bl	800d5e0 <_fflush_r>
 800da72:	2800      	cmp	r0, #0
 800da74:	d0d9      	beq.n	800da2a <__swbuf_r+0x2e>
 800da76:	e7d6      	b.n	800da26 <__swbuf_r+0x2a>

0800da78 <__swsetup_r>:
 800da78:	b538      	push	{r3, r4, r5, lr}
 800da7a:	4b29      	ldr	r3, [pc, #164]	@ (800db20 <__swsetup_r+0xa8>)
 800da7c:	4605      	mov	r5, r0
 800da7e:	6818      	ldr	r0, [r3, #0]
 800da80:	460c      	mov	r4, r1
 800da82:	b118      	cbz	r0, 800da8c <__swsetup_r+0x14>
 800da84:	6a03      	ldr	r3, [r0, #32]
 800da86:	b90b      	cbnz	r3, 800da8c <__swsetup_r+0x14>
 800da88:	f7fd ffaa 	bl	800b9e0 <__sinit>
 800da8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da90:	0719      	lsls	r1, r3, #28
 800da92:	d422      	bmi.n	800dada <__swsetup_r+0x62>
 800da94:	06da      	lsls	r2, r3, #27
 800da96:	d407      	bmi.n	800daa8 <__swsetup_r+0x30>
 800da98:	2209      	movs	r2, #9
 800da9a:	602a      	str	r2, [r5, #0]
 800da9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daa0:	f04f 30ff 	mov.w	r0, #4294967295
 800daa4:	81a3      	strh	r3, [r4, #12]
 800daa6:	e033      	b.n	800db10 <__swsetup_r+0x98>
 800daa8:	0758      	lsls	r0, r3, #29
 800daaa:	d512      	bpl.n	800dad2 <__swsetup_r+0x5a>
 800daac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800daae:	b141      	cbz	r1, 800dac2 <__swsetup_r+0x4a>
 800dab0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dab4:	4299      	cmp	r1, r3
 800dab6:	d002      	beq.n	800dabe <__swsetup_r+0x46>
 800dab8:	4628      	mov	r0, r5
 800daba:	f7fe f93b 	bl	800bd34 <_free_r>
 800dabe:	2300      	movs	r3, #0
 800dac0:	6363      	str	r3, [r4, #52]	@ 0x34
 800dac2:	89a3      	ldrh	r3, [r4, #12]
 800dac4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dac8:	81a3      	strh	r3, [r4, #12]
 800daca:	2300      	movs	r3, #0
 800dacc:	6063      	str	r3, [r4, #4]
 800dace:	6923      	ldr	r3, [r4, #16]
 800dad0:	6023      	str	r3, [r4, #0]
 800dad2:	89a3      	ldrh	r3, [r4, #12]
 800dad4:	f043 0308 	orr.w	r3, r3, #8
 800dad8:	81a3      	strh	r3, [r4, #12]
 800dada:	6923      	ldr	r3, [r4, #16]
 800dadc:	b94b      	cbnz	r3, 800daf2 <__swsetup_r+0x7a>
 800dade:	89a3      	ldrh	r3, [r4, #12]
 800dae0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dae8:	d003      	beq.n	800daf2 <__swsetup_r+0x7a>
 800daea:	4621      	mov	r1, r4
 800daec:	4628      	mov	r0, r5
 800daee:	f000 f882 	bl	800dbf6 <__smakebuf_r>
 800daf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daf6:	f013 0201 	ands.w	r2, r3, #1
 800dafa:	d00a      	beq.n	800db12 <__swsetup_r+0x9a>
 800dafc:	2200      	movs	r2, #0
 800dafe:	60a2      	str	r2, [r4, #8]
 800db00:	6962      	ldr	r2, [r4, #20]
 800db02:	4252      	negs	r2, r2
 800db04:	61a2      	str	r2, [r4, #24]
 800db06:	6922      	ldr	r2, [r4, #16]
 800db08:	b942      	cbnz	r2, 800db1c <__swsetup_r+0xa4>
 800db0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800db0e:	d1c5      	bne.n	800da9c <__swsetup_r+0x24>
 800db10:	bd38      	pop	{r3, r4, r5, pc}
 800db12:	0799      	lsls	r1, r3, #30
 800db14:	bf58      	it	pl
 800db16:	6962      	ldrpl	r2, [r4, #20]
 800db18:	60a2      	str	r2, [r4, #8]
 800db1a:	e7f4      	b.n	800db06 <__swsetup_r+0x8e>
 800db1c:	2000      	movs	r0, #0
 800db1e:	e7f7      	b.n	800db10 <__swsetup_r+0x98>
 800db20:	20000308 	.word	0x20000308

0800db24 <_raise_r>:
 800db24:	291f      	cmp	r1, #31
 800db26:	b538      	push	{r3, r4, r5, lr}
 800db28:	4605      	mov	r5, r0
 800db2a:	460c      	mov	r4, r1
 800db2c:	d904      	bls.n	800db38 <_raise_r+0x14>
 800db2e:	2316      	movs	r3, #22
 800db30:	6003      	str	r3, [r0, #0]
 800db32:	f04f 30ff 	mov.w	r0, #4294967295
 800db36:	bd38      	pop	{r3, r4, r5, pc}
 800db38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800db3a:	b112      	cbz	r2, 800db42 <_raise_r+0x1e>
 800db3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db40:	b94b      	cbnz	r3, 800db56 <_raise_r+0x32>
 800db42:	4628      	mov	r0, r5
 800db44:	f000 f830 	bl	800dba8 <_getpid_r>
 800db48:	4622      	mov	r2, r4
 800db4a:	4601      	mov	r1, r0
 800db4c:	4628      	mov	r0, r5
 800db4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db52:	f000 b817 	b.w	800db84 <_kill_r>
 800db56:	2b01      	cmp	r3, #1
 800db58:	d00a      	beq.n	800db70 <_raise_r+0x4c>
 800db5a:	1c59      	adds	r1, r3, #1
 800db5c:	d103      	bne.n	800db66 <_raise_r+0x42>
 800db5e:	2316      	movs	r3, #22
 800db60:	6003      	str	r3, [r0, #0]
 800db62:	2001      	movs	r0, #1
 800db64:	e7e7      	b.n	800db36 <_raise_r+0x12>
 800db66:	2100      	movs	r1, #0
 800db68:	4620      	mov	r0, r4
 800db6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800db6e:	4798      	blx	r3
 800db70:	2000      	movs	r0, #0
 800db72:	e7e0      	b.n	800db36 <_raise_r+0x12>

0800db74 <raise>:
 800db74:	4b02      	ldr	r3, [pc, #8]	@ (800db80 <raise+0xc>)
 800db76:	4601      	mov	r1, r0
 800db78:	6818      	ldr	r0, [r3, #0]
 800db7a:	f7ff bfd3 	b.w	800db24 <_raise_r>
 800db7e:	bf00      	nop
 800db80:	20000308 	.word	0x20000308

0800db84 <_kill_r>:
 800db84:	b538      	push	{r3, r4, r5, lr}
 800db86:	2300      	movs	r3, #0
 800db88:	4d06      	ldr	r5, [pc, #24]	@ (800dba4 <_kill_r+0x20>)
 800db8a:	4604      	mov	r4, r0
 800db8c:	4608      	mov	r0, r1
 800db8e:	4611      	mov	r1, r2
 800db90:	602b      	str	r3, [r5, #0]
 800db92:	f7f8 f98d 	bl	8005eb0 <_kill>
 800db96:	1c43      	adds	r3, r0, #1
 800db98:	d102      	bne.n	800dba0 <_kill_r+0x1c>
 800db9a:	682b      	ldr	r3, [r5, #0]
 800db9c:	b103      	cbz	r3, 800dba0 <_kill_r+0x1c>
 800db9e:	6023      	str	r3, [r4, #0]
 800dba0:	bd38      	pop	{r3, r4, r5, pc}
 800dba2:	bf00      	nop
 800dba4:	20001bec 	.word	0x20001bec

0800dba8 <_getpid_r>:
 800dba8:	f7f8 b980 	b.w	8005eac <_getpid>

0800dbac <__swhatbuf_r>:
 800dbac:	b570      	push	{r4, r5, r6, lr}
 800dbae:	460c      	mov	r4, r1
 800dbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb4:	4615      	mov	r5, r2
 800dbb6:	2900      	cmp	r1, #0
 800dbb8:	461e      	mov	r6, r3
 800dbba:	b096      	sub	sp, #88	@ 0x58
 800dbbc:	da0c      	bge.n	800dbd8 <__swhatbuf_r+0x2c>
 800dbbe:	89a3      	ldrh	r3, [r4, #12]
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dbc6:	bf14      	ite	ne
 800dbc8:	2340      	movne	r3, #64	@ 0x40
 800dbca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dbce:	2000      	movs	r0, #0
 800dbd0:	6031      	str	r1, [r6, #0]
 800dbd2:	602b      	str	r3, [r5, #0]
 800dbd4:	b016      	add	sp, #88	@ 0x58
 800dbd6:	bd70      	pop	{r4, r5, r6, pc}
 800dbd8:	466a      	mov	r2, sp
 800dbda:	f000 f849 	bl	800dc70 <_fstat_r>
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	dbed      	blt.n	800dbbe <__swhatbuf_r+0x12>
 800dbe2:	9901      	ldr	r1, [sp, #4]
 800dbe4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dbe8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dbec:	4259      	negs	r1, r3
 800dbee:	4159      	adcs	r1, r3
 800dbf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dbf4:	e7eb      	b.n	800dbce <__swhatbuf_r+0x22>

0800dbf6 <__smakebuf_r>:
 800dbf6:	898b      	ldrh	r3, [r1, #12]
 800dbf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbfa:	079d      	lsls	r5, r3, #30
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	460c      	mov	r4, r1
 800dc00:	d507      	bpl.n	800dc12 <__smakebuf_r+0x1c>
 800dc02:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc06:	6023      	str	r3, [r4, #0]
 800dc08:	6123      	str	r3, [r4, #16]
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	6163      	str	r3, [r4, #20]
 800dc0e:	b003      	add	sp, #12
 800dc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc12:	466a      	mov	r2, sp
 800dc14:	ab01      	add	r3, sp, #4
 800dc16:	f7ff ffc9 	bl	800dbac <__swhatbuf_r>
 800dc1a:	9f00      	ldr	r7, [sp, #0]
 800dc1c:	4605      	mov	r5, r0
 800dc1e:	4639      	mov	r1, r7
 800dc20:	4630      	mov	r0, r6
 800dc22:	f7fe fc2b 	bl	800c47c <_malloc_r>
 800dc26:	b948      	cbnz	r0, 800dc3c <__smakebuf_r+0x46>
 800dc28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc2c:	059a      	lsls	r2, r3, #22
 800dc2e:	d4ee      	bmi.n	800dc0e <__smakebuf_r+0x18>
 800dc30:	f023 0303 	bic.w	r3, r3, #3
 800dc34:	f043 0302 	orr.w	r3, r3, #2
 800dc38:	81a3      	strh	r3, [r4, #12]
 800dc3a:	e7e2      	b.n	800dc02 <__smakebuf_r+0xc>
 800dc3c:	89a3      	ldrh	r3, [r4, #12]
 800dc3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dc42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc46:	81a3      	strh	r3, [r4, #12]
 800dc48:	9b01      	ldr	r3, [sp, #4]
 800dc4a:	6020      	str	r0, [r4, #0]
 800dc4c:	b15b      	cbz	r3, 800dc66 <__smakebuf_r+0x70>
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc54:	f000 f81e 	bl	800dc94 <_isatty_r>
 800dc58:	b128      	cbz	r0, 800dc66 <__smakebuf_r+0x70>
 800dc5a:	89a3      	ldrh	r3, [r4, #12]
 800dc5c:	f023 0303 	bic.w	r3, r3, #3
 800dc60:	f043 0301 	orr.w	r3, r3, #1
 800dc64:	81a3      	strh	r3, [r4, #12]
 800dc66:	89a3      	ldrh	r3, [r4, #12]
 800dc68:	431d      	orrs	r5, r3
 800dc6a:	81a5      	strh	r5, [r4, #12]
 800dc6c:	e7cf      	b.n	800dc0e <__smakebuf_r+0x18>
	...

0800dc70 <_fstat_r>:
 800dc70:	b538      	push	{r3, r4, r5, lr}
 800dc72:	2300      	movs	r3, #0
 800dc74:	4d06      	ldr	r5, [pc, #24]	@ (800dc90 <_fstat_r+0x20>)
 800dc76:	4604      	mov	r4, r0
 800dc78:	4608      	mov	r0, r1
 800dc7a:	4611      	mov	r1, r2
 800dc7c:	602b      	str	r3, [r5, #0]
 800dc7e:	f7f8 f944 	bl	8005f0a <_fstat>
 800dc82:	1c43      	adds	r3, r0, #1
 800dc84:	d102      	bne.n	800dc8c <_fstat_r+0x1c>
 800dc86:	682b      	ldr	r3, [r5, #0]
 800dc88:	b103      	cbz	r3, 800dc8c <_fstat_r+0x1c>
 800dc8a:	6023      	str	r3, [r4, #0]
 800dc8c:	bd38      	pop	{r3, r4, r5, pc}
 800dc8e:	bf00      	nop
 800dc90:	20001bec 	.word	0x20001bec

0800dc94 <_isatty_r>:
 800dc94:	b538      	push	{r3, r4, r5, lr}
 800dc96:	2300      	movs	r3, #0
 800dc98:	4d05      	ldr	r5, [pc, #20]	@ (800dcb0 <_isatty_r+0x1c>)
 800dc9a:	4604      	mov	r4, r0
 800dc9c:	4608      	mov	r0, r1
 800dc9e:	602b      	str	r3, [r5, #0]
 800dca0:	f7f8 f938 	bl	8005f14 <_isatty>
 800dca4:	1c43      	adds	r3, r0, #1
 800dca6:	d102      	bne.n	800dcae <_isatty_r+0x1a>
 800dca8:	682b      	ldr	r3, [r5, #0]
 800dcaa:	b103      	cbz	r3, 800dcae <_isatty_r+0x1a>
 800dcac:	6023      	str	r3, [r4, #0]
 800dcae:	bd38      	pop	{r3, r4, r5, pc}
 800dcb0:	20001bec 	.word	0x20001bec

0800dcb4 <_init>:
 800dcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcb6:	bf00      	nop
 800dcb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcba:	bc08      	pop	{r3}
 800dcbc:	469e      	mov	lr, r3
 800dcbe:	4770      	bx	lr

0800dcc0 <_fini>:
 800dcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc2:	bf00      	nop
 800dcc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcc6:	bc08      	pop	{r3}
 800dcc8:	469e      	mov	lr, r3
 800dcca:	4770      	bx	lr
