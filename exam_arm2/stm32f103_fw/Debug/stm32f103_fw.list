
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c8c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009d98  08009d98  0000ad98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e20  08009e20  0000b190  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009e20  08009e20  0000b190  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009e20  08009e20  0000b190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e20  08009e20  0000ae20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e24  08009e24  0000ae24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  08009e28  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b0  20000190  08009fb8  0000b190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001340  08009fb8  0000b340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b190  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130f4  00000000  00000000  0000b1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040ef  00000000  00000000  0001e2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  000223a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc5  00000000  00000000  000234e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0c1  00000000  00000000  000241a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc2b  00000000  00000000  00040266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089cb9  00000000  00000000  0005ce91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6b4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004258  00000000  00000000  000e6b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000eade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	08009d80 	.word	0x08009d80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	08009d80 	.word	0x08009d80

0800014c <apInit>:
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);



void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 57600);     //USB      (통신속도가 바뀌어서 통신이 안되지는 않음)
 8000150:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fb81 	bl	800085c <uartOpen>
	uartOpen(_DEF_UART2, 57600);     //UART			(통신속도가 바뀌면 그에 맞춰서 데이터를 보내줘야함)
 800015a:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800015e:	2001      	movs	r0, #1
 8000160:	f000 fb7c 	bl	800085c <uartOpen>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <apMain>:

void apMain(void)
{
 8000168:	b590      	push	{r4, r7, lr}
 800016a:	b0a5      	sub	sp, #148	@ 0x94
 800016c:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	uint8_t rx_buf[128];
	uint32_t rx_len;


	pre_time = millis();
 800016e:	f000 f8b8 	bl	80002e2 <millis>
 8000172:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	while(1)
	{
		if(millis() - pre_time >= 500)
 8000176:	f000 f8b4 	bl	80002e2 <millis>
 800017a:	4602      	mov	r2, r0
 800017c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000180:	1ad3      	subs	r3, r2, r3
 8000182:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000186:	d306      	bcc.n	8000196 <apMain+0x2e>
		{
			pre_time = millis();
 8000188:	f000 f8ab 	bl	80002e2 <millis>
 800018c:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
			ledToggle(_DEF_LED1);
 8000190:	2000      	movs	r0, #0
 8000192:	f000 fa8d 	bl	80006b0 <ledToggle>

		}
		if(uartGetBaud(_DEF_UART1) != uartGetBaud(_DEF_UART2))
 8000196:	2000      	movs	r0, #0
 8000198:	f000 fc76 	bl	8000a88 <uartGetBaud>
 800019c:	4604      	mov	r4, r0
 800019e:	2001      	movs	r0, #1
 80001a0:	f000 fc72 	bl	8000a88 <uartGetBaud>
 80001a4:	4603      	mov	r3, r0
 80001a6:	429c      	cmp	r4, r3
 80001a8:	d007      	beq.n	80001ba <apMain+0x52>
		{
			uartOpen(_DEF_UART2,uartGetBaud(_DEF_UART1));
 80001aa:	2000      	movs	r0, #0
 80001ac:	f000 fc6c 	bl	8000a88 <uartGetBaud>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4619      	mov	r1, r3
 80001b4:	2001      	movs	r0, #1
 80001b6:	f000 fb51 	bl	800085c <uartOpen>
		}

		// USB->UART
		rx_len = uartAvailable(_DEF_UART1);
 80001ba:	2000      	movs	r0, #0
 80001bc:	f000 fbe4 	bl	8000988 <uartAvailable>
 80001c0:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
		if(rx_len >128)
 80001c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80001c8:	2b80      	cmp	r3, #128	@ 0x80
 80001ca:	d902      	bls.n	80001d2 <apMain+0x6a>
		{
			rx_len = 128;
 80001cc:	2380      	movs	r3, #128	@ 0x80
 80001ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		}
		if(rx_len >0)
 80001d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d020      	beq.n	800021c <apMain+0xb4>
		{
			for(int i=0;i<rx_len;i++)
 80001da:	2300      	movs	r3, #0
 80001dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80001e0:	e00f      	b.n	8000202 <apMain+0x9a>
			{
				rx_buf[i] = uartRead(_DEF_UART1);
 80001e2:	2000      	movs	r0, #0
 80001e4:	f000 fc02 	bl	80009ec <uartRead>
 80001e8:	4603      	mov	r3, r0
 80001ea:	4619      	mov	r1, r3
 80001ec:	463a      	mov	r2, r7
 80001ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80001f2:	4413      	add	r3, r2
 80001f4:	460a      	mov	r2, r1
 80001f6:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<rx_len;i++)
 80001f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80001fc:	3301      	adds	r3, #1
 80001fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000202:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000206:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800020a:	429a      	cmp	r2, r3
 800020c:	d8e9      	bhi.n	80001e2 <apMain+0x7a>
			}
			uartWrite(_DEF_UART2, rx_buf,rx_len);
 800020e:	463b      	mov	r3, r7
 8000210:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000214:	4619      	mov	r1, r3
 8000216:	2001      	movs	r0, #1
 8000218:	f000 fc0a 	bl	8000a30 <uartWrite>
		}

		// UART->USB
				rx_len = uartAvailable(_DEF_UART2);
 800021c:	2001      	movs	r0, #1
 800021e:	f000 fbb3 	bl	8000988 <uartAvailable>
 8000222:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
				if(rx_len >128)
 8000226:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800022a:	2b80      	cmp	r3, #128	@ 0x80
 800022c:	d902      	bls.n	8000234 <apMain+0xcc>
				{
					rx_len = 128;
 800022e:	2380      	movs	r3, #128	@ 0x80
 8000230:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
				}
				if(rx_len >0)
 8000234:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000238:	2b00      	cmp	r3, #0
 800023a:	d09c      	beq.n	8000176 <apMain+0xe>
				{
					for(int i=0;i<rx_len;i++)
 800023c:	2300      	movs	r3, #0
 800023e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000242:	e00f      	b.n	8000264 <apMain+0xfc>
					{
						rx_buf[i] = uartRead(_DEF_UART2);
 8000244:	2001      	movs	r0, #1
 8000246:	f000 fbd1 	bl	80009ec <uartRead>
 800024a:	4603      	mov	r3, r0
 800024c:	4619      	mov	r1, r3
 800024e:	463a      	mov	r2, r7
 8000250:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000254:	4413      	add	r3, r2
 8000256:	460a      	mov	r2, r1
 8000258:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<rx_len;i++)
 800025a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800025e:	3301      	adds	r3, #1
 8000260:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000264:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000268:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800026c:	429a      	cmp	r2, r3
 800026e:	d8e9      	bhi.n	8000244 <apMain+0xdc>
					}
					uartWrite(_DEF_UART1, rx_buf,rx_len);
 8000270:	463b      	mov	r3, r7
 8000272:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000276:	4619      	mov	r1, r3
 8000278:	2000      	movs	r0, #0
 800027a:	f000 fbd9 	bl	8000a30 <uartWrite>
		if(millis() - pre_time >= 500)
 800027e:	e77a      	b.n	8000176 <apMain+0xe>

08000280 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	 HAL_Init();
 8000286:	f000 fd19 	bl	8000cbc <HAL_Init>
	 SystemClock_Config();
 800028a:	f000 f831 	bl	80002f0 <SystemClock_Config>

	 __HAL_RCC_GPIOD_CLK_ENABLE();
 800028e:	4b0e      	ldr	r3, [pc, #56]	@ (80002c8 <bspInit+0x48>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <bspInit+0x48>)
 8000294:	f043 0320 	orr.w	r3, r3, #32
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <bspInit+0x48>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0320 	and.w	r3, r3, #32
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a6:	4b08      	ldr	r3, [pc, #32]	@ (80002c8 <bspInit+0x48>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a07      	ldr	r2, [pc, #28]	@ (80002c8 <bspInit+0x48>)
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	6193      	str	r3, [r2, #24]
 80002b2:	4b05      	ldr	r3, [pc, #20]	@ (80002c8 <bspInit+0x48>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0304 	and.w	r3, r3, #4
 80002ba:	603b      	str	r3, [r7, #0]
 80002bc:	683b      	ldr	r3, [r7, #0]



}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40021000 	.word	0x40021000

080002cc <delay>:

void delay(uint32_t ms)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f000 fd53 	bl	8000d80 <HAL_Delay>
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <millis>:

uint32_t millis(void)
{
 80002e2:	b580      	push	{r7, lr}
 80002e4:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80002e6:	f000 fd41 	bl	8000d6c <HAL_GetTick>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <SystemClock_Config>:



void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b094      	sub	sp, #80	@ 0x50
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002fa:	2228      	movs	r2, #40	@ 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f009 fd11 	bl	8009d26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	f107 0314 	add.w	r3, r7, #20
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
 8000310:	60da      	str	r2, [r3, #12]
 8000312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000320:	2305      	movs	r3, #5
 8000322:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000324:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800032e:	2301      	movs	r3, #1
 8000330:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000332:	2301      	movs	r3, #1
 8000334:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000336:	2302      	movs	r3, #2
 8000338:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800033e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000340:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000344:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800034a:	4618      	mov	r0, r3
 800034c:	f003 f958 	bl	8003600 <HAL_RCC_OscConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000356:	f000 f82a 	bl	80003ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035a:	230f      	movs	r3, #15
 800035c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035e:	2302      	movs	r3, #2
 8000360:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800036a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	2102      	movs	r1, #2
 8000376:	4618      	mov	r0, r3
 8000378:	f003 fbc4 	bl	8003b04 <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000382:	f000 f814 	bl	80003ae <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000386:	2311      	movs	r3, #17
 8000388:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800038a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800038e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000390:	2300      	movs	r3, #0
 8000392:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	4618      	mov	r0, r3
 8000398:	f003 fd42 	bl	8003e20 <HAL_RCCEx_PeriphCLKConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003a2:	f000 f804 	bl	80003ae <Error_Handler>
  }
}
 80003a6:	bf00      	nop
 80003a8:	3750      	adds	r7, #80	@ 0x50
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b2:	b672      	cpsid	i
}
 80003b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b6:	bf00      	nop
 80003b8:	e7fd      	b.n	80003b6 <Error_Handler+0x8>
	...

080003bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003c2:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <HAL_MspInit+0x5c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a14      	ldr	r2, [pc, #80]	@ (8000418 <HAL_MspInit+0x5c>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	60bb      	str	r3, [r7, #8]
 80003d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003da:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <HAL_MspInit+0x5c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	4a0e      	ldr	r2, [pc, #56]	@ (8000418 <HAL_MspInit+0x5c>)
 80003e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003e4:	61d3      	str	r3, [r2, #28]
 80003e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003f2:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <HAL_MspInit+0x60>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	4a04      	ldr	r2, [pc, #16]	@ (800041c <HAL_MspInit+0x60>)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040e:	bf00      	nop
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000
 800041c:	40010000 	.word	0x40010000

08000420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <NMI_Handler+0x4>

08000428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <HardFault_Handler+0x4>

08000430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000434:	bf00      	nop
 8000436:	e7fd      	b.n	8000434 <MemManage_Handler+0x4>

08000438 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800043c:	bf00      	nop
 800043e:	e7fd      	b.n	800043c <BusFault_Handler+0x4>

08000440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <UsageFault_Handler+0x4>

08000448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000470:	f000 fc6a 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}

08000478 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800047c:	4802      	ldr	r0, [pc, #8]	@ (8000488 <DMA1_Channel5_IRQHandler+0x10>)
 800047e:	f000 ffad 	bl	80013dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000330 	.word	0x20000330

0800048c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000490:	4802      	ldr	r0, [pc, #8]	@ (800049c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000492:	f001 fc64 	bl	8001d5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000e48 	.word	0x20000e48

080004a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004a4:	4802      	ldr	r0, [pc, #8]	@ (80004b0 <USART1_IRQHandler+0x10>)
 80004a6:	f004 f899 	bl	80045dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	200002e8 	.word	0x200002e8

080004b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004c0:	f7ff fff8 	bl	80004b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c4:	480b      	ldr	r0, [pc, #44]	@ (80004f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004c6:	490c      	ldr	r1, [pc, #48]	@ (80004f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004c8:	4a0c      	ldr	r2, [pc, #48]	@ (80004fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004cc:	e002      	b.n	80004d4 <LoopCopyDataInit>

080004ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d2:	3304      	adds	r3, #4

080004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d8:	d3f9      	bcc.n	80004ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004da:	4a09      	ldr	r2, [pc, #36]	@ (8000500 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004dc:	4c09      	ldr	r4, [pc, #36]	@ (8000504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e0:	e001      	b.n	80004e6 <LoopFillZerobss>

080004e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e4:	3204      	adds	r2, #4

080004e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e8:	d3fb      	bcc.n	80004e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ea:	f009 fc25 	bl	8009d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ee:	f009 fc0f 	bl	8009d10 <main>
  bx lr
 80004f2:	4770      	bx	lr
  ldr r0, =_sdata
 80004f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f8:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80004fc:	08009e28 	.word	0x08009e28
  ldr r2, =_sbss
 8000500:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000504:	20001340 	.word	0x20001340

08000508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000508:	e7fe      	b.n	8000508 <ADC1_2_IRQHandler>

0800050a <qbufferCreate>:
{

}

bool   qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800050a:	b480      	push	{r7}
 800050c:	b087      	sub	sp, #28
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000516:	2301      	movs	r3, #1
 8000518:	75fb      	strb	r3, [r7, #23]

  p_node->in	  = 0;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
  p_node->out 	= 0;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	2200      	movs	r2, #0
 8000524:	605a      	str	r2, [r3, #4]
  p_node->len 	= length;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	68ba      	ldr	r2, [r7, #8]
 8000530:	60da      	str	r2, [r3, #12]

  return ret;
 8000532:	7dfb      	ldrb	r3, [r7, #23]
}
 8000534:	4618      	mov	r0, r3
 8000536:	371c      	adds	r7, #28
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <qbufferRead>:

	return ret;
}

bool   qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800053e:	b480      	push	{r7}
 8000540:	b087      	sub	sp, #28
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
	bool ret = true;
 800054a:	2301      	movs	r3, #1
 800054c:	75fb      	strb	r3, [r7, #23]

	for(int i=0; i<length; i++)
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
 8000552:	e026      	b.n	80005a2 <qbufferRead+0x64>
	{
		if (p_node->p_buf != NULL)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d009      	beq.n	8000570 <qbufferRead+0x32>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	68da      	ldr	r2, [r3, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	441a      	add	r2, r3
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	68b9      	ldr	r1, [r7, #8]
 800056a:	440b      	add	r3, r1
 800056c:	7812      	ldrb	r2, [r2, #0]
 800056e:	701a      	strb	r2, [r3, #0]
		}

		if(p_node->out != p_node->in)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	685a      	ldr	r2, [r3, #4]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	429a      	cmp	r2, r3
 800057a:	d00c      	beq.n	8000596 <qbufferRead+0x58>
		{
			p_node->out = (p_node->out + 1) % p_node->len;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	3301      	adds	r3, #1
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	6892      	ldr	r2, [r2, #8]
 8000586:	fbb3 f1f2 	udiv	r1, r3, r2
 800058a:	fb01 f202 	mul.w	r2, r1, r2
 800058e:	1a9a      	subs	r2, r3, r2
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	e002      	b.n	800059c <qbufferRead+0x5e>
		}
		else
		{
			ret = false;
 8000596:	2300      	movs	r3, #0
 8000598:	75fb      	strb	r3, [r7, #23]
			break;
 800059a:	e006      	b.n	80005aa <qbufferRead+0x6c>
	for(int i=0; i<length; i++)
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	3301      	adds	r3, #1
 80005a0:	613b      	str	r3, [r7, #16]
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d8d4      	bhi.n	8000554 <qbufferRead+0x16>
		}
	}

	return ret;
 80005aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	371c      	adds	r7, #28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b085      	sub	sp, #20
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
	uint32_t ret;

	ret = (p_node->in - p_node->out) % p_node->len;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	6892      	ldr	r2, [r2, #8]
 80005cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80005d0:	fb01 f202 	mul.w	r2, r1, r2
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	60fb      	str	r3, [r7, #12]

	return ret;
 80005d8:	68fb      	ldr	r3, [r7, #12]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <ledInit>:
};



bool ledInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
	bool ret = true;
 80005ea:	2301      	movs	r3, #1
 80005ec:	76fb      	strb	r3, [r7, #27]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]

	 /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000668 <ledInit+0x84>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a19      	ldr	r2, [pc, #100]	@ (8000668 <ledInit+0x84>)
 8000602:	f043 0308 	orr.w	r3, r3, #8
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b17      	ldr	r3, [pc, #92]	@ (8000668 <ledInit+0x84>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0308 	and.w	r3, r3, #8
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

	 /*Configure GPIO pin : PB12 */

	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2302      	movs	r3, #2
 800061e:	617b      	str	r3, [r7, #20]

	 for(int i=0;i<LED_MAX_CH;i++)
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
 8000624:	e017      	b.n	8000656 <ledInit+0x72>
	 {
		 GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000626:	4a11      	ldr	r2, [pc, #68]	@ (800066c <ledInit+0x88>)
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	4413      	add	r3, r2
 800062e:	889b      	ldrh	r3, [r3, #4]
 8000630:	60bb      	str	r3, [r7, #8]
		 HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000632:	4a0e      	ldr	r2, [pc, #56]	@ (800066c <ledInit+0x88>)
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800063a:	f107 0208 	add.w	r2, r7, #8
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f000 ffff 	bl	8001644 <HAL_GPIO_Init>
		 ledOff(i);
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f810 	bl	8000670 <ledOff>
	 for(int i=0;i<LED_MAX_CH;i++)
 8000650:	69fb      	ldr	r3, [r7, #28]
 8000652:	3301      	adds	r3, #1
 8000654:	61fb      	str	r3, [r7, #28]
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	2b00      	cmp	r3, #0
 800065a:	dde4      	ble.n	8000626 <ledInit+0x42>
	 }

	return ret;
 800065c:	7efb      	ldrb	r3, [r7, #27]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3720      	adds	r7, #32
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000
 800066c:	20000004 	.word	0x20000004

08000670 <ledOff>:
{
	if(ch >=LED_MAX_CH) return;
	 HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state); // Reset이 0
}
void ledOff(uint8_t ch)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	if(ch >=LED_MAX_CH) return;
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d111      	bne.n	80006a4 <ledOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4a0a      	ldr	r2, [pc, #40]	@ (80006ac <ledOff+0x3c>)
 8000684:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	4a08      	ldr	r2, [pc, #32]	@ (80006ac <ledOff+0x3c>)
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	4413      	add	r3, r2
 8000690:	8899      	ldrh	r1, [r3, #4]
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	4a05      	ldr	r2, [pc, #20]	@ (80006ac <ledOff+0x3c>)
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	79db      	ldrb	r3, [r3, #7]
 800069c:	461a      	mov	r2, r3
 800069e:	f001 fa11 	bl	8001ac4 <HAL_GPIO_WritePin>
 80006a2:	e000      	b.n	80006a6 <ledOff+0x36>
	if(ch >=LED_MAX_CH) return;
 80006a4:	bf00      	nop

}
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000004 	.word	0x20000004

080006b0 <ledToggle>:
void ledToggle(uint8_t ch)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	if(ch >=LED_MAX_CH) return;
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d10d      	bne.n	80006dc <ledToggle+0x2c>
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4a08      	ldr	r2, [pc, #32]	@ (80006e4 <ledToggle+0x34>)
 80006c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4906      	ldr	r1, [pc, #24]	@ (80006e4 <ledToggle+0x34>)
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	440b      	add	r3, r1
 80006d0:	889b      	ldrh	r3, [r3, #4]
 80006d2:	4619      	mov	r1, r3
 80006d4:	4610      	mov	r0, r2
 80006d6:	f001 fa0d 	bl	8001af4 <HAL_GPIO_TogglePin>
 80006da:	e000      	b.n	80006de <ledToggle+0x2e>
	if(ch >=LED_MAX_CH) return;
 80006dc:	bf00      	nop
}
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000004 	.word	0x20000004

080006e8 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
	bool ret = true;
 80006ee:	2301      	movs	r3, #1
 80006f0:	71fb      	strb	r3, [r7, #7]

	//만약 Reset 핀이 눌렸다면
	//delay 500ms 안에 다시 빠르게 누르면 레지스터 값이 증가
	if(RCC->CSR & (1<<26))
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <resetInit+0x50>)
 80006f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d012      	beq.n	8000724 <resetInit+0x3c>
	{
		rtcBackupRegWrite(1,rtcBackupRegRead(1)+1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f000 f84e 	bl	80007a0 <rtcBackupRegRead>
 8000704:	4603      	mov	r3, r0
 8000706:	3301      	adds	r3, #1
 8000708:	4619      	mov	r1, r3
 800070a:	2001      	movs	r0, #1
 800070c:	f000 f858 	bl	80007c0 <rtcBackupRegWrite>
		delay(500);
 8000710:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000714:	f7ff fdda 	bl	80002cc <delay>
		reset_count = rtcBackupRegRead(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 f841 	bl	80007a0 <rtcBackupRegRead>
 800071e:	4603      	mov	r3, r0
 8000720:	4a06      	ldr	r2, [pc, #24]	@ (800073c <resetInit+0x54>)
 8000722:	6013      	str	r3, [r2, #0]
	}

	rtcBackupRegWrite(1,0);
 8000724:	2100      	movs	r1, #0
 8000726:	2001      	movs	r0, #1
 8000728:	f000 f84a 	bl	80007c0 <rtcBackupRegWrite>

	return ret;
 800072c:	79fb      	ldrb	r3, [r7, #7]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000
 800073c:	200001ac 	.word	0x200001ac

08000740 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	bool ret = true;
 8000746:	2301      	movs	r3, #1
 8000748:	71fb      	strb	r3, [r7, #7]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <rtcInit+0x54>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a11      	ldr	r2, [pc, #68]	@ (8000794 <rtcInit+0x54>)
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <rtcInit+0x54>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f003 0310 	and.w	r3, r3, #16
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

	hrtc.Instance = RTC;
 8000762:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <rtcInit+0x58>)
 8000764:	4a0d      	ldr	r2, [pc, #52]	@ (800079c <rtcInit+0x5c>)
 8000766:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <rtcInit+0x58>)
 800076a:	f04f 32ff 	mov.w	r2, #4294967295
 800076e:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <rtcInit+0x58>)
 8000772:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000776:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000778:	4807      	ldr	r0, [pc, #28]	@ (8000798 <rtcInit+0x58>)
 800077a:	f003 fcbd 	bl	80040f8 <HAL_RTC_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <rtcInit+0x48>
	{
	   Error_Handler();
 8000784:	f7ff fe13 	bl	80003ae <Error_Handler>
	}


	return ret;
 8000788:	79fb      	ldrb	r3, [r7, #7]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	200001b0 	.word	0x200001b0
 800079c:	40002800 	.word	0x40002800

080007a0 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	4804      	ldr	r0, [pc, #16]	@ (80007bc <rtcBackupRegRead+0x1c>)
 80007ac:	f003 fdc8 	bl	8004340 <HAL_RTCEx_BKUPRead>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200001b0 	.word	0x200001b0

080007c0 <rtcBackupRegWrite>:


void rtcBackupRegWrite(uint32_t index,uint32_t data)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	4803      	ldr	r0, [pc, #12]	@ (80007dc <rtcBackupRegWrite+0x1c>)
 80007d0:	f003 fd9c 	bl	800430c <HAL_RTCEx_BKUPWrite>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200001b0 	.word	0x200001b0

080007e0 <HAL_RTC_MspInit>:




void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0b      	ldr	r2, [pc, #44]	@ (800081c <HAL_RTC_MspInit+0x3c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d110      	bne.n	8000814 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80007f2:	f002 fef9 	bl	80035e8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <HAL_RTC_MspInit+0x40>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a09      	ldr	r2, [pc, #36]	@ (8000820 <HAL_RTC_MspInit+0x40>)
 80007fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <HAL_RTC_MspInit+0x40>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800080e:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <HAL_RTC_MspInit+0x44>)
 8000810:	2201      	movs	r2, #1
 8000812:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40002800 	.word	0x40002800
 8000820:	40021000 	.word	0x40021000
 8000824:	4242043c 	.word	0x4242043c

08000828 <uartInit>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_rx;


bool  uartInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
	for (int i=0; i<UART_MAX_CH;i++)
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	e007      	b.n	8000844 <uartInit+0x1c>
	{
		is_open[i] = false;
 8000834:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <uartInit+0x30>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<UART_MAX_CH;i++)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3301      	adds	r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b01      	cmp	r3, #1
 8000848:	ddf4      	ble.n	8000834 <uartInit+0xc>
	}

	return true;
 800084a:	2301      	movs	r3, #1
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	200001c4 	.word	0x200001c4

0800085c <uartOpen>:

bool     uartOpen(uint8_t ch, uint32_t baud)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8000868:	2300      	movs	r3, #0
 800086a:	73fb      	strb	r3, [r7, #15]


	switch(ch)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <uartOpen+0x1c>
 8000872:	2b01      	cmp	r3, #1
 8000874:	d007      	beq.n	8000886 <uartOpen+0x2a>
 8000876:	e074      	b.n	8000962 <uartOpen+0x106>
	{
	case _DEF_UART1:
		is_open[ch] = true;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	4a3c      	ldr	r2, [pc, #240]	@ (800096c <uartOpen+0x110>)
 800087c:	2101      	movs	r1, #1
 800087e:	54d1      	strb	r1, [r2, r3]
		ret = true;
 8000880:	2301      	movs	r3, #1
 8000882:	73fb      	strb	r3, [r7, #15]
		break;
 8000884:	e06d      	b.n	8000962 <uartOpen+0x106>

	case _DEF_UART2:
			huart1.Instance          = USART1;
 8000886:	4b3a      	ldr	r3, [pc, #232]	@ (8000970 <uartOpen+0x114>)
 8000888:	4a3a      	ldr	r2, [pc, #232]	@ (8000974 <uartOpen+0x118>)
 800088a:	601a      	str	r2, [r3, #0]
		  huart1.Init.BaudRate     = baud;
 800088c:	4a38      	ldr	r2, [pc, #224]	@ (8000970 <uartOpen+0x114>)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	6053      	str	r3, [r2, #4]
		  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8000892:	4b37      	ldr	r3, [pc, #220]	@ (8000970 <uartOpen+0x114>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
		  huart1.Init.StopBits     = UART_STOPBITS_1;
 8000898:	4b35      	ldr	r3, [pc, #212]	@ (8000970 <uartOpen+0x114>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
		  huart1.Init.Parity       = UART_PARITY_NONE;
 800089e:	4b34      	ldr	r3, [pc, #208]	@ (8000970 <uartOpen+0x114>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
		  huart1.Init.Mode         = UART_MODE_TX_RX;
 80008a4:	4b32      	ldr	r3, [pc, #200]	@ (8000970 <uartOpen+0x114>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
		  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80008aa:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <uartOpen+0x114>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
		  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000970 <uartOpen+0x114>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]

		  qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	011b      	lsls	r3, r3, #4
 80008ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000978 <uartOpen+0x11c>)
 80008bc:	4413      	add	r3, r2
 80008be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008c2:	492e      	ldr	r1, [pc, #184]	@ (800097c <uartOpen+0x120>)
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fe20 	bl	800050a <qbufferCreate>

		  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000980 <uartOpen+0x124>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000980 <uartOpen+0x124>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000980 <uartOpen+0x124>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
		  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	200f      	movs	r0, #15
 80008e8:	f000 fb69 	bl	8000fbe <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008ec:	200f      	movs	r0, #15
 80008ee:	f000 fb82 	bl	8000ff6 <HAL_NVIC_EnableIRQ>

		  HAL_UART_DeInit(&huart1);
 80008f2:	481f      	ldr	r0, [pc, #124]	@ (8000970 <uartOpen+0x114>)
 80008f4:	f003 fd90 	bl	8004418 <HAL_UART_DeInit>

		  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f8:	481d      	ldr	r0, [pc, #116]	@ (8000970 <uartOpen+0x114>)
 80008fa:	f003 fd3d 	bl	8004378 <HAL_UART_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <uartOpen+0xae>
		  {
		  	ret = false;
 8000904:	2300      	movs	r3, #0
 8000906:	73fb      	strb	r3, [r7, #15]

		  	qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
		  	qbuffer[ch].out = qbuffer[ch].in;
		  }

		break;
 8000908:	e02a      	b.n	8000960 <uartOpen+0x104>
		  	ret =true;
 800090a:	2301      	movs	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]
		  	is_open[ch]= true;
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4a16      	ldr	r2, [pc, #88]	@ (800096c <uartOpen+0x110>)
 8000912:	2101      	movs	r1, #1
 8000914:	54d1      	strb	r1, [r2, r3]
		  	if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000916:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800091a:	4918      	ldr	r1, [pc, #96]	@ (800097c <uartOpen+0x120>)
 800091c:	4814      	ldr	r0, [pc, #80]	@ (8000970 <uartOpen+0x114>)
 800091e:	f003 fe38 	bl	8004592 <HAL_UART_Receive_DMA>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <uartOpen+0xd0>
		  			ret =false;
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]
		  	qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <uartOpen+0x11c>)
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	4413      	add	r3, r2
 8000934:	3308      	adds	r3, #8
 8000936:	6819      	ldr	r1, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <uartOpen+0x128>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	685a      	ldr	r2, [r3, #4]
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	1a8a      	subs	r2, r1, r2
 8000942:	490d      	ldr	r1, [pc, #52]	@ (8000978 <uartOpen+0x11c>)
 8000944:	011b      	lsls	r3, r3, #4
 8000946:	440b      	add	r3, r1
 8000948:	601a      	str	r2, [r3, #0]
		  	qbuffer[ch].out = qbuffer[ch].in;
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	490a      	ldr	r1, [pc, #40]	@ (8000978 <uartOpen+0x11c>)
 8000950:	0112      	lsls	r2, r2, #4
 8000952:	440a      	add	r2, r1
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	4908      	ldr	r1, [pc, #32]	@ (8000978 <uartOpen+0x11c>)
 8000958:	011b      	lsls	r3, r3, #4
 800095a:	440b      	add	r3, r1
 800095c:	3304      	adds	r3, #4
 800095e:	601a      	str	r2, [r3, #0]
		break;
 8000960:	bf00      	nop
	}


	return ret;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200001c4 	.word	0x200001c4
 8000970:	200002e8 	.word	0x200002e8
 8000974:	40013800 	.word	0x40013800
 8000978:	200001c8 	.word	0x200001c8
 800097c:	200001e8 	.word	0x200001e8
 8000980:	40021000 	.word	0x40021000
 8000984:	20000330 	.word	0x20000330

08000988 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]

	switch(ch)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <uartAvailable+0x1a>
 800099c:	2b01      	cmp	r3, #1
 800099e:	d004      	beq.n	80009aa <uartAvailable+0x22>
 80009a0:	e01b      	b.n	80009da <uartAvailable+0x52>
	{
		case _DEF_UART1:
			ret = cdcAvailable();
 80009a2:	f008 fc3d 	bl	8009220 <cdcAvailable>
 80009a6:	60f8      	str	r0, [r7, #12]
			break;
 80009a8:	e017      	b.n	80009da <uartAvailable+0x52>
		case _DEF_UART2:
			qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <uartAvailable+0x5c>)
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	4413      	add	r3, r2
 80009b2:	3308      	adds	r3, #8
 80009b4:	6819      	ldr	r1, [r3, #0]
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <uartAvailable+0x60>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	1a8a      	subs	r2, r1, r2
 80009c0:	4908      	ldr	r1, [pc, #32]	@ (80009e4 <uartAvailable+0x5c>)
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	440b      	add	r3, r1
 80009c6:	601a      	str	r2, [r3, #0]
			ret = qbufferAvailable(&qbuffer[ch]);
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <uartAvailable+0x5c>)
 80009ce:	4413      	add	r3, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fdf0 	bl	80005b6 <qbufferAvailable>
 80009d6:	60f8      	str	r0, [r7, #12]
			break;
 80009d8:	bf00      	nop
	}

	return ret;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200001c8 	.word	0x200001c8
 80009e8:	20000330 	.word	0x20000330

080009ec <uartRead>:

uint8_t  uartRead(uint8_t ch)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret=0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <uartRead+0x1a>
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d005      	beq.n	8000a10 <uartRead+0x24>
 8000a04:	e00c      	b.n	8000a20 <uartRead+0x34>
	{
	case _DEF_UART1:
		ret = cdcRead();
 8000a06:	f008 fc27 	bl	8009258 <cdcRead>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	73fb      	strb	r3, [r7, #15]
		break;
 8000a0e:	e007      	b.n	8000a20 <uartRead+0x34>

	case _DEF_UART2:
		qbufferRead(&qbuffer[_DEF_UART2],&ret,1);
 8000a10:	f107 030f 	add.w	r3, r7, #15
 8000a14:	2201      	movs	r2, #1
 8000a16:	4619      	mov	r1, r3
 8000a18:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <uartRead+0x40>)
 8000a1a:	f7ff fd90 	bl	800053e <qbufferRead>
		break;
 8000a1e:	bf00      	nop
	}

	return ret;
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200001d8 	.word	0x200001d8

08000a30 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data,uint32_t length)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	73fb      	strb	r3, [r7, #15]
	uint8_t ret=0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	switch(ch)
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d002      	beq.n	8000a4e <uartWrite+0x1e>
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d007      	beq.n	8000a5c <uartWrite+0x2c>
 8000a4c:	e015      	b.n	8000a7a <uartWrite+0x4a>
	{
	case _DEF_UART1:
		ret = cdcWrite(p_data,length);
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	68b8      	ldr	r0, [r7, #8]
 8000a52:	f008 fc53 	bl	80092fc <cdcWrite>
 8000a56:	4603      	mov	r3, r0
 8000a58:	75fb      	strb	r3, [r7, #23]
		break;
 8000a5a:	e00e      	b.n	8000a7a <uartWrite+0x4a>
	case _DEF_UART2:
		status = HAL_UART_Transmit(&huart1,p_data, length, 100);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	2364      	movs	r3, #100	@ 0x64
 8000a62:	68b9      	ldr	r1, [r7, #8]
 8000a64:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <uartWrite+0x54>)
 8000a66:	f003 fd09 	bl	800447c <HAL_UART_Transmit>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	75bb      	strb	r3, [r7, #22]

		if(status == HAL_OK)
 8000a6e:	7dbb      	ldrb	r3, [r7, #22]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <uartWrite+0x48>
		{
			ret = length;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	75fb      	strb	r3, [r7, #23]
		}
		break;
 8000a78:	bf00      	nop
	}
	return ret;
 8000a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200002e8 	.word	0x200002e8

08000a88 <uartGetBaud>:

	return ret;
}

uint32_t uartGetBaud(uint8_t ch)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]

	switch(ch)
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d002      	beq.n	8000aa2 <uartGetBaud+0x1a>
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d004      	beq.n	8000aaa <uartGetBaud+0x22>
 8000aa0:	e007      	b.n	8000ab2 <uartGetBaud+0x2a>
		{
		case _DEF_UART1:
			ret = cdcGetBaud();
 8000aa2:	f008 fc53 	bl	800934c <cdcGetBaud>
 8000aa6:	60f8      	str	r0, [r7, #12]
			break;
 8000aa8:	e003      	b.n	8000ab2 <uartGetBaud+0x2a>

		case _DEF_UART2:
			ret = huart1.Init.BaudRate;  //uart의 초기화 함수에 있음
 8000aaa:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <uartGetBaud+0x34>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	60fb      	str	r3, [r7, #12]
			break;
 8000ab0:	bf00      	nop
		}


	return ret;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200002e8 	.word	0x200002e8

08000ac0 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	if(huart->Instance ==USART1)
	{

	}
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  		qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2],1);

  		HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a33      	ldr	r2, [pc, #204]	@ (8000bcc <HAL_UART_MspInit+0xe8>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d15f      	bne.n	8000bc4 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b04:	4b32      	ldr	r3, [pc, #200]	@ (8000bd0 <HAL_UART_MspInit+0xec>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a31      	ldr	r2, [pc, #196]	@ (8000bd0 <HAL_UART_MspInit+0xec>)
 8000b0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd0 <HAL_UART_MspInit+0xec>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd0 <HAL_UART_MspInit+0xec>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a2b      	ldr	r2, [pc, #172]	@ (8000bd0 <HAL_UART_MspInit+0xec>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <HAL_UART_MspInit+0xec>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4619      	mov	r1, r3
 8000b48:	4822      	ldr	r0, [pc, #136]	@ (8000bd4 <HAL_UART_MspInit+0xf0>)
 8000b4a:	f000 fd7b 	bl	8001644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	4619      	mov	r1, r3
 8000b62:	481c      	ldr	r0, [pc, #112]	@ (8000bd4 <HAL_UART_MspInit+0xf0>)
 8000b64:	f000 fd6e 	bl	8001644 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <HAL_UART_MspInit+0xf4>)
 8000b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bdc <HAL_UART_MspInit+0xf8>)
 8000b6c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd8 <HAL_UART_MspInit+0xf4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b74:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <HAL_UART_MspInit+0xf4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <HAL_UART_MspInit+0xf4>)
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b80:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <HAL_UART_MspInit+0xf4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b86:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <HAL_UART_MspInit+0xf4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <HAL_UART_MspInit+0xf4>)
 8000b8e:	2220      	movs	r2, #32
 8000b90:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <HAL_UART_MspInit+0xf4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b98:	480f      	ldr	r0, [pc, #60]	@ (8000bd8 <HAL_UART_MspInit+0xf4>)
 8000b9a:	f000 fa55 	bl	8001048 <HAL_DMA_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000ba4:	f7ff fc03 	bl	80003ae <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd8 <HAL_UART_MspInit+0xf4>)
 8000bac:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <HAL_UART_MspInit+0xf4>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2025      	movs	r0, #37	@ 0x25
 8000bba:	f000 fa00 	bl	8000fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bbe:	2025      	movs	r0, #37	@ 0x25
 8000bc0:	f000 fa19 	bl	8000ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40013800 	.word	0x40013800
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010800 	.word	0x40010800
 8000bd8:	20000330 	.word	0x20000330
 8000bdc:	40020058 	.word	0x40020058

08000be0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0c      	ldr	r2, [pc, #48]	@ (8000c20 <HAL_UART_MspDeInit+0x40>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d112      	bne.n	8000c18 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <HAL_UART_MspDeInit+0x44>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c24 <HAL_UART_MspDeInit+0x44>)
 8000bf8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000bfc:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000bfe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000c02:	4809      	ldr	r0, [pc, #36]	@ (8000c28 <HAL_UART_MspDeInit+0x48>)
 8000c04:	f000 fea2 	bl	800194c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fa75 	bl	80010fc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000c12:	2025      	movs	r0, #37	@ 0x25
 8000c14:	f000 f9fd 	bl	8001012 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40013800 	.word	0x40013800
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010800 	.word	0x40010800

08000c2c <usbInit>:

#include "usb_device.h"


bool usbInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
	bool ret = true;
 8000c32:	2301      	movs	r3, #1
 8000c34:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c46:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  //open drain
 8000c48:	2311      	movs	r3, #17
 8000c4a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2302      	movs	r3, #2
 8000c52:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	480f      	ldr	r0, [pc, #60]	@ (8000c98 <usbInit+0x6c>)
 8000c5a:	f000 fcf3 	bl	8001644 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET); //회로에 풀업이
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <usbInit+0x6c>)
 8000c66:	f000 ff2d 	bl	8001ac4 <HAL_GPIO_WritePin>
	delay(100);
 8000c6a:	2064      	movs	r0, #100	@ 0x64
 8000c6c:	f7ff fb2e 	bl	80002cc <delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c76:	4808      	ldr	r0, [pc, #32]	@ (8000c98 <usbInit+0x6c>)
 8000c78:	f000 ff24 	bl	8001ac4 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <usbInit+0x6c>)
 8000c86:	f000 fcdd 	bl	8001644 <HAL_GPIO_Init>


	 MX_USB_DEVICE_Init();
 8000c8a:	f008 fa99 	bl	80091c0 <MX_USB_DEVICE_Init>

	return ret;
 8000c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40010800 	.word	0x40010800

08000c9c <hwInit>:




void hwInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	bspInit();
 8000ca0:	f7ff faee 	bl	8000280 <bspInit>
	rtcInit();
 8000ca4:	f7ff fd4c 	bl	8000740 <rtcInit>

	resetInit();
 8000ca8:	f7ff fd1e 	bl	80006e8 <resetInit>
	ledInit();
 8000cac:	f7ff fc9a 	bl	80005e4 <ledInit>
	usbInit();
 8000cb0:	f7ff ffbc 	bl	8000c2c <usbInit>
	uartInit();
 8000cb4:	f7ff fdb8 	bl	8000828 <uartInit>

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <HAL_Init+0x28>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <HAL_Init+0x28>)
 8000cc6:	f043 0310 	orr.w	r3, r3, #16
 8000cca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f96b 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f000 f808 	bl	8000ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fb70 	bl	80003bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40022000 	.word	0x40022000

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <HAL_InitTick+0x54>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <HAL_InitTick+0x58>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f991 	bl	800102e <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00e      	b.n	8000d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d80a      	bhi.n	8000d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 f94b 	bl	8000fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <HAL_InitTick+0x5c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000010 	.word	0x20000010
 8000d44:	2000000c 	.word	0x2000000c

08000d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <HAL_IncTick+0x1c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <HAL_IncTick+0x20>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a03      	ldr	r2, [pc, #12]	@ (8000d68 <HAL_IncTick+0x20>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	20000010 	.word	0x20000010
 8000d68:	20000374 	.word	0x20000374

08000d6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b02      	ldr	r3, [pc, #8]	@ (8000d7c <HAL_GetTick+0x10>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	20000374 	.word	0x20000374

08000d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d88:	f7ff fff0 	bl	8000d6c <HAL_GetTick>
 8000d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d98:	d005      	beq.n	8000da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <HAL_Delay+0x44>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da6:	bf00      	nop
 8000da8:	f7ff ffe0 	bl	8000d6c <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d8f7      	bhi.n	8000da8 <HAL_Delay+0x28>
  {
  }
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000010 	.word	0x20000010

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0b      	blt.n	8000e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	4906      	ldr	r1, [pc, #24]	@ (8000e60 <__NVIC_EnableIRQ+0x34>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db12      	blt.n	8000e9c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 021f 	and.w	r2, r3, #31
 8000e7c:	490a      	ldr	r1, [pc, #40]	@ (8000ea8 <__NVIC_DisableIRQ+0x44>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	3320      	adds	r3, #32
 8000e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e90:	f3bf 8f4f 	dsb	sy
}
 8000e94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e96:	f3bf 8f6f 	isb	sy
}
 8000e9a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	@ 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	@ 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f74:	d301      	bcc.n	8000f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00f      	b.n	8000f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f82:	210f      	movs	r1, #15
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f7ff ff90 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff09 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd0:	f7ff ff1e 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff ff90 	bl	8000f00 <NVIC_EncodePriority>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5f 	bl	8000eac <__NVIC_SetPriority>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff11 	bl	8000e2c <__NVIC_EnableIRQ>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff1f 	bl	8000e64 <__NVIC_DisableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff94 	bl	8000f64 <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e043      	b.n	80010e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <HAL_DMA_Init+0xa8>)
 8001066:	4413      	add	r3, r2
 8001068:	4a22      	ldr	r2, [pc, #136]	@ (80010f4 <HAL_DMA_Init+0xac>)
 800106a:	fba2 2303 	umull	r2, r3, r2, r3
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	009a      	lsls	r2, r3, #2
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a1f      	ldr	r2, [pc, #124]	@ (80010f8 <HAL_DMA_Init+0xb0>)
 800107a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2202      	movs	r2, #2
 8001080:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001092:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001096:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	bffdfff8 	.word	0xbffdfff8
 80010f4:	cccccccd 	.word	0xcccccccd
 80010f8:	40020000 	.word	0x40020000

080010fc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e046      	b.n	800119c <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0201 	bic.w	r2, r2, #1
 800111c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <HAL_DMA_DeInit+0xac>)
 8001146:	4413      	add	r3, r2
 8001148:	4a18      	ldr	r2, [pc, #96]	@ (80011ac <HAL_DMA_DeInit+0xb0>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	091b      	lsrs	r3, r3, #4
 8001150:	009a      	lsls	r2, r3, #2
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a15      	ldr	r2, [pc, #84]	@ (80011b0 <HAL_DMA_DeInit+0xb4>)
 800115a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001164:	2101      	movs	r1, #1
 8001166:	fa01 f202 	lsl.w	r2, r1, r2
 800116a:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	bffdfff8 	.word	0xbffdfff8
 80011ac:	cccccccd 	.word	0xcccccccd
 80011b0:	40020000 	.word	0x40020000

080011b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_DMA_Start_IT+0x20>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e04b      	b.n	800126c <HAL_DMA_Start_IT+0xb8>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d13a      	bne.n	800125e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2202      	movs	r2, #2
 80011ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 f9eb 	bl	80015e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001216:	2b00      	cmp	r3, #0
 8001218:	d008      	beq.n	800122c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 020e 	orr.w	r2, r2, #14
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e00f      	b.n	800124c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0204 	bic.w	r2, r2, #4
 800123a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 020a 	orr.w	r2, r2, #10
 800124a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e005      	b.n	800126a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001266:	2302      	movs	r3, #2
 8001268:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800126a:	7dfb      	ldrb	r3, [r7, #23]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d008      	beq.n	800129e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2204      	movs	r2, #4
 8001290:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e020      	b.n	80012e0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 020e 	bic.w	r2, r2, #14
 80012ac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0201 	bic.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012c6:	2101      	movs	r1, #1
 80012c8:	fa01 f202 	lsl.w	r2, r1, r2
 80012cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d005      	beq.n	8001310 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2204      	movs	r2, #4
 8001308:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e051      	b.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 020e 	bic.w	r2, r2, #14
 800131e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a22      	ldr	r2, [pc, #136]	@ (80013c0 <HAL_DMA_Abort_IT+0xd4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d029      	beq.n	800138e <HAL_DMA_Abort_IT+0xa2>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a21      	ldr	r2, [pc, #132]	@ (80013c4 <HAL_DMA_Abort_IT+0xd8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d022      	beq.n	800138a <HAL_DMA_Abort_IT+0x9e>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a1f      	ldr	r2, [pc, #124]	@ (80013c8 <HAL_DMA_Abort_IT+0xdc>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d01a      	beq.n	8001384 <HAL_DMA_Abort_IT+0x98>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a1e      	ldr	r2, [pc, #120]	@ (80013cc <HAL_DMA_Abort_IT+0xe0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d012      	beq.n	800137e <HAL_DMA_Abort_IT+0x92>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <HAL_DMA_Abort_IT+0xe4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00a      	beq.n	8001378 <HAL_DMA_Abort_IT+0x8c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1b      	ldr	r2, [pc, #108]	@ (80013d4 <HAL_DMA_Abort_IT+0xe8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d102      	bne.n	8001372 <HAL_DMA_Abort_IT+0x86>
 800136c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001370:	e00e      	b.n	8001390 <HAL_DMA_Abort_IT+0xa4>
 8001372:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001376:	e00b      	b.n	8001390 <HAL_DMA_Abort_IT+0xa4>
 8001378:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800137c:	e008      	b.n	8001390 <HAL_DMA_Abort_IT+0xa4>
 800137e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001382:	e005      	b.n	8001390 <HAL_DMA_Abort_IT+0xa4>
 8001384:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001388:	e002      	b.n	8001390 <HAL_DMA_Abort_IT+0xa4>
 800138a:	2310      	movs	r3, #16
 800138c:	e000      	b.n	8001390 <HAL_DMA_Abort_IT+0xa4>
 800138e:	2301      	movs	r3, #1
 8001390:	4a11      	ldr	r2, [pc, #68]	@ (80013d8 <HAL_DMA_Abort_IT+0xec>)
 8001392:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	4798      	blx	r3
    } 
  }
  return status;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40020008 	.word	0x40020008
 80013c4:	4002001c 	.word	0x4002001c
 80013c8:	40020030 	.word	0x40020030
 80013cc:	40020044 	.word	0x40020044
 80013d0:	40020058 	.word	0x40020058
 80013d4:	4002006c 	.word	0x4002006c
 80013d8:	40020000 	.word	0x40020000

080013dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	2204      	movs	r2, #4
 80013fa:	409a      	lsls	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d04f      	beq.n	80014a4 <HAL_DMA_IRQHandler+0xc8>
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	2b00      	cmp	r3, #0
 800140c:	d04a      	beq.n	80014a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	2b00      	cmp	r3, #0
 800141a:	d107      	bne.n	800142c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0204 	bic.w	r2, r2, #4
 800142a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a66      	ldr	r2, [pc, #408]	@ (80015cc <HAL_DMA_IRQHandler+0x1f0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d029      	beq.n	800148a <HAL_DMA_IRQHandler+0xae>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a65      	ldr	r2, [pc, #404]	@ (80015d0 <HAL_DMA_IRQHandler+0x1f4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d022      	beq.n	8001486 <HAL_DMA_IRQHandler+0xaa>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a63      	ldr	r2, [pc, #396]	@ (80015d4 <HAL_DMA_IRQHandler+0x1f8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d01a      	beq.n	8001480 <HAL_DMA_IRQHandler+0xa4>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a62      	ldr	r2, [pc, #392]	@ (80015d8 <HAL_DMA_IRQHandler+0x1fc>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d012      	beq.n	800147a <HAL_DMA_IRQHandler+0x9e>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a60      	ldr	r2, [pc, #384]	@ (80015dc <HAL_DMA_IRQHandler+0x200>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00a      	beq.n	8001474 <HAL_DMA_IRQHandler+0x98>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a5f      	ldr	r2, [pc, #380]	@ (80015e0 <HAL_DMA_IRQHandler+0x204>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d102      	bne.n	800146e <HAL_DMA_IRQHandler+0x92>
 8001468:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800146c:	e00e      	b.n	800148c <HAL_DMA_IRQHandler+0xb0>
 800146e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001472:	e00b      	b.n	800148c <HAL_DMA_IRQHandler+0xb0>
 8001474:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001478:	e008      	b.n	800148c <HAL_DMA_IRQHandler+0xb0>
 800147a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800147e:	e005      	b.n	800148c <HAL_DMA_IRQHandler+0xb0>
 8001480:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001484:	e002      	b.n	800148c <HAL_DMA_IRQHandler+0xb0>
 8001486:	2340      	movs	r3, #64	@ 0x40
 8001488:	e000      	b.n	800148c <HAL_DMA_IRQHandler+0xb0>
 800148a:	2304      	movs	r3, #4
 800148c:	4a55      	ldr	r2, [pc, #340]	@ (80015e4 <HAL_DMA_IRQHandler+0x208>)
 800148e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 8094 	beq.w	80015c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014a2:	e08e      	b.n	80015c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	2202      	movs	r2, #2
 80014aa:	409a      	lsls	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d056      	beq.n	8001562 <HAL_DMA_IRQHandler+0x186>
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d051      	beq.n	8001562 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0320 	and.w	r3, r3, #32
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10b      	bne.n	80014e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 020a 	bic.w	r2, r2, #10
 80014da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a38      	ldr	r2, [pc, #224]	@ (80015cc <HAL_DMA_IRQHandler+0x1f0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d029      	beq.n	8001542 <HAL_DMA_IRQHandler+0x166>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a37      	ldr	r2, [pc, #220]	@ (80015d0 <HAL_DMA_IRQHandler+0x1f4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d022      	beq.n	800153e <HAL_DMA_IRQHandler+0x162>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a35      	ldr	r2, [pc, #212]	@ (80015d4 <HAL_DMA_IRQHandler+0x1f8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d01a      	beq.n	8001538 <HAL_DMA_IRQHandler+0x15c>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a34      	ldr	r2, [pc, #208]	@ (80015d8 <HAL_DMA_IRQHandler+0x1fc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d012      	beq.n	8001532 <HAL_DMA_IRQHandler+0x156>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a32      	ldr	r2, [pc, #200]	@ (80015dc <HAL_DMA_IRQHandler+0x200>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d00a      	beq.n	800152c <HAL_DMA_IRQHandler+0x150>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a31      	ldr	r2, [pc, #196]	@ (80015e0 <HAL_DMA_IRQHandler+0x204>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d102      	bne.n	8001526 <HAL_DMA_IRQHandler+0x14a>
 8001520:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001524:	e00e      	b.n	8001544 <HAL_DMA_IRQHandler+0x168>
 8001526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800152a:	e00b      	b.n	8001544 <HAL_DMA_IRQHandler+0x168>
 800152c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001530:	e008      	b.n	8001544 <HAL_DMA_IRQHandler+0x168>
 8001532:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001536:	e005      	b.n	8001544 <HAL_DMA_IRQHandler+0x168>
 8001538:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800153c:	e002      	b.n	8001544 <HAL_DMA_IRQHandler+0x168>
 800153e:	2320      	movs	r3, #32
 8001540:	e000      	b.n	8001544 <HAL_DMA_IRQHandler+0x168>
 8001542:	2302      	movs	r3, #2
 8001544:	4a27      	ldr	r2, [pc, #156]	@ (80015e4 <HAL_DMA_IRQHandler+0x208>)
 8001546:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001554:	2b00      	cmp	r3, #0
 8001556:	d034      	beq.n	80015c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001560:	e02f      	b.n	80015c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	2208      	movs	r2, #8
 8001568:	409a      	lsls	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4013      	ands	r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d028      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x1e8>
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d023      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 020e 	bic.w	r2, r2, #14
 800158a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001594:	2101      	movs	r1, #1
 8001596:	fa01 f202 	lsl.w	r2, r1, r2
 800159a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	4798      	blx	r3
    }
  }
  return;
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
}
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020008 	.word	0x40020008
 80015d0:	4002001c 	.word	0x4002001c
 80015d4:	40020030 	.word	0x40020030
 80015d8:	40020044 	.word	0x40020044
 80015dc:	40020058 	.word	0x40020058
 80015e0:	4002006c 	.word	0x4002006c
 80015e4:	40020000 	.word	0x40020000

080015e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fe:	2101      	movs	r1, #1
 8001600:	fa01 f202 	lsl.w	r2, r1, r2
 8001604:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b10      	cmp	r3, #16
 8001614:	d108      	bne.n	8001628 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001626:	e007      	b.n	8001638 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	60da      	str	r2, [r3, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
	...

08001644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001644:	b480      	push	{r7}
 8001646:	b08b      	sub	sp, #44	@ 0x2c
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001656:	e169      	b.n	800192c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001658:	2201      	movs	r2, #1
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	429a      	cmp	r2, r3
 8001672:	f040 8158 	bne.w	8001926 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4a9a      	ldr	r2, [pc, #616]	@ (80018e4 <HAL_GPIO_Init+0x2a0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d05e      	beq.n	800173e <HAL_GPIO_Init+0xfa>
 8001680:	4a98      	ldr	r2, [pc, #608]	@ (80018e4 <HAL_GPIO_Init+0x2a0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d875      	bhi.n	8001772 <HAL_GPIO_Init+0x12e>
 8001686:	4a98      	ldr	r2, [pc, #608]	@ (80018e8 <HAL_GPIO_Init+0x2a4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d058      	beq.n	800173e <HAL_GPIO_Init+0xfa>
 800168c:	4a96      	ldr	r2, [pc, #600]	@ (80018e8 <HAL_GPIO_Init+0x2a4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d86f      	bhi.n	8001772 <HAL_GPIO_Init+0x12e>
 8001692:	4a96      	ldr	r2, [pc, #600]	@ (80018ec <HAL_GPIO_Init+0x2a8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d052      	beq.n	800173e <HAL_GPIO_Init+0xfa>
 8001698:	4a94      	ldr	r2, [pc, #592]	@ (80018ec <HAL_GPIO_Init+0x2a8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d869      	bhi.n	8001772 <HAL_GPIO_Init+0x12e>
 800169e:	4a94      	ldr	r2, [pc, #592]	@ (80018f0 <HAL_GPIO_Init+0x2ac>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d04c      	beq.n	800173e <HAL_GPIO_Init+0xfa>
 80016a4:	4a92      	ldr	r2, [pc, #584]	@ (80018f0 <HAL_GPIO_Init+0x2ac>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d863      	bhi.n	8001772 <HAL_GPIO_Init+0x12e>
 80016aa:	4a92      	ldr	r2, [pc, #584]	@ (80018f4 <HAL_GPIO_Init+0x2b0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d046      	beq.n	800173e <HAL_GPIO_Init+0xfa>
 80016b0:	4a90      	ldr	r2, [pc, #576]	@ (80018f4 <HAL_GPIO_Init+0x2b0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d85d      	bhi.n	8001772 <HAL_GPIO_Init+0x12e>
 80016b6:	2b12      	cmp	r3, #18
 80016b8:	d82a      	bhi.n	8001710 <HAL_GPIO_Init+0xcc>
 80016ba:	2b12      	cmp	r3, #18
 80016bc:	d859      	bhi.n	8001772 <HAL_GPIO_Init+0x12e>
 80016be:	a201      	add	r2, pc, #4	@ (adr r2, 80016c4 <HAL_GPIO_Init+0x80>)
 80016c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c4:	0800173f 	.word	0x0800173f
 80016c8:	08001719 	.word	0x08001719
 80016cc:	0800172b 	.word	0x0800172b
 80016d0:	0800176d 	.word	0x0800176d
 80016d4:	08001773 	.word	0x08001773
 80016d8:	08001773 	.word	0x08001773
 80016dc:	08001773 	.word	0x08001773
 80016e0:	08001773 	.word	0x08001773
 80016e4:	08001773 	.word	0x08001773
 80016e8:	08001773 	.word	0x08001773
 80016ec:	08001773 	.word	0x08001773
 80016f0:	08001773 	.word	0x08001773
 80016f4:	08001773 	.word	0x08001773
 80016f8:	08001773 	.word	0x08001773
 80016fc:	08001773 	.word	0x08001773
 8001700:	08001773 	.word	0x08001773
 8001704:	08001773 	.word	0x08001773
 8001708:	08001721 	.word	0x08001721
 800170c:	08001735 	.word	0x08001735
 8001710:	4a79      	ldr	r2, [pc, #484]	@ (80018f8 <HAL_GPIO_Init+0x2b4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d013      	beq.n	800173e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001716:	e02c      	b.n	8001772 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	623b      	str	r3, [r7, #32]
          break;
 800171e:	e029      	b.n	8001774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	3304      	adds	r3, #4
 8001726:	623b      	str	r3, [r7, #32]
          break;
 8001728:	e024      	b.n	8001774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	3308      	adds	r3, #8
 8001730:	623b      	str	r3, [r7, #32]
          break;
 8001732:	e01f      	b.n	8001774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	330c      	adds	r3, #12
 800173a:	623b      	str	r3, [r7, #32]
          break;
 800173c:	e01a      	b.n	8001774 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001746:	2304      	movs	r3, #4
 8001748:	623b      	str	r3, [r7, #32]
          break;
 800174a:	e013      	b.n	8001774 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d105      	bne.n	8001760 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001754:	2308      	movs	r3, #8
 8001756:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	611a      	str	r2, [r3, #16]
          break;
 800175e:	e009      	b.n	8001774 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001760:	2308      	movs	r3, #8
 8001762:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	615a      	str	r2, [r3, #20]
          break;
 800176a:	e003      	b.n	8001774 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
          break;
 8001770:	e000      	b.n	8001774 <HAL_GPIO_Init+0x130>
          break;
 8001772:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2bff      	cmp	r3, #255	@ 0xff
 8001778:	d801      	bhi.n	800177e <HAL_GPIO_Init+0x13a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	e001      	b.n	8001782 <HAL_GPIO_Init+0x13e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3304      	adds	r3, #4
 8001782:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2bff      	cmp	r3, #255	@ 0xff
 8001788:	d802      	bhi.n	8001790 <HAL_GPIO_Init+0x14c>
 800178a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	e002      	b.n	8001796 <HAL_GPIO_Init+0x152>
 8001790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001792:	3b08      	subs	r3, #8
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	210f      	movs	r1, #15
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	401a      	ands	r2, r3
 80017a8:	6a39      	ldr	r1, [r7, #32]
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	431a      	orrs	r2, r3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80b1 	beq.w	8001926 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017c4:	4b4d      	ldr	r3, [pc, #308]	@ (80018fc <HAL_GPIO_Init+0x2b8>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a4c      	ldr	r2, [pc, #304]	@ (80018fc <HAL_GPIO_Init+0x2b8>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b4a      	ldr	r3, [pc, #296]	@ (80018fc <HAL_GPIO_Init+0x2b8>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017dc:	4a48      	ldr	r2, [pc, #288]	@ (8001900 <HAL_GPIO_Init+0x2bc>)
 80017de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4013      	ands	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a40      	ldr	r2, [pc, #256]	@ (8001904 <HAL_GPIO_Init+0x2c0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d013      	beq.n	8001830 <HAL_GPIO_Init+0x1ec>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a3f      	ldr	r2, [pc, #252]	@ (8001908 <HAL_GPIO_Init+0x2c4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d00d      	beq.n	800182c <HAL_GPIO_Init+0x1e8>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a3e      	ldr	r2, [pc, #248]	@ (800190c <HAL_GPIO_Init+0x2c8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d007      	beq.n	8001828 <HAL_GPIO_Init+0x1e4>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a3d      	ldr	r2, [pc, #244]	@ (8001910 <HAL_GPIO_Init+0x2cc>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d101      	bne.n	8001824 <HAL_GPIO_Init+0x1e0>
 8001820:	2303      	movs	r3, #3
 8001822:	e006      	b.n	8001832 <HAL_GPIO_Init+0x1ee>
 8001824:	2304      	movs	r3, #4
 8001826:	e004      	b.n	8001832 <HAL_GPIO_Init+0x1ee>
 8001828:	2302      	movs	r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x1ee>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_GPIO_Init+0x1ee>
 8001830:	2300      	movs	r3, #0
 8001832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001834:	f002 0203 	and.w	r2, r2, #3
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	4093      	lsls	r3, r2
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4313      	orrs	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001842:	492f      	ldr	r1, [pc, #188]	@ (8001900 <HAL_GPIO_Init+0x2bc>)
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800185c:	4b2d      	ldr	r3, [pc, #180]	@ (8001914 <HAL_GPIO_Init+0x2d0>)
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	492c      	ldr	r1, [pc, #176]	@ (8001914 <HAL_GPIO_Init+0x2d0>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]
 8001868:	e006      	b.n	8001878 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800186a:	4b2a      	ldr	r3, [pc, #168]	@ (8001914 <HAL_GPIO_Init+0x2d0>)
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	43db      	mvns	r3, r3
 8001872:	4928      	ldr	r1, [pc, #160]	@ (8001914 <HAL_GPIO_Init+0x2d0>)
 8001874:	4013      	ands	r3, r2
 8001876:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001884:	4b23      	ldr	r3, [pc, #140]	@ (8001914 <HAL_GPIO_Init+0x2d0>)
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	4922      	ldr	r1, [pc, #136]	@ (8001914 <HAL_GPIO_Init+0x2d0>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	60cb      	str	r3, [r1, #12]
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001892:	4b20      	ldr	r3, [pc, #128]	@ (8001914 <HAL_GPIO_Init+0x2d0>)
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	43db      	mvns	r3, r3
 800189a:	491e      	ldr	r1, [pc, #120]	@ (8001914 <HAL_GPIO_Init+0x2d0>)
 800189c:	4013      	ands	r3, r2
 800189e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ac:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <HAL_GPIO_Init+0x2d0>)
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4918      	ldr	r1, [pc, #96]	@ (8001914 <HAL_GPIO_Init+0x2d0>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ba:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <HAL_GPIO_Init+0x2d0>)
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4914      	ldr	r1, [pc, #80]	@ (8001914 <HAL_GPIO_Init+0x2d0>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d021      	beq.n	8001918 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <HAL_GPIO_Init+0x2d0>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	490e      	ldr	r1, [pc, #56]	@ (8001914 <HAL_GPIO_Init+0x2d0>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	600b      	str	r3, [r1, #0]
 80018e0:	e021      	b.n	8001926 <HAL_GPIO_Init+0x2e2>
 80018e2:	bf00      	nop
 80018e4:	10320000 	.word	0x10320000
 80018e8:	10310000 	.word	0x10310000
 80018ec:	10220000 	.word	0x10220000
 80018f0:	10210000 	.word	0x10210000
 80018f4:	10120000 	.word	0x10120000
 80018f8:	10110000 	.word	0x10110000
 80018fc:	40021000 	.word	0x40021000
 8001900:	40010000 	.word	0x40010000
 8001904:	40010800 	.word	0x40010800
 8001908:	40010c00 	.word	0x40010c00
 800190c:	40011000 	.word	0x40011000
 8001910:	40011400 	.word	0x40011400
 8001914:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001918:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <HAL_GPIO_Init+0x304>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	43db      	mvns	r3, r3
 8001920:	4909      	ldr	r1, [pc, #36]	@ (8001948 <HAL_GPIO_Init+0x304>)
 8001922:	4013      	ands	r3, r2
 8001924:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	3301      	adds	r3, #1
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	f47f ae8e 	bne.w	8001658 <HAL_GPIO_Init+0x14>
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	372c      	adds	r7, #44	@ 0x2c
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	40010400 	.word	0x40010400

0800194c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	@ 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800195a:	e09a      	b.n	8001a92 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800195c:	2201      	movs	r2, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 808d 	beq.w	8001a8c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001972:	4a4e      	ldr	r2, [pc, #312]	@ (8001aac <HAL_GPIO_DeInit+0x160>)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	220f      	movs	r2, #15
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4013      	ands	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a46      	ldr	r2, [pc, #280]	@ (8001ab0 <HAL_GPIO_DeInit+0x164>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d013      	beq.n	80019c4 <HAL_GPIO_DeInit+0x78>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a45      	ldr	r2, [pc, #276]	@ (8001ab4 <HAL_GPIO_DeInit+0x168>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00d      	beq.n	80019c0 <HAL_GPIO_DeInit+0x74>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a44      	ldr	r2, [pc, #272]	@ (8001ab8 <HAL_GPIO_DeInit+0x16c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_DeInit+0x70>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a43      	ldr	r2, [pc, #268]	@ (8001abc <HAL_GPIO_DeInit+0x170>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_GPIO_DeInit+0x6c>
 80019b4:	2303      	movs	r3, #3
 80019b6:	e006      	b.n	80019c6 <HAL_GPIO_DeInit+0x7a>
 80019b8:	2304      	movs	r3, #4
 80019ba:	e004      	b.n	80019c6 <HAL_GPIO_DeInit+0x7a>
 80019bc:	2302      	movs	r3, #2
 80019be:	e002      	b.n	80019c6 <HAL_GPIO_DeInit+0x7a>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_GPIO_DeInit+0x7a>
 80019c4:	2300      	movs	r3, #0
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	f002 0203 	and.w	r2, r2, #3
 80019cc:	0092      	lsls	r2, r2, #2
 80019ce:	4093      	lsls	r3, r2
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d132      	bne.n	8001a3c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80019d6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac0 <HAL_GPIO_DeInit+0x174>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	43db      	mvns	r3, r3
 80019de:	4938      	ldr	r1, [pc, #224]	@ (8001ac0 <HAL_GPIO_DeInit+0x174>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80019e4:	4b36      	ldr	r3, [pc, #216]	@ (8001ac0 <HAL_GPIO_DeInit+0x174>)
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	4934      	ldr	r1, [pc, #208]	@ (8001ac0 <HAL_GPIO_DeInit+0x174>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80019f2:	4b33      	ldr	r3, [pc, #204]	@ (8001ac0 <HAL_GPIO_DeInit+0x174>)
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4931      	ldr	r1, [pc, #196]	@ (8001ac0 <HAL_GPIO_DeInit+0x174>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001a00:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac0 <HAL_GPIO_DeInit+0x174>)
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	492d      	ldr	r1, [pc, #180]	@ (8001ac0 <HAL_GPIO_DeInit+0x174>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001a1e:	4a23      	ldr	r2, [pc, #140]	@ (8001aac <HAL_GPIO_DeInit+0x160>)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	43da      	mvns	r2, r3
 8001a2e:	481f      	ldr	r0, [pc, #124]	@ (8001aac <HAL_GPIO_DeInit+0x160>)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	400a      	ands	r2, r1
 8001a36:	3302      	adds	r3, #2
 8001a38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2bff      	cmp	r3, #255	@ 0xff
 8001a40:	d801      	bhi.n	8001a46 <HAL_GPIO_DeInit+0xfa>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	e001      	b.n	8001a4a <HAL_GPIO_DeInit+0xfe>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2bff      	cmp	r3, #255	@ 0xff
 8001a50:	d802      	bhi.n	8001a58 <HAL_GPIO_DeInit+0x10c>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_DeInit+0x112>
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	3b08      	subs	r3, #8
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	210f      	movs	r1, #15
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	2104      	movs	r1, #4
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	401a      	ands	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f47f af5e 	bne.w	800195c <HAL_GPIO_DeInit+0x10>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3724      	adds	r7, #36	@ 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	40010800 	.word	0x40010800
 8001ab4:	40010c00 	.word	0x40010c00
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	40011400 	.word	0x40011400
 8001ac0:	40010400 	.word	0x40010400

08001ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad4:	787b      	ldrb	r3, [r7, #1]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ae0:	e003      	b.n	8001aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ae2:	887b      	ldrh	r3, [r7, #2]
 8001ae4:	041a      	lsls	r2, r3, #16
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b06:	887a      	ldrh	r2, [r7, #2]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	041a      	lsls	r2, r3, #16
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	43d9      	mvns	r1, r3
 8001b12:	887b      	ldrh	r3, [r7, #2]
 8001b14:	400b      	ands	r3, r1
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	611a      	str	r2, [r3, #16]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0e8      	b.n	8001d0a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d106      	bne.n	8001b52 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f007 fe35 	bl	80097bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2203      	movs	r2, #3
 8001b56:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 fc4c 	bl	8005402 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3304      	adds	r3, #4
 8001b72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b74:	f003 fc22 	bl	80053bc <USB_CoreInit>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2202      	movs	r2, #2
 8001b82:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0bf      	b.n	8001d0a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 fc50 	bl	8005436 <USB_SetCurrentMode>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0b0      	b.n	8001d0a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e03e      	b.n	8001c2c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	440b      	add	r3, r1
 8001bbc:	3311      	adds	r3, #17
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bc2:	7bfa      	ldrb	r2, [r7, #15]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	3310      	adds	r3, #16
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bd6:	7bfa      	ldrb	r2, [r7, #15]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	3313      	adds	r3, #19
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3320      	adds	r3, #32
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3324      	adds	r3, #36	@ 0x24
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	440b      	add	r3, r1
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	791b      	ldrb	r3, [r3, #4]
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d3bb      	bcc.n	8001bae <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
 8001c3a:	e044      	b.n	8001cc6 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c7e:	7bfa      	ldrb	r2, [r7, #15]
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	440b      	add	r3, r1
 8001ca2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	791b      	ldrb	r3, [r3, #4]
 8001cca:	7bfa      	ldrb	r2, [r7, #15]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d3b5      	bcc.n	8001c3c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cda:	f003 fbb8 	bl	800544e <USB_DevInit>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e00c      	b.n	8001d0a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f005 fe37 	bl	8007976 <USB_DevDisconnect>

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_PCD_Start+0x16>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e016      	b.n	8001d56 <HAL_PCD_Start+0x44>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 fb4e 	bl	80053d6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f007 ffb0 	bl	8009ca2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f005 fe0b 	bl	8007962 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b088      	sub	sp, #32
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f005 fe0d 	bl	800798a <USB_ReadInterrupts>
 8001d70:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fb1a 	bl	80023b6 <PCD_EP_ISR_Handler>

    return;
 8001d82:	e119      	b.n	8001fb8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d013      	beq.n	8001db6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001da0:	b292      	uxth	r2, r2
 8001da2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f007 fd83 	bl	80098b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001dac:	2100      	movs	r1, #0
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f905 	bl	8001fbe <HAL_PCD_SetAddress>

    return;
 8001db4:	e100      	b.n	8001fb8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00c      	beq.n	8001dda <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001dd2:	b292      	uxth	r2, r2
 8001dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001dd8:	e0ee      	b.n	8001fb8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00c      	beq.n	8001dfe <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001df6:	b292      	uxth	r2, r2
 8001df8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001dfc:	e0dc      	b.n	8001fb8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d027      	beq.n	8001e58 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0204 	bic.w	r2, r2, #4
 8001e1a:	b292      	uxth	r2, r2
 8001e1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0208 	bic.w	r2, r2, #8
 8001e32:	b292      	uxth	r2, r2
 8001e34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f007 fd73 	bl	8009924 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e50:	b292      	uxth	r2, r2
 8001e52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001e56:	e0af      	b.n	8001fb8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8083 	beq.w	8001f6a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	77fb      	strb	r3, [r7, #31]
 8001e68:	e010      	b.n	8001e8c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	7ffb      	ldrb	r3, [r7, #31]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	441a      	add	r2, r3
 8001e76:	7ffb      	ldrb	r3, [r7, #31]
 8001e78:	8812      	ldrh	r2, [r2, #0]
 8001e7a:	b292      	uxth	r2, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	3320      	adds	r3, #32
 8001e80:	443b      	add	r3, r7
 8001e82:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001e86:	7ffb      	ldrb	r3, [r7, #31]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	77fb      	strb	r3, [r7, #31]
 8001e8c:	7ffb      	ldrb	r3, [r7, #31]
 8001e8e:	2b07      	cmp	r3, #7
 8001e90:	d9eb      	bls.n	8001e6a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	b292      	uxth	r2, r2
 8001ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0201 	bic.w	r2, r2, #1
 8001ebc:	b292      	uxth	r2, r2
 8001ebe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001ec2:	bf00      	nop
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f6      	beq.n	8001ec4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee8:	b292      	uxth	r2, r2
 8001eea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	77fb      	strb	r3, [r7, #31]
 8001ef2:	e00f      	b.n	8001f14 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001ef4:	7ffb      	ldrb	r3, [r7, #31]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	4611      	mov	r1, r2
 8001efc:	7ffa      	ldrb	r2, [r7, #31]
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	440a      	add	r2, r1
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	3320      	adds	r3, #32
 8001f06:	443b      	add	r3, r7
 8001f08:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001f0c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f0e:	7ffb      	ldrb	r3, [r7, #31]
 8001f10:	3301      	adds	r3, #1
 8001f12:	77fb      	strb	r3, [r7, #31]
 8001f14:	7ffb      	ldrb	r3, [r7, #31]
 8001f16:	2b07      	cmp	r3, #7
 8001f18:	d9ec      	bls.n	8001ef4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0208 	orr.w	r2, r2, #8
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f44:	b292      	uxth	r2, r2
 8001f46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0204 	orr.w	r2, r2, #4
 8001f5c:	b292      	uxth	r2, r2
 8001f5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f007 fcc4 	bl	80098f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f68:	e026      	b.n	8001fb8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00f      	beq.n	8001f94 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f86:	b292      	uxth	r2, r2
 8001f88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f007 fc82 	bl	8009896 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f92:	e011      	b.n	8001fb8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00c      	beq.n	8001fb8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001fb6:	bf00      	nop
  }
}
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_PCD_SetAddress+0x1a>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e012      	b.n	8001ffe <HAL_PCD_SetAddress+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f005 fca4 	bl	800793c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	4608      	mov	r0, r1
 8002010:	4611      	mov	r1, r2
 8002012:	461a      	mov	r2, r3
 8002014:	4603      	mov	r3, r0
 8002016:	70fb      	strb	r3, [r7, #3]
 8002018:	460b      	mov	r3, r1
 800201a:	803b      	strh	r3, [r7, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da0e      	bge.n	800204a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 0207 	and.w	r2, r3, #7
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	3310      	adds	r3, #16
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	705a      	strb	r2, [r3, #1]
 8002048:	e00e      	b.n	8002068 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 0207 	and.w	r2, r3, #7
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	b2da      	uxtb	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002074:	883a      	ldrh	r2, [r7, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	78ba      	ldrb	r2, [r7, #2]
 800207e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002080:	78bb      	ldrb	r3, [r7, #2]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d102      	bne.n	800208c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_PCD_EP_Open+0x94>
 8002096:	2302      	movs	r3, #2
 8002098:	e00e      	b.n	80020b8 <HAL_PCD_EP_Open+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68f9      	ldr	r1, [r7, #12]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 f9ed 	bl	8005488 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80020b6:	7afb      	ldrb	r3, [r7, #11]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	da0e      	bge.n	80020f2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	f003 0207 	and.w	r2, r3, #7
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	3310      	adds	r3, #16
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	4413      	add	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	705a      	strb	r2, [r3, #1]
 80020f0:	e00e      	b.n	8002110 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 0207 	and.w	r2, r3, #7
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4413      	add	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	b2da      	uxtb	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_PCD_EP_Close+0x6a>
 8002126:	2302      	movs	r3, #2
 8002128:	e00e      	b.n	8002148 <HAL_PCD_EP_Close+0x88>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68f9      	ldr	r1, [r7, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f003 fd65 	bl	8005c08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	460b      	mov	r3, r1
 800215e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002160:	7afb      	ldrb	r3, [r7, #11]
 8002162:	f003 0207 	and.w	r2, r3, #7
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4413      	add	r3, r2
 8002176:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2200      	movs	r2, #0
 800218e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002190:	7afb      	ldrb	r3, [r7, #11]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	b2da      	uxtb	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6979      	ldr	r1, [r7, #20]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 ff1c 	bl	8005fe0 <USB_EPStartXfer>

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	f003 0207 	and.w	r2, r3, #7
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80021d4:	681b      	ldr	r3, [r3, #0]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	460b      	mov	r3, r1
 80021ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f0:	7afb      	ldrb	r3, [r7, #11]
 80021f2:	f003 0207 	and.w	r2, r3, #7
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	3310      	adds	r3, #16
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2200      	movs	r2, #0
 8002224:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2201      	movs	r2, #1
 800222a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800222c:	7afb      	ldrb	r3, [r7, #11]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	b2da      	uxtb	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6979      	ldr	r1, [r7, #20]
 800223e:	4618      	mov	r0, r3
 8002240:	f003 fece 	bl	8005fe0 <USB_EPStartXfer>

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	7912      	ldrb	r2, [r2, #4]
 8002264:	4293      	cmp	r3, r2
 8002266:	d901      	bls.n	800226c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e04c      	b.n	8002306 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800226c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002270:	2b00      	cmp	r3, #0
 8002272:	da0e      	bge.n	8002292 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	f003 0207 	and.w	r2, r3, #7
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	3310      	adds	r3, #16
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4413      	add	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	705a      	strb	r2, [r3, #1]
 8002290:	e00c      	b.n	80022ac <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_PCD_EP_SetStall+0x7e>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e01c      	b.n	8002306 <HAL_PCD_EP_SetStall+0xb8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68f9      	ldr	r1, [r7, #12]
 80022da:	4618      	mov	r0, r3
 80022dc:	f005 fa31 	bl	8007742 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d108      	bne.n	80022fc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80022f4:	4619      	mov	r1, r3
 80022f6:	4610      	mov	r0, r2
 80022f8:	f005 fb56 	bl	80079a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	7912      	ldrb	r2, [r2, #4]
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e040      	b.n	80023ae <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800232c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002330:	2b00      	cmp	r3, #0
 8002332:	da0e      	bge.n	8002352 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	f003 0207 	and.w	r2, r3, #7
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	3310      	adds	r3, #16
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	705a      	strb	r2, [r3, #1]
 8002350:	e00e      	b.n	8002370 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 0207 	and.w	r2, r3, #7
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	b2da      	uxtb	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_PCD_EP_ClrStall+0x82>
 800238c:	2302      	movs	r3, #2
 800238e:	e00e      	b.n	80023ae <HAL_PCD_EP_ClrStall+0xa0>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68f9      	ldr	r1, [r7, #12]
 800239e:	4618      	mov	r0, r3
 80023a0:	f005 fa1f 	bl	80077e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b096      	sub	sp, #88	@ 0x58
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023be:	e3bb      	b.n	8002b38 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80023da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 8175 	bne.w	80026ce <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d14e      	bne.n	800248e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80023fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002400:	81fb      	strh	r3, [r7, #14]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	89fb      	ldrh	r3, [r7, #14]
 8002408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800240c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002410:	b29b      	uxth	r3, r3
 8002412:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3310      	adds	r3, #16
 8002418:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002422:	b29b      	uxth	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	3302      	adds	r3, #2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002444:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	441a      	add	r2, r3
 8002450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002452:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002454:	2100      	movs	r1, #0
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f007 fa03 	bl	8009862 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7b5b      	ldrb	r3, [r3, #13]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8368 	beq.w	8002b38 <PCD_EP_ISR_Handler+0x782>
 8002468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 8363 	bne.w	8002b38 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	7b5b      	ldrb	r3, [r3, #13]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800247c:	b2da      	uxtb	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	735a      	strb	r2, [r3, #13]
 800248c:	e354      	b.n	8002b38 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002494:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d034      	beq.n	8002516 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	3306      	adds	r3, #6
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80024e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024e4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80024e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024e8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	f005 faad 	bl	8007a4a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80024fc:	4013      	ands	r3, r2
 80024fe:	823b      	strh	r3, [r7, #16]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	8a3a      	ldrh	r2, [r7, #16]
 8002506:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800250a:	b292      	uxth	r2, r2
 800250c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f007 f97a 	bl	8009808 <HAL_PCD_SetupStageCallback>
 8002514:	e310      	b.n	8002b38 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002516:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800251a:	2b00      	cmp	r3, #0
 800251c:	f280 830c 	bge.w	8002b38 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29a      	uxth	r2, r3
 8002528:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800252c:	4013      	ands	r3, r2
 800252e:	83fb      	strh	r3, [r7, #30]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	8bfa      	ldrh	r2, [r7, #30]
 8002536:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800253a:	b292      	uxth	r2, r2
 800253c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002546:	b29b      	uxth	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	3306      	adds	r3, #6
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	4413      	add	r3, r2
 800255c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002568:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800256a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d019      	beq.n	80025a6 <PCD_EP_ISR_Handler+0x1f0>
 8002572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d015      	beq.n	80025a6 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002580:	6959      	ldr	r1, [r3, #20]
 8002582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002584:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002588:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800258a:	b29b      	uxth	r3, r3
 800258c:	f005 fa5d 	bl	8007a4a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	441a      	add	r2, r3
 800259a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800259e:	2100      	movs	r1, #0
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f007 f943 	bl	800982c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80025b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f040 82bd 	bne.w	8002b38 <PCD_EP_ISR_Handler+0x782>
 80025be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80025c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80025ca:	f000 82b5 	beq.w	8002b38 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	61bb      	str	r3, [r7, #24]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025dc:	b29b      	uxth	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4413      	add	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	801a      	strh	r2, [r3, #0]
 80025fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b3e      	cmp	r3, #62	@ 0x3e
 8002604:	d91d      	bls.n	8002642 <PCD_EP_ISR_Handler+0x28c>
 8002606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	647b      	str	r3, [r7, #68]	@ 0x44
 800260e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <PCD_EP_ISR_Handler+0x26a>
 800261a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800261c:	3b01      	subs	r3, #1
 800261e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29a      	uxth	r2, r3
 8002626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002628:	b29b      	uxth	r3, r3
 800262a:	029b      	lsls	r3, r3, #10
 800262c:	b29b      	uxth	r3, r3
 800262e:	4313      	orrs	r3, r2
 8002630:	b29b      	uxth	r3, r3
 8002632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800263a:	b29a      	uxth	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	801a      	strh	r2, [r3, #0]
 8002640:	e026      	b.n	8002690 <PCD_EP_ISR_Handler+0x2da>
 8002642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10a      	bne.n	8002660 <PCD_EP_ISR_Handler+0x2aa>
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002658:	b29a      	uxth	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	801a      	strh	r2, [r3, #0]
 800265e:	e017      	b.n	8002690 <PCD_EP_ISR_Handler+0x2da>
 8002660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	647b      	str	r3, [r7, #68]	@ 0x44
 8002668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <PCD_EP_ISR_Handler+0x2c4>
 8002674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002676:	3301      	adds	r3, #1
 8002678:	647b      	str	r3, [r7, #68]	@ 0x44
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	b29a      	uxth	r2, r3
 8002680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002682:	b29b      	uxth	r3, r3
 8002684:	029b      	lsls	r3, r3, #10
 8002686:	b29b      	uxth	r3, r3
 8002688:	4313      	orrs	r3, r2
 800268a:	b29a      	uxth	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800269c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a0:	827b      	strh	r3, [r7, #18]
 80026a2:	8a7b      	ldrh	r3, [r7, #18]
 80026a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80026a8:	827b      	strh	r3, [r7, #18]
 80026aa:	8a7b      	ldrh	r3, [r7, #18]
 80026ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80026b0:	827b      	strh	r3, [r7, #18]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	8a7b      	ldrh	r3, [r7, #18]
 80026b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	8013      	strh	r3, [r2, #0]
 80026cc:	e234      	b.n	8002b38 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026e2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f280 80fc 	bge.w	80028e4 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002702:	4013      	ands	r3, r2
 8002704:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800271a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800271e:	b292      	uxth	r2, r2
 8002720:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002722:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800273a:	7b1b      	ldrb	r3, [r3, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d125      	bne.n	800278c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	3306      	adds	r3, #6
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002768:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800276c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8092 	beq.w	800289a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800277c:	6959      	ldr	r1, [r3, #20]
 800277e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002780:	88da      	ldrh	r2, [r3, #6]
 8002782:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002786:	f005 f960 	bl	8007a4a <USB_ReadPMA>
 800278a:	e086      	b.n	800289a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800278c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800278e:	78db      	ldrb	r3, [r3, #3]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d10a      	bne.n	80027aa <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002794:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002798:	461a      	mov	r2, r3
 800279a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f9d9 	bl	8002b54 <HAL_PCD_EP_DB_Receive>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80027a8:	e077      	b.n	800289a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027c4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	441a      	add	r2, r3
 80027d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80027da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d024      	beq.n	8002852 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	3302      	adds	r3, #2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002830:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002834:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02e      	beq.n	800289a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002842:	6959      	ldr	r1, [r3, #20]
 8002844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002846:	891a      	ldrh	r2, [r3, #8]
 8002848:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800284c:	f005 f8fd 	bl	8007a4a <USB_ReadPMA>
 8002850:	e023      	b.n	800289a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800285a:	b29b      	uxth	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	3306      	adds	r3, #6
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800287e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800288c:	6959      	ldr	r1, [r3, #20]
 800288e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002890:	895a      	ldrh	r2, [r3, #10]
 8002892:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002896:	f005 f8d8 	bl	8007a4a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800289a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80028a2:	441a      	add	r2, r3
 80028a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80028b0:	441a      	add	r2, r3
 80028b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028b4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <PCD_EP_ISR_Handler+0x514>
 80028be:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80028c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d206      	bcs.n	80028d8 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f006 ffab 	bl	800982c <HAL_PCD_DataOutStageCallback>
 80028d6:	e005      	b.n	80028e4 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 fb7e 	bl	8005fe0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80028e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8123 	beq.w	8002b38 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80028f2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	3310      	adds	r3, #16
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800291c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002920:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	441a      	add	r2, r3
 8002932:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800293a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800293e:	b29b      	uxth	r3, r3
 8002940:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002944:	78db      	ldrb	r3, [r3, #3]
 8002946:	2b01      	cmp	r3, #1
 8002948:	f040 80a2 	bne.w	8002a90 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800294c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002954:	7b1b      	ldrb	r3, [r3, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8093 	beq.w	8002a82 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800295c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	d046      	beq.n	80029f6 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800296a:	785b      	ldrb	r3, [r3, #1]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d126      	bne.n	80029be <PCD_EP_ISR_Handler+0x608>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800297e:	b29b      	uxth	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002984:	4413      	add	r3, r2
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24
 8002988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	011a      	lsls	r2, r3, #4
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	4413      	add	r3, r2
 8002992:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002996:	623b      	str	r3, [r7, #32]
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	801a      	strh	r2, [r3, #0]
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	801a      	strh	r2, [r3, #0]
 80029bc:	e061      	b.n	8002a82 <PCD_EP_ISR_Handler+0x6cc>
 80029be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029c0:	785b      	ldrb	r3, [r3, #1]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d15d      	bne.n	8002a82 <PCD_EP_ISR_Handler+0x6cc>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029da:	4413      	add	r3, r2
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	011a      	lsls	r2, r3, #4
 80029e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e6:	4413      	add	r3, r2
 80029e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80029ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f0:	2200      	movs	r2, #0
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	e045      	b.n	8002a82 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fe:	785b      	ldrb	r3, [r3, #1]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d126      	bne.n	8002a52 <PCD_EP_ISR_Handler+0x69c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a18:	4413      	add	r3, r2
 8002a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	011a      	lsls	r2, r3, #4
 8002a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a24:	4413      	add	r3, r2
 8002a26:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3a:	801a      	strh	r2, [r3, #0]
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4e:	801a      	strh	r2, [r3, #0]
 8002a50:	e017      	b.n	8002a82 <PCD_EP_ISR_Handler+0x6cc>
 8002a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a54:	785b      	ldrb	r3, [r3, #1]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d113      	bne.n	8002a82 <PCD_EP_ISR_Handler+0x6cc>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a68:	4413      	add	r3, r2
 8002a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	011a      	lsls	r2, r3, #4
 8002a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a74:	4413      	add	r3, r2
 8002a76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a7e:	2200      	movs	r2, #0
 8002a80:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f006 feea 	bl	8009862 <HAL_PCD_DataInStageCallback>
 8002a8e:	e053      	b.n	8002b38 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d146      	bne.n	8002b2a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d907      	bls.n	8002ae4 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002adc:	1ad2      	subs	r2, r2, r3
 8002ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae0:	619a      	str	r2, [r3, #24]
 8002ae2:	e002      	b.n	8002aea <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f006 feb2 	bl	8009862 <HAL_PCD_DataInStageCallback>
 8002afe:	e01b      	b.n	8002b38 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002b08:	441a      	add	r2, r3
 8002b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002b16:	441a      	add	r2, r3
 8002b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b22:	4618      	mov	r0, r3
 8002b24:	f003 fa5c 	bl	8005fe0 <USB_EPStartXfer>
 8002b28:	e006      	b.n	8002b38 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b2e:	461a      	mov	r2, r3
 8002b30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f91b 	bl	8002d6e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	b21b      	sxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f6ff ac3b 	blt.w	80023c0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3758      	adds	r7, #88	@ 0x58
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d07e      	beq.n	8002c6a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	3302      	adds	r3, #2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	8b7b      	ldrh	r3, [r7, #26]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d306      	bcc.n	8002bae <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	699a      	ldr	r2, [r3, #24]
 8002ba4:	8b7b      	ldrh	r3, [r7, #26]
 8002ba6:	1ad2      	subs	r2, r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	619a      	str	r2, [r3, #24]
 8002bac:	e002      	b.n	8002bb4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d123      	bne.n	8002c04 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bd6:	833b      	strh	r3, [r7, #24]
 8002bd8:	8b3b      	ldrh	r3, [r7, #24]
 8002bda:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002bde:	833b      	strh	r3, [r7, #24]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	441a      	add	r2, r3
 8002bee:	8b3b      	ldrh	r3, [r7, #24]
 8002bf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01f      	beq.n	8002c4e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c28:	82fb      	strh	r3, [r7, #22]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	441a      	add	r2, r3
 8002c38:	8afb      	ldrh	r3, [r7, #22]
 8002c3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c4e:	8b7b      	ldrh	r3, [r7, #26]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8087 	beq.w	8002d64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	6959      	ldr	r1, [r3, #20]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	891a      	ldrh	r2, [r3, #8]
 8002c62:	8b7b      	ldrh	r3, [r7, #26]
 8002c64:	f004 fef1 	bl	8007a4a <USB_ReadPMA>
 8002c68:	e07c      	b.n	8002d64 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3306      	adds	r3, #6
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c92:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	699a      	ldr	r2, [r3, #24]
 8002c98:	8b7b      	ldrh	r3, [r7, #26]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d306      	bcc.n	8002cac <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	8b7b      	ldrh	r3, [r7, #26]
 8002ca4:	1ad2      	subs	r2, r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	619a      	str	r2, [r3, #24]
 8002caa:	e002      	b.n	8002cb2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d123      	bne.n	8002d02 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cd4:	83fb      	strh	r3, [r7, #30]
 8002cd6:	8bfb      	ldrh	r3, [r7, #30]
 8002cd8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002cdc:	83fb      	strh	r3, [r7, #30]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	441a      	add	r2, r3
 8002cec:	8bfb      	ldrh	r3, [r7, #30]
 8002cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d11f      	bne.n	8002d4c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d26:	83bb      	strh	r3, [r7, #28]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	441a      	add	r2, r3
 8002d36:	8bbb      	ldrh	r3, [r7, #28]
 8002d38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d4c:	8b7b      	ldrh	r3, [r7, #26]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6959      	ldr	r1, [r3, #20]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	895a      	ldrh	r2, [r3, #10]
 8002d5e:	8b7b      	ldrh	r3, [r7, #26]
 8002d60:	f004 fe73 	bl	8007a4a <USB_ReadPMA>
    }
  }

  return count;
 8002d64:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b0a4      	sub	sp, #144	@ 0x90
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 81dd 	beq.w	8003142 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d907      	bls.n	8002dd0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002dc8:	1ad2      	subs	r2, r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	619a      	str	r2, [r3, #24]
 8002dce:	e002      	b.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f040 80b9 	bne.w	8002f52 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d126      	bne.n	8002e36 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfc:	4413      	add	r3, r2
 8002dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	011a      	lsls	r2, r3, #4
 8002e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e08:	4413      	add	r3, r2
 8002e0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1e:	801a      	strh	r2, [r3, #0]
 8002e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e32:	801a      	strh	r2, [r3, #0]
 8002e34:	e01a      	b.n	8002e6c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	785b      	ldrb	r3, [r3, #1]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d116      	bne.n	8002e6c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e52:	4413      	add	r3, r2
 8002e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	011a      	lsls	r2, r3, #4
 8002e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5e:	4413      	add	r3, r2
 8002e60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e68:	2200      	movs	r2, #0
 8002e6a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	785b      	ldrb	r3, [r3, #1]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d126      	bne.n	8002ec8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	011a      	lsls	r2, r3, #4
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	801a      	strh	r2, [r3, #0]
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	801a      	strh	r2, [r3, #0]
 8002ec6:	e017      	b.n	8002ef8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d113      	bne.n	8002ef8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	4413      	add	r3, r2
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	011a      	lsls	r2, r3, #4
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	4413      	add	r3, r2
 8002eec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ef0:	623b      	str	r3, [r7, #32]
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	4619      	mov	r1, r3
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f006 fcaf 	bl	8009862 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 82fc 	beq.w	8003508 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f2a:	82fb      	strh	r3, [r7, #22]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	441a      	add	r2, r3
 8002f3a:	8afb      	ldrh	r3, [r7, #22]
 8002f3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	8013      	strh	r3, [r2, #0]
 8002f50:	e2da      	b.n	8003508 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d021      	beq.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f76:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	441a      	add	r2, r3
 8002f88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002f8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	f040 82ae 	bne.w	8003508 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fb4:	441a      	add	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fc2:	441a      	add	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	6a1a      	ldr	r2, [r3, #32]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d30b      	bcc.n	8002fec <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6a1a      	ldr	r2, [r3, #32]
 8002fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fe4:	1ad2      	subs	r2, r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	621a      	str	r2, [r3, #32]
 8002fea:	e017      	b.n	800301c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d108      	bne.n	8003006 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002ff4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ff8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003004:	e00a      	b.n	800301c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2200      	movs	r2, #0
 800301a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	785b      	ldrb	r3, [r3, #1]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d165      	bne.n	80030f0 <HAL_PCD_EP_DB_Transmit+0x382>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003032:	b29b      	uxth	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003038:	4413      	add	r3, r2
 800303a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	011a      	lsls	r2, r3, #4
 8003042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003044:	4413      	add	r3, r2
 8003046:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800304a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800304c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003056:	b29a      	uxth	r2, r3
 8003058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800305a:	801a      	strh	r2, [r3, #0]
 800305c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003060:	2b3e      	cmp	r3, #62	@ 0x3e
 8003062:	d91d      	bls.n	80030a0 <HAL_PCD_EP_DB_Transmit+0x332>
 8003064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800306c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <HAL_PCD_EP_DB_Transmit+0x310>
 8003078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800307a:	3b01      	subs	r3, #1
 800307c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800307e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29a      	uxth	r2, r3
 8003084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003086:	b29b      	uxth	r3, r3
 8003088:	029b      	lsls	r3, r3, #10
 800308a:	b29b      	uxth	r3, r3
 800308c:	4313      	orrs	r3, r2
 800308e:	b29b      	uxth	r3, r3
 8003090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003098:	b29a      	uxth	r2, r3
 800309a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	e044      	b.n	800312a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10a      	bne.n	80030be <HAL_PCD_EP_DB_Transmit+0x350>
 80030a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	e035      	b.n	800312a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80030d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030d4:	3301      	adds	r3, #1
 80030d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	029b      	lsls	r3, r3, #10
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ec:	801a      	strh	r2, [r3, #0]
 80030ee:	e01c      	b.n	800312a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	785b      	ldrb	r3, [r3, #1]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d118      	bne.n	800312a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003106:	b29b      	uxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800310c:	4413      	add	r3, r2
 800310e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	011a      	lsls	r2, r3, #4
 8003116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003118:	4413      	add	r3, r2
 800311a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800311e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003124:	b29a      	uxth	r2, r3
 8003126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003128:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	6959      	ldr	r1, [r3, #20]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	891a      	ldrh	r2, [r3, #8]
 8003136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800313a:	b29b      	uxth	r3, r3
 800313c:	f004 fc3f 	bl	80079be <USB_WritePMA>
 8003140:	e1e2      	b.n	8003508 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800314a:	b29b      	uxth	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	3306      	adds	r3, #6
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800316a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003176:	429a      	cmp	r2, r3
 8003178:	d307      	bcc.n	800318a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003182:	1ad2      	subs	r2, r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	619a      	str	r2, [r3, #24]
 8003188:	e002      	b.n	8003190 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2200      	movs	r2, #0
 800318e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f040 80c0 	bne.w	800331a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	785b      	ldrb	r3, [r3, #1]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d126      	bne.n	80031f0 <HAL_PCD_EP_DB_Transmit+0x482>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031b6:	4413      	add	r3, r2
 80031b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	011a      	lsls	r2, r3, #4
 80031c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031c2:	4413      	add	r3, r2
 80031c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031d8:	801a      	strh	r2, [r3, #0]
 80031da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031ec:	801a      	strh	r2, [r3, #0]
 80031ee:	e01a      	b.n	8003226 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	785b      	ldrb	r3, [r3, #1]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d116      	bne.n	8003226 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003206:	b29b      	uxth	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800320c:	4413      	add	r3, r2
 800320e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	011a      	lsls	r2, r3, #4
 8003216:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003218:	4413      	add	r3, r2
 800321a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800321e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003222:	2200      	movs	r2, #0
 8003224:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	677b      	str	r3, [r7, #116]	@ 0x74
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	785b      	ldrb	r3, [r3, #1]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d12b      	bne.n	800328c <HAL_PCD_EP_DB_Transmit+0x51e>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003242:	b29b      	uxth	r3, r3
 8003244:	461a      	mov	r2, r3
 8003246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003248:	4413      	add	r3, r2
 800324a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	011a      	lsls	r2, r3, #4
 8003252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003254:	4413      	add	r3, r2
 8003256:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800325a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800325e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800326a:	b29a      	uxth	r2, r3
 800326c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003270:	801a      	strh	r2, [r3, #0]
 8003272:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800327e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003282:	b29a      	uxth	r2, r3
 8003284:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003288:	801a      	strh	r2, [r3, #0]
 800328a:	e017      	b.n	80032bc <HAL_PCD_EP_DB_Transmit+0x54e>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	785b      	ldrb	r3, [r3, #1]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d113      	bne.n	80032bc <HAL_PCD_EP_DB_Transmit+0x54e>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800329c:	b29b      	uxth	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032a2:	4413      	add	r3, r2
 80032a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	011a      	lsls	r2, r3, #4
 80032ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ae:	4413      	add	r3, r2
 80032b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80032b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032b8:	2200      	movs	r2, #0
 80032ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	4619      	mov	r1, r3
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f006 facd 	bl	8009862 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f040 811a 	bne.w	8003508 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ee:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	441a      	add	r2, r3
 8003300:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800330c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003314:	b29b      	uxth	r3, r3
 8003316:	8013      	strh	r3, [r2, #0]
 8003318:	e0f6      	b.n	8003508 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d121      	bne.n	8003368 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800333a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800333e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	441a      	add	r2, r3
 8003350:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800335c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003364:	b29b      	uxth	r3, r3
 8003366:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800336e:	2b01      	cmp	r3, #1
 8003370:	f040 80ca 	bne.w	8003508 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800337c:	441a      	add	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800338a:	441a      	add	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	6a1a      	ldr	r2, [r3, #32]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	429a      	cmp	r2, r3
 800339a:	d30b      	bcc.n	80033b4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ac:	1ad2      	subs	r2, r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	621a      	str	r2, [r3, #32]
 80033b2:	e017      	b.n	80033e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d108      	bne.n	80033ce <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80033bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80033c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80033cc:	e00a      	b.n	80033e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2200      	movs	r2, #0
 80033da:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	785b      	ldrb	r3, [r3, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d165      	bne.n	80034be <HAL_PCD_EP_DB_Transmit+0x750>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003400:	b29b      	uxth	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003406:	4413      	add	r3, r2
 8003408:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	011a      	lsls	r2, r3, #4
 8003410:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003412:	4413      	add	r3, r2
 8003414:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003418:	65bb      	str	r3, [r7, #88]	@ 0x58
 800341a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	b29b      	uxth	r3, r3
 8003420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003424:	b29a      	uxth	r2, r3
 8003426:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003428:	801a      	strh	r2, [r3, #0]
 800342a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800342e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003430:	d91d      	bls.n	800346e <HAL_PCD_EP_DB_Transmit+0x700>
 8003432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	66bb      	str	r3, [r7, #104]	@ 0x68
 800343a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <HAL_PCD_EP_DB_Transmit+0x6de>
 8003446:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003448:	3b01      	subs	r3, #1
 800344a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800344c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29a      	uxth	r2, r3
 8003452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003454:	b29b      	uxth	r3, r3
 8003456:	029b      	lsls	r3, r3, #10
 8003458:	b29b      	uxth	r3, r3
 800345a:	4313      	orrs	r3, r2
 800345c:	b29b      	uxth	r3, r3
 800345e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003466:	b29a      	uxth	r2, r3
 8003468:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800346a:	801a      	strh	r2, [r3, #0]
 800346c:	e041      	b.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x784>
 800346e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10a      	bne.n	800348c <HAL_PCD_EP_DB_Transmit+0x71e>
 8003476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003484:	b29a      	uxth	r2, r3
 8003486:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003488:	801a      	strh	r2, [r3, #0]
 800348a:	e032      	b.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x784>
 800348c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HAL_PCD_EP_DB_Transmit+0x738>
 80034a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034a2:	3301      	adds	r3, #1
 80034a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	029b      	lsls	r3, r3, #10
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4313      	orrs	r3, r2
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034ba:	801a      	strh	r2, [r3, #0]
 80034bc:	e019      	b.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	785b      	ldrb	r3, [r3, #1]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d115      	bne.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d4:	4413      	add	r3, r2
 80034d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	011a      	lsls	r2, r3, #4
 80034de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e0:	4413      	add	r3, r2
 80034e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80034e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034f0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	6959      	ldr	r1, [r3, #20]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	895a      	ldrh	r2, [r3, #10]
 80034fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003502:	b29b      	uxth	r3, r3
 8003504:	f004 fa5b 	bl	80079be <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	b29b      	uxth	r3, r3
 800351a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800351e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003522:	82bb      	strh	r3, [r7, #20]
 8003524:	8abb      	ldrh	r3, [r7, #20]
 8003526:	f083 0310 	eor.w	r3, r3, #16
 800352a:	82bb      	strh	r3, [r7, #20]
 800352c:	8abb      	ldrh	r3, [r7, #20]
 800352e:	f083 0320 	eor.w	r3, r3, #32
 8003532:	82bb      	strh	r3, [r7, #20]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	441a      	add	r2, r3
 8003542:	8abb      	ldrh	r3, [r7, #20]
 8003544:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003548:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800354c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003554:	b29b      	uxth	r3, r3
 8003556:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3790      	adds	r7, #144	@ 0x90
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003562:	b480      	push	{r7}
 8003564:	b087      	sub	sp, #28
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	817b      	strh	r3, [r7, #10]
 8003570:	4613      	mov	r3, r2
 8003572:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003574:	897b      	ldrh	r3, [r7, #10]
 8003576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003580:	897b      	ldrh	r3, [r7, #10]
 8003582:	f003 0207 	and.w	r2, r3, #7
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	3310      	adds	r3, #16
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e009      	b.n	80035ac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003598:	897a      	ldrh	r2, [r7, #10]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4413      	add	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035ac:	893b      	ldrh	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2200      	movs	r2, #0
 80035b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	80da      	strh	r2, [r3, #6]
 80035c0:	e00b      	b.n	80035da <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2201      	movs	r2, #1
 80035c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	0c1b      	lsrs	r3, r3, #16
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80035ec:	4b03      	ldr	r3, [pc, #12]	@ (80035fc <HAL_PWR_EnableBkUpAccess+0x14>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
}
 80035f2:	bf00      	nop
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	420e0020 	.word	0x420e0020

08003600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e272      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8087 	beq.w	800372e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003620:	4b92      	ldr	r3, [pc, #584]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b04      	cmp	r3, #4
 800362a:	d00c      	beq.n	8003646 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800362c:	4b8f      	ldr	r3, [pc, #572]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d112      	bne.n	800365e <HAL_RCC_OscConfig+0x5e>
 8003638:	4b8c      	ldr	r3, [pc, #560]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003644:	d10b      	bne.n	800365e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003646:	4b89      	ldr	r3, [pc, #548]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d06c      	beq.n	800372c <HAL_RCC_OscConfig+0x12c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d168      	bne.n	800372c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e24c      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x76>
 8003668:	4b80      	ldr	r3, [pc, #512]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a7f      	ldr	r2, [pc, #508]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 800366e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e02e      	b.n	80036d4 <HAL_RCC_OscConfig+0xd4>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x98>
 800367e:	4b7b      	ldr	r3, [pc, #492]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a7a      	ldr	r2, [pc, #488]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b78      	ldr	r3, [pc, #480]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a77      	ldr	r2, [pc, #476]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 8003690:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e01d      	b.n	80036d4 <HAL_RCC_OscConfig+0xd4>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0xbc>
 80036a2:	4b72      	ldr	r3, [pc, #456]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a71      	ldr	r2, [pc, #452]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 80036a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b6f      	ldr	r3, [pc, #444]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6e      	ldr	r2, [pc, #440]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e00b      	b.n	80036d4 <HAL_RCC_OscConfig+0xd4>
 80036bc:	4b6b      	ldr	r3, [pc, #428]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a6a      	ldr	r2, [pc, #424]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b68      	ldr	r3, [pc, #416]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a67      	ldr	r2, [pc, #412]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fd fb46 	bl	8000d6c <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e4:	f7fd fb42 	bl	8000d6c <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	@ 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e200      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	4b5d      	ldr	r3, [pc, #372]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0xe4>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fd fb32 	bl	8000d6c <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800370c:	f7fd fb2e 	bl	8000d6c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	@ 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e1ec      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	4b53      	ldr	r3, [pc, #332]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x10c>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d063      	beq.n	8003802 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800373a:	4b4c      	ldr	r3, [pc, #304]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003746:	4b49      	ldr	r3, [pc, #292]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b08      	cmp	r3, #8
 8003750:	d11c      	bne.n	800378c <HAL_RCC_OscConfig+0x18c>
 8003752:	4b46      	ldr	r3, [pc, #280]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d116      	bne.n	800378c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	4b43      	ldr	r3, [pc, #268]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x176>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d001      	beq.n	8003776 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e1c0      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	4b3d      	ldr	r3, [pc, #244]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4939      	ldr	r1, [pc, #228]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378a:	e03a      	b.n	8003802 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003794:	4b36      	ldr	r3, [pc, #216]	@ (8003870 <HAL_RCC_OscConfig+0x270>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fd fae7 	bl	8000d6c <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a2:	f7fd fae3 	bl	8000d6c <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e1a1      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	4b2d      	ldr	r3, [pc, #180]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c0:	4b2a      	ldr	r3, [pc, #168]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4927      	ldr	r1, [pc, #156]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]
 80037d4:	e015      	b.n	8003802 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d6:	4b26      	ldr	r3, [pc, #152]	@ (8003870 <HAL_RCC_OscConfig+0x270>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fd fac6 	bl	8000d6c <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e4:	f7fd fac2 	bl	8000d6c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e180      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	4b1d      	ldr	r3, [pc, #116]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d03a      	beq.n	8003884 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d019      	beq.n	800384a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003816:	4b17      	ldr	r3, [pc, #92]	@ (8003874 <HAL_RCC_OscConfig+0x274>)
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381c:	f7fd faa6 	bl	8000d6c <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003824:	f7fd faa2 	bl	8000d6c <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e160      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003836:	4b0d      	ldr	r3, [pc, #52]	@ (800386c <HAL_RCC_OscConfig+0x26c>)
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003842:	2001      	movs	r0, #1
 8003844:	f000 face 	bl	8003de4 <RCC_Delay>
 8003848:	e01c      	b.n	8003884 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384a:	4b0a      	ldr	r3, [pc, #40]	@ (8003874 <HAL_RCC_OscConfig+0x274>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003850:	f7fd fa8c 	bl	8000d6c <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003856:	e00f      	b.n	8003878 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003858:	f7fd fa88 	bl	8000d6c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d908      	bls.n	8003878 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e146      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000
 8003870:	42420000 	.word	0x42420000
 8003874:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003878:	4b92      	ldr	r3, [pc, #584]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800387a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e9      	bne.n	8003858 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80a6 	beq.w	80039de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003892:	2300      	movs	r3, #0
 8003894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003896:	4b8b      	ldr	r3, [pc, #556]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10d      	bne.n	80038be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	4b88      	ldr	r3, [pc, #544]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4a87      	ldr	r2, [pc, #540]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ac:	61d3      	str	r3, [r2, #28]
 80038ae:	4b85      	ldr	r3, [pc, #532]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ba:	2301      	movs	r3, #1
 80038bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038be:	4b82      	ldr	r3, [pc, #520]	@ (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d118      	bne.n	80038fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ca:	4b7f      	ldr	r3, [pc, #508]	@ (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a7e      	ldr	r2, [pc, #504]	@ (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d6:	f7fd fa49 	bl	8000d6c <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038de:	f7fd fa45 	bl	8000d6c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b64      	cmp	r3, #100	@ 0x64
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e103      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f0:	4b75      	ldr	r3, [pc, #468]	@ (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x312>
 8003904:	4b6f      	ldr	r3, [pc, #444]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	4a6e      	ldr	r2, [pc, #440]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6213      	str	r3, [r2, #32]
 8003910:	e02d      	b.n	800396e <HAL_RCC_OscConfig+0x36e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0x334>
 800391a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	4a69      	ldr	r2, [pc, #420]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6213      	str	r3, [r2, #32]
 8003926:	4b67      	ldr	r3, [pc, #412]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	4a66      	ldr	r2, [pc, #408]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	f023 0304 	bic.w	r3, r3, #4
 8003930:	6213      	str	r3, [r2, #32]
 8003932:	e01c      	b.n	800396e <HAL_RCC_OscConfig+0x36e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b05      	cmp	r3, #5
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_OscConfig+0x356>
 800393c:	4b61      	ldr	r3, [pc, #388]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4a60      	ldr	r2, [pc, #384]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003942:	f043 0304 	orr.w	r3, r3, #4
 8003946:	6213      	str	r3, [r2, #32]
 8003948:	4b5e      	ldr	r3, [pc, #376]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6213      	str	r3, [r2, #32]
 8003954:	e00b      	b.n	800396e <HAL_RCC_OscConfig+0x36e>
 8003956:	4b5b      	ldr	r3, [pc, #364]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6213      	str	r3, [r2, #32]
 8003962:	4b58      	ldr	r3, [pc, #352]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	4a57      	ldr	r2, [pc, #348]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	f023 0304 	bic.w	r3, r3, #4
 800396c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d015      	beq.n	80039a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003976:	f7fd f9f9 	bl	8000d6c <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fd f9f5 	bl	8000d6c <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e0b1      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	4b4b      	ldr	r3, [pc, #300]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ee      	beq.n	800397e <HAL_RCC_OscConfig+0x37e>
 80039a0:	e014      	b.n	80039cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a2:	f7fd f9e3 	bl	8000d6c <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fd f9df 	bl	8000d6c <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e09b      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c0:	4b40      	ldr	r3, [pc, #256]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ee      	bne.n	80039aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d105      	bne.n	80039de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8087 	beq.w	8003af6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039e8:	4b36      	ldr	r3, [pc, #216]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d061      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d146      	bne.n	8003a8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fc:	4b33      	ldr	r3, [pc, #204]	@ (8003acc <HAL_RCC_OscConfig+0x4cc>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7fd f9b3 	bl	8000d6c <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0a:	f7fd f9af 	bl	8000d6c <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e06d      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1c:	4b29      	ldr	r3, [pc, #164]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a30:	d108      	bne.n	8003a44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a32:	4b24      	ldr	r3, [pc, #144]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	4921      	ldr	r1, [pc, #132]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a44:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a19      	ldr	r1, [r3, #32]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	430b      	orrs	r3, r1
 8003a56:	491b      	ldr	r1, [pc, #108]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fd f983 	bl	8000d6c <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fd f97f 	bl	8000d6c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e03d      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x46a>
 8003a88:	e035      	b.n	8003af6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	4b10      	ldr	r3, [pc, #64]	@ (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fd f96c 	bl	8000d6c <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fd f968 	bl	8000d6c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e026      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aaa:	4b06      	ldr	r3, [pc, #24]	@ (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x498>
 8003ab6:	e01e      	b.n	8003af6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d107      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e019      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b00 <HAL_RCC_OscConfig+0x500>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000

08003b04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0d0      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	4b6a      	ldr	r3, [pc, #424]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d910      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b67      	ldr	r3, [pc, #412]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	4965      	ldr	r1, [pc, #404]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b63      	ldr	r3, [pc, #396]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0b8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	4b59      	ldr	r3, [pc, #356]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a58      	ldr	r2, [pc, #352]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b78:	4b53      	ldr	r3, [pc, #332]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003b82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b50      	ldr	r3, [pc, #320]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494d      	ldr	r1, [pc, #308]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d040      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b47      	ldr	r3, [pc, #284]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d115      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc2:	4b41      	ldr	r3, [pc, #260]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e073      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e06b      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003be2:	4b39      	ldr	r3, [pc, #228]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f023 0203 	bic.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4936      	ldr	r1, [pc, #216]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bf4:	f7fd f8ba 	bl	8000d6c <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfc:	f7fd f8b6 	bl	8000d6c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e053      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 020c 	and.w	r2, r3, #12
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1eb      	bne.n	8003bfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c24:	4b27      	ldr	r3, [pc, #156]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d210      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b24      	ldr	r3, [pc, #144]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 0207 	bic.w	r2, r3, #7
 8003c3a:	4922      	ldr	r1, [pc, #136]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b20      	ldr	r3, [pc, #128]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e032      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b19      	ldr	r3, [pc, #100]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4916      	ldr	r1, [pc, #88]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c7e:	4b12      	ldr	r3, [pc, #72]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	490e      	ldr	r1, [pc, #56]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c92:	f000 f821 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490a      	ldr	r1, [pc, #40]	@ (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a09      	ldr	r2, [pc, #36]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cae:	4b09      	ldr	r3, [pc, #36]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fd f818 	bl	8000ce8 <HAL_InitTick>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40022000 	.word	0x40022000
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	08009de0 	.word	0x08009de0
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	2000000c 	.word	0x2000000c

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	2300      	movs	r3, #0
 8003cec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x94>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d002      	beq.n	8003d08 <HAL_RCC_GetSysClockFreq+0x30>
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d003      	beq.n	8003d0e <HAL_RCC_GetSysClockFreq+0x36>
 8003d06:	e027      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d08:	4b19      	ldr	r3, [pc, #100]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d0a:	613b      	str	r3, [r7, #16]
      break;
 8003d0c:	e027      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	0c9b      	lsrs	r3, r3, #18
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	4a17      	ldr	r2, [pc, #92]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d18:	5cd3      	ldrb	r3, [r2, r3]
 8003d1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d010      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d26:	4b11      	ldr	r3, [pc, #68]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x94>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	0c5b      	lsrs	r3, r3, #17
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	4a11      	ldr	r2, [pc, #68]	@ (8003d78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d32:	5cd3      	ldrb	r3, [r2, r3]
 8003d34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a0d      	ldr	r2, [pc, #52]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d3a:	fb03 f202 	mul.w	r2, r3, r2
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	e004      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	613b      	str	r3, [r7, #16]
      break;
 8003d56:	e002      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d58:	4b05      	ldr	r3, [pc, #20]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d5a:	613b      	str	r3, [r7, #16]
      break;
 8003d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d5e:	693b      	ldr	r3, [r7, #16]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	007a1200 	.word	0x007a1200
 8003d74:	08009df8 	.word	0x08009df8
 8003d78:	08009e08 	.word	0x08009e08
 8003d7c:	003d0900 	.word	0x003d0900

08003d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d84:	4b02      	ldr	r3, [pc, #8]	@ (8003d90 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d86:	681b      	ldr	r3, [r3, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr
 8003d90:	20000000 	.word	0x20000000

08003d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d98:	f7ff fff2 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	@ (8003db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000
 8003db8:	08009df0 	.word	0x08009df0

08003dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dc0:	f7ff ffde 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b05      	ldr	r3, [pc, #20]	@ (8003ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	0adb      	lsrs	r3, r3, #11
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4903      	ldr	r1, [pc, #12]	@ (8003de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	08009df0 	.word	0x08009df0

08003de4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dec:	4b0a      	ldr	r3, [pc, #40]	@ (8003e18 <RCC_Delay+0x34>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a0a      	ldr	r2, [pc, #40]	@ (8003e1c <RCC_Delay+0x38>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	0a5b      	lsrs	r3, r3, #9
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e00:	bf00      	nop
  }
  while (Delay --);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1e5a      	subs	r2, r3, #1
 8003e06:	60fa      	str	r2, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f9      	bne.n	8003e00 <RCC_Delay+0x1c>
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	20000000 	.word	0x20000000
 8003e1c:	10624dd3 	.word	0x10624dd3

08003e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d07d      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e40:	4b4f      	ldr	r3, [pc, #316]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4c:	4b4c      	ldr	r3, [pc, #304]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	4a4b      	ldr	r2, [pc, #300]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	61d3      	str	r3, [r2, #28]
 8003e58:	4b49      	ldr	r3, [pc, #292]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e64:	2301      	movs	r3, #1
 8003e66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e68:	4b46      	ldr	r3, [pc, #280]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d118      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e74:	4b43      	ldr	r3, [pc, #268]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a42      	ldr	r2, [pc, #264]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e80:	f7fc ff74 	bl	8000d6c <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e86:	e008      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e88:	f7fc ff70 	bl	8000d6c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	@ 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e06d      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ea6:	4b36      	ldr	r3, [pc, #216]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d02e      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d027      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ecc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ece:	4b2e      	ldr	r3, [pc, #184]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eda:	4a29      	ldr	r2, [pc, #164]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d014      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fc ff3f 	bl	8000d6c <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fc ff3b 	bl	8000d6c <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e036      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f08:	4b1d      	ldr	r3, [pc, #116]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ee      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f14:	4b1a      	ldr	r3, [pc, #104]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4917      	ldr	r1, [pc, #92]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f26:	7dfb      	ldrb	r3, [r7, #23]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d105      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2c:	4b14      	ldr	r3, [pc, #80]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	4a13      	ldr	r2, [pc, #76]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f44:	4b0e      	ldr	r3, [pc, #56]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	490b      	ldr	r1, [pc, #44]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f62:	4b07      	ldr	r3, [pc, #28]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	4904      	ldr	r1, [pc, #16]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40007000 	.word	0x40007000
 8003f88:	42420440 	.word	0x42420440

08003f8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	f200 808a 	bhi.w	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d045      	beq.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d075      	beq.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003fc2:	e082      	b.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003fc4:	4b46      	ldr	r3, [pc, #280]	@ (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003fca:	4b45      	ldr	r3, [pc, #276]	@ (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d07b      	beq.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	0c9b      	lsrs	r3, r3, #18
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	4a41      	ldr	r2, [pc, #260]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003fe0:	5cd3      	ldrb	r3, [r2, r3]
 8003fe2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d015      	beq.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fee:	4b3c      	ldr	r3, [pc, #240]	@ (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	0c5b      	lsrs	r3, r3, #17
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	4a3b      	ldr	r2, [pc, #236]	@ (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003ffa:	5cd3      	ldrb	r3, [r2, r3]
 8003ffc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004008:	4a38      	ldr	r2, [pc, #224]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	e004      	b.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4a34      	ldr	r2, [pc, #208]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004024:	4b2e      	ldr	r3, [pc, #184]	@ (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800402c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004030:	d102      	bne.n	8004038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	61bb      	str	r3, [r7, #24]
      break;
 8004036:	e04a      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4a2d      	ldr	r2, [pc, #180]	@ (80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	61bb      	str	r3, [r7, #24]
      break;
 8004046:	e042      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004048:	4b25      	ldr	r3, [pc, #148]	@ (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004058:	d108      	bne.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004064:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	e01f      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004076:	d109      	bne.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004078:	4b19      	ldr	r3, [pc, #100]	@ (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004084:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e00f      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004092:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004096:	d11c      	bne.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004098:	4b11      	ldr	r3, [pc, #68]	@ (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d016      	beq.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80040a4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80040a8:	61bb      	str	r3, [r7, #24]
      break;
 80040aa:	e012      	b.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80040ac:	e011      	b.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80040ae:	f7ff fe85 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 80040b2:	4602      	mov	r2, r0
 80040b4:	4b0a      	ldr	r3, [pc, #40]	@ (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	0b9b      	lsrs	r3, r3, #14
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	3301      	adds	r3, #1
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	61bb      	str	r3, [r7, #24]
      break;
 80040c8:	e004      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80040d2:	bf00      	nop
    }
  }
  return (frequency);
 80040d4:	69bb      	ldr	r3, [r7, #24]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3720      	adds	r7, #32
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000
 80040e4:	08009e0c 	.word	0x08009e0c
 80040e8:	08009e1c 	.word	0x08009e1c
 80040ec:	007a1200 	.word	0x007a1200
 80040f0:	003d0900 	.word	0x003d0900
 80040f4:	aaaaaaab 	.word	0xaaaaaaab

080040f8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e07a      	b.n	8004204 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	7c5b      	ldrb	r3, [r3, #17]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fc fb5e 	bl	80007e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f870 	bl	8004210 <HAL_RTC_WaitForSynchro>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2204      	movs	r2, #4
 800413a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e061      	b.n	8004204 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f892 	bl	800426a <RTC_EnterInitMode>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2204      	movs	r2, #4
 8004150:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e056      	b.n	8004204 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0207 	bic.w	r2, r2, #7
 8004164:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800416e:	4b27      	ldr	r3, [pc, #156]	@ (800420c <HAL_RTC_Init+0x114>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	4a26      	ldr	r2, [pc, #152]	@ (800420c <HAL_RTC_Init+0x114>)
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800417a:	4b24      	ldr	r3, [pc, #144]	@ (800420c <HAL_RTC_Init+0x114>)
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	4921      	ldr	r1, [pc, #132]	@ (800420c <HAL_RTC_Init+0x114>)
 8004188:	4313      	orrs	r3, r2
 800418a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d003      	beq.n	800419e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e00e      	b.n	80041bc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800419e:	2001      	movs	r0, #1
 80041a0:	f7ff fef4 	bl	8003f8c <HAL_RCCEx_GetPeriphCLKFreq>
 80041a4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d104      	bne.n	80041b6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2204      	movs	r2, #4
 80041b0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e026      	b.n	8004204 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	0c1a      	lsrs	r2, r3, #16
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f002 020f 	and.w	r2, r2, #15
 80041c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	b292      	uxth	r2, r2
 80041d2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f870 	bl	80042ba <RTC_ExitInitMode>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d004      	beq.n	80041ea <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2204      	movs	r2, #4
 80041e4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e00c      	b.n	8004204 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004202:	2300      	movs	r3, #0
  }
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40006c00 	.word	0x40006c00

08004210 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e01d      	b.n	8004262 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0208 	bic.w	r2, r2, #8
 8004234:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004236:	f7fc fd99 	bl	8000d6c <HAL_GetTick>
 800423a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800423c:	e009      	b.n	8004252 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800423e:	f7fc fd95 	bl	8000d6c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800424c:	d901      	bls.n	8004252 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e007      	b.n	8004262 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0ee      	beq.n	800423e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004276:	f7fc fd79 	bl	8000d6c <HAL_GetTick>
 800427a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800427c:	e009      	b.n	8004292 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800427e:	f7fc fd75 	bl	8000d6c <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800428c:	d901      	bls.n	8004292 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e00f      	b.n	80042b2 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0ee      	beq.n	800427e <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0210 	orr.w	r2, r2, #16
 80042ae:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0210 	bic.w	r2, r2, #16
 80042d4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80042d6:	f7fc fd49 	bl	8000d6c <HAL_GetTick>
 80042da:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042dc:	e009      	b.n	80042f2 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80042de:	f7fc fd45 	bl	8000d6c <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042ec:	d901      	bls.n	80042f2 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e007      	b.n	8004302 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ee      	beq.n	80042de <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 800431c:	4b07      	ldr	r3, [pc, #28]	@ (800433c <HAL_RTCEx_BKUPWrite+0x30>)
 800431e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4413      	add	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	b292      	uxth	r2, r2
 8004330:	601a      	str	r2, [r3, #0]
}
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr
 800433c:	40006c00 	.word	0x40006c00

08004340 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8004352:	4b08      	ldr	r3, [pc, #32]	@ (8004374 <HAL_RTCEx_BKUPRead+0x34>)
 8004354:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8004368:	68bb      	ldr	r3, [r7, #8]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	40006c00 	.word	0x40006c00

08004378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e042      	b.n	8004410 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fc fba0 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2224      	movs	r2, #36	@ 0x24
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 ff6f 	bl	80052a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e024      	b.n	8004474 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2224      	movs	r2, #36	@ 0x24
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004440:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fc fbcc 	bl	8000be0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	@ 0x28
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b20      	cmp	r3, #32
 800449a:	d175      	bne.n	8004588 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_UART_Transmit+0x2c>
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e06e      	b.n	800458a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2221      	movs	r2, #33	@ 0x21
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ba:	f7fc fc57 	bl	8000d6c <HAL_GetTick>
 80044be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	88fa      	ldrh	r2, [r7, #6]
 80044c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	88fa      	ldrh	r2, [r7, #6]
 80044ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d4:	d108      	bne.n	80044e8 <HAL_UART_Transmit+0x6c>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	e003      	b.n	80044f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044f0:	e02e      	b.n	8004550 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2200      	movs	r2, #0
 80044fa:	2180      	movs	r1, #128	@ 0x80
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 fc1a 	bl	8004d36 <UART_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e03a      	b.n	800458a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10b      	bne.n	8004532 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004528:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	3302      	adds	r3, #2
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	e007      	b.n	8004542 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	781a      	ldrb	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	3301      	adds	r3, #1
 8004540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1cb      	bne.n	80044f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2200      	movs	r2, #0
 8004562:	2140      	movs	r1, #64	@ 0x40
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fbe6 	bl	8004d36 <UART_WaitOnFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e006      	b.n	800458a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	e000      	b.n	800458a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004588:	2302      	movs	r3, #2
  }
}
 800458a:	4618      	mov	r0, r3
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	4613      	mov	r3, r2
 800459e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d112      	bne.n	80045d2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_UART_Receive_DMA+0x26>
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e00b      	b.n	80045d4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	461a      	mov	r2, r3
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 fc0d 	bl	8004de8 <UART_Start_Receive_DMA>
 80045ce:	4603      	mov	r3, r0
 80045d0:	e000      	b.n	80045d4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
  }
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b0ba      	sub	sp, #232	@ 0xe8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004602:	2300      	movs	r3, #0
 8004604:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004608:	2300      	movs	r3, #0
 800460a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800460e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800461a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10f      	bne.n	8004642 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_UART_IRQHandler+0x66>
 800462e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fd72 	bl	8005124 <UART_Receive_IT>
      return;
 8004640:	e25b      	b.n	8004afa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80de 	beq.w	8004808 <HAL_UART_IRQHandler+0x22c>
 800464c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800465c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80d1 	beq.w	8004808 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00b      	beq.n	800468a <HAL_UART_IRQHandler+0xae>
 8004672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004682:	f043 0201 	orr.w	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800468a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00b      	beq.n	80046ae <HAL_UART_IRQHandler+0xd2>
 8004696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a6:	f043 0202 	orr.w	r2, r3, #2
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <HAL_UART_IRQHandler+0xf6>
 80046ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ca:	f043 0204 	orr.w	r2, r3, #4
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d011      	beq.n	8004702 <HAL_UART_IRQHandler+0x126>
 80046de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046e2:	f003 0320 	and.w	r3, r3, #32
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d105      	bne.n	80046f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fa:	f043 0208 	orr.w	r2, r3, #8
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 81f2 	beq.w	8004af0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800470c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_UART_IRQHandler+0x14e>
 8004718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fcfd 	bl	8005124 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d103      	bne.n	8004756 <HAL_UART_IRQHandler+0x17a>
 800474e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004752:	2b00      	cmp	r3, #0
 8004754:	d04f      	beq.n	80047f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fc07 	bl	8004f6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d041      	beq.n	80047ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3314      	adds	r3, #20
 8004770:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004778:	e853 3f00 	ldrex	r3, [r3]
 800477c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004780:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004788:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3314      	adds	r3, #20
 8004792:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004796:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800479a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1d9      	bne.n	800476a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d013      	beq.n	80047e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c2:	4a7e      	ldr	r2, [pc, #504]	@ (80049bc <HAL_UART_IRQHandler+0x3e0>)
 80047c4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fc fd8e 	bl	80012ec <HAL_DMA_Abort_IT>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d016      	beq.n	8004804 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047e0:	4610      	mov	r0, r2
 80047e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e4:	e00e      	b.n	8004804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fc f96a 	bl	8000ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ec:	e00a      	b.n	8004804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc f966 	bl	8000ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f4:	e006      	b.n	8004804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fc f962 	bl	8000ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004802:	e175      	b.n	8004af0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004804:	bf00      	nop
    return;
 8004806:	e173      	b.n	8004af0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480c:	2b01      	cmp	r3, #1
 800480e:	f040 814f 	bne.w	8004ab0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004816:	f003 0310 	and.w	r3, r3, #16
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 8148 	beq.w	8004ab0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8141 	beq.w	8004ab0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800482e:	2300      	movs	r3, #0
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 80b6 	beq.w	80049c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004860:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8145 	beq.w	8004af4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800486e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004872:	429a      	cmp	r2, r3
 8004874:	f080 813e 	bcs.w	8004af4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800487e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b20      	cmp	r3, #32
 8004888:	f000 8088 	beq.w	800499c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	330c      	adds	r3, #12
 8004892:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	330c      	adds	r3, #12
 80048b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80048b8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80048d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1d9      	bne.n	800488c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3314      	adds	r3, #20
 80048de:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3314      	adds	r3, #20
 80048f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048fc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004900:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004904:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800490e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e1      	bne.n	80048d8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3314      	adds	r3, #20
 800491a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004924:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004926:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800492a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3314      	adds	r3, #20
 8004934:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004938:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800493a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800493e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004946:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e3      	bne.n	8004914 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800496a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800496c:	f023 0310 	bic.w	r3, r3, #16
 8004970:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	330c      	adds	r3, #12
 800497a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800497e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004980:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004984:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800498c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e3      	bne.n	800495a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004996:	4618      	mov	r0, r3
 8004998:	f7fc fc6c 	bl	8001274 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f8b6 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049b8:	e09c      	b.n	8004af4 <HAL_UART_IRQHandler+0x518>
 80049ba:	bf00      	nop
 80049bc:	0800502f 	.word	0x0800502f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 808e 	beq.w	8004af8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8089 	beq.w	8004af8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	330c      	adds	r3, #12
 80049ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e3      	bne.n	80049e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3314      	adds	r3, #20
 8004a24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3314      	adds	r3, #20
 8004a3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a42:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1e3      	bne.n	8004a1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	330c      	adds	r3, #12
 8004a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0310 	bic.w	r3, r3, #16
 8004a7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	330c      	adds	r3, #12
 8004a84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a88:	61fa      	str	r2, [r7, #28]
 8004a8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	69b9      	ldr	r1, [r7, #24]
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	617b      	str	r3, [r7, #20]
   return(result);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e3      	bne.n	8004a64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004aa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f83b 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004aae:	e023      	b.n	8004af8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d009      	beq.n	8004ad0 <HAL_UART_IRQHandler+0x4f4>
 8004abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fac4 	bl	8005056 <UART_Transmit_IT>
    return;
 8004ace:	e014      	b.n	8004afa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00e      	beq.n	8004afa <HAL_UART_IRQHandler+0x51e>
 8004adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fb03 	bl	80050f4 <UART_EndTransmit_IT>
    return;
 8004aee:	e004      	b.n	8004afa <HAL_UART_IRQHandler+0x51e>
    return;
 8004af0:	bf00      	nop
 8004af2:	e002      	b.n	8004afa <HAL_UART_IRQHandler+0x51e>
      return;
 8004af4:	bf00      	nop
 8004af6:	e000      	b.n	8004afa <HAL_UART_IRQHandler+0x51e>
      return;
 8004af8:	bf00      	nop
  }
}
 8004afa:	37e8      	adds	r7, #232	@ 0xe8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr

08004b12 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr

08004b3a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b09c      	sub	sp, #112	@ 0x70
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d172      	bne.n	8004c3c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004b56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b58:	2200      	movs	r2, #0
 8004b5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	330c      	adds	r3, #12
 8004b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	330c      	adds	r3, #12
 8004b7a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004b7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b7e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e5      	bne.n	8004b5c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3314      	adds	r3, #20
 8004b96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba2:	f023 0301 	bic.w	r3, r3, #1
 8004ba6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3314      	adds	r3, #20
 8004bae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004bb0:	647a      	str	r2, [r7, #68]	@ 0x44
 8004bb2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e5      	bne.n	8004b90 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3314      	adds	r3, #20
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	623b      	str	r3, [r7, #32]
   return(result);
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bda:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3314      	adds	r3, #20
 8004be2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004be4:	633a      	str	r2, [r7, #48]	@ 0x30
 8004be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d119      	bne.n	8004c3c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0310 	bic.w	r3, r3, #16
 8004c1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c28:	61fa      	str	r2, [r7, #28]
 8004c2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	69b9      	ldr	r1, [r7, #24]
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	617b      	str	r3, [r7, #20]
   return(result);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e5      	bne.n	8004c08 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c3e:	2200      	movs	r2, #0
 8004c40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d106      	bne.n	8004c58 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004c52:	f7ff ff67 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c56:	e002      	b.n	8004c5e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004c58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004c5a:	f7fb ff3a 	bl	8000ad2 <HAL_UART_RxCpltCallback>
}
 8004c5e:	bf00      	nop
 8004c60:	3770      	adds	r7, #112	@ 0x70
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b084      	sub	sp, #16
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d108      	bne.n	8004c94 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f7ff ff49 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c92:	e002      	b.n	8004c9a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff ff3c 	bl	8004b12 <HAL_UART_RxHalfCpltCallback>
}
 8004c9a:	bf00      	nop
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bf14      	ite	ne
 8004cc2:	2301      	movne	r3, #1
 8004cc4:	2300      	moveq	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b21      	cmp	r3, #33	@ 0x21
 8004cd4:	d108      	bne.n	8004ce8 <UART_DMAError+0x46>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004ce2:	68b8      	ldr	r0, [r7, #8]
 8004ce4:	f000 f91a 	bl	8004f1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf14      	ite	ne
 8004cf6:	2301      	movne	r3, #1
 8004cf8:	2300      	moveq	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b22      	cmp	r3, #34	@ 0x22
 8004d08:	d108      	bne.n	8004d1c <UART_DMAError+0x7a>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2200      	movs	r2, #0
 8004d14:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004d16:	68b8      	ldr	r0, [r7, #8]
 8004d18:	f000 f927 	bl	8004f6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d20:	f043 0210 	orr.w	r2, r3, #16
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d28:	68b8      	ldr	r0, [r7, #8]
 8004d2a:	f7fb fec9 	bl	8000ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b086      	sub	sp, #24
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	603b      	str	r3, [r7, #0]
 8004d42:	4613      	mov	r3, r2
 8004d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d46:	e03b      	b.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d037      	beq.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d50:	f7fc f80c 	bl	8000d6c <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	6a3a      	ldr	r2, [r7, #32]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d302      	bcc.n	8004d66 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e03a      	b.n	8004de0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d023      	beq.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b80      	cmp	r3, #128	@ 0x80
 8004d7c:	d020      	beq.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b40      	cmp	r3, #64	@ 0x40
 8004d82:	d01d      	beq.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d116      	bne.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	617b      	str	r3, [r7, #20]
 8004da6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f8de 	bl	8004f6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2208      	movs	r2, #8
 8004db2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e00f      	b.n	8004de0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d0b4      	beq.n	8004d48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b098      	sub	sp, #96	@ 0x60
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	4613      	mov	r3, r2
 8004df4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	88fa      	ldrh	r2, [r7, #6]
 8004e00:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2222      	movs	r2, #34	@ 0x22
 8004e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e14:	4a3e      	ldr	r2, [pc, #248]	@ (8004f10 <UART_Start_Receive_DMA+0x128>)
 8004e16:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1c:	4a3d      	ldr	r2, [pc, #244]	@ (8004f14 <UART_Start_Receive_DMA+0x12c>)
 8004e1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e24:	4a3c      	ldr	r2, [pc, #240]	@ (8004f18 <UART_Start_Receive_DMA+0x130>)
 8004e26:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004e30:	f107 0308 	add.w	r3, r7, #8
 8004e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	4619      	mov	r1, r3
 8004e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	f7fc f9b4 	bl	80011b4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d019      	beq.n	8004e9e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	330c      	adds	r3, #12
 8004e88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e8a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004e90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e5      	bne.n	8004e6a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3314      	adds	r3, #20
 8004ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3314      	adds	r3, #20
 8004ebc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ebe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004ec0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004ec4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e5      	bne.n	8004e9e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3314      	adds	r3, #20
 8004ed8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ee8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3314      	adds	r3, #20
 8004ef0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004ef2:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ef4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6a39      	ldr	r1, [r7, #32]
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e5      	bne.n	8004ed2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3760      	adds	r7, #96	@ 0x60
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	08004b3b 	.word	0x08004b3b
 8004f14:	08004c67 	.word	0x08004c67
 8004f18:	08004ca3 	.word	0x08004ca3

08004f1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b089      	sub	sp, #36	@ 0x24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004f3a:	61fb      	str	r3, [r7, #28]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	61ba      	str	r2, [r7, #24]
 8004f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6979      	ldr	r1, [r7, #20]
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	613b      	str	r3, [r7, #16]
   return(result);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e5      	bne.n	8004f24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004f60:	bf00      	nop
 8004f62:	3724      	adds	r7, #36	@ 0x24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr

08004f6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b095      	sub	sp, #84	@ 0x54
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	330c      	adds	r3, #12
 8004f90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f92:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e5      	bne.n	8004f72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3314      	adds	r3, #20
 8004fac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3314      	adds	r3, #20
 8004fc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fce:	e841 2300 	strex	r3, r2, [r1]
 8004fd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e5      	bne.n	8004fa6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d119      	bne.n	8005016 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f023 0310 	bic.w	r3, r3, #16
 8004ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	330c      	adds	r3, #12
 8005000:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005002:	61ba      	str	r2, [r7, #24]
 8005004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6979      	ldr	r1, [r7, #20]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	613b      	str	r3, [r7, #16]
   return(result);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e5      	bne.n	8004fe2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005024:	bf00      	nop
 8005026:	3754      	adds	r7, #84	@ 0x54
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr

0800502e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f7fb fd39 	bl	8000ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800504e:	bf00      	nop
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b21      	cmp	r3, #33	@ 0x21
 8005068:	d13e      	bne.n	80050e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005072:	d114      	bne.n	800509e <UART_Transmit_IT+0x48>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d110      	bne.n	800509e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005090:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	1c9a      	adds	r2, r3, #2
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	621a      	str	r2, [r3, #32]
 800509c:	e008      	b.n	80050b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	1c59      	adds	r1, r3, #1
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6211      	str	r1, [r2, #32]
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	4619      	mov	r1, r3
 80050be:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10f      	bne.n	80050e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e000      	b.n	80050ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050e8:	2302      	movs	r3, #2
  }
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800510a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff fcf3 	bl	8004b00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08c      	sub	sp, #48	@ 0x30
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b22      	cmp	r3, #34	@ 0x22
 8005136:	f040 80ae 	bne.w	8005296 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005142:	d117      	bne.n	8005174 <UART_Receive_IT+0x50>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d113      	bne.n	8005174 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800514c:	2300      	movs	r3, #0
 800514e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005154:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005162:	b29a      	uxth	r2, r3
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005166:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516c:	1c9a      	adds	r2, r3, #2
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	629a      	str	r2, [r3, #40]	@ 0x28
 8005172:	e026      	b.n	80051c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005178:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800517a:	2300      	movs	r3, #0
 800517c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005186:	d007      	beq.n	8005198 <UART_Receive_IT+0x74>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <UART_Receive_IT+0x82>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e008      	b.n	80051b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	4619      	mov	r1, r3
 80051d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d15d      	bne.n	8005292 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0220 	bic.w	r2, r2, #32
 80051e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695a      	ldr	r2, [r3, #20]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0201 	bic.w	r2, r2, #1
 8005204:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005218:	2b01      	cmp	r3, #1
 800521a:	d135      	bne.n	8005288 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	330c      	adds	r3, #12
 8005228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	613b      	str	r3, [r7, #16]
   return(result);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f023 0310 	bic.w	r3, r3, #16
 8005238:	627b      	str	r3, [r7, #36]	@ 0x24
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	330c      	adds	r3, #12
 8005240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005242:	623a      	str	r2, [r7, #32]
 8005244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	69f9      	ldr	r1, [r7, #28]
 8005248:	6a3a      	ldr	r2, [r7, #32]
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e5      	bne.n	8005222 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b10      	cmp	r3, #16
 8005262:	d10a      	bne.n	800527a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800527e:	4619      	mov	r1, r3
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff fc4f 	bl	8004b24 <HAL_UARTEx_RxEventCallback>
 8005286:	e002      	b.n	800528e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7fb fc22 	bl	8000ad2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	e002      	b.n	8005298 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	e000      	b.n	8005298 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005296:	2302      	movs	r3, #2
  }
}
 8005298:	4618      	mov	r0, r3
 800529a:	3730      	adds	r7, #48	@ 0x30
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80052da:	f023 030c 	bic.w	r3, r3, #12
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	68b9      	ldr	r1, [r7, #8]
 80052e4:	430b      	orrs	r3, r1
 80052e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2c      	ldr	r2, [pc, #176]	@ (80053b4 <UART_SetConfig+0x114>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d103      	bne.n	8005310 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005308:	f7fe fd58 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 800530c:	60f8      	str	r0, [r7, #12]
 800530e:	e002      	b.n	8005316 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005310:	f7fe fd40 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8005314:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009a      	lsls	r2, r3, #2
 8005320:	441a      	add	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	4a22      	ldr	r2, [pc, #136]	@ (80053b8 <UART_SetConfig+0x118>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	0119      	lsls	r1, r3, #4
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	009a      	lsls	r2, r3, #2
 8005340:	441a      	add	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	fbb2 f2f3 	udiv	r2, r2, r3
 800534c:	4b1a      	ldr	r3, [pc, #104]	@ (80053b8 <UART_SetConfig+0x118>)
 800534e:	fba3 0302 	umull	r0, r3, r3, r2
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	2064      	movs	r0, #100	@ 0x64
 8005356:	fb00 f303 	mul.w	r3, r0, r3
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	3332      	adds	r3, #50	@ 0x32
 8005360:	4a15      	ldr	r2, [pc, #84]	@ (80053b8 <UART_SetConfig+0x118>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800536c:	4419      	add	r1, r3
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009a      	lsls	r2, r3, #2
 8005378:	441a      	add	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	fbb2 f2f3 	udiv	r2, r2, r3
 8005384:	4b0c      	ldr	r3, [pc, #48]	@ (80053b8 <UART_SetConfig+0x118>)
 8005386:	fba3 0302 	umull	r0, r3, r3, r2
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	2064      	movs	r0, #100	@ 0x64
 800538e:	fb00 f303 	mul.w	r3, r0, r3
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	3332      	adds	r3, #50	@ 0x32
 8005398:	4a07      	ldr	r2, [pc, #28]	@ (80053b8 <UART_SetConfig+0x118>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	f003 020f 	and.w	r2, r3, #15
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	440a      	add	r2, r1
 80053aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40013800 	.word	0x40013800
 80053b8:	51eb851f 	.word	0x51eb851f

080053bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	4638      	mov	r0, r7
 80053c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr

080053d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053e6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80053ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr

08005402 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800540a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800540e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	b29b      	uxth	r3, r3
 800541c:	43db      	mvns	r3, r3
 800541e:	b29b      	uxth	r3, r3
 8005420:	4013      	ands	r3, r2
 8005422:	b29a      	uxth	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	460b      	mov	r3, r1
 8005440:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr

0800544e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800544e:	b480      	push	{r7}
 8005450:	b085      	sub	sp, #20
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	4638      	mov	r0, r7
 8005458:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr

08005488 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005488:	b480      	push	{r7}
 800548a:	b09d      	sub	sp, #116	@ 0x74
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80054aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	78db      	ldrb	r3, [r3, #3]
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d81f      	bhi.n	80054fa <USB_ActivateEndpoint+0x72>
 80054ba:	a201      	add	r2, pc, #4	@ (adr r2, 80054c0 <USB_ActivateEndpoint+0x38>)
 80054bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c0:	080054d1 	.word	0x080054d1
 80054c4:	080054ed 	.word	0x080054ed
 80054c8:	08005503 	.word	0x08005503
 80054cc:	080054df 	.word	0x080054df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80054d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054dc:	e012      	b.n	8005504 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80054de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054e2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80054e6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054ea:	e00b      	b.n	8005504 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80054ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054f8:	e004      	b.n	8005504 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005500:	e000      	b.n	8005504 <USB_ActivateEndpoint+0x7c>
      break;
 8005502:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800551a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800551e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005522:	b29b      	uxth	r3, r3
 8005524:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553c:	b29b      	uxth	r3, r3
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	7812      	ldrb	r2, [r2, #0]
 8005542:	4313      	orrs	r3, r2
 8005544:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	441a      	add	r2, r3
 8005552:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005556:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800555a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800555e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005566:	b29b      	uxth	r3, r3
 8005568:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	7b1b      	ldrb	r3, [r3, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 8178 	bne.w	8005864 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8084 	beq.w	8005686 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	61bb      	str	r3, [r7, #24]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005588:	b29b      	uxth	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	4413      	add	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	011a      	lsls	r2, r3, #4
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	88db      	ldrh	r3, [r3, #6]
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	827b      	strh	r3, [r7, #18]
 80055c0:	8a7b      	ldrh	r3, [r7, #18]
 80055c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01b      	beq.n	8005602 <USB_ActivateEndpoint+0x17a>
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e0:	823b      	strh	r3, [r7, #16]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	441a      	add	r2, r3
 80055ec:	8a3b      	ldrh	r3, [r7, #16]
 80055ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055fe:	b29b      	uxth	r3, r3
 8005600:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	78db      	ldrb	r3, [r3, #3]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d020      	beq.n	800564c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800561c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005620:	81bb      	strh	r3, [r7, #12]
 8005622:	89bb      	ldrh	r3, [r7, #12]
 8005624:	f083 0320 	eor.w	r3, r3, #32
 8005628:	81bb      	strh	r3, [r7, #12]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	441a      	add	r2, r3
 8005634:	89bb      	ldrh	r3, [r7, #12]
 8005636:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800563a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800563e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005646:	b29b      	uxth	r3, r3
 8005648:	8013      	strh	r3, [r2, #0]
 800564a:	e2d5      	b.n	8005bf8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	b29b      	uxth	r3, r3
 800565a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800565e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005662:	81fb      	strh	r3, [r7, #14]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	441a      	add	r2, r3
 800566e:	89fb      	ldrh	r3, [r7, #14]
 8005670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800567c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005680:	b29b      	uxth	r3, r3
 8005682:	8013      	strh	r3, [r2, #0]
 8005684:	e2b8      	b.n	8005bf8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	633b      	str	r3, [r7, #48]	@ 0x30
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005690:	b29b      	uxth	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005696:	4413      	add	r3, r2
 8005698:	633b      	str	r3, [r7, #48]	@ 0x30
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	011a      	lsls	r2, r3, #4
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80056a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	88db      	ldrh	r3, [r3, #6]
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	461a      	mov	r2, r3
 80056c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ca:	4413      	add	r3, r2
 80056cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	011a      	lsls	r2, r3, #4
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	4413      	add	r3, r2
 80056d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	801a      	strh	r2, [r3, #0]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80056f4:	d91d      	bls.n	8005732 <USB_ActivateEndpoint+0x2aa>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	2b00      	cmp	r3, #0
 8005708:	d102      	bne.n	8005710 <USB_ActivateEndpoint+0x288>
 800570a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800570c:	3b01      	subs	r3, #1
 800570e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29a      	uxth	r2, r3
 8005716:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005718:	b29b      	uxth	r3, r3
 800571a:	029b      	lsls	r3, r3, #10
 800571c:	b29b      	uxth	r3, r3
 800571e:	4313      	orrs	r3, r2
 8005720:	b29b      	uxth	r3, r3
 8005722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572a:	b29a      	uxth	r2, r3
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	801a      	strh	r2, [r3, #0]
 8005730:	e026      	b.n	8005780 <USB_ActivateEndpoint+0x2f8>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <USB_ActivateEndpoint+0x2c8>
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29b      	uxth	r3, r3
 8005740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005748:	b29a      	uxth	r2, r3
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	801a      	strh	r2, [r3, #0]
 800574e:	e017      	b.n	8005780 <USB_ActivateEndpoint+0x2f8>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	085b      	lsrs	r3, r3, #1
 8005756:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <USB_ActivateEndpoint+0x2e2>
 8005764:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005766:	3301      	adds	r3, #1
 8005768:	66bb      	str	r3, [r7, #104]	@ 0x68
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29a      	uxth	r2, r3
 8005770:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005772:	b29b      	uxth	r3, r3
 8005774:	029b      	lsls	r3, r3, #10
 8005776:	b29b      	uxth	r3, r3
 8005778:	4313      	orrs	r3, r2
 800577a:	b29a      	uxth	r2, r3
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800578e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01b      	beq.n	80057d0 <USB_ActivateEndpoint+0x348>
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ae:	843b      	strh	r3, [r7, #32]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	441a      	add	r2, r3
 80057ba:	8c3b      	ldrh	r3, [r7, #32]
 80057bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d124      	bne.n	8005822 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ee:	83bb      	strh	r3, [r7, #28]
 80057f0:	8bbb      	ldrh	r3, [r7, #28]
 80057f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80057f6:	83bb      	strh	r3, [r7, #28]
 80057f8:	8bbb      	ldrh	r3, [r7, #28]
 80057fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057fe:	83bb      	strh	r3, [r7, #28]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	441a      	add	r2, r3
 800580a:	8bbb      	ldrh	r3, [r7, #28]
 800580c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800581c:	b29b      	uxth	r3, r3
 800581e:	8013      	strh	r3, [r2, #0]
 8005820:	e1ea      	b.n	8005bf8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005838:	83fb      	strh	r3, [r7, #30]
 800583a:	8bfb      	ldrh	r3, [r7, #30]
 800583c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005840:	83fb      	strh	r3, [r7, #30]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	441a      	add	r2, r3
 800584c:	8bfb      	ldrh	r3, [r7, #30]
 800584e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005852:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800585a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800585e:	b29b      	uxth	r3, r3
 8005860:	8013      	strh	r3, [r2, #0]
 8005862:	e1c9      	b.n	8005bf8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	78db      	ldrb	r3, [r3, #3]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d11e      	bne.n	80058aa <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	b29b      	uxth	r3, r3
 800587a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800587e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005882:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	441a      	add	r2, r3
 8005890:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005894:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005898:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800589c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80058a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	8013      	strh	r3, [r2, #0]
 80058a8:	e01d      	b.n	80058e6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80058bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	441a      	add	r2, r3
 80058ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80058d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058f6:	4413      	add	r3, r2
 80058f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	011a      	lsls	r2, r3, #4
 8005900:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005902:	4413      	add	r3, r2
 8005904:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005908:	65bb      	str	r3, [r7, #88]	@ 0x58
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	891b      	ldrh	r3, [r3, #8]
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	b29b      	uxth	r3, r3
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005918:	801a      	strh	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	657b      	str	r3, [r7, #84]	@ 0x54
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005924:	b29b      	uxth	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800592a:	4413      	add	r3, r2
 800592c:	657b      	str	r3, [r7, #84]	@ 0x54
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	011a      	lsls	r2, r3, #4
 8005934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005936:	4413      	add	r3, r2
 8005938:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800593c:	653b      	str	r3, [r7, #80]	@ 0x50
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	895b      	ldrh	r3, [r3, #10]
 8005942:	085b      	lsrs	r3, r3, #1
 8005944:	b29b      	uxth	r3, r3
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800594c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f040 8093 	bne.w	8005a7e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005968:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800596c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01b      	beq.n	80059ac <USB_ActivateEndpoint+0x524>
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800598a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800599c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80059ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80059bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01b      	beq.n	80059fc <USB_ActivateEndpoint+0x574>
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059da:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	441a      	add	r2, r3
 80059e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80059e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a12:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005a14:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005a16:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005a1a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005a1c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005a1e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a22:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	441a      	add	r2, r3
 8005a2e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005a30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	441a      	add	r2, r3
 8005a66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	8013      	strh	r3, [r2, #0]
 8005a7c:	e0bc      	b.n	8005bf8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005a8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01d      	beq.n	8005ad6 <USB_ActivateEndpoint+0x64e>
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	441a      	add	r2, r3
 8005abe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005ac2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ac6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005ae6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d01d      	beq.n	8005b2e <USB_ActivateEndpoint+0x6a6>
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b08:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	441a      	add	r2, r3
 8005b16:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005b1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b26:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	78db      	ldrb	r3, [r3, #3]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d024      	beq.n	8005b80 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b4c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005b50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005b54:	f083 0320 	eor.w	r3, r3, #32
 8005b58:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	441a      	add	r2, r3
 8005b66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	8013      	strh	r3, [r2, #0]
 8005b7e:	e01d      	b.n	8005bbc <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b96:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	441a      	add	r2, r3
 8005ba4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005ba8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bd2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	441a      	add	r2, r3
 8005be0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005be4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005be8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005bf8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3774      	adds	r7, #116	@ 0x74
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop

08005c08 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b08d      	sub	sp, #52	@ 0x34
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	7b1b      	ldrb	r3, [r3, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 808e 	bne.w	8005d38 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d044      	beq.n	8005cae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	81bb      	strh	r3, [r7, #12]
 8005c32:	89bb      	ldrh	r3, [r7, #12]
 8005c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01b      	beq.n	8005c74 <USB_DeactivateEndpoint+0x6c>
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c52:	817b      	strh	r3, [r7, #10]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	441a      	add	r2, r3
 8005c5e:	897b      	ldrh	r3, [r7, #10]
 8005c60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c8a:	813b      	strh	r3, [r7, #8]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	441a      	add	r2, r3
 8005c96:	893b      	ldrh	r3, [r7, #8]
 8005c98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	8013      	strh	r3, [r2, #0]
 8005cac:	e192      	b.n	8005fd4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	827b      	strh	r3, [r7, #18]
 8005cbc:	8a7b      	ldrh	r3, [r7, #18]
 8005cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d01b      	beq.n	8005cfe <USB_DeactivateEndpoint+0xf6>
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cdc:	823b      	strh	r3, [r7, #16]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	441a      	add	r2, r3
 8005ce8:	8a3b      	ldrh	r3, [r7, #16]
 8005cea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cf2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d14:	81fb      	strh	r3, [r7, #14]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	441a      	add	r2, r3
 8005d20:	89fb      	ldrh	r3, [r7, #14]
 8005d22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	8013      	strh	r3, [r2, #0]
 8005d36:	e14d      	b.n	8005fd4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f040 80a5 	bne.w	8005e8c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	843b      	strh	r3, [r7, #32]
 8005d50:	8c3b      	ldrh	r3, [r7, #32]
 8005d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d01b      	beq.n	8005d92 <USB_DeactivateEndpoint+0x18a>
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d70:	83fb      	strh	r3, [r7, #30]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	441a      	add	r2, r3
 8005d7c:	8bfb      	ldrh	r3, [r7, #30]
 8005d7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	83bb      	strh	r3, [r7, #28]
 8005da0:	8bbb      	ldrh	r3, [r7, #28]
 8005da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01b      	beq.n	8005de2 <USB_DeactivateEndpoint+0x1da>
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dc0:	837b      	strh	r3, [r7, #26]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	8b7b      	ldrh	r3, [r7, #26]
 8005dce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df8:	833b      	strh	r3, [r7, #24]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	441a      	add	r2, r3
 8005e04:	8b3b      	ldrh	r3, [r7, #24]
 8005e06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e30:	82fb      	strh	r3, [r7, #22]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	441a      	add	r2, r3
 8005e3c:	8afb      	ldrh	r3, [r7, #22]
 8005e3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e68:	82bb      	strh	r3, [r7, #20]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	8abb      	ldrh	r3, [r7, #20]
 8005e76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	8013      	strh	r3, [r2, #0]
 8005e8a:	e0a3      	b.n	8005fd4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005e9a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005e9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01b      	beq.n	8005edc <USB_DeactivateEndpoint+0x2d4>
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	441a      	add	r2, r3
 8005ec6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005ec8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ecc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ed0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005eea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01b      	beq.n	8005f2c <USB_DeactivateEndpoint+0x324>
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f0a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	441a      	add	r2, r3
 8005f16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005f18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f42:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	441a      	add	r2, r3
 8005f4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	441a      	add	r2, r3
 8005f86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	441a      	add	r2, r3
 8005fbe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3734      	adds	r7, #52	@ 0x34
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr

08005fe0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b0c2      	sub	sp, #264	@ 0x108
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fee:	6018      	str	r0, [r3, #0]
 8005ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	2b01      	cmp	r3, #1
 8006008:	f040 86b7 	bne.w	8006d7a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800600c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699a      	ldr	r2, [r3, #24]
 8006018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	429a      	cmp	r2, r3
 8006026:	d908      	bls.n	800603a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006038:	e007      	b.n	800604a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800603a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800604a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	7b1b      	ldrb	r3, [r3, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d13a      	bne.n	80060d0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800605a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6959      	ldr	r1, [r3, #20]
 8006066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	88da      	ldrh	r2, [r3, #6]
 8006072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006076:	b29b      	uxth	r3, r3
 8006078:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800607c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006080:	6800      	ldr	r0, [r0, #0]
 8006082:	f001 fc9c 	bl	80079be <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	4413      	add	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]
 80060aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	011a      	lsls	r2, r3, #4
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4413      	add	r3, r2
 80060bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	801a      	strh	r2, [r3, #0]
 80060cc:	f000 be1f 	b.w	8006d0e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80060d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	78db      	ldrb	r3, [r3, #3]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	f040 8462 	bne.w	80069a6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80060e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6a1a      	ldr	r2, [r3, #32]
 80060ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	f240 83df 	bls.w	80068be <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29b      	uxth	r3, r3
 800611e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006126:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800612a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	441a      	add	r2, r3
 8006144:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006148:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800614c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006150:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006158:	b29b      	uxth	r3, r3
 800615a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800615c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6a1a      	ldr	r2, [r3, #32]
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616c:	1ad2      	subs	r2, r2, r3
 800616e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800617a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 81c7 	beq.w	8006530 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80061ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d177      	bne.n	80062ae <USB_EPStartXfer+0x2ce>
 80061be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061d8:	b29b      	uxth	r3, r3
 80061da:	461a      	mov	r2, r3
 80061dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061de:	4413      	add	r3, r2
 80061e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	011a      	lsls	r2, r3, #4
 80061f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f2:	4413      	add	r3, r2
 80061f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006204:	b29a      	uxth	r2, r3
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	801a      	strh	r2, [r3, #0]
 800620a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800620e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006210:	d921      	bls.n	8006256 <USB_EPStartXfer+0x276>
 8006212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006216:	095b      	lsrs	r3, r3, #5
 8006218:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800621c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006220:	f003 031f 	and.w	r3, r3, #31
 8006224:	2b00      	cmp	r3, #0
 8006226:	d104      	bne.n	8006232 <USB_EPStartXfer+0x252>
 8006228:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800622c:	3b01      	subs	r3, #1
 800622e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29a      	uxth	r2, r3
 8006238:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800623c:	b29b      	uxth	r3, r3
 800623e:	029b      	lsls	r3, r3, #10
 8006240:	b29b      	uxth	r3, r3
 8006242:	4313      	orrs	r3, r2
 8006244:	b29b      	uxth	r3, r3
 8006246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800624a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624e:	b29a      	uxth	r2, r3
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	801a      	strh	r2, [r3, #0]
 8006254:	e050      	b.n	80062f8 <USB_EPStartXfer+0x318>
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <USB_EPStartXfer+0x294>
 800625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800626c:	b29a      	uxth	r2, r3
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	801a      	strh	r2, [r3, #0]
 8006272:	e041      	b.n	80062f8 <USB_EPStartXfer+0x318>
 8006274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006278:	085b      	lsrs	r3, r3, #1
 800627a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800627e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d004      	beq.n	8006294 <USB_EPStartXfer+0x2b4>
 800628a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800628e:	3301      	adds	r3, #1
 8006290:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29a      	uxth	r2, r3
 800629a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800629e:	b29b      	uxth	r3, r3
 80062a0:	029b      	lsls	r3, r3, #10
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	4313      	orrs	r3, r2
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062aa:	801a      	strh	r2, [r3, #0]
 80062ac:	e024      	b.n	80062f8 <USB_EPStartXfer+0x318>
 80062ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	785b      	ldrb	r3, [r3, #1]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d11c      	bne.n	80062f8 <USB_EPStartXfer+0x318>
 80062be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	461a      	mov	r2, r3
 80062d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d2:	4413      	add	r3, r2
 80062d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80062d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	011a      	lsls	r2, r3, #4
 80062e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e6:	4413      	add	r3, r2
 80062e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	895b      	ldrh	r3, [r3, #10]
 8006304:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6959      	ldr	r1, [r3, #20]
 8006314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006318:	b29b      	uxth	r3, r3
 800631a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800631e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006322:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006326:	6800      	ldr	r0, [r0, #0]
 8006328:	f001 fb49 	bl	80079be <USB_WritePMA>
            ep->xfer_buff += len;
 800632c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695a      	ldr	r2, [r3, #20]
 8006338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633c:	441a      	add	r2, r3
 800633e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800634a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6a1a      	ldr	r2, [r3, #32]
 8006356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	429a      	cmp	r2, r3
 8006364:	d90f      	bls.n	8006386 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6a1a      	ldr	r2, [r3, #32]
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006376:	1ad2      	subs	r2, r2, r3
 8006378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	621a      	str	r2, [r3, #32]
 8006384:	e00e      	b.n	80063a4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2200      	movs	r2, #0
 80063a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d177      	bne.n	80064a4 <USB_EPStartXfer+0x4c4>
 80063b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	4413      	add	r3, r2
 80063d6:	61bb      	str	r3, [r7, #24]
 80063d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	011a      	lsls	r2, r3, #4
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	4413      	add	r3, r2
 80063ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	801a      	strh	r2, [r3, #0]
 8006400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006404:	2b3e      	cmp	r3, #62	@ 0x3e
 8006406:	d921      	bls.n	800644c <USB_EPStartXfer+0x46c>
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640c:	095b      	lsrs	r3, r3, #5
 800640e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006416:	f003 031f 	and.w	r3, r3, #31
 800641a:	2b00      	cmp	r3, #0
 800641c:	d104      	bne.n	8006428 <USB_EPStartXfer+0x448>
 800641e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006422:	3b01      	subs	r3, #1
 8006424:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	b29a      	uxth	r2, r3
 800642e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006432:	b29b      	uxth	r3, r3
 8006434:	029b      	lsls	r3, r3, #10
 8006436:	b29b      	uxth	r3, r3
 8006438:	4313      	orrs	r3, r2
 800643a:	b29b      	uxth	r3, r3
 800643c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006444:	b29a      	uxth	r2, r3
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	801a      	strh	r2, [r3, #0]
 800644a:	e056      	b.n	80064fa <USB_EPStartXfer+0x51a>
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <USB_EPStartXfer+0x48a>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006462:	b29a      	uxth	r2, r3
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e047      	b.n	80064fa <USB_EPStartXfer+0x51a>
 800646a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646e:	085b      	lsrs	r3, r3, #1
 8006470:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d004      	beq.n	800648a <USB_EPStartXfer+0x4aa>
 8006480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006484:	3301      	adds	r3, #1
 8006486:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29a      	uxth	r2, r3
 8006490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006494:	b29b      	uxth	r3, r3
 8006496:	029b      	lsls	r3, r3, #10
 8006498:	b29b      	uxth	r3, r3
 800649a:	4313      	orrs	r3, r2
 800649c:	b29a      	uxth	r2, r3
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	e02a      	b.n	80064fa <USB_EPStartXfer+0x51a>
 80064a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d122      	bne.n	80064fa <USB_EPStartXfer+0x51a>
 80064b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	623b      	str	r3, [r7, #32]
 80064c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	4413      	add	r3, r2
 80064d6:	623b      	str	r3, [r7, #32]
 80064d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	011a      	lsls	r2, r3, #4
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	4413      	add	r3, r2
 80064ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	891b      	ldrh	r3, [r3, #8]
 8006506:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800650a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6959      	ldr	r1, [r3, #20]
 8006516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651a:	b29b      	uxth	r3, r3
 800651c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006520:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006524:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006528:	6800      	ldr	r0, [r0, #0]
 800652a:	f001 fa48 	bl	80079be <USB_WritePMA>
 800652e:	e3ee      	b.n	8006d0e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	785b      	ldrb	r3, [r3, #1]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d177      	bne.n	8006630 <USB_EPStartXfer+0x650>
 8006540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006544:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800654c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006550:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800655a:	b29b      	uxth	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006560:	4413      	add	r3, r2
 8006562:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	011a      	lsls	r2, r3, #4
 8006572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006574:	4413      	add	r3, r2
 8006576:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800657a:	647b      	str	r3, [r7, #68]	@ 0x44
 800657c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006586:	b29a      	uxth	r2, r3
 8006588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006590:	2b3e      	cmp	r3, #62	@ 0x3e
 8006592:	d921      	bls.n	80065d8 <USB_EPStartXfer+0x5f8>
 8006594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d104      	bne.n	80065b4 <USB_EPStartXfer+0x5d4>
 80065aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065ae:	3b01      	subs	r3, #1
 80065b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80065b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065be:	b29b      	uxth	r3, r3
 80065c0:	029b      	lsls	r3, r3, #10
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	4313      	orrs	r3, r2
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	e056      	b.n	8006686 <USB_EPStartXfer+0x6a6>
 80065d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <USB_EPStartXfer+0x616>
 80065e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	e047      	b.n	8006686 <USB_EPStartXfer+0x6a6>
 80065f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fa:	085b      	lsrs	r3, r3, #1
 80065fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d004      	beq.n	8006616 <USB_EPStartXfer+0x636>
 800660c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006610:	3301      	adds	r3, #1
 8006612:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29a      	uxth	r2, r3
 800661c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006620:	b29b      	uxth	r3, r3
 8006622:	029b      	lsls	r3, r3, #10
 8006624:	b29b      	uxth	r3, r3
 8006626:	4313      	orrs	r3, r2
 8006628:	b29a      	uxth	r2, r3
 800662a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800662c:	801a      	strh	r2, [r3, #0]
 800662e:	e02a      	b.n	8006686 <USB_EPStartXfer+0x6a6>
 8006630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d122      	bne.n	8006686 <USB_EPStartXfer+0x6a6>
 8006640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006644:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	653b      	str	r3, [r7, #80]	@ 0x50
 800664c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800665a:	b29b      	uxth	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006660:	4413      	add	r3, r2
 8006662:	653b      	str	r3, [r7, #80]	@ 0x50
 8006664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	011a      	lsls	r2, r3, #4
 8006672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006674:	4413      	add	r3, r2
 8006676:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800667a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006680:	b29a      	uxth	r2, r3
 8006682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006684:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	891b      	ldrh	r3, [r3, #8]
 8006692:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6959      	ldr	r1, [r3, #20]
 80066a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066ac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066b0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066b4:	6800      	ldr	r0, [r0, #0]
 80066b6:	f001 f982 	bl	80079be <USB_WritePMA>
            ep->xfer_buff += len;
 80066ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695a      	ldr	r2, [r3, #20]
 80066c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ca:	441a      	add	r2, r3
 80066cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6a1a      	ldr	r2, [r3, #32]
 80066e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d90f      	bls.n	8006714 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80066f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6a1a      	ldr	r2, [r3, #32]
 8006700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006704:	1ad2      	subs	r2, r2, r3
 8006706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800670a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	621a      	str	r2, [r3, #32]
 8006712:	e00e      	b.n	8006732 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2200      	movs	r2, #0
 8006730:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006736:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	643b      	str	r3, [r7, #64]	@ 0x40
 800673e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	785b      	ldrb	r3, [r3, #1]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d177      	bne.n	800683e <USB_EPStartXfer+0x85e>
 800674e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006752:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	63bb      	str	r3, [r7, #56]	@ 0x38
 800675a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006768:	b29b      	uxth	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676e:	4413      	add	r3, r2
 8006770:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	011a      	lsls	r2, r3, #4
 8006780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006782:	4413      	add	r3, r2
 8006784:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006788:	637b      	str	r3, [r7, #52]	@ 0x34
 800678a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006794:	b29a      	uxth	r2, r3
 8006796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006798:	801a      	strh	r2, [r3, #0]
 800679a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679e:	2b3e      	cmp	r3, #62	@ 0x3e
 80067a0:	d921      	bls.n	80067e6 <USB_EPStartXfer+0x806>
 80067a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a6:	095b      	lsrs	r3, r3, #5
 80067a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80067ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b0:	f003 031f 	and.w	r3, r3, #31
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <USB_EPStartXfer+0x7e2>
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067bc:	3b01      	subs	r3, #1
 80067be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80067c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	029b      	lsls	r3, r3, #10
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	4313      	orrs	r3, r2
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067de:	b29a      	uxth	r2, r3
 80067e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e2:	801a      	strh	r2, [r3, #0]
 80067e4:	e050      	b.n	8006888 <USB_EPStartXfer+0x8a8>
 80067e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10a      	bne.n	8006804 <USB_EPStartXfer+0x824>
 80067ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006800:	801a      	strh	r2, [r3, #0]
 8006802:	e041      	b.n	8006888 <USB_EPStartXfer+0x8a8>
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006808:	085b      	lsrs	r3, r3, #1
 800680a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800680e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <USB_EPStartXfer+0x844>
 800681a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681e:	3301      	adds	r3, #1
 8006820:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	b29a      	uxth	r2, r3
 800682a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800682e:	b29b      	uxth	r3, r3
 8006830:	029b      	lsls	r3, r3, #10
 8006832:	b29b      	uxth	r3, r3
 8006834:	4313      	orrs	r3, r2
 8006836:	b29a      	uxth	r2, r3
 8006838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800683a:	801a      	strh	r2, [r3, #0]
 800683c:	e024      	b.n	8006888 <USB_EPStartXfer+0x8a8>
 800683e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	785b      	ldrb	r3, [r3, #1]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d11c      	bne.n	8006888 <USB_EPStartXfer+0x8a8>
 800684e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800685c:	b29b      	uxth	r3, r3
 800685e:	461a      	mov	r2, r3
 8006860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006862:	4413      	add	r3, r2
 8006864:	643b      	str	r3, [r7, #64]	@ 0x40
 8006866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	011a      	lsls	r2, r3, #4
 8006874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006876:	4413      	add	r3, r2
 8006878:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800687c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800687e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006882:	b29a      	uxth	r2, r3
 8006884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006886:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	895b      	ldrh	r3, [r3, #10]
 8006894:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6959      	ldr	r1, [r3, #20]
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068ae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80068b2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068b6:	6800      	ldr	r0, [r0, #0]
 80068b8:	f001 f881 	bl	80079be <USB_WritePMA>
 80068bc:	e227      	b.n	8006d0e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80068be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80068ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80068f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80068f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	441a      	add	r2, r3
 8006912:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800691a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800691e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006926:	b29b      	uxth	r3, r3
 8006928:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800692a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006944:	b29b      	uxth	r3, r3
 8006946:	461a      	mov	r2, r3
 8006948:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800694a:	4413      	add	r3, r2
 800694c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800694e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	011a      	lsls	r2, r3, #4
 800695c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800695e:	4413      	add	r3, r2
 8006960:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006964:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696a:	b29a      	uxth	r2, r3
 800696c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800696e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	891b      	ldrh	r3, [r3, #8]
 800697c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6959      	ldr	r1, [r3, #20]
 800698c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006990:	b29b      	uxth	r3, r3
 8006992:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006996:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800699a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800699e:	6800      	ldr	r0, [r0, #0]
 80069a0:	f001 f80d 	bl	80079be <USB_WritePMA>
 80069a4:	e1b3      	b.n	8006d0e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80069a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6a1a      	ldr	r2, [r3, #32]
 80069b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b6:	1ad2      	subs	r2, r2, r3
 80069b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 80c6 	beq.w	8006b78 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80069f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d177      	bne.n	8006af8 <USB_EPStartXfer+0xb18>
 8006a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a28:	4413      	add	r3, r2
 8006a2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	011a      	lsls	r2, r3, #4
 8006a3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a42:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a52:	801a      	strh	r2, [r3, #0]
 8006a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a58:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a5a:	d921      	bls.n	8006aa0 <USB_EPStartXfer+0xac0>
 8006a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a60:	095b      	lsrs	r3, r3, #5
 8006a62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6a:	f003 031f 	and.w	r3, r3, #31
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d104      	bne.n	8006a7c <USB_EPStartXfer+0xa9c>
 8006a72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a76:	3b01      	subs	r3, #1
 8006a78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	029b      	lsls	r3, r3, #10
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	e050      	b.n	8006b42 <USB_EPStartXfer+0xb62>
 8006aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10a      	bne.n	8006abe <USB_EPStartXfer+0xade>
 8006aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006aba:	801a      	strh	r2, [r3, #0]
 8006abc:	e041      	b.n	8006b42 <USB_EPStartXfer+0xb62>
 8006abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac2:	085b      	lsrs	r3, r3, #1
 8006ac4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d004      	beq.n	8006ade <USB_EPStartXfer+0xafe>
 8006ad4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006ad8:	3301      	adds	r3, #1
 8006ada:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ade:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	029b      	lsls	r3, r3, #10
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	4313      	orrs	r3, r2
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006af4:	801a      	strh	r2, [r3, #0]
 8006af6:	e024      	b.n	8006b42 <USB_EPStartXfer+0xb62>
 8006af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	785b      	ldrb	r3, [r3, #1]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d11c      	bne.n	8006b42 <USB_EPStartXfer+0xb62>
 8006b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	461a      	mov	r2, r3
 8006b1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b1c:	4413      	add	r3, r2
 8006b1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	011a      	lsls	r2, r3, #4
 8006b2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b30:	4413      	add	r3, r2
 8006b32:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	895b      	ldrh	r3, [r3, #10]
 8006b4e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6959      	ldr	r1, [r3, #20]
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b68:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b6c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b70:	6800      	ldr	r0, [r0, #0]
 8006b72:	f000 ff24 	bl	80079be <USB_WritePMA>
 8006b76:	e0ca      	b.n	8006d0e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	785b      	ldrb	r3, [r3, #1]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d177      	bne.n	8006c78 <USB_EPStartXfer+0xc98>
 8006b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ba8:	4413      	add	r3, r2
 8006baa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	011a      	lsls	r2, r3, #4
 8006bba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006bc2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006bc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bd2:	801a      	strh	r2, [r3, #0]
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bda:	d921      	bls.n	8006c20 <USB_EPStartXfer+0xc40>
 8006bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be0:	095b      	lsrs	r3, r3, #5
 8006be2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bea:	f003 031f 	and.w	r3, r3, #31
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d104      	bne.n	8006bfc <USB_EPStartXfer+0xc1c>
 8006bf2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	029b      	lsls	r3, r3, #10
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c1c:	801a      	strh	r2, [r3, #0]
 8006c1e:	e05c      	b.n	8006cda <USB_EPStartXfer+0xcfa>
 8006c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <USB_EPStartXfer+0xc5e>
 8006c28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c3a:	801a      	strh	r2, [r3, #0]
 8006c3c:	e04d      	b.n	8006cda <USB_EPStartXfer+0xcfa>
 8006c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d004      	beq.n	8006c5e <USB_EPStartXfer+0xc7e>
 8006c54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c58:	3301      	adds	r3, #1
 8006c5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	029b      	lsls	r3, r3, #10
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c74:	801a      	strh	r2, [r3, #0]
 8006c76:	e030      	b.n	8006cda <USB_EPStartXfer+0xcfa>
 8006c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	785b      	ldrb	r3, [r3, #1]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d128      	bne.n	8006cda <USB_EPStartXfer+0xcfa>
 8006c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006cac:	4413      	add	r3, r2
 8006cae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	011a      	lsls	r2, r3, #4
 8006cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006cd8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	891b      	ldrh	r3, [r3, #8]
 8006ce6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6959      	ldr	r1, [r3, #20]
 8006cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d00:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d04:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d08:	6800      	ldr	r0, [r0, #0]
 8006d0a:	f000 fe58 	bl	80079be <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d34:	817b      	strh	r3, [r7, #10]
 8006d36:	897b      	ldrh	r3, [r7, #10]
 8006d38:	f083 0310 	eor.w	r3, r3, #16
 8006d3c:	817b      	strh	r3, [r7, #10]
 8006d3e:	897b      	ldrh	r3, [r7, #10]
 8006d40:	f083 0320 	eor.w	r3, r3, #32
 8006d44:	817b      	strh	r3, [r7, #10]
 8006d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	441a      	add	r2, r3
 8006d60:	897b      	ldrh	r3, [r7, #10]
 8006d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	8013      	strh	r3, [r2, #0]
 8006d76:	f000 bcde 	b.w	8007736 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	7b1b      	ldrb	r3, [r3, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f040 80bb 	bne.w	8006f02 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	699a      	ldr	r2, [r3, #24]
 8006d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d917      	bls.n	8006dd8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699a      	ldr	r2, [r3, #24]
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc8:	1ad2      	subs	r2, r2, r3
 8006dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	619a      	str	r2, [r3, #24]
 8006dd6:	e00e      	b.n	8006df6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2200      	movs	r2, #0
 8006df4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	461a      	mov	r2, r3
 8006e16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	011a      	lsls	r2, r3, #4
 8006e2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006e32:	4413      	add	r3, r2
 8006e34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e54:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e56:	d924      	bls.n	8006ea2 <USB_EPStartXfer+0xec2>
 8006e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5c:	095b      	lsrs	r3, r3, #5
 8006e5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d104      	bne.n	8006e78 <USB_EPStartXfer+0xe98>
 8006e6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006e72:	3b01      	subs	r3, #1
 8006e74:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	029b      	lsls	r3, r3, #10
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e9c:	801a      	strh	r2, [r3, #0]
 8006e9e:	f000 bc10 	b.w	80076c2 <USB_EPStartXfer+0x16e2>
 8006ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10c      	bne.n	8006ec4 <USB_EPStartXfer+0xee4>
 8006eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	e3fe      	b.n	80076c2 <USB_EPStartXfer+0x16e2>
 8006ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec8:	085b      	lsrs	r3, r3, #1
 8006eca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d004      	beq.n	8006ee4 <USB_EPStartXfer+0xf04>
 8006eda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ede:	3301      	adds	r3, #1
 8006ee0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	029b      	lsls	r3, r3, #10
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006efe:	801a      	strh	r2, [r3, #0]
 8006f00:	e3df      	b.n	80076c2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	78db      	ldrb	r3, [r3, #3]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	f040 8218 	bne.w	8007344 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	785b      	ldrb	r3, [r3, #1]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f040 809d 	bne.w	8007060 <USB_EPStartXfer+0x1080>
 8006f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	011a      	lsls	r2, r3, #4
 8006f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f62:	4413      	add	r3, r2
 8006f64:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f7e:	801a      	strh	r2, [r3, #0]
 8006f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f8e:	d92b      	bls.n	8006fe8 <USB_EPStartXfer+0x1008>
 8006f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	095b      	lsrs	r3, r3, #5
 8006f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f003 031f 	and.w	r3, r3, #31
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d104      	bne.n	8006fc0 <USB_EPStartXfer+0xfe0>
 8006fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	029b      	lsls	r3, r3, #10
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fe4:	801a      	strh	r2, [r3, #0]
 8006fe6:	e070      	b.n	80070ca <USB_EPStartXfer+0x10ea>
 8006fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10c      	bne.n	8007012 <USB_EPStartXfer+0x1032>
 8006ff8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007008:	b29a      	uxth	r2, r3
 800700a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800700e:	801a      	strh	r2, [r3, #0]
 8007010:	e05b      	b.n	80070ca <USB_EPStartXfer+0x10ea>
 8007012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	085b      	lsrs	r3, r3, #1
 8007020:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d004      	beq.n	8007042 <USB_EPStartXfer+0x1062>
 8007038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800703c:	3301      	adds	r3, #1
 800703e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b29a      	uxth	r2, r3
 800704a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800704e:	b29b      	uxth	r3, r3
 8007050:	029b      	lsls	r3, r3, #10
 8007052:	b29b      	uxth	r3, r3
 8007054:	4313      	orrs	r3, r2
 8007056:	b29a      	uxth	r2, r3
 8007058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800705c:	801a      	strh	r2, [r3, #0]
 800705e:	e034      	b.n	80070ca <USB_EPStartXfer+0x10ea>
 8007060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d12c      	bne.n	80070ca <USB_EPStartXfer+0x10ea>
 8007070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007074:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800707e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007082:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800708c:	b29b      	uxth	r3, r3
 800708e:	461a      	mov	r2, r3
 8007090:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007094:	4413      	add	r3, r2
 8007096:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800709a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	011a      	lsls	r2, r3, #4
 80070a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070ac:	4413      	add	r3, r2
 80070ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80070c8:	801a      	strh	r2, [r3, #0]
 80070ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80070d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	785b      	ldrb	r3, [r3, #1]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f040 809d 	bne.w	8007224 <USB_EPStartXfer+0x1244>
 80070ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007106:	b29b      	uxth	r3, r3
 8007108:	461a      	mov	r2, r3
 800710a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800710e:	4413      	add	r3, r2
 8007110:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	011a      	lsls	r2, r3, #4
 8007122:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007126:	4413      	add	r3, r2
 8007128:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800712c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007130:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800713c:	b29a      	uxth	r2, r3
 800713e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007142:	801a      	strh	r2, [r3, #0]
 8007144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b3e      	cmp	r3, #62	@ 0x3e
 8007152:	d92b      	bls.n	80071ac <USB_EPStartXfer+0x11cc>
 8007154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	f003 031f 	and.w	r3, r3, #31
 8007176:	2b00      	cmp	r3, #0
 8007178:	d104      	bne.n	8007184 <USB_EPStartXfer+0x11a4>
 800717a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800717e:	3b01      	subs	r3, #1
 8007180:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29a      	uxth	r2, r3
 800718c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007190:	b29b      	uxth	r3, r3
 8007192:	029b      	lsls	r3, r3, #10
 8007194:	b29b      	uxth	r3, r3
 8007196:	4313      	orrs	r3, r2
 8007198:	b29b      	uxth	r3, r3
 800719a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800719e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071a8:	801a      	strh	r2, [r3, #0]
 80071aa:	e069      	b.n	8007280 <USB_EPStartXfer+0x12a0>
 80071ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10c      	bne.n	80071d6 <USB_EPStartXfer+0x11f6>
 80071bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071d2:	801a      	strh	r2, [r3, #0]
 80071d4:	e054      	b.n	8007280 <USB_EPStartXfer+0x12a0>
 80071d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	085b      	lsrs	r3, r3, #1
 80071e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d004      	beq.n	8007206 <USB_EPStartXfer+0x1226>
 80071fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007200:	3301      	adds	r3, #1
 8007202:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007206:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29a      	uxth	r2, r3
 800720e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007212:	b29b      	uxth	r3, r3
 8007214:	029b      	lsls	r3, r3, #10
 8007216:	b29b      	uxth	r3, r3
 8007218:	4313      	orrs	r3, r2
 800721a:	b29a      	uxth	r2, r3
 800721c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007220:	801a      	strh	r2, [r3, #0]
 8007222:	e02d      	b.n	8007280 <USB_EPStartXfer+0x12a0>
 8007224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d125      	bne.n	8007280 <USB_EPStartXfer+0x12a0>
 8007234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007238:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007242:	b29b      	uxth	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800724a:	4413      	add	r3, r2
 800724c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	011a      	lsls	r2, r3, #4
 800725e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007262:	4413      	add	r3, r2
 8007264:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007268:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800726c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	b29a      	uxth	r2, r3
 800727a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800727e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 8218 	beq.w	80076c2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007296:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <USB_EPStartXfer+0x12ea>
 80072be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10d      	bne.n	80072e6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f040 81f5 	bne.w	80076c2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f040 81ee 	bne.w	80076c2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80072e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800730c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	441a      	add	r2, r3
 800732a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800732e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007332:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800733a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800733e:	b29b      	uxth	r3, r3
 8007340:	8013      	strh	r3, [r2, #0]
 8007342:	e1be      	b.n	80076c2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	78db      	ldrb	r3, [r3, #3]
 8007350:	2b01      	cmp	r3, #1
 8007352:	f040 81b4 	bne.w	80076be <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	429a      	cmp	r2, r3
 8007370:	d917      	bls.n	80073a2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699a      	ldr	r2, [r3, #24]
 800738e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007392:	1ad2      	subs	r2, r2, r3
 8007394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	619a      	str	r2, [r3, #24]
 80073a0:	e00e      	b.n	80073c0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80073a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80073b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2200      	movs	r2, #0
 80073be:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80073c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	785b      	ldrb	r3, [r3, #1]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f040 8085 	bne.w	80074dc <USB_EPStartXfer+0x14fc>
 80073d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073f6:	4413      	add	r3, r2
 80073f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	011a      	lsls	r2, r3, #4
 800740a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800740e:	4413      	add	r3, r2
 8007410:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007414:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007418:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	b29b      	uxth	r3, r3
 8007420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007424:	b29a      	uxth	r2, r3
 8007426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007430:	2b3e      	cmp	r3, #62	@ 0x3e
 8007432:	d923      	bls.n	800747c <USB_EPStartXfer+0x149c>
 8007434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007442:	f003 031f 	and.w	r3, r3, #31
 8007446:	2b00      	cmp	r3, #0
 8007448:	d104      	bne.n	8007454 <USB_EPStartXfer+0x1474>
 800744a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800744e:	3b01      	subs	r3, #1
 8007450:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007454:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29a      	uxth	r2, r3
 800745c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007460:	b29b      	uxth	r3, r3
 8007462:	029b      	lsls	r3, r3, #10
 8007464:	b29b      	uxth	r3, r3
 8007466:	4313      	orrs	r3, r2
 8007468:	b29b      	uxth	r3, r3
 800746a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007472:	b29a      	uxth	r2, r3
 8007474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007478:	801a      	strh	r2, [r3, #0]
 800747a:	e060      	b.n	800753e <USB_EPStartXfer+0x155e>
 800747c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10c      	bne.n	800749e <USB_EPStartXfer+0x14be>
 8007484:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b29b      	uxth	r3, r3
 800748c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007494:	b29a      	uxth	r2, r3
 8007496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800749a:	801a      	strh	r2, [r3, #0]
 800749c:	e04f      	b.n	800753e <USB_EPStartXfer+0x155e>
 800749e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a2:	085b      	lsrs	r3, r3, #1
 80074a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80074a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d004      	beq.n	80074be <USB_EPStartXfer+0x14de>
 80074b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074b8:	3301      	adds	r3, #1
 80074ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80074be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	029b      	lsls	r3, r3, #10
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	4313      	orrs	r3, r2
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80074d8:	801a      	strh	r2, [r3, #0]
 80074da:	e030      	b.n	800753e <USB_EPStartXfer+0x155e>
 80074dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	785b      	ldrb	r3, [r3, #1]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d128      	bne.n	800753e <USB_EPStartXfer+0x155e>
 80074ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80074fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007508:	b29b      	uxth	r3, r3
 800750a:	461a      	mov	r2, r3
 800750c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007510:	4413      	add	r3, r2
 8007512:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	011a      	lsls	r2, r3, #4
 8007524:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007528:	4413      	add	r3, r2
 800752a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800752e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007536:	b29a      	uxth	r2, r3
 8007538:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800753c:	801a      	strh	r2, [r3, #0]
 800753e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800754c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	785b      	ldrb	r3, [r3, #1]
 8007558:	2b00      	cmp	r3, #0
 800755a:	f040 8085 	bne.w	8007668 <USB_EPStartXfer+0x1688>
 800755e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007562:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800756c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007570:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800757a:	b29b      	uxth	r3, r3
 800757c:	461a      	mov	r2, r3
 800757e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007582:	4413      	add	r3, r2
 8007584:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	011a      	lsls	r2, r3, #4
 8007596:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800759a:	4413      	add	r3, r2
 800759c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075b6:	801a      	strh	r2, [r3, #0]
 80075b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80075be:	d923      	bls.n	8007608 <USB_EPStartXfer+0x1628>
 80075c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d104      	bne.n	80075e0 <USB_EPStartXfer+0x1600>
 80075d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075da:	3b01      	subs	r3, #1
 80075dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	029b      	lsls	r3, r3, #10
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	4313      	orrs	r3, r2
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fe:	b29a      	uxth	r2, r3
 8007600:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007604:	801a      	strh	r2, [r3, #0]
 8007606:	e05c      	b.n	80076c2 <USB_EPStartXfer+0x16e2>
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10c      	bne.n	800762a <USB_EPStartXfer+0x164a>
 8007610:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800761c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007620:	b29a      	uxth	r2, r3
 8007622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	e04b      	b.n	80076c2 <USB_EPStartXfer+0x16e2>
 800762a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762e:	085b      	lsrs	r3, r3, #1
 8007630:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d004      	beq.n	800764a <USB_EPStartXfer+0x166a>
 8007640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007644:	3301      	adds	r3, #1
 8007646:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800764a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	b29a      	uxth	r2, r3
 8007652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007656:	b29b      	uxth	r3, r3
 8007658:	029b      	lsls	r3, r3, #10
 800765a:	b29b      	uxth	r3, r3
 800765c:	4313      	orrs	r3, r2
 800765e:	b29a      	uxth	r2, r3
 8007660:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	e02c      	b.n	80076c2 <USB_EPStartXfer+0x16e2>
 8007668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	785b      	ldrb	r3, [r3, #1]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d124      	bne.n	80076c2 <USB_EPStartXfer+0x16e2>
 8007678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800767c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007686:	b29b      	uxth	r3, r3
 8007688:	461a      	mov	r2, r3
 800768a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800768e:	4413      	add	r3, r2
 8007690:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	011a      	lsls	r2, r3, #4
 80076a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80076a6:	4413      	add	r3, r2
 80076a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80076ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80076ba:	801a      	strh	r2, [r3, #0]
 80076bc:	e001      	b.n	80076c2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e03a      	b.n	8007738 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80076ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80076f0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80076f4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80076f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80076fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007700:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007708:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	441a      	add	r2, r3
 800771e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800772a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800772e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007732:	b29b      	uxth	r3, r3
 8007734:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	785b      	ldrb	r3, [r3, #1]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d020      	beq.n	8007796 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b29b      	uxth	r3, r3
 8007762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800776a:	81bb      	strh	r3, [r7, #12]
 800776c:	89bb      	ldrh	r3, [r7, #12]
 800776e:	f083 0310 	eor.w	r3, r3, #16
 8007772:	81bb      	strh	r3, [r7, #12]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	441a      	add	r2, r3
 800777e:	89bb      	ldrh	r3, [r7, #12]
 8007780:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007784:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007788:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800778c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007790:	b29b      	uxth	r3, r3
 8007792:	8013      	strh	r3, [r2, #0]
 8007794:	e01f      	b.n	80077d6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077ac:	81fb      	strh	r3, [r7, #14]
 80077ae:	89fb      	ldrh	r3, [r7, #14]
 80077b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80077b4:	81fb      	strh	r3, [r7, #14]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	441a      	add	r2, r3
 80077c0:	89fb      	ldrh	r3, [r7, #14]
 80077c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	bc80      	pop	{r7}
 80077e0:	4770      	bx	lr

080077e2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b087      	sub	sp, #28
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	7b1b      	ldrb	r3, [r3, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f040 809d 	bne.w	8007930 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	785b      	ldrb	r3, [r3, #1]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d04c      	beq.n	8007898 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	823b      	strh	r3, [r7, #16]
 800780c:	8a3b      	ldrh	r3, [r7, #16]
 800780e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	d01b      	beq.n	800784e <USB_EPClearStall+0x6c>
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	b29b      	uxth	r3, r3
 8007824:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007828:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800782c:	81fb      	strh	r3, [r7, #14]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	441a      	add	r2, r3
 8007838:	89fb      	ldrh	r3, [r7, #14]
 800783a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800783e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007846:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800784a:	b29b      	uxth	r3, r3
 800784c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	78db      	ldrb	r3, [r3, #3]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d06c      	beq.n	8007930 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800786c:	81bb      	strh	r3, [r7, #12]
 800786e:	89bb      	ldrh	r3, [r7, #12]
 8007870:	f083 0320 	eor.w	r3, r3, #32
 8007874:	81bb      	strh	r3, [r7, #12]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	441a      	add	r2, r3
 8007880:	89bb      	ldrh	r3, [r7, #12]
 8007882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800788a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800788e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007892:	b29b      	uxth	r3, r3
 8007894:	8013      	strh	r3, [r2, #0]
 8007896:	e04b      	b.n	8007930 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	82fb      	strh	r3, [r7, #22]
 80078a6:	8afb      	ldrh	r3, [r7, #22]
 80078a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01b      	beq.n	80078e8 <USB_EPClearStall+0x106>
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078c6:	82bb      	strh	r3, [r7, #20]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	441a      	add	r2, r3
 80078d2:	8abb      	ldrh	r3, [r7, #20]
 80078d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078fe:	827b      	strh	r3, [r7, #18]
 8007900:	8a7b      	ldrh	r3, [r7, #18]
 8007902:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007906:	827b      	strh	r3, [r7, #18]
 8007908:	8a7b      	ldrh	r3, [r7, #18]
 800790a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800790e:	827b      	strh	r3, [r7, #18]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	441a      	add	r2, r3
 800791a:	8a7b      	ldrh	r3, [r7, #18]
 800791c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007920:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007924:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800792c:	b29b      	uxth	r3, r3
 800792e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	371c      	adds	r7, #28
 8007936:	46bd      	mov	sp, r7
 8007938:	bc80      	pop	{r7}
 800793a:	4770      	bx	lr

0800793c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007948:	78fb      	ldrb	r3, [r7, #3]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d103      	bne.n	8007956 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2280      	movs	r2, #128	@ 0x80
 8007952:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	bc80      	pop	{r7}
 8007960:	4770      	bx	lr

08007962 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	bc80      	pop	{r7}
 8007974:	4770      	bx	lr

08007976 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr

0800798a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800798a:	b480      	push	{r7}
 800798c:	b085      	sub	sp, #20
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007998:	b29b      	uxth	r3, r3
 800799a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800799c:	68fb      	ldr	r3, [r7, #12]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc80      	pop	{r7}
 80079a6:	4770      	bx	lr

080079a8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bc80      	pop	{r7}
 80079bc:	4770      	bx	lr

080079be <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80079be:	b480      	push	{r7}
 80079c0:	b08b      	sub	sp, #44	@ 0x2c
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	4611      	mov	r1, r2
 80079ca:	461a      	mov	r2, r3
 80079cc:	460b      	mov	r3, r1
 80079ce:	80fb      	strh	r3, [r7, #6]
 80079d0:	4613      	mov	r3, r2
 80079d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80079d4:	88bb      	ldrh	r3, [r7, #4]
 80079d6:	3301      	adds	r3, #1
 80079d8:	085b      	lsrs	r3, r3, #1
 80079da:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079e4:	88fb      	ldrh	r3, [r7, #6]
 80079e6:	005a      	lsls	r2, r3, #1
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079f0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80079f6:	e01f      	b.n	8007a38 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	3301      	adds	r3, #1
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	b21b      	sxth	r3, r3
 8007a06:	021b      	lsls	r3, r3, #8
 8007a08:	b21a      	sxth	r2, r3
 8007a0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	b21b      	sxth	r3, r3
 8007a12:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	8a7a      	ldrh	r2, [r7, #18]
 8007a18:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	3302      	adds	r3, #2
 8007a1e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	3302      	adds	r3, #2
 8007a24:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a34:	3b01      	subs	r3, #1
 8007a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1dc      	bne.n	80079f8 <USB_WritePMA+0x3a>
  }
}
 8007a3e:	bf00      	nop
 8007a40:	bf00      	nop
 8007a42:	372c      	adds	r7, #44	@ 0x2c
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bc80      	pop	{r7}
 8007a48:	4770      	bx	lr

08007a4a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b08b      	sub	sp, #44	@ 0x2c
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	60f8      	str	r0, [r7, #12]
 8007a52:	60b9      	str	r1, [r7, #8]
 8007a54:	4611      	mov	r1, r2
 8007a56:	461a      	mov	r2, r3
 8007a58:	460b      	mov	r3, r1
 8007a5a:	80fb      	strh	r3, [r7, #6]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007a60:	88bb      	ldrh	r3, [r7, #4]
 8007a62:	085b      	lsrs	r3, r3, #1
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a70:	88fb      	ldrh	r3, [r7, #6]
 8007a72:	005a      	lsls	r2, r3, #1
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a7c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a82:	e01b      	b.n	8007abc <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	3302      	adds	r3, #2
 8007a90:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	0a1b      	lsrs	r3, r3, #8
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	3301      	adds	r3, #1
 8007aae:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	3302      	adds	r3, #2
 8007ab4:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8007abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e0      	bne.n	8007a84 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007ac2:	88bb      	ldrh	r3, [r7, #4]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d007      	beq.n	8007ade <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	701a      	strb	r2, [r3, #0]
  }
}
 8007ade:	bf00      	nop
 8007ae0:	372c      	adds	r7, #44	@ 0x2c
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bc80      	pop	{r7}
 8007ae6:	4770      	bx	lr

08007ae8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	7c1b      	ldrb	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d115      	bne.n	8007b2c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b04:	2202      	movs	r2, #2
 8007b06:	2181      	movs	r1, #129	@ 0x81
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f001 ff8e 	bl	8009a2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b18:	2202      	movs	r2, #2
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f001 ff84 	bl	8009a2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007b2a:	e012      	b.n	8007b52 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b2c:	2340      	movs	r3, #64	@ 0x40
 8007b2e:	2202      	movs	r2, #2
 8007b30:	2181      	movs	r1, #129	@ 0x81
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f001 ff79 	bl	8009a2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b3e:	2340      	movs	r3, #64	@ 0x40
 8007b40:	2202      	movs	r2, #2
 8007b42:	2101      	movs	r1, #1
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 ff70 	bl	8009a2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b52:	2308      	movs	r3, #8
 8007b54:	2203      	movs	r2, #3
 8007b56:	2182      	movs	r1, #130	@ 0x82
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 ff66 	bl	8009a2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b64:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007b68:	f002 f886 	bl	8009c78 <USBD_static_malloc>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d102      	bne.n	8007b84 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	73fb      	strb	r3, [r7, #15]
 8007b82:	e026      	b.n	8007bd2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b8a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	7c1b      	ldrb	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d109      	bne.n	8007bc2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bb8:	2101      	movs	r1, #1
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f002 f825 	bl	8009c0a <USBD_LL_PrepareReceive>
 8007bc0:	e007      	b.n	8007bd2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bc8:	2340      	movs	r3, #64	@ 0x40
 8007bca:	2101      	movs	r1, #1
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f002 f81c 	bl	8009c0a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007bec:	2181      	movs	r1, #129	@ 0x81
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f001 ff41 	bl	8009a76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f001 ff3a 	bl	8009a76 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c0a:	2182      	movs	r1, #130	@ 0x82
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 ff32 	bl	8009a76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00e      	beq.n	8007c40 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c32:	4618      	mov	r0, r3
 8007c34:	f002 f82c 	bl	8009c90 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b086      	sub	sp, #24
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c5a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d039      	beq.n	8007ce8 <USBD_CDC_Setup+0x9e>
 8007c74:	2b20      	cmp	r3, #32
 8007c76:	d17f      	bne.n	8007d78 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	88db      	ldrh	r3, [r3, #6]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d029      	beq.n	8007cd4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	b25b      	sxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	da11      	bge.n	8007cae <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007c96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	88d2      	ldrh	r2, [r2, #6]
 8007c9c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007c9e:	6939      	ldr	r1, [r7, #16]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	88db      	ldrh	r3, [r3, #6]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 fa06 	bl	80090b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007cac:	e06b      	b.n	8007d86 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	785a      	ldrb	r2, [r3, #1]
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	88db      	ldrh	r3, [r3, #6]
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007cc4:	6939      	ldr	r1, [r7, #16]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	88db      	ldrh	r3, [r3, #6]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 fa21 	bl	8009114 <USBD_CtlPrepareRx>
      break;
 8007cd2:	e058      	b.n	8007d86 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	7850      	ldrb	r0, [r2, #1]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	4798      	blx	r3
      break;
 8007ce6:	e04e      	b.n	8007d86 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	785b      	ldrb	r3, [r3, #1]
 8007cec:	2b0b      	cmp	r3, #11
 8007cee:	d02e      	beq.n	8007d4e <USBD_CDC_Setup+0x104>
 8007cf0:	2b0b      	cmp	r3, #11
 8007cf2:	dc38      	bgt.n	8007d66 <USBD_CDC_Setup+0x11c>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <USBD_CDC_Setup+0xb4>
 8007cf8:	2b0a      	cmp	r3, #10
 8007cfa:	d014      	beq.n	8007d26 <USBD_CDC_Setup+0xdc>
 8007cfc:	e033      	b.n	8007d66 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d107      	bne.n	8007d18 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007d08:	f107 030c 	add.w	r3, r7, #12
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 f9d1 	bl	80090b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d16:	e02e      	b.n	8007d76 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 f962 	bl	8008fe4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d20:	2302      	movs	r3, #2
 8007d22:	75fb      	strb	r3, [r7, #23]
          break;
 8007d24:	e027      	b.n	8007d76 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d107      	bne.n	8007d40 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d30:	f107 030f 	add.w	r3, r7, #15
 8007d34:	2201      	movs	r2, #1
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f001 f9bd 	bl	80090b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d3e:	e01a      	b.n	8007d76 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 f94e 	bl	8008fe4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d48:	2302      	movs	r3, #2
 8007d4a:	75fb      	strb	r3, [r7, #23]
          break;
 8007d4c:	e013      	b.n	8007d76 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d00d      	beq.n	8007d74 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 f942 	bl	8008fe4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d60:	2302      	movs	r3, #2
 8007d62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d64:	e006      	b.n	8007d74 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 f93b 	bl	8008fe4 <USBD_CtlError>
          ret = USBD_FAIL;
 8007d6e:	2302      	movs	r3, #2
 8007d70:	75fb      	strb	r3, [r7, #23]
          break;
 8007d72:	e000      	b.n	8007d76 <USBD_CDC_Setup+0x12c>
          break;
 8007d74:	bf00      	nop
      }
      break;
 8007d76:	e006      	b.n	8007d86 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f001 f932 	bl	8008fe4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d80:	2302      	movs	r3, #2
 8007d82:	75fb      	strb	r3, [r7, #23]
      break;
 8007d84:	bf00      	nop
  }

  return ret;
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007da2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007daa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d03a      	beq.n	8007e2c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007db6:	78fa      	ldrb	r2, [r7, #3]
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	331c      	adds	r3, #28
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d029      	beq.n	8007e20 <USBD_CDC_DataIn+0x90>
 8007dcc:	78fa      	ldrb	r2, [r7, #3]
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	440b      	add	r3, r1
 8007dda:	331c      	adds	r3, #28
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	78f9      	ldrb	r1, [r7, #3]
 8007de0:	68b8      	ldr	r0, [r7, #8]
 8007de2:	460b      	mov	r3, r1
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	440b      	add	r3, r1
 8007de8:	00db      	lsls	r3, r3, #3
 8007dea:	4403      	add	r3, r0
 8007dec:	3320      	adds	r3, #32
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007df4:	fb01 f303 	mul.w	r3, r1, r3
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d110      	bne.n	8007e20 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007dfe:	78fa      	ldrb	r2, [r7, #3]
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	440b      	add	r3, r1
 8007e0c:	331c      	adds	r3, #28
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e12:	78f9      	ldrb	r1, [r7, #3]
 8007e14:	2300      	movs	r3, #0
 8007e16:	2200      	movs	r2, #0
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f001 fed3 	bl	8009bc4 <USBD_LL_Transmit>
 8007e1e:	e003      	b.n	8007e28 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	e000      	b.n	8007e2e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007e2c:	2302      	movs	r3, #2
  }
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e48:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e4a:	78fb      	ldrb	r3, [r7, #3]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 fefe 	bl	8009c50 <USBD_LL_GetRxDataSize>
 8007e54:	4602      	mov	r2, r0
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00d      	beq.n	8007e82 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4798      	blx	r3

    return USBD_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e000      	b.n	8007e84 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007e82:	2302      	movs	r3, #2
  }
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e9a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d014      	beq.n	8007ed0 <USBD_CDC_EP0_RxReady+0x44>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007eac:	2bff      	cmp	r3, #255	@ 0xff
 8007eae:	d00f      	beq.n	8007ed0 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007ebe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ec6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	22ff      	movs	r2, #255	@ 0xff
 8007ecc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2243      	movs	r2, #67	@ 0x43
 8007ee8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007eea:	4b03      	ldr	r3, [pc, #12]	@ (8007ef8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bc80      	pop	{r7}
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	2000009c 	.word	0x2000009c

08007efc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2243      	movs	r2, #67	@ 0x43
 8007f08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007f0a:	4b03      	ldr	r3, [pc, #12]	@ (8007f18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bc80      	pop	{r7}
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	20000058 	.word	0x20000058

08007f1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2243      	movs	r2, #67	@ 0x43
 8007f28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007f2a:	4b03      	ldr	r3, [pc, #12]	@ (8007f38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bc80      	pop	{r7}
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	200000e0 	.word	0x200000e0

08007f3c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	220a      	movs	r2, #10
 8007f48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007f4a:	4b03      	ldr	r3, [pc, #12]	@ (8007f58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bc80      	pop	{r7}
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	20000014 	.word	0x20000014

08007f5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007f66:	2302      	movs	r3, #2
 8007f68:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d005      	beq.n	8007f7c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bc80      	pop	{r7}
 8007f86:	4770      	bx	lr

08007f88 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f9c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007fa6:	88fa      	ldrh	r2, [r7, #6]
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bc80      	pop	{r7}
 8007fb8:	4770      	bx	lr

08007fba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bc80      	pop	{r7}
 8007fde:	4770      	bx	lr

08007fe0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01c      	beq.n	8008034 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008000:	2b00      	cmp	r3, #0
 8008002:	d115      	bne.n	8008030 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2201      	movs	r2, #1
 8008008:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008022:	b29b      	uxth	r3, r3
 8008024:	2181      	movs	r1, #129	@ 0x81
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 fdcc 	bl	8009bc4 <USBD_LL_Transmit>

      return USBD_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	e002      	b.n	8008036 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008030:	2301      	movs	r3, #1
 8008032:	e000      	b.n	8008036 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008034:	2302      	movs	r3, #2
  }
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800804c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008054:	2b00      	cmp	r3, #0
 8008056:	d017      	beq.n	8008088 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	7c1b      	ldrb	r3, [r3, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d109      	bne.n	8008074 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008066:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800806a:	2101      	movs	r1, #1
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 fdcc 	bl	8009c0a <USBD_LL_PrepareReceive>
 8008072:	e007      	b.n	8008084 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800807a:	2340      	movs	r3, #64	@ 0x40
 800807c:	2101      	movs	r1, #1
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 fdc3 	bl	8009c0a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	e000      	b.n	800808a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008088:	2302      	movs	r3, #2
  }
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	4613      	mov	r3, r2
 800809e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80080a6:	2302      	movs	r3, #2
 80080a8:	e01a      	b.n	80080e0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	79fa      	ldrb	r2, [r7, #7]
 80080d6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f001 fc31 	bl	8009940 <USBD_LL_Init>

  return USBD_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d006      	beq.n	800810a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]
 8008108:	e001      	b.n	800810e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800810a:	2302      	movs	r3, #2
 800810c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800810e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	bc80      	pop	{r7}
 8008118:	4770      	bx	lr

0800811a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 fc66 	bl	80099f4 <USBD_LL_Start>

  return USBD_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008132:	b480      	push	{r7}
 8008134:	b083      	sub	sp, #12
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	bc80      	pop	{r7}
 8008144:	4770      	bx	lr

08008146 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	460b      	mov	r3, r1
 8008150:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008152:	2302      	movs	r3, #2
 8008154:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00c      	beq.n	800817a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	78fa      	ldrb	r2, [r7, #3]
 800816a:	4611      	mov	r1, r2
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	4798      	blx	r3
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800817a:	7bfb      	ldrb	r3, [r7, #15]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	78fa      	ldrb	r2, [r7, #3]
 800819a:	4611      	mov	r1, r2
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	4798      	blx	r3

  return USBD_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 fed8 	bl	8008f72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80081d0:	461a      	mov	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80081de:	f003 031f 	and.w	r3, r3, #31
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d016      	beq.n	8008214 <USBD_LL_SetupStage+0x6a>
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d81c      	bhi.n	8008224 <USBD_LL_SetupStage+0x7a>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d002      	beq.n	80081f4 <USBD_LL_SetupStage+0x4a>
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d008      	beq.n	8008204 <USBD_LL_SetupStage+0x5a>
 80081f2:	e017      	b.n	8008224 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f9cb 	bl	8008598 <USBD_StdDevReq>
      break;
 8008202:	e01a      	b.n	800823a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fa2d 	bl	800866c <USBD_StdItfReq>
      break;
 8008212:	e012      	b.n	800823a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fa6d 	bl	80086fc <USBD_StdEPReq>
      break;
 8008222:	e00a      	b.n	800823a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800822a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800822e:	b2db      	uxtb	r3, r3
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 fc3e 	bl	8009ab4 <USBD_LL_StallEP>
      break;
 8008238:	bf00      	nop
  }

  return USBD_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	460b      	mov	r3, r1
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008252:	7afb      	ldrb	r3, [r7, #11]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d14b      	bne.n	80082f0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800825e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008266:	2b03      	cmp	r3, #3
 8008268:	d134      	bne.n	80082d4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	429a      	cmp	r2, r3
 8008274:	d919      	bls.n	80082aa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	68da      	ldr	r2, [r3, #12]
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800828c:	429a      	cmp	r2, r3
 800828e:	d203      	bcs.n	8008298 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008294:	b29b      	uxth	r3, r3
 8008296:	e002      	b.n	800829e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800829c:	b29b      	uxth	r3, r3
 800829e:	461a      	mov	r2, r3
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 ff54 	bl	8009150 <USBD_CtlContinueRx>
 80082a8:	e038      	b.n	800831c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00a      	beq.n	80082cc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d105      	bne.n	80082cc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 ff51 	bl	8009174 <USBD_CtlSendStatus>
 80082d2:	e023      	b.n	800831c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082da:	2b05      	cmp	r3, #5
 80082dc:	d11e      	bne.n	800831c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80082e6:	2100      	movs	r1, #0
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f001 fbe3 	bl	8009ab4 <USBD_LL_StallEP>
 80082ee:	e015      	b.n	800831c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00d      	beq.n	8008318 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008302:	2b03      	cmp	r3, #3
 8008304:	d108      	bne.n	8008318 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	7afa      	ldrb	r2, [r7, #11]
 8008310:	4611      	mov	r1, r2
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	4798      	blx	r3
 8008316:	e001      	b.n	800831c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008318:	2302      	movs	r3, #2
 800831a:	e000      	b.n	800831e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b086      	sub	sp, #24
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	460b      	mov	r3, r1
 8008330:	607a      	str	r2, [r7, #4]
 8008332:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008334:	7afb      	ldrb	r3, [r7, #11]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d17f      	bne.n	800843a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3314      	adds	r3, #20
 800833e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008346:	2b02      	cmp	r3, #2
 8008348:	d15c      	bne.n	8008404 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	429a      	cmp	r2, r3
 8008354:	d915      	bls.n	8008382 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	68da      	ldr	r2, [r3, #12]
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	1ad2      	subs	r2, r2, r3
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	b29b      	uxth	r3, r3
 800836a:	461a      	mov	r2, r3
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 febe 	bl	80090f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008374:	2300      	movs	r3, #0
 8008376:	2200      	movs	r2, #0
 8008378:	2100      	movs	r1, #0
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f001 fc45 	bl	8009c0a <USBD_LL_PrepareReceive>
 8008380:	e04e      	b.n	8008420 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	6912      	ldr	r2, [r2, #16]
 800838a:	fbb3 f1f2 	udiv	r1, r3, r2
 800838e:	fb01 f202 	mul.w	r2, r1, r2
 8008392:	1a9b      	subs	r3, r3, r2
 8008394:	2b00      	cmp	r3, #0
 8008396:	d11c      	bne.n	80083d2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d316      	bcc.n	80083d2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d20f      	bcs.n	80083d2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083b2:	2200      	movs	r2, #0
 80083b4:	2100      	movs	r1, #0
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 fe9a 	bl	80090f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083c4:	2300      	movs	r3, #0
 80083c6:	2200      	movs	r2, #0
 80083c8:	2100      	movs	r1, #0
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f001 fc1d 	bl	8009c0a <USBD_LL_PrepareReceive>
 80083d0:	e026      	b.n	8008420 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d105      	bne.n	80083f4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80083f4:	2180      	movs	r1, #128	@ 0x80
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f001 fb5c 	bl	8009ab4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 fecc 	bl	800919a <USBD_CtlReceiveStatus>
 8008402:	e00d      	b.n	8008420 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800840a:	2b04      	cmp	r3, #4
 800840c:	d004      	beq.n	8008418 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008414:	2b00      	cmp	r3, #0
 8008416:	d103      	bne.n	8008420 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008418:	2180      	movs	r1, #128	@ 0x80
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f001 fb4a 	bl	8009ab4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008426:	2b01      	cmp	r3, #1
 8008428:	d11d      	bne.n	8008466 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff fe81 	bl	8008132 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008438:	e015      	b.n	8008466 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00d      	beq.n	8008462 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800844c:	2b03      	cmp	r3, #3
 800844e:	d108      	bne.n	8008462 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	7afa      	ldrb	r2, [r7, #11]
 800845a:	4611      	mov	r1, r2
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	4798      	blx	r3
 8008460:	e001      	b.n	8008466 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008462:	2302      	movs	r3, #2
 8008464:	e000      	b.n	8008468 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008478:	2340      	movs	r3, #64	@ 0x40
 800847a:	2200      	movs	r2, #0
 800847c:	2100      	movs	r1, #0
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f001 fad3 	bl	8009a2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2240      	movs	r2, #64	@ 0x40
 8008490:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008494:	2340      	movs	r3, #64	@ 0x40
 8008496:	2200      	movs	r2, #0
 8008498:	2180      	movs	r1, #128	@ 0x80
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f001 fac5 	bl	8009a2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2240      	movs	r2, #64	@ 0x40
 80084aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d009      	beq.n	80084e8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	6852      	ldr	r2, [r2, #4]
 80084e0:	b2d2      	uxtb	r2, r2
 80084e2:	4611      	mov	r1, r2
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	4798      	blx	r3
  }

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	78fa      	ldrb	r2, [r7, #3]
 8008502:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr

08008510 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2204      	movs	r2, #4
 8008528:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	bc80      	pop	{r7}
 8008536:	4770      	bx	lr

08008538 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008546:	2b04      	cmp	r3, #4
 8008548:	d105      	bne.n	8008556 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr

08008562 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008570:	2b03      	cmp	r3, #3
 8008572:	d10b      	bne.n	800858c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d005      	beq.n	800858c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085ae:	2b40      	cmp	r3, #64	@ 0x40
 80085b0:	d005      	beq.n	80085be <USBD_StdDevReq+0x26>
 80085b2:	2b40      	cmp	r3, #64	@ 0x40
 80085b4:	d84f      	bhi.n	8008656 <USBD_StdDevReq+0xbe>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <USBD_StdDevReq+0x36>
 80085ba:	2b20      	cmp	r3, #32
 80085bc:	d14b      	bne.n	8008656 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	4798      	blx	r3
      break;
 80085cc:	e048      	b.n	8008660 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	785b      	ldrb	r3, [r3, #1]
 80085d2:	2b09      	cmp	r3, #9
 80085d4:	d839      	bhi.n	800864a <USBD_StdDevReq+0xb2>
 80085d6:	a201      	add	r2, pc, #4	@ (adr r2, 80085dc <USBD_StdDevReq+0x44>)
 80085d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085dc:	0800862d 	.word	0x0800862d
 80085e0:	08008641 	.word	0x08008641
 80085e4:	0800864b 	.word	0x0800864b
 80085e8:	08008637 	.word	0x08008637
 80085ec:	0800864b 	.word	0x0800864b
 80085f0:	0800860f 	.word	0x0800860f
 80085f4:	08008605 	.word	0x08008605
 80085f8:	0800864b 	.word	0x0800864b
 80085fc:	08008623 	.word	0x08008623
 8008600:	08008619 	.word	0x08008619
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f9dc 	bl	80089c4 <USBD_GetDescriptor>
          break;
 800860c:	e022      	b.n	8008654 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fb3f 	bl	8008c94 <USBD_SetAddress>
          break;
 8008616:	e01d      	b.n	8008654 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fb7e 	bl	8008d1c <USBD_SetConfig>
          break;
 8008620:	e018      	b.n	8008654 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fc07 	bl	8008e38 <USBD_GetConfig>
          break;
 800862a:	e013      	b.n	8008654 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fc37 	bl	8008ea2 <USBD_GetStatus>
          break;
 8008634:	e00e      	b.n	8008654 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fc65 	bl	8008f08 <USBD_SetFeature>
          break;
 800863e:	e009      	b.n	8008654 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fc74 	bl	8008f30 <USBD_ClrFeature>
          break;
 8008648:	e004      	b.n	8008654 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fcc9 	bl	8008fe4 <USBD_CtlError>
          break;
 8008652:	bf00      	nop
      }
      break;
 8008654:	e004      	b.n	8008660 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fcc3 	bl	8008fe4 <USBD_CtlError>
      break;
 800865e:	bf00      	nop
  }

  return ret;
 8008660:	7bfb      	ldrb	r3, [r7, #15]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop

0800866c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008682:	2b40      	cmp	r3, #64	@ 0x40
 8008684:	d005      	beq.n	8008692 <USBD_StdItfReq+0x26>
 8008686:	2b40      	cmp	r3, #64	@ 0x40
 8008688:	d82e      	bhi.n	80086e8 <USBD_StdItfReq+0x7c>
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <USBD_StdItfReq+0x26>
 800868e:	2b20      	cmp	r3, #32
 8008690:	d12a      	bne.n	80086e8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008698:	3b01      	subs	r3, #1
 800869a:	2b02      	cmp	r3, #2
 800869c:	d81d      	bhi.n	80086da <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	889b      	ldrh	r3, [r3, #4]
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d813      	bhi.n	80086d0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	4798      	blx	r3
 80086b6:	4603      	mov	r3, r0
 80086b8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	88db      	ldrh	r3, [r3, #6]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d110      	bne.n	80086e4 <USBD_StdItfReq+0x78>
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10d      	bne.n	80086e4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fd53 	bl	8009174 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80086ce:	e009      	b.n	80086e4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fc86 	bl	8008fe4 <USBD_CtlError>
          break;
 80086d8:	e004      	b.n	80086e4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fc81 	bl	8008fe4 <USBD_CtlError>
          break;
 80086e2:	e000      	b.n	80086e6 <USBD_StdItfReq+0x7a>
          break;
 80086e4:	bf00      	nop
      }
      break;
 80086e6:	e004      	b.n	80086f2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fc7a 	bl	8008fe4 <USBD_CtlError>
      break;
 80086f0:	bf00      	nop
  }

  return USBD_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	889b      	ldrh	r3, [r3, #4]
 800870e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008718:	2b40      	cmp	r3, #64	@ 0x40
 800871a:	d007      	beq.n	800872c <USBD_StdEPReq+0x30>
 800871c:	2b40      	cmp	r3, #64	@ 0x40
 800871e:	f200 8146 	bhi.w	80089ae <USBD_StdEPReq+0x2b2>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <USBD_StdEPReq+0x40>
 8008726:	2b20      	cmp	r3, #32
 8008728:	f040 8141 	bne.w	80089ae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	4798      	blx	r3
      break;
 800873a:	e13d      	b.n	80089b8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008744:	2b20      	cmp	r3, #32
 8008746:	d10a      	bne.n	800875e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	4798      	blx	r3
 8008756:	4603      	mov	r3, r0
 8008758:	73fb      	strb	r3, [r7, #15]

        return ret;
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	e12d      	b.n	80089ba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	785b      	ldrb	r3, [r3, #1]
 8008762:	2b03      	cmp	r3, #3
 8008764:	d007      	beq.n	8008776 <USBD_StdEPReq+0x7a>
 8008766:	2b03      	cmp	r3, #3
 8008768:	f300 811b 	bgt.w	80089a2 <USBD_StdEPReq+0x2a6>
 800876c:	2b00      	cmp	r3, #0
 800876e:	d072      	beq.n	8008856 <USBD_StdEPReq+0x15a>
 8008770:	2b01      	cmp	r3, #1
 8008772:	d03a      	beq.n	80087ea <USBD_StdEPReq+0xee>
 8008774:	e115      	b.n	80089a2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800877c:	2b02      	cmp	r3, #2
 800877e:	d002      	beq.n	8008786 <USBD_StdEPReq+0x8a>
 8008780:	2b03      	cmp	r3, #3
 8008782:	d015      	beq.n	80087b0 <USBD_StdEPReq+0xb4>
 8008784:	e02b      	b.n	80087de <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00c      	beq.n	80087a6 <USBD_StdEPReq+0xaa>
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	2b80      	cmp	r3, #128	@ 0x80
 8008790:	d009      	beq.n	80087a6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f001 f98c 	bl	8009ab4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800879c:	2180      	movs	r1, #128	@ 0x80
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f001 f988 	bl	8009ab4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087a4:	e020      	b.n	80087e8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fc1b 	bl	8008fe4 <USBD_CtlError>
              break;
 80087ae:	e01b      	b.n	80087e8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	885b      	ldrh	r3, [r3, #2]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10e      	bne.n	80087d6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00b      	beq.n	80087d6 <USBD_StdEPReq+0xda>
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	2b80      	cmp	r3, #128	@ 0x80
 80087c2:	d008      	beq.n	80087d6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	88db      	ldrh	r3, [r3, #6]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d104      	bne.n	80087d6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f001 f96f 	bl	8009ab4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fccc 	bl	8009174 <USBD_CtlSendStatus>

              break;
 80087dc:	e004      	b.n	80087e8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fbff 	bl	8008fe4 <USBD_CtlError>
              break;
 80087e6:	bf00      	nop
          }
          break;
 80087e8:	e0e0      	b.n	80089ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d002      	beq.n	80087fa <USBD_StdEPReq+0xfe>
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d015      	beq.n	8008824 <USBD_StdEPReq+0x128>
 80087f8:	e026      	b.n	8008848 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00c      	beq.n	800881a <USBD_StdEPReq+0x11e>
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	2b80      	cmp	r3, #128	@ 0x80
 8008804:	d009      	beq.n	800881a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008806:	7bbb      	ldrb	r3, [r7, #14]
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 f952 	bl	8009ab4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008810:	2180      	movs	r1, #128	@ 0x80
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f001 f94e 	bl	8009ab4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008818:	e01c      	b.n	8008854 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fbe1 	bl	8008fe4 <USBD_CtlError>
              break;
 8008822:	e017      	b.n	8008854 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	885b      	ldrh	r3, [r3, #2]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d112      	bne.n	8008852 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008832:	2b00      	cmp	r3, #0
 8008834:	d004      	beq.n	8008840 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f001 f959 	bl	8009af2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fc97 	bl	8009174 <USBD_CtlSendStatus>
              }
              break;
 8008846:	e004      	b.n	8008852 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fbca 	bl	8008fe4 <USBD_CtlError>
              break;
 8008850:	e000      	b.n	8008854 <USBD_StdEPReq+0x158>
              break;
 8008852:	bf00      	nop
          }
          break;
 8008854:	e0aa      	b.n	80089ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800885c:	2b02      	cmp	r3, #2
 800885e:	d002      	beq.n	8008866 <USBD_StdEPReq+0x16a>
 8008860:	2b03      	cmp	r3, #3
 8008862:	d032      	beq.n	80088ca <USBD_StdEPReq+0x1ce>
 8008864:	e097      	b.n	8008996 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d007      	beq.n	800887c <USBD_StdEPReq+0x180>
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	2b80      	cmp	r3, #128	@ 0x80
 8008870:	d004      	beq.n	800887c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fbb5 	bl	8008fe4 <USBD_CtlError>
                break;
 800887a:	e091      	b.n	80089a0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800887c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008880:	2b00      	cmp	r3, #0
 8008882:	da0b      	bge.n	800889c <USBD_StdEPReq+0x1a0>
 8008884:	7bbb      	ldrb	r3, [r7, #14]
 8008886:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800888a:	4613      	mov	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	3310      	adds	r3, #16
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	4413      	add	r3, r2
 8008898:	3304      	adds	r3, #4
 800889a:	e00b      	b.n	80088b4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088a2:	4613      	mov	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	4413      	add	r3, r2
 80088b2:	3304      	adds	r3, #4
 80088b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2200      	movs	r2, #0
 80088ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2202      	movs	r2, #2
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fbf8 	bl	80090b8 <USBD_CtlSendData>
              break;
 80088c8:	e06a      	b.n	80089a0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80088ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	da11      	bge.n	80088f6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80088d2:	7bbb      	ldrb	r3, [r7, #14]
 80088d4:	f003 020f 	and.w	r2, r3, #15
 80088d8:	6879      	ldr	r1, [r7, #4]
 80088da:	4613      	mov	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	440b      	add	r3, r1
 80088e4:	3318      	adds	r3, #24
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d117      	bne.n	800891c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fb78 	bl	8008fe4 <USBD_CtlError>
                  break;
 80088f4:	e054      	b.n	80089a0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	f003 020f 	and.w	r2, r3, #15
 80088fc:	6879      	ldr	r1, [r7, #4]
 80088fe:	4613      	mov	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	440b      	add	r3, r1
 8008908:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d104      	bne.n	800891c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fb65 	bl	8008fe4 <USBD_CtlError>
                  break;
 800891a:	e041      	b.n	80089a0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800891c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008920:	2b00      	cmp	r3, #0
 8008922:	da0b      	bge.n	800893c <USBD_StdEPReq+0x240>
 8008924:	7bbb      	ldrb	r3, [r7, #14]
 8008926:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800892a:	4613      	mov	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	3310      	adds	r3, #16
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	4413      	add	r3, r2
 8008938:	3304      	adds	r3, #4
 800893a:	e00b      	b.n	8008954 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008942:	4613      	mov	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	4413      	add	r3, r2
 8008952:	3304      	adds	r3, #4
 8008954:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008956:	7bbb      	ldrb	r3, [r7, #14]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <USBD_StdEPReq+0x266>
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	2b80      	cmp	r3, #128	@ 0x80
 8008960:	d103      	bne.n	800896a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	2200      	movs	r2, #0
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	e00e      	b.n	8008988 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800896a:	7bbb      	ldrb	r3, [r7, #14]
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 f8de 	bl	8009b30 <USBD_LL_IsStallEP>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2201      	movs	r2, #1
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	e002      	b.n	8008988 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2202      	movs	r2, #2
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fb92 	bl	80090b8 <USBD_CtlSendData>
              break;
 8008994:	e004      	b.n	80089a0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fb23 	bl	8008fe4 <USBD_CtlError>
              break;
 800899e:	bf00      	nop
          }
          break;
 80089a0:	e004      	b.n	80089ac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fb1d 	bl	8008fe4 <USBD_CtlError>
          break;
 80089aa:	bf00      	nop
      }
      break;
 80089ac:	e004      	b.n	80089b8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fb17 	bl	8008fe4 <USBD_CtlError>
      break;
 80089b6:	bf00      	nop
  }

  return ret;
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
	...

080089c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	885b      	ldrh	r3, [r3, #2]
 80089de:	0a1b      	lsrs	r3, r3, #8
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	3b01      	subs	r3, #1
 80089e4:	2b06      	cmp	r3, #6
 80089e6:	f200 8128 	bhi.w	8008c3a <USBD_GetDescriptor+0x276>
 80089ea:	a201      	add	r2, pc, #4	@ (adr r2, 80089f0 <USBD_GetDescriptor+0x2c>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a0d 	.word	0x08008a0d
 80089f4:	08008a25 	.word	0x08008a25
 80089f8:	08008a65 	.word	0x08008a65
 80089fc:	08008c3b 	.word	0x08008c3b
 8008a00:	08008c3b 	.word	0x08008c3b
 8008a04:	08008bdb 	.word	0x08008bdb
 8008a08:	08008c07 	.word	0x08008c07
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	7c12      	ldrb	r2, [r2, #16]
 8008a18:	f107 0108 	add.w	r1, r7, #8
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	4798      	blx	r3
 8008a20:	60f8      	str	r0, [r7, #12]
      break;
 8008a22:	e112      	b.n	8008c4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	7c1b      	ldrb	r3, [r3, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10d      	bne.n	8008a48 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a34:	f107 0208 	add.w	r2, r7, #8
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4798      	blx	r3
 8008a3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3301      	adds	r3, #1
 8008a42:	2202      	movs	r2, #2
 8008a44:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a46:	e100      	b.n	8008c4a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a50:	f107 0208 	add.w	r2, r7, #8
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
 8008a58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	2202      	movs	r2, #2
 8008a60:	701a      	strb	r2, [r3, #0]
      break;
 8008a62:	e0f2      	b.n	8008c4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	885b      	ldrh	r3, [r3, #2]
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b05      	cmp	r3, #5
 8008a6c:	f200 80ac 	bhi.w	8008bc8 <USBD_GetDescriptor+0x204>
 8008a70:	a201      	add	r2, pc, #4	@ (adr r2, 8008a78 <USBD_GetDescriptor+0xb4>)
 8008a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a76:	bf00      	nop
 8008a78:	08008a91 	.word	0x08008a91
 8008a7c:	08008ac5 	.word	0x08008ac5
 8008a80:	08008af9 	.word	0x08008af9
 8008a84:	08008b2d 	.word	0x08008b2d
 8008a88:	08008b61 	.word	0x08008b61
 8008a8c:	08008b95 	.word	0x08008b95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00b      	beq.n	8008ab4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	7c12      	ldrb	r2, [r2, #16]
 8008aa8:	f107 0108 	add.w	r1, r7, #8
 8008aac:	4610      	mov	r0, r2
 8008aae:	4798      	blx	r3
 8008ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ab2:	e091      	b.n	8008bd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa94 	bl	8008fe4 <USBD_CtlError>
            err++;
 8008abc:	7afb      	ldrb	r3, [r7, #11]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ac2:	e089      	b.n	8008bd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00b      	beq.n	8008ae8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	7c12      	ldrb	r2, [r2, #16]
 8008adc:	f107 0108 	add.w	r1, r7, #8
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4798      	blx	r3
 8008ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ae6:	e077      	b.n	8008bd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fa7a 	bl	8008fe4 <USBD_CtlError>
            err++;
 8008af0:	7afb      	ldrb	r3, [r7, #11]
 8008af2:	3301      	adds	r3, #1
 8008af4:	72fb      	strb	r3, [r7, #11]
          break;
 8008af6:	e06f      	b.n	8008bd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00b      	beq.n	8008b1c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	7c12      	ldrb	r2, [r2, #16]
 8008b10:	f107 0108 	add.w	r1, r7, #8
 8008b14:	4610      	mov	r0, r2
 8008b16:	4798      	blx	r3
 8008b18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b1a:	e05d      	b.n	8008bd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fa60 	bl	8008fe4 <USBD_CtlError>
            err++;
 8008b24:	7afb      	ldrb	r3, [r7, #11]
 8008b26:	3301      	adds	r3, #1
 8008b28:	72fb      	strb	r3, [r7, #11]
          break;
 8008b2a:	e055      	b.n	8008bd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00b      	beq.n	8008b50 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	7c12      	ldrb	r2, [r2, #16]
 8008b44:	f107 0108 	add.w	r1, r7, #8
 8008b48:	4610      	mov	r0, r2
 8008b4a:	4798      	blx	r3
 8008b4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b4e:	e043      	b.n	8008bd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fa46 	bl	8008fe4 <USBD_CtlError>
            err++;
 8008b58:	7afb      	ldrb	r3, [r7, #11]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b5e:	e03b      	b.n	8008bd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00b      	beq.n	8008b84 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	7c12      	ldrb	r2, [r2, #16]
 8008b78:	f107 0108 	add.w	r1, r7, #8
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	4798      	blx	r3
 8008b80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b82:	e029      	b.n	8008bd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fa2c 	bl	8008fe4 <USBD_CtlError>
            err++;
 8008b8c:	7afb      	ldrb	r3, [r7, #11]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	72fb      	strb	r3, [r7, #11]
          break;
 8008b92:	e021      	b.n	8008bd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00b      	beq.n	8008bb8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	7c12      	ldrb	r2, [r2, #16]
 8008bac:	f107 0108 	add.w	r1, r7, #8
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	4798      	blx	r3
 8008bb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bb6:	e00f      	b.n	8008bd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fa12 	bl	8008fe4 <USBD_CtlError>
            err++;
 8008bc0:	7afb      	ldrb	r3, [r7, #11]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	72fb      	strb	r3, [r7, #11]
          break;
 8008bc6:	e007      	b.n	8008bd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa0a 	bl	8008fe4 <USBD_CtlError>
          err++;
 8008bd0:	7afb      	ldrb	r3, [r7, #11]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008bd6:	e038      	b.n	8008c4a <USBD_GetDescriptor+0x286>
 8008bd8:	e037      	b.n	8008c4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	7c1b      	ldrb	r3, [r3, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d109      	bne.n	8008bf6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bea:	f107 0208 	add.w	r2, r7, #8
 8008bee:	4610      	mov	r0, r2
 8008bf0:	4798      	blx	r3
 8008bf2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bf4:	e029      	b.n	8008c4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f9f3 	bl	8008fe4 <USBD_CtlError>
        err++;
 8008bfe:	7afb      	ldrb	r3, [r7, #11]
 8008c00:	3301      	adds	r3, #1
 8008c02:	72fb      	strb	r3, [r7, #11]
      break;
 8008c04:	e021      	b.n	8008c4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	7c1b      	ldrb	r3, [r3, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10d      	bne.n	8008c2a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c16:	f107 0208 	add.w	r2, r7, #8
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	4798      	blx	r3
 8008c1e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3301      	adds	r3, #1
 8008c24:	2207      	movs	r2, #7
 8008c26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c28:	e00f      	b.n	8008c4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f9d9 	bl	8008fe4 <USBD_CtlError>
        err++;
 8008c32:	7afb      	ldrb	r3, [r7, #11]
 8008c34:	3301      	adds	r3, #1
 8008c36:	72fb      	strb	r3, [r7, #11]
      break;
 8008c38:	e007      	b.n	8008c4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f9d1 	bl	8008fe4 <USBD_CtlError>
      err++;
 8008c42:	7afb      	ldrb	r3, [r7, #11]
 8008c44:	3301      	adds	r3, #1
 8008c46:	72fb      	strb	r3, [r7, #11]
      break;
 8008c48:	bf00      	nop
  }

  if (err != 0U)
 8008c4a:	7afb      	ldrb	r3, [r7, #11]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d11c      	bne.n	8008c8a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008c50:	893b      	ldrh	r3, [r7, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d011      	beq.n	8008c7a <USBD_GetDescriptor+0x2b6>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	88db      	ldrh	r3, [r3, #6]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00d      	beq.n	8008c7a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	88da      	ldrh	r2, [r3, #6]
 8008c62:	893b      	ldrh	r3, [r7, #8]
 8008c64:	4293      	cmp	r3, r2
 8008c66:	bf28      	it	cs
 8008c68:	4613      	movcs	r3, r2
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c6e:	893b      	ldrh	r3, [r7, #8]
 8008c70:	461a      	mov	r2, r3
 8008c72:	68f9      	ldr	r1, [r7, #12]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fa1f 	bl	80090b8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	88db      	ldrh	r3, [r3, #6]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d104      	bne.n	8008c8c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa76 	bl	8009174 <USBD_CtlSendStatus>
 8008c88:	e000      	b.n	8008c8c <USBD_GetDescriptor+0x2c8>
    return;
 8008c8a:	bf00      	nop
    }
  }
}
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop

08008c94 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	889b      	ldrh	r3, [r3, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d130      	bne.n	8008d08 <USBD_SetAddress+0x74>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	88db      	ldrh	r3, [r3, #6]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d12c      	bne.n	8008d08 <USBD_SetAddress+0x74>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	885b      	ldrh	r3, [r3, #2]
 8008cb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008cb4:	d828      	bhi.n	8008d08 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	885b      	ldrh	r3, [r3, #2]
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d104      	bne.n	8008cd6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f988 	bl	8008fe4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cd4:	e01d      	b.n	8008d12 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	7bfa      	ldrb	r2, [r7, #15]
 8008cda:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 ff4f 	bl	8009b86 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fa43 	bl	8009174 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d004      	beq.n	8008cfe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cfc:	e009      	b.n	8008d12 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d06:	e004      	b.n	8008d12 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f96a 	bl	8008fe4 <USBD_CtlError>
  }
}
 8008d10:	bf00      	nop
 8008d12:	bf00      	nop
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	885b      	ldrh	r3, [r3, #2]
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	4b41      	ldr	r3, [pc, #260]	@ (8008e34 <USBD_SetConfig+0x118>)
 8008d2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d30:	4b40      	ldr	r3, [pc, #256]	@ (8008e34 <USBD_SetConfig+0x118>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d904      	bls.n	8008d42 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f952 	bl	8008fe4 <USBD_CtlError>
 8008d40:	e075      	b.n	8008e2e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d002      	beq.n	8008d52 <USBD_SetConfig+0x36>
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d023      	beq.n	8008d98 <USBD_SetConfig+0x7c>
 8008d50:	e062      	b.n	8008e18 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008d52:	4b38      	ldr	r3, [pc, #224]	@ (8008e34 <USBD_SetConfig+0x118>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01a      	beq.n	8008d90 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008d5a:	4b36      	ldr	r3, [pc, #216]	@ (8008e34 <USBD_SetConfig+0x118>)
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2203      	movs	r2, #3
 8008d68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d6c:	4b31      	ldr	r3, [pc, #196]	@ (8008e34 <USBD_SetConfig+0x118>)
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff f9e7 	bl	8008146 <USBD_SetClassConfig>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d104      	bne.n	8008d88 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f92f 	bl	8008fe4 <USBD_CtlError>
            return;
 8008d86:	e052      	b.n	8008e2e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f9f3 	bl	8009174 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008d8e:	e04e      	b.n	8008e2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f9ef 	bl	8009174 <USBD_CtlSendStatus>
        break;
 8008d96:	e04a      	b.n	8008e2e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008d98:	4b26      	ldr	r3, [pc, #152]	@ (8008e34 <USBD_SetConfig+0x118>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d112      	bne.n	8008dc6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2202      	movs	r2, #2
 8008da4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008da8:	4b22      	ldr	r3, [pc, #136]	@ (8008e34 <USBD_SetConfig+0x118>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	461a      	mov	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008db2:	4b20      	ldr	r3, [pc, #128]	@ (8008e34 <USBD_SetConfig+0x118>)
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7ff f9e3 	bl	8008184 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f9d8 	bl	8009174 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008dc4:	e033      	b.n	8008e2e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8008e34 <USBD_SetConfig+0x118>)
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d01d      	beq.n	8008e10 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff f9d1 	bl	8008184 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008de2:	4b14      	ldr	r3, [pc, #80]	@ (8008e34 <USBD_SetConfig+0x118>)
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	461a      	mov	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008dec:	4b11      	ldr	r3, [pc, #68]	@ (8008e34 <USBD_SetConfig+0x118>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff f9a7 	bl	8008146 <USBD_SetClassConfig>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d104      	bne.n	8008e08 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f8ef 	bl	8008fe4 <USBD_CtlError>
            return;
 8008e06:	e012      	b.n	8008e2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f9b3 	bl	8009174 <USBD_CtlSendStatus>
        break;
 8008e0e:	e00e      	b.n	8008e2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f9af 	bl	8009174 <USBD_CtlSendStatus>
        break;
 8008e16:	e00a      	b.n	8008e2e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f8e2 	bl	8008fe4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008e20:	4b04      	ldr	r3, [pc, #16]	@ (8008e34 <USBD_SetConfig+0x118>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff f9ac 	bl	8008184 <USBD_ClrClassConfig>
        break;
 8008e2c:	bf00      	nop
    }
  }
}
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	20000378 	.word	0x20000378

08008e38 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	88db      	ldrh	r3, [r3, #6]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d004      	beq.n	8008e54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f8c9 	bl	8008fe4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e52:	e022      	b.n	8008e9a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	dc02      	bgt.n	8008e64 <USBD_GetConfig+0x2c>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	dc03      	bgt.n	8008e6a <USBD_GetConfig+0x32>
 8008e62:	e015      	b.n	8008e90 <USBD_GetConfig+0x58>
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	d00b      	beq.n	8008e80 <USBD_GetConfig+0x48>
 8008e68:	e012      	b.n	8008e90 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3308      	adds	r3, #8
 8008e74:	2201      	movs	r2, #1
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f91d 	bl	80090b8 <USBD_CtlSendData>
        break;
 8008e7e:	e00c      	b.n	8008e9a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3304      	adds	r3, #4
 8008e84:	2201      	movs	r2, #1
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f915 	bl	80090b8 <USBD_CtlSendData>
        break;
 8008e8e:	e004      	b.n	8008e9a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f8a6 	bl	8008fe4 <USBD_CtlError>
        break;
 8008e98:	bf00      	nop
}
 8008e9a:	bf00      	nop
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b082      	sub	sp, #8
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d81e      	bhi.n	8008ef6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	88db      	ldrh	r3, [r3, #6]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d004      	beq.n	8008eca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f88e 	bl	8008fe4 <USBD_CtlError>
        break;
 8008ec8:	e01a      	b.n	8008f00 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d005      	beq.n	8008ee6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	f043 0202 	orr.w	r2, r3, #2
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	330c      	adds	r3, #12
 8008eea:	2202      	movs	r2, #2
 8008eec:	4619      	mov	r1, r3
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f8e2 	bl	80090b8 <USBD_CtlSendData>
      break;
 8008ef4:	e004      	b.n	8008f00 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f873 	bl	8008fe4 <USBD_CtlError>
      break;
 8008efe:	bf00      	nop
  }
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	885b      	ldrh	r3, [r3, #2]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d106      	bne.n	8008f28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f926 	bl	8009174 <USBD_CtlSendStatus>
  }
}
 8008f28:	bf00      	nop
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f40:	3b01      	subs	r3, #1
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d80b      	bhi.n	8008f5e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	885b      	ldrh	r3, [r3, #2]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d10c      	bne.n	8008f68 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f90c 	bl	8009174 <USBD_CtlSendStatus>
      }
      break;
 8008f5c:	e004      	b.n	8008f68 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f83f 	bl	8008fe4 <USBD_CtlError>
      break;
 8008f66:	e000      	b.n	8008f6a <USBD_ClrFeature+0x3a>
      break;
 8008f68:	bf00      	nop
  }
}
 8008f6a:	bf00      	nop
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	781a      	ldrb	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	785a      	ldrb	r2, [r3, #1]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	3302      	adds	r3, #2
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	3303      	adds	r3, #3
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	021b      	lsls	r3, r3, #8
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	4413      	add	r3, r2
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	461a      	mov	r2, r3
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	3305      	adds	r3, #5
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	021b      	lsls	r3, r3, #8
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	4413      	add	r3, r2
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	3306      	adds	r3, #6
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	3307      	adds	r3, #7
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	021b      	lsls	r3, r3, #8
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	4413      	add	r3, r2
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	80da      	strh	r2, [r3, #6]

}
 8008fda:	bf00      	nop
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bc80      	pop	{r7}
 8008fe2:	4770      	bx	lr

08008fe4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008fee:	2180      	movs	r1, #128	@ 0x80
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fd5f 	bl	8009ab4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fd5b 	bl	8009ab4 <USBD_LL_StallEP>
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b086      	sub	sp, #24
 800900a:	af00      	add	r7, sp, #0
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	60b9      	str	r1, [r7, #8]
 8009010:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009012:	2300      	movs	r3, #0
 8009014:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d032      	beq.n	8009082 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 f834 	bl	800908a <USBD_GetLen>
 8009022:	4603      	mov	r3, r0
 8009024:	3301      	adds	r3, #1
 8009026:	b29b      	uxth	r3, r3
 8009028:	005b      	lsls	r3, r3, #1
 800902a:	b29a      	uxth	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009030:	7dfb      	ldrb	r3, [r7, #23]
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	75fa      	strb	r2, [r7, #23]
 8009036:	461a      	mov	r2, r3
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	4413      	add	r3, r2
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	7812      	ldrb	r2, [r2, #0]
 8009040:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009042:	7dfb      	ldrb	r3, [r7, #23]
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	75fa      	strb	r2, [r7, #23]
 8009048:	461a      	mov	r2, r3
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	4413      	add	r3, r2
 800904e:	2203      	movs	r2, #3
 8009050:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009052:	e012      	b.n	800907a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	60fa      	str	r2, [r7, #12]
 800905a:	7dfa      	ldrb	r2, [r7, #23]
 800905c:	1c51      	adds	r1, r2, #1
 800905e:	75f9      	strb	r1, [r7, #23]
 8009060:	4611      	mov	r1, r2
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	440a      	add	r2, r1
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	1c5a      	adds	r2, r3, #1
 800906e:	75fa      	strb	r2, [r7, #23]
 8009070:	461a      	mov	r2, r3
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	4413      	add	r3, r2
 8009076:	2200      	movs	r2, #0
 8009078:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1e8      	bne.n	8009054 <USBD_GetString+0x4e>
    }
  }
}
 8009082:	bf00      	nop
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800908a:	b480      	push	{r7}
 800908c:	b085      	sub	sp, #20
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009096:	e005      	b.n	80090a4 <USBD_GetLen+0x1a>
  {
    len++;
 8009098:	7bfb      	ldrb	r3, [r7, #15]
 800909a:	3301      	adds	r3, #1
 800909c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	3301      	adds	r3, #1
 80090a2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1f5      	bne.n	8009098 <USBD_GetLen+0xe>
  }

  return len;
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bc80      	pop	{r7}
 80090b6:	4770      	bx	lr

080090b8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	4613      	mov	r3, r2
 80090c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2202      	movs	r2, #2
 80090ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80090ce:	88fa      	ldrh	r2, [r7, #6]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80090d4:	88fa      	ldrh	r2, [r7, #6]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090da:	88fb      	ldrh	r3, [r7, #6]
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	2100      	movs	r1, #0
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 fd6f 	bl	8009bc4 <USBD_LL_Transmit>

  return USBD_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	4613      	mov	r3, r2
 80090fc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090fe:	88fb      	ldrh	r3, [r7, #6]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	2100      	movs	r1, #0
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 fd5d 	bl	8009bc4 <USBD_LL_Transmit>

  return USBD_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	4613      	mov	r3, r2
 8009120:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2203      	movs	r2, #3
 8009126:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800912a:	88fa      	ldrh	r2, [r7, #6]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009132:	88fa      	ldrh	r2, [r7, #6]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800913a:	88fb      	ldrh	r3, [r7, #6]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	2100      	movs	r1, #0
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 fd62 	bl	8009c0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	4613      	mov	r3, r2
 800915c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800915e:	88fb      	ldrh	r3, [r7, #6]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	2100      	movs	r1, #0
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 fd50 	bl	8009c0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2204      	movs	r2, #4
 8009180:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009184:	2300      	movs	r3, #0
 8009186:	2200      	movs	r2, #0
 8009188:	2100      	movs	r1, #0
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fd1a 	bl	8009bc4 <USBD_LL_Transmit>

  return USBD_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b082      	sub	sp, #8
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2205      	movs	r2, #5
 80091a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091aa:	2300      	movs	r3, #0
 80091ac:	2200      	movs	r2, #0
 80091ae:	2100      	movs	r1, #0
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fd2a 	bl	8009c0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80091c4:	2200      	movs	r2, #0
 80091c6:	4912      	ldr	r1, [pc, #72]	@ (8009210 <MX_USB_DEVICE_Init+0x50>)
 80091c8:	4812      	ldr	r0, [pc, #72]	@ (8009214 <MX_USB_DEVICE_Init+0x54>)
 80091ca:	f7fe ff62 	bl	8008092 <USBD_Init>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80091d4:	f7f7 f8eb 	bl	80003ae <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80091d8:	490f      	ldr	r1, [pc, #60]	@ (8009218 <MX_USB_DEVICE_Init+0x58>)
 80091da:	480e      	ldr	r0, [pc, #56]	@ (8009214 <MX_USB_DEVICE_Init+0x54>)
 80091dc:	f7fe ff84 	bl	80080e8 <USBD_RegisterClass>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80091e6:	f7f7 f8e2 	bl	80003ae <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80091ea:	490c      	ldr	r1, [pc, #48]	@ (800921c <MX_USB_DEVICE_Init+0x5c>)
 80091ec:	4809      	ldr	r0, [pc, #36]	@ (8009214 <MX_USB_DEVICE_Init+0x54>)
 80091ee:	f7fe feb5 	bl	8007f5c <USBD_CDC_RegisterInterface>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80091f8:	f7f7 f8d9 	bl	80003ae <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80091fc:	4805      	ldr	r0, [pc, #20]	@ (8009214 <MX_USB_DEVICE_Init+0x54>)
 80091fe:	f7fe ff8c 	bl	800811a <USBD_Start>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009208:	f7f7 f8d1 	bl	80003ae <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800920c:	bf00      	nop
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20000140 	.word	0x20000140
 8009214:	2000037c 	.word	0x2000037c
 8009218:	20000020 	.word	0x20000020
 800921c:	20000130 	.word	0x20000130

08009220 <cdcAvailable>:
uint32_t rx_len = 512;
uint8_t rx_buf[512];


uint32_t cdcAvailable(void)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8009226:	4b09      	ldr	r3, [pc, #36]	@ (800924c <cdcAvailable+0x2c>)
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	4b09      	ldr	r3, [pc, #36]	@ (8009250 <cdcAvailable+0x30>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	4a08      	ldr	r2, [pc, #32]	@ (8009254 <cdcAvailable+0x34>)
 8009232:	6812      	ldr	r2, [r2, #0]
 8009234:	fbb3 f1f2 	udiv	r1, r3, r2
 8009238:	fb01 f202 	mul.w	r2, r1, r2
 800923c:	1a9b      	subs	r3, r3, r2
 800923e:	607b      	str	r3, [r7, #4]

  return ret;
 8009240:	687b      	ldr	r3, [r7, #4]
}
 8009242:	4618      	mov	r0, r3
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	bc80      	pop	{r7}
 800924a:	4770      	bx	lr
 800924c:	20000640 	.word	0x20000640
 8009250:	20000644 	.word	0x20000644
 8009254:	2000012c 	.word	0x2000012c

08009258 <cdcRead>:


uint8_t cdcRead(void)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 800925e:	4b0e      	ldr	r3, [pc, #56]	@ (8009298 <cdcRead+0x40>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a0e      	ldr	r2, [pc, #56]	@ (800929c <cdcRead+0x44>)
 8009264:	5cd3      	ldrb	r3, [r2, r3]
 8009266:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 8009268:	4b0b      	ldr	r3, [pc, #44]	@ (8009298 <cdcRead+0x40>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	4b0c      	ldr	r3, [pc, #48]	@ (80092a0 <cdcRead+0x48>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	429a      	cmp	r2, r3
 8009272:	d00b      	beq.n	800928c <cdcRead+0x34>
  {
	  rx_out = (rx_out + 1) % rx_len;
 8009274:	4b08      	ldr	r3, [pc, #32]	@ (8009298 <cdcRead+0x40>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3301      	adds	r3, #1
 800927a:	4a0a      	ldr	r2, [pc, #40]	@ (80092a4 <cdcRead+0x4c>)
 800927c:	6812      	ldr	r2, [r2, #0]
 800927e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009282:	fb01 f202 	mul.w	r2, r1, r2
 8009286:	1a9b      	subs	r3, r3, r2
 8009288:	4a03      	ldr	r2, [pc, #12]	@ (8009298 <cdcRead+0x40>)
 800928a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800928c:	79fb      	ldrb	r3, [r7, #7]
}
 800928e:	4618      	mov	r0, r3
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	bc80      	pop	{r7}
 8009296:	4770      	bx	lr
 8009298:	20000644 	.word	0x20000644
 800929c:	20000648 	.word	0x20000648
 80092a0:	20000640 	.word	0x20000640
 80092a4:	2000012c 	.word	0x2000012c

080092a8 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] =rx_data;    //오버라이트
 80092b2:	4b0e      	ldr	r3, [pc, #56]	@ (80092ec <cdcDataIn+0x44>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	490e      	ldr	r1, [pc, #56]	@ (80092f0 <cdcDataIn+0x48>)
 80092b8:	79fa      	ldrb	r2, [r7, #7]
 80092ba:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in +1) % rx_len;
 80092bc:	4b0b      	ldr	r3, [pc, #44]	@ (80092ec <cdcDataIn+0x44>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3301      	adds	r3, #1
 80092c2:	4a0c      	ldr	r2, [pc, #48]	@ (80092f4 <cdcDataIn+0x4c>)
 80092c4:	6812      	ldr	r2, [r2, #0]
 80092c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80092ca:	fb01 f202 	mul.w	r2, r1, r2
 80092ce:	1a9b      	subs	r3, r3, r2
 80092d0:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 80092d2:	4b09      	ldr	r3, [pc, #36]	@ (80092f8 <cdcDataIn+0x50>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d002      	beq.n	80092e2 <cdcDataIn+0x3a>
  {
	  rx_in = next_rx_in;
 80092dc:	4a03      	ldr	r2, [pc, #12]	@ (80092ec <cdcDataIn+0x44>)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6013      	str	r3, [r2, #0]
  }
}
 80092e2:	bf00      	nop
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bc80      	pop	{r7}
 80092ea:	4770      	bx	lr
 80092ec:	20000640 	.word	0x20000640
 80092f0:	20000648 	.word	0x20000648
 80092f4:	2000012c 	.word	0x2000012c
 80092f8:	20000644 	.word	0x20000644

080092fc <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 8009306:	f7f6 ffec 	bl	80002e2 <millis>
 800930a:	60f8      	str	r0, [r7, #12]
  while(1)
  {
	  ret = CDC_Transmit_FS(p_data,length);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	b29b      	uxth	r3, r3
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f91e 	bl	8009554 <CDC_Transmit_FS>
 8009318:	4603      	mov	r3, r0
 800931a:	72fb      	strb	r3, [r7, #11]
    if(ret == USBD_OK)
 800931c:	7afb      	ldrb	r3, [r7, #11]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d101      	bne.n	8009326 <cdcWrite+0x2a>
    {
    	return length;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	e00e      	b.n	8009344 <cdcWrite+0x48>
    }
    else if(ret ==USBD_FAIL)
 8009326:	7afb      	ldrb	r3, [r7, #11]
 8009328:	2b02      	cmp	r3, #2
 800932a:	d101      	bne.n	8009330 <cdcWrite+0x34>
    {
    	return 0;
 800932c:	2300      	movs	r3, #0
 800932e:	e009      	b.n	8009344 <cdcWrite+0x48>
    }
    //busy 인 경우 while문을 돈다.
    if(millis()-pre_time >= 100)
 8009330:	f7f6 ffd7 	bl	80002e2 <millis>
 8009334:	4602      	mov	r2, r0
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b63      	cmp	r3, #99	@ 0x63
 800933c:	d800      	bhi.n	8009340 <cdcWrite+0x44>
	  ret = CDC_Transmit_FS(p_data,length);
 800933e:	e7e5      	b.n	800930c <cdcWrite+0x10>
    {
    	break;
 8009340:	bf00      	nop
    }
  }

  return 0;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <cdcGetBaud>:

uint32_t cdcGetBaud(void)
{
 800934c:	b480      	push	{r7}
 800934e:	af00      	add	r7, sp, #0
	return LineCoding.bitrate;
 8009350:	4b02      	ldr	r3, [pc, #8]	@ (800935c <cdcGetBaud+0x10>)
 8009352:	681b      	ldr	r3, [r3, #0]
}
 8009354:	4618      	mov	r0, r3
 8009356:	46bd      	mov	sp, r7
 8009358:	bc80      	pop	{r7}
 800935a:	4770      	bx	lr
 800935c:	20000124 	.word	0x20000124

08009360 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009364:	2200      	movs	r2, #0
 8009366:	4905      	ldr	r1, [pc, #20]	@ (800937c <CDC_Init_FS+0x1c>)
 8009368:	4805      	ldr	r0, [pc, #20]	@ (8009380 <CDC_Init_FS+0x20>)
 800936a:	f7fe fe0d 	bl	8007f88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800936e:	4905      	ldr	r1, [pc, #20]	@ (8009384 <CDC_Init_FS+0x24>)
 8009370:	4803      	ldr	r0, [pc, #12]	@ (8009380 <CDC_Init_FS+0x20>)
 8009372:	f7fe fe22 	bl	8007fba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009376:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009378:	4618      	mov	r0, r3
 800937a:	bd80      	pop	{r7, pc}
 800937c:	20000a48 	.word	0x20000a48
 8009380:	2000037c 	.word	0x2000037c
 8009384:	20000848 	.word	0x20000848

08009388 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009388:	b480      	push	{r7}
 800938a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800938c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800938e:	4618      	mov	r0, r3
 8009390:	46bd      	mov	sp, r7
 8009392:	bc80      	pop	{r7}
 8009394:	4770      	bx	lr
	...

08009398 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	4603      	mov	r3, r0
 80093a0:	6039      	str	r1, [r7, #0]
 80093a2:	71fb      	strb	r3, [r7, #7]
 80093a4:	4613      	mov	r3, r2
 80093a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	2b23      	cmp	r3, #35	@ 0x23
 80093ac:	f200 80a3 	bhi.w	80094f6 <CDC_Control_FS+0x15e>
 80093b0:	a201      	add	r2, pc, #4	@ (adr r2, 80093b8 <CDC_Control_FS+0x20>)
 80093b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b6:	bf00      	nop
 80093b8:	080094f7 	.word	0x080094f7
 80093bc:	080094f7 	.word	0x080094f7
 80093c0:	080094f7 	.word	0x080094f7
 80093c4:	080094f7 	.word	0x080094f7
 80093c8:	080094f7 	.word	0x080094f7
 80093cc:	080094f7 	.word	0x080094f7
 80093d0:	080094f7 	.word	0x080094f7
 80093d4:	080094f7 	.word	0x080094f7
 80093d8:	080094f7 	.word	0x080094f7
 80093dc:	080094f7 	.word	0x080094f7
 80093e0:	080094f7 	.word	0x080094f7
 80093e4:	080094f7 	.word	0x080094f7
 80093e8:	080094f7 	.word	0x080094f7
 80093ec:	080094f7 	.word	0x080094f7
 80093f0:	080094f7 	.word	0x080094f7
 80093f4:	080094f7 	.word	0x080094f7
 80093f8:	080094f7 	.word	0x080094f7
 80093fc:	080094f7 	.word	0x080094f7
 8009400:	080094f7 	.word	0x080094f7
 8009404:	080094f7 	.word	0x080094f7
 8009408:	080094f7 	.word	0x080094f7
 800940c:	080094f7 	.word	0x080094f7
 8009410:	080094f7 	.word	0x080094f7
 8009414:	080094f7 	.word	0x080094f7
 8009418:	080094f7 	.word	0x080094f7
 800941c:	080094f7 	.word	0x080094f7
 8009420:	080094f7 	.word	0x080094f7
 8009424:	080094f7 	.word	0x080094f7
 8009428:	080094f7 	.word	0x080094f7
 800942c:	080094f7 	.word	0x080094f7
 8009430:	080094f7 	.word	0x080094f7
 8009434:	080094f7 	.word	0x080094f7
 8009438:	08009449 	.word	0x08009449
 800943c:	080094a3 	.word	0x080094a3
 8009440:	080094f7 	.word	0x080094f7
 8009444:	080094f7 	.word	0x080094f7
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	461a      	mov	r2, r3
 800944e:	4b2d      	ldr	r3, [pc, #180]	@ (8009504 <CDC_Control_FS+0x16c>)
 8009450:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 8009452:	4b2c      	ldr	r3, [pc, #176]	@ (8009504 <CDC_Control_FS+0x16c>)
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	3301      	adds	r3, #1
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	021b      	lsls	r3, r3, #8
 800945e:	4313      	orrs	r3, r2
 8009460:	4a28      	ldr	r2, [pc, #160]	@ (8009504 <CDC_Control_FS+0x16c>)
 8009462:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 8009464:	4b27      	ldr	r3, [pc, #156]	@ (8009504 <CDC_Control_FS+0x16c>)
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	3302      	adds	r3, #2
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	041b      	lsls	r3, r3, #16
 8009470:	4313      	orrs	r3, r2
 8009472:	4a24      	ldr	r2, [pc, #144]	@ (8009504 <CDC_Control_FS+0x16c>)
 8009474:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 8009476:	4b23      	ldr	r3, [pc, #140]	@ (8009504 <CDC_Control_FS+0x16c>)
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	3303      	adds	r3, #3
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	061b      	lsls	r3, r3, #24
 8009482:	4313      	orrs	r3, r2
 8009484:	4a1f      	ldr	r2, [pc, #124]	@ (8009504 <CDC_Control_FS+0x16c>)
 8009486:	6013      	str	r3, [r2, #0]
    	LineCoding.format   = pbuf[4];
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	791a      	ldrb	r2, [r3, #4]
 800948c:	4b1d      	ldr	r3, [pc, #116]	@ (8009504 <CDC_Control_FS+0x16c>)
 800948e:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	795a      	ldrb	r2, [r3, #5]
 8009494:	4b1b      	ldr	r3, [pc, #108]	@ (8009504 <CDC_Control_FS+0x16c>)
 8009496:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	799a      	ldrb	r2, [r3, #6]
 800949c:	4b19      	ldr	r3, [pc, #100]	@ (8009504 <CDC_Control_FS+0x16c>)
 800949e:	719a      	strb	r2, [r3, #6]
    break;
 80094a0:	e02a      	b.n	80094f8 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80094a2:	4b18      	ldr	r3, [pc, #96]	@ (8009504 <CDC_Control_FS+0x16c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 80094ac:	4b15      	ldr	r3, [pc, #84]	@ (8009504 <CDC_Control_FS+0x16c>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	0a1a      	lsrs	r2, r3, #8
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	3301      	adds	r3, #1
 80094b6:	b2d2      	uxtb	r2, r2
 80094b8:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 80094ba:	4b12      	ldr	r3, [pc, #72]	@ (8009504 <CDC_Control_FS+0x16c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	0c1a      	lsrs	r2, r3, #16
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	3302      	adds	r3, #2
 80094c4:	b2d2      	uxtb	r2, r2
 80094c6:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 80094c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009504 <CDC_Control_FS+0x16c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	0e1a      	lsrs	r2, r3, #24
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	3303      	adds	r3, #3
 80094d2:	b2d2      	uxtb	r2, r2
 80094d4:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	3304      	adds	r3, #4
 80094da:	4a0a      	ldr	r2, [pc, #40]	@ (8009504 <CDC_Control_FS+0x16c>)
 80094dc:	7912      	ldrb	r2, [r2, #4]
 80094de:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	3305      	adds	r3, #5
 80094e4:	4a07      	ldr	r2, [pc, #28]	@ (8009504 <CDC_Control_FS+0x16c>)
 80094e6:	7952      	ldrb	r2, [r2, #5]
 80094e8:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	3306      	adds	r3, #6
 80094ee:	4a05      	ldr	r2, [pc, #20]	@ (8009504 <CDC_Control_FS+0x16c>)
 80094f0:	7992      	ldrb	r2, [r2, #6]
 80094f2:	701a      	strb	r2, [r3, #0]
    break;
 80094f4:	e000      	b.n	80094f8 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094f6:	bf00      	nop
  }

  return (USBD_OK);
 80094f8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	bc80      	pop	{r7}
 8009502:	4770      	bx	lr
 8009504:	20000124 	.word	0x20000124

08009508 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	480e      	ldr	r0, [pc, #56]	@ (8009550 <CDC_Receive_FS+0x48>)
 8009516:	f7fe fd50 	bl	8007fba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800951a:	480d      	ldr	r0, [pc, #52]	@ (8009550 <CDC_Receive_FS+0x48>)
 800951c:	f7fe fd8f 	bl	800803e <USBD_CDC_ReceivePacket>


  for(int i=0;i<*Len;i++)
 8009520:	2300      	movs	r3, #0
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	e009      	b.n	800953a <CDC_Receive_FS+0x32>
  {
	  cdcDataIn(Buf[i]);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	4413      	add	r3, r2
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	4618      	mov	r0, r3
 8009530:	f7ff feba 	bl	80092a8 <cdcDataIn>
  for(int i=0;i<*Len;i++)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	3301      	adds	r3, #1
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	429a      	cmp	r2, r3
 8009542:	d8f0      	bhi.n	8009526 <CDC_Receive_FS+0x1e>
  }


  return (USBD_OK);
 8009544:	2300      	movs	r3, #0




  /* USER CODE END 6 */
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	2000037c 	.word	0x2000037c

08009554 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009564:	4b0d      	ldr	r3, [pc, #52]	@ (800959c <CDC_Transmit_FS+0x48>)
 8009566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800956a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009576:	2301      	movs	r3, #1
 8009578:	e00b      	b.n	8009592 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800957a:	887b      	ldrh	r3, [r7, #2]
 800957c:	461a      	mov	r2, r3
 800957e:	6879      	ldr	r1, [r7, #4]
 8009580:	4806      	ldr	r0, [pc, #24]	@ (800959c <CDC_Transmit_FS+0x48>)
 8009582:	f7fe fd01 	bl	8007f88 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009586:	4805      	ldr	r0, [pc, #20]	@ (800959c <CDC_Transmit_FS+0x48>)
 8009588:	f7fe fd2a 	bl	8007fe0 <USBD_CDC_TransmitPacket>
 800958c:	4603      	mov	r3, r0
 800958e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009590:	7bfb      	ldrb	r3, [r7, #15]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	2000037c 	.word	0x2000037c

080095a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	4603      	mov	r3, r0
 80095a8:	6039      	str	r1, [r7, #0]
 80095aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2212      	movs	r2, #18
 80095b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80095b2:	4b03      	ldr	r3, [pc, #12]	@ (80095c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bc80      	pop	{r7}
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	2000015c 	.word	0x2000015c

080095c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	6039      	str	r1, [r7, #0]
 80095ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	2204      	movs	r2, #4
 80095d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095d6:	4b03      	ldr	r3, [pc, #12]	@ (80095e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	bc80      	pop	{r7}
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	20000170 	.word	0x20000170

080095e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	6039      	str	r1, [r7, #0]
 80095f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095f4:	79fb      	ldrb	r3, [r7, #7]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d105      	bne.n	8009606 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	4907      	ldr	r1, [pc, #28]	@ (800961c <USBD_FS_ProductStrDescriptor+0x34>)
 80095fe:	4808      	ldr	r0, [pc, #32]	@ (8009620 <USBD_FS_ProductStrDescriptor+0x38>)
 8009600:	f7ff fd01 	bl	8009006 <USBD_GetString>
 8009604:	e004      	b.n	8009610 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	4904      	ldr	r1, [pc, #16]	@ (800961c <USBD_FS_ProductStrDescriptor+0x34>)
 800960a:	4805      	ldr	r0, [pc, #20]	@ (8009620 <USBD_FS_ProductStrDescriptor+0x38>)
 800960c:	f7ff fcfb 	bl	8009006 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009610:	4b02      	ldr	r3, [pc, #8]	@ (800961c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009612:	4618      	mov	r0, r3
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20000c48 	.word	0x20000c48
 8009620:	08009d98 	.word	0x08009d98

08009624 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	4603      	mov	r3, r0
 800962c:	6039      	str	r1, [r7, #0]
 800962e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	4904      	ldr	r1, [pc, #16]	@ (8009644 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009634:	4804      	ldr	r0, [pc, #16]	@ (8009648 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009636:	f7ff fce6 	bl	8009006 <USBD_GetString>
  return USBD_StrDesc;
 800963a:	4b02      	ldr	r3, [pc, #8]	@ (8009644 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800963c:	4618      	mov	r0, r3
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	20000c48 	.word	0x20000c48
 8009648:	08009db0 	.word	0x08009db0

0800964c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	4603      	mov	r3, r0
 8009654:	6039      	str	r1, [r7, #0]
 8009656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	221a      	movs	r2, #26
 800965c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800965e:	f000 f843 	bl	80096e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009662:	4b02      	ldr	r3, [pc, #8]	@ (800966c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20000174 	.word	0x20000174

08009670 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	4603      	mov	r3, r0
 8009678:	6039      	str	r1, [r7, #0]
 800967a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800967c:	79fb      	ldrb	r3, [r7, #7]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d105      	bne.n	800968e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	4907      	ldr	r1, [pc, #28]	@ (80096a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009686:	4808      	ldr	r0, [pc, #32]	@ (80096a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009688:	f7ff fcbd 	bl	8009006 <USBD_GetString>
 800968c:	e004      	b.n	8009698 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	4904      	ldr	r1, [pc, #16]	@ (80096a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009692:	4805      	ldr	r0, [pc, #20]	@ (80096a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009694:	f7ff fcb7 	bl	8009006 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009698:	4b02      	ldr	r3, [pc, #8]	@ (80096a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20000c48 	.word	0x20000c48
 80096a8:	08009dc4 	.word	0x08009dc4

080096ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	6039      	str	r1, [r7, #0]
 80096b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096b8:	79fb      	ldrb	r3, [r7, #7]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d105      	bne.n	80096ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	4907      	ldr	r1, [pc, #28]	@ (80096e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096c2:	4808      	ldr	r0, [pc, #32]	@ (80096e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096c4:	f7ff fc9f 	bl	8009006 <USBD_GetString>
 80096c8:	e004      	b.n	80096d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	4904      	ldr	r1, [pc, #16]	@ (80096e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096ce:	4805      	ldr	r0, [pc, #20]	@ (80096e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096d0:	f7ff fc99 	bl	8009006 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096d4:	4b02      	ldr	r3, [pc, #8]	@ (80096e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	20000c48 	.word	0x20000c48
 80096e4:	08009dd0 	.word	0x08009dd0

080096e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096ee:	4b0f      	ldr	r3, [pc, #60]	@ (800972c <Get_SerialNum+0x44>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009730 <Get_SerialNum+0x48>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009734 <Get_SerialNum+0x4c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4413      	add	r3, r2
 8009706:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d009      	beq.n	8009722 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800970e:	2208      	movs	r2, #8
 8009710:	4909      	ldr	r1, [pc, #36]	@ (8009738 <Get_SerialNum+0x50>)
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 f814 	bl	8009740 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009718:	2204      	movs	r2, #4
 800971a:	4908      	ldr	r1, [pc, #32]	@ (800973c <Get_SerialNum+0x54>)
 800971c:	68b8      	ldr	r0, [r7, #8]
 800971e:	f000 f80f 	bl	8009740 <IntToUnicode>
  }
}
 8009722:	bf00      	nop
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	1ffff7e8 	.word	0x1ffff7e8
 8009730:	1ffff7ec 	.word	0x1ffff7ec
 8009734:	1ffff7f0 	.word	0x1ffff7f0
 8009738:	20000176 	.word	0x20000176
 800973c:	20000186 	.word	0x20000186

08009740 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009740:	b480      	push	{r7}
 8009742:	b087      	sub	sp, #28
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	4613      	mov	r3, r2
 800974c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009752:	2300      	movs	r3, #0
 8009754:	75fb      	strb	r3, [r7, #23]
 8009756:	e027      	b.n	80097a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	0f1b      	lsrs	r3, r3, #28
 800975c:	2b09      	cmp	r3, #9
 800975e:	d80b      	bhi.n	8009778 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	0f1b      	lsrs	r3, r3, #28
 8009764:	b2da      	uxtb	r2, r3
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	005b      	lsls	r3, r3, #1
 800976a:	4619      	mov	r1, r3
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	440b      	add	r3, r1
 8009770:	3230      	adds	r2, #48	@ 0x30
 8009772:	b2d2      	uxtb	r2, r2
 8009774:	701a      	strb	r2, [r3, #0]
 8009776:	e00a      	b.n	800978e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	0f1b      	lsrs	r3, r3, #28
 800977c:	b2da      	uxtb	r2, r3
 800977e:	7dfb      	ldrb	r3, [r7, #23]
 8009780:	005b      	lsls	r3, r3, #1
 8009782:	4619      	mov	r1, r3
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	440b      	add	r3, r1
 8009788:	3237      	adds	r2, #55	@ 0x37
 800978a:	b2d2      	uxtb	r2, r2
 800978c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	011b      	lsls	r3, r3, #4
 8009792:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009794:	7dfb      	ldrb	r3, [r7, #23]
 8009796:	005b      	lsls	r3, r3, #1
 8009798:	3301      	adds	r3, #1
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	4413      	add	r3, r2
 800979e:	2200      	movs	r2, #0
 80097a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
 80097a4:	3301      	adds	r3, #1
 80097a6:	75fb      	strb	r3, [r7, #23]
 80097a8:	7dfa      	ldrb	r2, [r7, #23]
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d3d3      	bcc.n	8009758 <IntToUnicode+0x18>
  }
}
 80097b0:	bf00      	nop
 80097b2:	bf00      	nop
 80097b4:	371c      	adds	r7, #28
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bc80      	pop	{r7}
 80097ba:	4770      	bx	lr

080097bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a0d      	ldr	r2, [pc, #52]	@ (8009800 <HAL_PCD_MspInit+0x44>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d113      	bne.n	80097f6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80097ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <HAL_PCD_MspInit+0x48>)
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	4a0c      	ldr	r2, [pc, #48]	@ (8009804 <HAL_PCD_MspInit+0x48>)
 80097d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80097d8:	61d3      	str	r3, [r2, #28]
 80097da:	4b0a      	ldr	r3, [pc, #40]	@ (8009804 <HAL_PCD_MspInit+0x48>)
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80097e6:	2200      	movs	r2, #0
 80097e8:	2100      	movs	r1, #0
 80097ea:	2014      	movs	r0, #20
 80097ec:	f7f7 fbe7 	bl	8000fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80097f0:	2014      	movs	r0, #20
 80097f2:	f7f7 fc00 	bl	8000ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80097f6:	bf00      	nop
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	40005c00 	.word	0x40005c00
 8009804:	40021000 	.word	0x40021000

08009808 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800981c:	4619      	mov	r1, r3
 800981e:	4610      	mov	r0, r2
 8009820:	f7fe fcc3 	bl	80081aa <USBD_LL_SetupStage>
}
 8009824:	bf00      	nop
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800983e:	78fa      	ldrb	r2, [r7, #3]
 8009840:	6879      	ldr	r1, [r7, #4]
 8009842:	4613      	mov	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	00db      	lsls	r3, r3, #3
 800984a:	440b      	add	r3, r1
 800984c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	78fb      	ldrb	r3, [r7, #3]
 8009854:	4619      	mov	r1, r3
 8009856:	f7fe fcf5 	bl	8008244 <USBD_LL_DataOutStage>
}
 800985a:	bf00      	nop
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b082      	sub	sp, #8
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	460b      	mov	r3, r1
 800986c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009874:	78fa      	ldrb	r2, [r7, #3]
 8009876:	6879      	ldr	r1, [r7, #4]
 8009878:	4613      	mov	r3, r2
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	4413      	add	r3, r2
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	440b      	add	r3, r1
 8009882:	3324      	adds	r3, #36	@ 0x24
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	78fb      	ldrb	r3, [r7, #3]
 8009888:	4619      	mov	r1, r3
 800988a:	f7fe fd4c 	bl	8008326 <USBD_LL_DataInStage>
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b082      	sub	sp, #8
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fe5c 	bl	8008562 <USBD_LL_SOF>
}
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80098ba:	2301      	movs	r3, #1
 80098bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	799b      	ldrb	r3, [r3, #6]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d001      	beq.n	80098ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80098c6:	f7f6 fd72 	bl	80003ae <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098d0:	7bfa      	ldrb	r2, [r7, #15]
 80098d2:	4611      	mov	r1, r2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fe fe0c 	bl	80084f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe fdc5 	bl	8008470 <USBD_LL_Reset>
}
 80098e6:	bf00      	nop
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
	...

080098f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fe fe06 	bl	8008510 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	7a9b      	ldrb	r3, [r3, #10]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d005      	beq.n	8009918 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800990c:	4b04      	ldr	r3, [pc, #16]	@ (8009920 <HAL_PCD_SuspendCallback+0x30>)
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	4a03      	ldr	r2, [pc, #12]	@ (8009920 <HAL_PCD_SuspendCallback+0x30>)
 8009912:	f043 0306 	orr.w	r3, r3, #6
 8009916:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	e000ed00 	.word	0xe000ed00

08009924 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009932:	4618      	mov	r0, r3
 8009934:	f7fe fe00 	bl	8008538 <USBD_LL_Resume>
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009948:	4a28      	ldr	r2, [pc, #160]	@ (80099ec <USBD_LL_Init+0xac>)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a26      	ldr	r2, [pc, #152]	@ (80099ec <USBD_LL_Init+0xac>)
 8009954:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009958:	4b24      	ldr	r3, [pc, #144]	@ (80099ec <USBD_LL_Init+0xac>)
 800995a:	4a25      	ldr	r2, [pc, #148]	@ (80099f0 <USBD_LL_Init+0xb0>)
 800995c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800995e:	4b23      	ldr	r3, [pc, #140]	@ (80099ec <USBD_LL_Init+0xac>)
 8009960:	2208      	movs	r2, #8
 8009962:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009964:	4b21      	ldr	r3, [pc, #132]	@ (80099ec <USBD_LL_Init+0xac>)
 8009966:	2202      	movs	r2, #2
 8009968:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800996a:	4b20      	ldr	r3, [pc, #128]	@ (80099ec <USBD_LL_Init+0xac>)
 800996c:	2200      	movs	r2, #0
 800996e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009970:	4b1e      	ldr	r3, [pc, #120]	@ (80099ec <USBD_LL_Init+0xac>)
 8009972:	2200      	movs	r2, #0
 8009974:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009976:	4b1d      	ldr	r3, [pc, #116]	@ (80099ec <USBD_LL_Init+0xac>)
 8009978:	2200      	movs	r2, #0
 800997a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800997c:	481b      	ldr	r0, [pc, #108]	@ (80099ec <USBD_LL_Init+0xac>)
 800997e:	f7f8 f8d2 	bl	8001b26 <HAL_PCD_Init>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009988:	f7f6 fd11 	bl	80003ae <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009992:	2318      	movs	r3, #24
 8009994:	2200      	movs	r2, #0
 8009996:	2100      	movs	r1, #0
 8009998:	f7f9 fde3 	bl	8003562 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80099a2:	2358      	movs	r3, #88	@ 0x58
 80099a4:	2200      	movs	r2, #0
 80099a6:	2180      	movs	r1, #128	@ 0x80
 80099a8:	f7f9 fddb 	bl	8003562 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80099b2:	23c0      	movs	r3, #192	@ 0xc0
 80099b4:	2200      	movs	r2, #0
 80099b6:	2181      	movs	r1, #129	@ 0x81
 80099b8:	f7f9 fdd3 	bl	8003562 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80099c2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80099c6:	2200      	movs	r2, #0
 80099c8:	2101      	movs	r1, #1
 80099ca:	f7f9 fdca 	bl	8003562 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80099d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80099d8:	2200      	movs	r2, #0
 80099da:	2182      	movs	r1, #130	@ 0x82
 80099dc:	f7f9 fdc1 	bl	8003562 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	20000e48 	.word	0x20000e48
 80099f0:	40005c00 	.word	0x40005c00

080099f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7f8 f981 	bl	8001d12 <HAL_PCD_Start>
 8009a10:	4603      	mov	r3, r0
 8009a12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 f94e 	bl	8009cb8 <USBD_Get_USB_Status>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	4608      	mov	r0, r1
 8009a34:	4611      	mov	r1, r2
 8009a36:	461a      	mov	r2, r3
 8009a38:	4603      	mov	r3, r0
 8009a3a:	70fb      	strb	r3, [r7, #3]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70bb      	strb	r3, [r7, #2]
 8009a40:	4613      	mov	r3, r2
 8009a42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a52:	78bb      	ldrb	r3, [r7, #2]
 8009a54:	883a      	ldrh	r2, [r7, #0]
 8009a56:	78f9      	ldrb	r1, [r7, #3]
 8009a58:	f7f8 fad5 	bl	8002006 <HAL_PCD_EP_Open>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 f928 	bl	8009cb8 <USBD_Get_USB_Status>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b084      	sub	sp, #16
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a90:	78fa      	ldrb	r2, [r7, #3]
 8009a92:	4611      	mov	r1, r2
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7f8 fb13 	bl	80020c0 <HAL_PCD_EP_Close>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 f909 	bl	8009cb8 <USBD_Get_USB_Status>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ace:	78fa      	ldrb	r2, [r7, #3]
 8009ad0:	4611      	mov	r1, r2
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7f8 fbbb 	bl	800224e <HAL_PCD_EP_SetStall>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 f8ea 	bl	8009cb8 <USBD_Get_USB_Status>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b084      	sub	sp, #16
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	460b      	mov	r3, r1
 8009afc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b0c:	78fa      	ldrb	r2, [r7, #3]
 8009b0e:	4611      	mov	r1, r2
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7f8 fbfc 	bl	800230e <HAL_PCD_EP_ClrStall>
 8009b16:	4603      	mov	r3, r0
 8009b18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b1a:	7bfb      	ldrb	r3, [r7, #15]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 f8cb 	bl	8009cb8 <USBD_Get_USB_Status>
 8009b22:	4603      	mov	r3, r0
 8009b24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b26:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	da0b      	bge.n	8009b64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b4c:	78fb      	ldrb	r3, [r7, #3]
 8009b4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b52:	68f9      	ldr	r1, [r7, #12]
 8009b54:	4613      	mov	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4413      	add	r3, r2
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	440b      	add	r3, r1
 8009b5e:	3312      	adds	r3, #18
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	e00b      	b.n	8009b7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b64:	78fb      	ldrb	r3, [r7, #3]
 8009b66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b6a:	68f9      	ldr	r1, [r7, #12]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	00db      	lsls	r3, r3, #3
 8009b74:	440b      	add	r3, r1
 8009b76:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009b7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3714      	adds	r7, #20
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bc80      	pop	{r7}
 8009b84:	4770      	bx	lr

08009b86 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	460b      	mov	r3, r1
 8009b90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ba0:	78fa      	ldrb	r2, [r7, #3]
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7f8 fa0a 	bl	8001fbe <HAL_PCD_SetAddress>
 8009baa:	4603      	mov	r3, r0
 8009bac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 f881 	bl	8009cb8 <USBD_Get_USB_Status>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	607a      	str	r2, [r7, #4]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	72fb      	strb	r3, [r7, #11]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009be6:	893b      	ldrh	r3, [r7, #8]
 8009be8:	7af9      	ldrb	r1, [r7, #11]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	f7f8 faf8 	bl	80021e0 <HAL_PCD_EP_Transmit>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf4:	7dfb      	ldrb	r3, [r7, #23]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 f85e 	bl	8009cb8 <USBD_Get_USB_Status>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c00:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b086      	sub	sp, #24
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	60f8      	str	r0, [r7, #12]
 8009c12:	607a      	str	r2, [r7, #4]
 8009c14:	461a      	mov	r2, r3
 8009c16:	460b      	mov	r3, r1
 8009c18:	72fb      	strb	r3, [r7, #11]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c2c:	893b      	ldrh	r3, [r7, #8]
 8009c2e:	7af9      	ldrb	r1, [r7, #11]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	f7f8 fa8d 	bl	8002150 <HAL_PCD_EP_Receive>
 8009c36:	4603      	mov	r3, r0
 8009c38:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f000 f83b 	bl	8009cb8 <USBD_Get_USB_Status>
 8009c42:	4603      	mov	r3, r0
 8009c44:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c46:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3718      	adds	r7, #24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c62:	78fa      	ldrb	r2, [r7, #3]
 8009c64:	4611      	mov	r1, r2
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7f8 faa3 	bl	80021b2 <HAL_PCD_EP_GetRxCount>
 8009c6c:	4603      	mov	r3, r0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
	...

08009c78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c80:	4b02      	ldr	r3, [pc, #8]	@ (8009c8c <USBD_static_malloc+0x14>)
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	370c      	adds	r7, #12
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bc80      	pop	{r7}
 8009c8a:	4770      	bx	lr
 8009c8c:	20001120 	.word	0x20001120

08009c90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]

}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bc80      	pop	{r7}
 8009ca0:	4770      	bx	lr

08009ca2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b083      	sub	sp, #12
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	460b      	mov	r3, r1
 8009cac:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009cae:	bf00      	nop
 8009cb0:	370c      	adds	r7, #12
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bc80      	pop	{r7}
 8009cb6:	4770      	bx	lr

08009cb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	2b03      	cmp	r3, #3
 8009cca:	d817      	bhi.n	8009cfc <USBD_Get_USB_Status+0x44>
 8009ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd4 <USBD_Get_USB_Status+0x1c>)
 8009cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd2:	bf00      	nop
 8009cd4:	08009ce5 	.word	0x08009ce5
 8009cd8:	08009ceb 	.word	0x08009ceb
 8009cdc:	08009cf1 	.word	0x08009cf1
 8009ce0:	08009cf7 	.word	0x08009cf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce8:	e00b      	b.n	8009d02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cea:	2302      	movs	r3, #2
 8009cec:	73fb      	strb	r3, [r7, #15]
    break;
 8009cee:	e008      	b.n	8009d02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8009cf4:	e005      	b.n	8009d02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	73fb      	strb	r3, [r7, #15]
    break;
 8009cfa:	e002      	b.n	8009d02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8009d00:	bf00      	nop
  }
  return usb_status;
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bc80      	pop	{r7}
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop

08009d10 <main>:




int main(void)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	af00      	add	r7, sp, #0
	hwInit();
 8009d14:	f7f6 ffc2 	bl	8000c9c <hwInit>
	apInit();
 8009d18:	f7f6 fa18 	bl	800014c <apInit>

	apMain();
 8009d1c:	f7f6 fa24 	bl	8000168 <apMain>

	return 0;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <memset>:
 8009d26:	4603      	mov	r3, r0
 8009d28:	4402      	add	r2, r0
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d100      	bne.n	8009d30 <memset+0xa>
 8009d2e:	4770      	bx	lr
 8009d30:	f803 1b01 	strb.w	r1, [r3], #1
 8009d34:	e7f9      	b.n	8009d2a <memset+0x4>
	...

08009d38 <__libc_init_array>:
 8009d38:	b570      	push	{r4, r5, r6, lr}
 8009d3a:	2600      	movs	r6, #0
 8009d3c:	4d0c      	ldr	r5, [pc, #48]	@ (8009d70 <__libc_init_array+0x38>)
 8009d3e:	4c0d      	ldr	r4, [pc, #52]	@ (8009d74 <__libc_init_array+0x3c>)
 8009d40:	1b64      	subs	r4, r4, r5
 8009d42:	10a4      	asrs	r4, r4, #2
 8009d44:	42a6      	cmp	r6, r4
 8009d46:	d109      	bne.n	8009d5c <__libc_init_array+0x24>
 8009d48:	f000 f81a 	bl	8009d80 <_init>
 8009d4c:	2600      	movs	r6, #0
 8009d4e:	4d0a      	ldr	r5, [pc, #40]	@ (8009d78 <__libc_init_array+0x40>)
 8009d50:	4c0a      	ldr	r4, [pc, #40]	@ (8009d7c <__libc_init_array+0x44>)
 8009d52:	1b64      	subs	r4, r4, r5
 8009d54:	10a4      	asrs	r4, r4, #2
 8009d56:	42a6      	cmp	r6, r4
 8009d58:	d105      	bne.n	8009d66 <__libc_init_array+0x2e>
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d60:	4798      	blx	r3
 8009d62:	3601      	adds	r6, #1
 8009d64:	e7ee      	b.n	8009d44 <__libc_init_array+0xc>
 8009d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d6a:	4798      	blx	r3
 8009d6c:	3601      	adds	r6, #1
 8009d6e:	e7f2      	b.n	8009d56 <__libc_init_array+0x1e>
 8009d70:	08009e20 	.word	0x08009e20
 8009d74:	08009e20 	.word	0x08009e20
 8009d78:	08009e20 	.word	0x08009e20
 8009d7c:	08009e24 	.word	0x08009e24

08009d80 <_init>:
 8009d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d82:	bf00      	nop
 8009d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d86:	bc08      	pop	{r3}
 8009d88:	469e      	mov	lr, r3
 8009d8a:	4770      	bx	lr

08009d8c <_fini>:
 8009d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8e:	bf00      	nop
 8009d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d92:	bc08      	pop	{r3}
 8009d94:	469e      	mov	lr, r3
 8009d96:	4770      	bx	lr
