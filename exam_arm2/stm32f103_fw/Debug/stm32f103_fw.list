
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a08  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08008b14  08008b14  00009b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c0c  08008c0c  0000a1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008c0c  08008c0c  0000a1e0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008c0c  08008c0c  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c0c  08008c0c  00009c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c10  08008c10  00009c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08008c14  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001150  200001e0  08008df4  0000a1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001330  08008df4  0000a330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb06  00000000  00000000  0000a209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e3  00000000  00000000  00018d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a61  00000000  00000000  0001d558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb4d  00000000  00000000  0001dfb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190fe  00000000  00000000  00039b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087865  00000000  00000000  00052c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da469  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003abc  00000000  00000000  000da4ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000ddf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008afc 	.word	0x08008afc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08008afc 	.word	0x08008afc

0800014c <apInit>:
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);



void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 57600);
 8000150:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fb07 	bl	8000768 <uartOpen>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
	...

08000160 <apMain>:

void apMain(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	uint32_t pre_baud;
	uint32_t led_blink_time =500;
 8000166:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800016a:	607b      	str	r3, [r7, #4]

	if(resetGetCount() >=2)
 800016c:	f000 fa64 	bl	8000638 <resetGetCount>
 8000170:	4603      	mov	r3, r0
 8000172:	2b01      	cmp	r3, #1
 8000174:	d901      	bls.n	800017a <apMain+0x1a>
	{
		led_blink_time = 100;
 8000176:	2364      	movs	r3, #100	@ 0x64
 8000178:	607b      	str	r3, [r7, #4]
	}

	pre_baud = uartGetBaud(_DEF_LED1);
 800017a:	2000      	movs	r0, #0
 800017c:	f000 fb85 	bl	800088a <uartGetBaud>
 8000180:	60b8      	str	r0, [r7, #8]
	pre_time = millis();
 8000182:	f000 f874 	bl	800026e <millis>
 8000186:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if(millis() - pre_time >= led_blink_time)
 8000188:	f000 f871 	bl	800026e <millis>
 800018c:	4602      	mov	r2, r0
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	1ad3      	subs	r3, r2, r3
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	429a      	cmp	r2, r3
 8000196:	d80d      	bhi.n	80001b4 <apMain+0x54>
		{
			pre_time = millis();
 8000198:	f000 f869 	bl	800026e <millis>
 800019c:	60f8      	str	r0, [r7, #12]
			ledToggle(_DEF_LED1);
 800019e:	2000      	movs	r0, #0
 80001a0:	f000 fa02 	bl	80005a8 <ledToggle>

			uartPrintf(_DEF_UART1,"ResetCount : %d\n",resetGetCount());
 80001a4:	f000 fa48 	bl	8000638 <resetGetCount>
 80001a8:	4603      	mov	r3, r0
 80001aa:	461a      	mov	r2, r3
 80001ac:	4914      	ldr	r1, [pc, #80]	@ (8000200 <apMain+0xa0>)
 80001ae:	2000      	movs	r0, #0
 80001b0:	f000 fb33 	bl	800081a <uartPrintf>
		}
	   if(uartAvailable(_DEF_UART1) > 0)
 80001b4:	2000      	movs	r0, #0
 80001b6:	f000 faf1 	bl	800079c <uartAvailable>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d00a      	beq.n	80001d6 <apMain+0x76>
	   {
		 uint8_t rx_data;

		 rx_data = uartRead(_DEF_UART1);
 80001c0:	2000      	movs	r0, #0
 80001c2:	f000 fafe 	bl	80007c2 <uartRead>
 80001c6:	4603      	mov	r3, r0
 80001c8:	70fb      	strb	r3, [r7, #3]

		 uartPrintf(_DEF_UART1,"RxData : %c 0x%X\n",rx_data, rx_data);
 80001ca:	78fa      	ldrb	r2, [r7, #3]
 80001cc:	78fb      	ldrb	r3, [r7, #3]
 80001ce:	490d      	ldr	r1, [pc, #52]	@ (8000204 <apMain+0xa4>)
 80001d0:	2000      	movs	r0, #0
 80001d2:	f000 fb22 	bl	800081a <uartPrintf>
	   }
	   if(uartGetBaud(_DEF_LED1) != pre_baud)
 80001d6:	2000      	movs	r0, #0
 80001d8:	f000 fb57 	bl	800088a <uartGetBaud>
 80001dc:	4602      	mov	r2, r0
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d0d1      	beq.n	8000188 <apMain+0x28>
	   {
		   pre_baud = uartGetBaud(_DEF_LED1);
 80001e4:	2000      	movs	r0, #0
 80001e6:	f000 fb50 	bl	800088a <uartGetBaud>
 80001ea:	60b8      	str	r0, [r7, #8]
		   uartPrintf(_DEF_UART1,"ChangedBaud : %d\n",uartGetBaud(_DEF_LED1));
 80001ec:	2000      	movs	r0, #0
 80001ee:	f000 fb4c 	bl	800088a <uartGetBaud>
 80001f2:	4603      	mov	r3, r0
 80001f4:	461a      	mov	r2, r3
 80001f6:	4904      	ldr	r1, [pc, #16]	@ (8000208 <apMain+0xa8>)
 80001f8:	2000      	movs	r0, #0
 80001fa:	f000 fb0e 	bl	800081a <uartPrintf>
		if(millis() - pre_time >= led_blink_time)
 80001fe:	e7c3      	b.n	8000188 <apMain+0x28>
 8000200:	08008b14 	.word	0x08008b14
 8000204:	08008b28 	.word	0x08008b28
 8000208:	08008b3c 	.word	0x08008b3c

0800020c <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	 HAL_Init();
 8000212:	f000 fb95 	bl	8000940 <HAL_Init>
	 SystemClock_Config();
 8000216:	f000 f831 	bl	800027c <SystemClock_Config>

	 __HAL_RCC_GPIOD_CLK_ENABLE();
 800021a:	4b0e      	ldr	r3, [pc, #56]	@ (8000254 <bspInit+0x48>)
 800021c:	699b      	ldr	r3, [r3, #24]
 800021e:	4a0d      	ldr	r2, [pc, #52]	@ (8000254 <bspInit+0x48>)
 8000220:	f043 0320 	orr.w	r3, r3, #32
 8000224:	6193      	str	r3, [r2, #24]
 8000226:	4b0b      	ldr	r3, [pc, #44]	@ (8000254 <bspInit+0x48>)
 8000228:	699b      	ldr	r3, [r3, #24]
 800022a:	f003 0320 	and.w	r3, r3, #32
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000232:	4b08      	ldr	r3, [pc, #32]	@ (8000254 <bspInit+0x48>)
 8000234:	699b      	ldr	r3, [r3, #24]
 8000236:	4a07      	ldr	r2, [pc, #28]	@ (8000254 <bspInit+0x48>)
 8000238:	f043 0304 	orr.w	r3, r3, #4
 800023c:	6193      	str	r3, [r2, #24]
 800023e:	4b05      	ldr	r3, [pc, #20]	@ (8000254 <bspInit+0x48>)
 8000240:	699b      	ldr	r3, [r3, #24]
 8000242:	f003 0304 	and.w	r3, r3, #4
 8000246:	603b      	str	r3, [r7, #0]
 8000248:	683b      	ldr	r3, [r7, #0]



}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40021000 	.word	0x40021000

08000258 <delay>:

void delay(uint32_t ms)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000260:	6878      	ldr	r0, [r7, #4]
 8000262:	f000 fbcf 	bl	8000a04 <HAL_Delay>
}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}

0800026e <millis>:

uint32_t millis(void)
{
 800026e:	b580      	push	{r7, lr}
 8000270:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000272:	f000 fbbd 	bl	80009f0 <HAL_GetTick>
 8000276:	4603      	mov	r3, r0
}
 8000278:	4618      	mov	r0, r3
 800027a:	bd80      	pop	{r7, pc}

0800027c <SystemClock_Config>:



void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b094      	sub	sp, #80	@ 0x50
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000286:	2228      	movs	r2, #40	@ 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f007 ffa8 	bl	80081e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	f107 0314 	add.w	r3, r7, #20
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002ac:	2305      	movs	r3, #5
 80002ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002ba:	2301      	movs	r3, #1
 80002bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002be:	2301      	movs	r3, #1
 80002c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c2:	2302      	movs	r3, #2
 80002c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002cc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fbe8 	bl	8002aac <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002e2:	f000 f82a 	bl	800033a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	230f      	movs	r3, #15
 80002e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ea:	2302      	movs	r3, #2
 80002ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	2102      	movs	r1, #2
 8000302:	4618      	mov	r0, r3
 8000304:	f002 fe54 	bl	8002fb0 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800030e:	f000 f814 	bl	800033a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000312:	2311      	movs	r3, #17
 8000314:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000316:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800031a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800031c:	2300      	movs	r3, #0
 800031e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4618      	mov	r0, r3
 8000324:	f002 ffbe 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800032e:	f000 f804 	bl	800033a <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3750      	adds	r7, #80	@ 0x50
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800033e:	b672      	cpsid	i
}
 8000340:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000342:	bf00      	nop
 8000344:	e7fd      	b.n	8000342 <Error_Handler+0x8>
	...

08000348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800034e:	4b15      	ldr	r3, [pc, #84]	@ (80003a4 <HAL_MspInit+0x5c>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a14      	ldr	r2, [pc, #80]	@ (80003a4 <HAL_MspInit+0x5c>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <HAL_MspInit+0x5c>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000366:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <HAL_MspInit+0x5c>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	4a0e      	ldr	r2, [pc, #56]	@ (80003a4 <HAL_MspInit+0x5c>)
 800036c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000370:	61d3      	str	r3, [r2, #28]
 8000372:	4b0c      	ldr	r3, [pc, #48]	@ (80003a4 <HAL_MspInit+0x5c>)
 8000374:	69db      	ldr	r3, [r3, #28]
 8000376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800037e:	4b0a      	ldr	r3, [pc, #40]	@ (80003a8 <HAL_MspInit+0x60>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	4a04      	ldr	r2, [pc, #16]	@ (80003a8 <HAL_MspInit+0x60>)
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010000 	.word	0x40010000

080003ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003b0:	bf00      	nop
 80003b2:	e7fd      	b.n	80003b0 <NMI_Handler+0x4>

080003b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b8:	bf00      	nop
 80003ba:	e7fd      	b.n	80003b8 <HardFault_Handler+0x4>

080003bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <MemManage_Handler+0x4>

080003c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c8:	bf00      	nop
 80003ca:	e7fd      	b.n	80003c8 <BusFault_Handler+0x4>

080003cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <UsageFault_Handler+0x4>

080003d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr

080003ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003fc:	f000 fae6 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}

08000404 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800040a:	f000 fefe 	bl	800120a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000cf0 	.word	0x20000cf0

08000418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000420:	4a14      	ldr	r2, [pc, #80]	@ (8000474 <_sbrk+0x5c>)
 8000422:	4b15      	ldr	r3, [pc, #84]	@ (8000478 <_sbrk+0x60>)
 8000424:	1ad3      	subs	r3, r2, r3
 8000426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800042c:	4b13      	ldr	r3, [pc, #76]	@ (800047c <_sbrk+0x64>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d102      	bne.n	800043a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000434:	4b11      	ldr	r3, [pc, #68]	@ (800047c <_sbrk+0x64>)
 8000436:	4a12      	ldr	r2, [pc, #72]	@ (8000480 <_sbrk+0x68>)
 8000438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800043a:	4b10      	ldr	r3, [pc, #64]	@ (800047c <_sbrk+0x64>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	693a      	ldr	r2, [r7, #16]
 8000444:	429a      	cmp	r2, r3
 8000446:	d207      	bcs.n	8000458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000448:	f007 fed2 	bl	80081f0 <__errno>
 800044c:	4603      	mov	r3, r0
 800044e:	220c      	movs	r2, #12
 8000450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000452:	f04f 33ff 	mov.w	r3, #4294967295
 8000456:	e009      	b.n	800046c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000458:	4b08      	ldr	r3, [pc, #32]	@ (800047c <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800045e:	4b07      	ldr	r3, [pc, #28]	@ (800047c <_sbrk+0x64>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4413      	add	r3, r2
 8000466:	4a05      	ldr	r2, [pc, #20]	@ (800047c <_sbrk+0x64>)
 8000468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800046a:	68fb      	ldr	r3, [r7, #12]
}
 800046c:	4618      	mov	r0, r3
 800046e:	3718      	adds	r7, #24
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20005000 	.word	0x20005000
 8000478:	00000400 	.word	0x00000400
 800047c:	200001fc 	.word	0x200001fc
 8000480:	20001330 	.word	0x20001330

08000484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000490:	f7ff fff8 	bl	8000484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000494:	480b      	ldr	r0, [pc, #44]	@ (80004c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000496:	490c      	ldr	r1, [pc, #48]	@ (80004c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000498:	4a0c      	ldr	r2, [pc, #48]	@ (80004cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800049c:	e002      	b.n	80004a4 <LoopCopyDataInit>

0800049e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a2:	3304      	adds	r3, #4

080004a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a8:	d3f9      	bcc.n	800049e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004aa:	4a09      	ldr	r2, [pc, #36]	@ (80004d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004ac:	4c09      	ldr	r4, [pc, #36]	@ (80004d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b0:	e001      	b.n	80004b6 <LoopFillZerobss>

080004b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b4:	3204      	adds	r2, #4

080004b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b8:	d3fb      	bcc.n	80004b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ba:	f007 fe9f 	bl	80081fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004be:	f007 fe47 	bl	8008150 <main>
  bx lr
 80004c2:	4770      	bx	lr
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80004cc:	08008c14 	.word	0x08008c14
  ldr r2, =_sbss
 80004d0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80004d4:	20001330 	.word	0x20001330

080004d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_2_IRQHandler>
	...

080004dc <ledInit>:
};



bool ledInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
	bool ret = true;
 80004e2:	2301      	movs	r3, #1
 80004e4:	76fb      	strb	r3, [r7, #27]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]

	 /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <ledInit+0x84>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a19      	ldr	r2, [pc, #100]	@ (8000560 <ledInit+0x84>)
 80004fa:	f043 0308 	orr.w	r3, r3, #8
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <ledInit+0x84>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0308 	and.w	r3, r3, #8
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	687b      	ldr	r3, [r7, #4]

	 /*Configure GPIO pin : PB12 */

	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050c:	2301      	movs	r3, #1
 800050e:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	613b      	str	r3, [r7, #16]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2302      	movs	r3, #2
 8000516:	617b      	str	r3, [r7, #20]

	 for(int i=0;i<LED_MAX_CH;i++)
 8000518:	2300      	movs	r3, #0
 800051a:	61fb      	str	r3, [r7, #28]
 800051c:	e017      	b.n	800054e <ledInit+0x72>
	 {
		 GPIO_InitStruct.Pin = led_tbl[i].pin;
 800051e:	4a11      	ldr	r2, [pc, #68]	@ (8000564 <ledInit+0x88>)
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	00db      	lsls	r3, r3, #3
 8000524:	4413      	add	r3, r2
 8000526:	889b      	ldrh	r3, [r3, #4]
 8000528:	60bb      	str	r3, [r7, #8]
		 HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800052a:	4a0e      	ldr	r2, [pc, #56]	@ (8000564 <ledInit+0x88>)
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000532:	f107 0208 	add.w	r2, r7, #8
 8000536:	4611      	mov	r1, r2
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fb95 	bl	8000c68 <HAL_GPIO_Init>
		 ledOff(i);
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f810 	bl	8000568 <ledOff>
	 for(int i=0;i<LED_MAX_CH;i++)
 8000548:	69fb      	ldr	r3, [r7, #28]
 800054a:	3301      	adds	r3, #1
 800054c:	61fb      	str	r3, [r7, #28]
 800054e:	69fb      	ldr	r3, [r7, #28]
 8000550:	2b00      	cmp	r3, #0
 8000552:	dde4      	ble.n	800051e <ledInit+0x42>
	 }

	return ret;
 8000554:	7efb      	ldrb	r3, [r7, #27]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3720      	adds	r7, #32
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	20000004 	.word	0x20000004

08000568 <ledOff>:
{
	if(ch >=LED_MAX_CH) return;
	 HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state); // Reset이 0
}
void ledOff(uint8_t ch)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	if(ch >=LED_MAX_CH) return;
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d111      	bne.n	800059c <ledOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4a0a      	ldr	r2, [pc, #40]	@ (80005a4 <ledOff+0x3c>)
 800057c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4a08      	ldr	r2, [pc, #32]	@ (80005a4 <ledOff+0x3c>)
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	4413      	add	r3, r2
 8000588:	8899      	ldrh	r1, [r3, #4]
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4a05      	ldr	r2, [pc, #20]	@ (80005a4 <ledOff+0x3c>)
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	4413      	add	r3, r2
 8000592:	79db      	ldrb	r3, [r3, #7]
 8000594:	461a      	mov	r2, r3
 8000596:	f000 fceb 	bl	8000f70 <HAL_GPIO_WritePin>
 800059a:	e000      	b.n	800059e <ledOff+0x36>
	if(ch >=LED_MAX_CH) return;
 800059c:	bf00      	nop

}
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000004 	.word	0x20000004

080005a8 <ledToggle>:
void ledToggle(uint8_t ch)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	if(ch >=LED_MAX_CH) return;
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d10d      	bne.n	80005d4 <ledToggle+0x2c>
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	4a08      	ldr	r2, [pc, #32]	@ (80005dc <ledToggle+0x34>)
 80005bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	4906      	ldr	r1, [pc, #24]	@ (80005dc <ledToggle+0x34>)
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	440b      	add	r3, r1
 80005c8:	889b      	ldrh	r3, [r3, #4]
 80005ca:	4619      	mov	r1, r3
 80005cc:	4610      	mov	r0, r2
 80005ce:	f000 fce7 	bl	8000fa0 <HAL_GPIO_TogglePin>
 80005d2:	e000      	b.n	80005d6 <ledToggle+0x2e>
	if(ch >=LED_MAX_CH) return;
 80005d4:	bf00      	nop
}
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000004 	.word	0x20000004

080005e0 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
	bool ret = true;
 80005e6:	2301      	movs	r3, #1
 80005e8:	71fb      	strb	r3, [r7, #7]

	//만약 Reset 핀이 눌렸다면
	//delay 500ms 안에 다시 빠르게 누르면 레지스터 값이 증가
	if(RCC->CSR & (1<<26))
 80005ea:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <resetInit+0x50>)
 80005ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d012      	beq.n	800061c <resetInit+0x3c>
	{
		rtcBackupRegWrite(1,rtcBackupRegRead(1)+1);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 f858 	bl	80006ac <rtcBackupRegRead>
 80005fc:	4603      	mov	r3, r0
 80005fe:	3301      	adds	r3, #1
 8000600:	4619      	mov	r1, r3
 8000602:	2001      	movs	r0, #1
 8000604:	f000 f862 	bl	80006cc <rtcBackupRegWrite>
		delay(500);
 8000608:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800060c:	f7ff fe24 	bl	8000258 <delay>
		reset_count = rtcBackupRegRead(1);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f84b 	bl	80006ac <rtcBackupRegRead>
 8000616:	4603      	mov	r3, r0
 8000618:	4a06      	ldr	r2, [pc, #24]	@ (8000634 <resetInit+0x54>)
 800061a:	6013      	str	r3, [r2, #0]
	}

	rtcBackupRegWrite(1,0);
 800061c:	2100      	movs	r1, #0
 800061e:	2001      	movs	r0, #1
 8000620:	f000 f854 	bl	80006cc <rtcBackupRegWrite>

	return ret;
 8000624:	79fb      	ldrb	r3, [r7, #7]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	20000200 	.word	0x20000200

08000638 <resetGetCount>:

uint32_t resetGetCount(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return reset_count;
 800063c:	4b02      	ldr	r3, [pc, #8]	@ (8000648 <resetGetCount+0x10>)
 800063e:	681b      	ldr	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	20000200 	.word	0x20000200

0800064c <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	bool ret = true;
 8000652:	2301      	movs	r3, #1
 8000654:	71fb      	strb	r3, [r7, #7]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <rtcInit+0x54>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a11      	ldr	r2, [pc, #68]	@ (80006a0 <rtcInit+0x54>)
 800065c:	f043 0310 	orr.w	r3, r3, #16
 8000660:	6193      	str	r3, [r2, #24]
 8000662:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <rtcInit+0x54>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f003 0310 	and.w	r3, r3, #16
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

	hrtc.Instance = RTC;
 800066e:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <rtcInit+0x58>)
 8000670:	4a0d      	ldr	r2, [pc, #52]	@ (80006a8 <rtcInit+0x5c>)
 8000672:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000674:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <rtcInit+0x58>)
 8000676:	f04f 32ff 	mov.w	r2, #4294967295
 800067a:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800067c:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <rtcInit+0x58>)
 800067e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000682:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000684:	4807      	ldr	r0, [pc, #28]	@ (80006a4 <rtcInit+0x58>)
 8000686:	f002 ff79 	bl	800357c <HAL_RTC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <rtcInit+0x48>
	{
	   Error_Handler();
 8000690:	f7ff fe53 	bl	800033a <Error_Handler>
	}


	return ret;
 8000694:	79fb      	ldrb	r3, [r7, #7]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000
 80006a4:	20000204 	.word	0x20000204
 80006a8:	40002800 	.word	0x40002800

080006ac <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <rtcBackupRegRead+0x1c>)
 80006b8:	f003 f884 	bl	80037c4 <HAL_RTCEx_BKUPRead>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000204 	.word	0x20000204

080006cc <rtcBackupRegWrite>:


void rtcBackupRegWrite(uint32_t index,uint32_t data)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	6879      	ldr	r1, [r7, #4]
 80006da:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <rtcBackupRegWrite+0x1c>)
 80006dc:	f003 f858 	bl	8003790 <HAL_RTCEx_BKUPWrite>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000204 	.word	0x20000204

080006ec <HAL_RTC_MspInit>:




void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000728 <HAL_RTC_MspInit+0x3c>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d110      	bne.n	8000720 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80006fe:	f002 f9c9 	bl	8002a94 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <HAL_RTC_MspInit+0x40>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a09      	ldr	r2, [pc, #36]	@ (800072c <HAL_RTC_MspInit+0x40>)
 8000708:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b07      	ldr	r3, [pc, #28]	@ (800072c <HAL_RTC_MspInit+0x40>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800071a:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <HAL_RTC_MspInit+0x44>)
 800071c:	2201      	movs	r2, #1
 800071e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40002800 	.word	0x40002800
 800072c:	40021000 	.word	0x40021000
 8000730:	4242043c 	.word	0x4242043c

08000734 <uartInit>:
extern void     cdcDataIn(uint8_t rx_data);
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);
extern uint32_t cdcGetBaud(void);

bool  uartInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
	for (int i=0; i<UART_MAX_CH;i++)
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	e007      	b.n	8000750 <uartInit+0x1c>
	{
		is_open[i] = false;
 8000740:	4a08      	ldr	r2, [pc, #32]	@ (8000764 <uartInit+0x30>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<UART_MAX_CH;i++)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3301      	adds	r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	ddf4      	ble.n	8000740 <uartInit+0xc>
	}

	return true;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	20000218 	.word	0x20000218

08000768 <uartOpen>:

bool     uartOpen(uint8_t ch, uint32_t baud)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8000774:	2300      	movs	r3, #0
 8000776:	73fb      	strb	r3, [r7, #15]


	switch(ch)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d106      	bne.n	800078c <uartOpen+0x24>
	{
	case _DEF_UART1:
		is_open[ch] = true;
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4a05      	ldr	r2, [pc, #20]	@ (8000798 <uartOpen+0x30>)
 8000782:	2101      	movs	r1, #1
 8000784:	54d1      	strb	r1, [r2, r3]
		ret = true;
 8000786:	2301      	movs	r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]
		break;
 800078a:	bf00      	nop
	}


	return ret;
 800078c:	7bfb      	ldrb	r3, [r7, #15]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	20000218 	.word	0x20000218

0800079c <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]

	switch(ch)
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d103      	bne.n	80007b8 <uartAvailable+0x1c>
	{
		case _DEF_UART1:
			ret = cdcAvailable();
 80007b0:	f006 ff56 	bl	8007660 <cdcAvailable>
 80007b4:	60f8      	str	r0, [r7, #12]
			break;
 80007b6:	bf00      	nop
	}

	return ret;
 80007b8:	68fb      	ldr	r3, [r7, #12]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <uartRead>:

uint8_t  uartRead(uint8_t ch)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b084      	sub	sp, #16
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	71fb      	strb	r3, [r7, #7]
	uint8_t ret=0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d104      	bne.n	80007e0 <uartRead+0x1e>
	{
	case _DEF_UART1:
		ret = cdcRead();
 80007d6:	f006 ff5f 	bl	8007698 <cdcRead>
 80007da:	4603      	mov	r3, r0
 80007dc:	73fb      	strb	r3, [r7, #15]
		break;
 80007de:	bf00      	nop
	}


	return ret;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data,uint32_t length)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	73fb      	strb	r3, [r7, #15]
	uint8_t ret=0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	75fb      	strb	r3, [r7, #23]

	switch(ch)
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d106      	bne.n	8000810 <uartWrite+0x26>
	{
	case _DEF_UART1:
		ret = cdcWrite(p_data,length);
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	68b8      	ldr	r0, [r7, #8]
 8000806:	f006 ff99 	bl	800773c <cdcWrite>
 800080a:	4603      	mov	r3, r0
 800080c:	75fb      	strb	r3, [r7, #23]
		break;
 800080e:	bf00      	nop
	}

	return ret;
 8000810:	7dfb      	ldrb	r3, [r7, #23]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800081a:	b40e      	push	{r1, r2, r3}
 800081c:	b580      	push	{r7, lr}
 800081e:	b0c7      	sub	sp, #284	@ 0x11c
 8000820:	af00      	add	r7, sp, #0
 8000822:	4602      	mov	r2, r0
 8000824:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000828:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800082c:	701a      	strb	r2, [r3, #0]
	char buf[256];
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
 800082e:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000832:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000836:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800083a:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf,256,fmt,args);
 800083c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000840:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000844:	f107 0010 	add.w	r0, r7, #16
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800084e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000852:	f007 fcb7 	bl	80081c4 <vsniprintf>
 8000856:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

	ret = uartWrite(ch,(uint8_t *)buf,len);
 800085a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800085e:	f107 0110 	add.w	r1, r7, #16
 8000862:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000866:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ffbc 	bl	80007ea <uartWrite>
 8000872:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

	va_end(args);


	return ret;
 8000876:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 800087a:	4618      	mov	r0, r3
 800087c:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000880:	46bd      	mov	sp, r7
 8000882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000886:	b003      	add	sp, #12
 8000888:	4770      	bx	lr

0800088a <uartGetBaud>:

uint32_t uartGetBaud(uint8_t ch)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b084      	sub	sp, #16
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]

	switch(ch)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d103      	bne.n	80008a6 <uartGetBaud+0x1c>
		{
		case _DEF_UART1:
			ret = cdcGetBaud();
 800089e:	f006 ff75 	bl	800778c <cdcGetBaud>
 80008a2:	60f8      	str	r0, [r7, #12]
			break;
 80008a4:	bf00      	nop
		}


	return ret;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <usbInit>:

#include "usb_device.h"


bool usbInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
	bool ret = true;
 80008b6:	2301      	movs	r3, #1
 80008b8:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ca:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  //open drain
 80008cc:	2311      	movs	r3, #17
 80008ce:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2302      	movs	r3, #2
 80008d6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	480f      	ldr	r0, [pc, #60]	@ (800091c <usbInit+0x6c>)
 80008de:	f000 f9c3 	bl	8000c68 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET); //회로에 풀업이
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008e8:	480c      	ldr	r0, [pc, #48]	@ (800091c <usbInit+0x6c>)
 80008ea:	f000 fb41 	bl	8000f70 <HAL_GPIO_WritePin>
	delay(100);
 80008ee:	2064      	movs	r0, #100	@ 0x64
 80008f0:	f7ff fcb2 	bl	8000258 <delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008fa:	4808      	ldr	r0, [pc, #32]	@ (800091c <usbInit+0x6c>)
 80008fc:	f000 fb38 	bl	8000f70 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	4619      	mov	r1, r3
 8000908:	4804      	ldr	r0, [pc, #16]	@ (800091c <usbInit+0x6c>)
 800090a:	f000 f9ad 	bl	8000c68 <HAL_GPIO_Init>


	 MX_USB_DEVICE_Init();
 800090e:	f006 fe77 	bl	8007600 <MX_USB_DEVICE_Init>

	return ret;
 8000912:	7dfb      	ldrb	r3, [r7, #23]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40010800 	.word	0x40010800

08000920 <hwInit>:




void hwInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	bspInit();
 8000924:	f7ff fc72 	bl	800020c <bspInit>
	rtcInit();
 8000928:	f7ff fe90 	bl	800064c <rtcInit>

	resetInit();
 800092c:	f7ff fe58 	bl	80005e0 <resetInit>
	ledInit();
 8000930:	f7ff fdd4 	bl	80004dc <ledInit>
	usbInit();
 8000934:	f7ff ffbc 	bl	80008b0 <usbInit>
	uartInit();
 8000938:	f7ff fefc 	bl	8000734 <uartInit>

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <HAL_Init+0x28>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <HAL_Init+0x28>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f947 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	200f      	movs	r0, #15
 8000958:	f000 f808 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff fcf4 	bl	8000348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <HAL_InitTick+0x54>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_InitTick+0x58>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000982:	fbb3 f3f1 	udiv	r3, r3, r1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f95f 	bl	8000c4e <HAL_SYSTICK_Config>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e00e      	b.n	80009b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d80a      	bhi.n	80009b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f000 f927 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4a06      	ldr	r2, [pc, #24]	@ (80009c8 <HAL_InitTick+0x5c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000010 	.word	0x20000010
 80009c8:	2000000c 	.word	0x2000000c

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <HAL_IncTick+0x1c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <HAL_IncTick+0x20>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a03      	ldr	r2, [pc, #12]	@ (80009ec <HAL_IncTick+0x20>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20000010 	.word	0x20000010
 80009ec:	2000021c 	.word	0x2000021c

080009f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b02      	ldr	r3, [pc, #8]	@ (8000a00 <HAL_GetTick+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	2000021c 	.word	0x2000021c

08000a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a0c:	f7ff fff0 	bl	80009f0 <HAL_GetTick>
 8000a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1c:	d005      	beq.n	8000a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <HAL_Delay+0x44>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a2a:	bf00      	nop
 8000a2c:	f7ff ffe0 	bl	80009f0 <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d8f7      	bhi.n	8000a2c <HAL_Delay+0x28>
  {
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000010 	.word	0x20000010

08000a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	60d3      	str	r3, [r2, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	@ (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db0b      	blt.n	8000ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 021f 	and.w	r2, r3, #31
 8000ac8:	4906      	ldr	r1, [pc, #24]	@ (8000ae4 <__NVIC_EnableIRQ+0x34>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	095b      	lsrs	r3, r3, #5
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	@ (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	@ (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	@ 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	@ 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff90 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff2d 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff42 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff90 	bl	8000b3c <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5f 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff35 	bl	8000ab0 <__NVIC_EnableIRQ>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffa2 	bl	8000ba0 <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b08b      	sub	sp, #44	@ 0x2c
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7a:	e169      	b.n	8000f50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 8158 	bne.w	8000f4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	4a9a      	ldr	r2, [pc, #616]	@ (8000f08 <HAL_GPIO_Init+0x2a0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d05e      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000ca4:	4a98      	ldr	r2, [pc, #608]	@ (8000f08 <HAL_GPIO_Init+0x2a0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d875      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000caa:	4a98      	ldr	r2, [pc, #608]	@ (8000f0c <HAL_GPIO_Init+0x2a4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d058      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cb0:	4a96      	ldr	r2, [pc, #600]	@ (8000f0c <HAL_GPIO_Init+0x2a4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d86f      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cb6:	4a96      	ldr	r2, [pc, #600]	@ (8000f10 <HAL_GPIO_Init+0x2a8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d052      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cbc:	4a94      	ldr	r2, [pc, #592]	@ (8000f10 <HAL_GPIO_Init+0x2a8>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d869      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cc2:	4a94      	ldr	r2, [pc, #592]	@ (8000f14 <HAL_GPIO_Init+0x2ac>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d04c      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cc8:	4a92      	ldr	r2, [pc, #584]	@ (8000f14 <HAL_GPIO_Init+0x2ac>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d863      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cce:	4a92      	ldr	r2, [pc, #584]	@ (8000f18 <HAL_GPIO_Init+0x2b0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d046      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cd4:	4a90      	ldr	r2, [pc, #576]	@ (8000f18 <HAL_GPIO_Init+0x2b0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d85d      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cda:	2b12      	cmp	r3, #18
 8000cdc:	d82a      	bhi.n	8000d34 <HAL_GPIO_Init+0xcc>
 8000cde:	2b12      	cmp	r3, #18
 8000ce0:	d859      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ce8 <HAL_GPIO_Init+0x80>)
 8000ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce8:	08000d63 	.word	0x08000d63
 8000cec:	08000d3d 	.word	0x08000d3d
 8000cf0:	08000d4f 	.word	0x08000d4f
 8000cf4:	08000d91 	.word	0x08000d91
 8000cf8:	08000d97 	.word	0x08000d97
 8000cfc:	08000d97 	.word	0x08000d97
 8000d00:	08000d97 	.word	0x08000d97
 8000d04:	08000d97 	.word	0x08000d97
 8000d08:	08000d97 	.word	0x08000d97
 8000d0c:	08000d97 	.word	0x08000d97
 8000d10:	08000d97 	.word	0x08000d97
 8000d14:	08000d97 	.word	0x08000d97
 8000d18:	08000d97 	.word	0x08000d97
 8000d1c:	08000d97 	.word	0x08000d97
 8000d20:	08000d97 	.word	0x08000d97
 8000d24:	08000d97 	.word	0x08000d97
 8000d28:	08000d97 	.word	0x08000d97
 8000d2c:	08000d45 	.word	0x08000d45
 8000d30:	08000d59 	.word	0x08000d59
 8000d34:	4a79      	ldr	r2, [pc, #484]	@ (8000f1c <HAL_GPIO_Init+0x2b4>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d013      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d3a:	e02c      	b.n	8000d96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	623b      	str	r3, [r7, #32]
          break;
 8000d42:	e029      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	623b      	str	r3, [r7, #32]
          break;
 8000d4c:	e024      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	3308      	adds	r3, #8
 8000d54:	623b      	str	r3, [r7, #32]
          break;
 8000d56:	e01f      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	330c      	adds	r3, #12
 8000d5e:	623b      	str	r3, [r7, #32]
          break;
 8000d60:	e01a      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	623b      	str	r3, [r7, #32]
          break;
 8000d6e:	e013      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d105      	bne.n	8000d84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69fa      	ldr	r2, [r7, #28]
 8000d80:	611a      	str	r2, [r3, #16]
          break;
 8000d82:	e009      	b.n	8000d98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d84:	2308      	movs	r3, #8
 8000d86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69fa      	ldr	r2, [r7, #28]
 8000d8c:	615a      	str	r2, [r3, #20]
          break;
 8000d8e:	e003      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
          break;
 8000d94:	e000      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          break;
 8000d96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	2bff      	cmp	r3, #255	@ 0xff
 8000d9c:	d801      	bhi.n	8000da2 <HAL_GPIO_Init+0x13a>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	e001      	b.n	8000da6 <HAL_GPIO_Init+0x13e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3304      	adds	r3, #4
 8000da6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	2bff      	cmp	r3, #255	@ 0xff
 8000dac:	d802      	bhi.n	8000db4 <HAL_GPIO_Init+0x14c>
 8000dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	e002      	b.n	8000dba <HAL_GPIO_Init+0x152>
 8000db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db6:	3b08      	subs	r3, #8
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	210f      	movs	r1, #15
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	401a      	ands	r2, r3
 8000dcc:	6a39      	ldr	r1, [r7, #32]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000de8:	4b4d      	ldr	r3, [pc, #308]	@ (8000f20 <HAL_GPIO_Init+0x2b8>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a4c      	ldr	r2, [pc, #304]	@ (8000f20 <HAL_GPIO_Init+0x2b8>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b4a      	ldr	r3, [pc, #296]	@ (8000f20 <HAL_GPIO_Init+0x2b8>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e00:	4a48      	ldr	r2, [pc, #288]	@ (8000f24 <HAL_GPIO_Init+0x2bc>)
 8000e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a40      	ldr	r2, [pc, #256]	@ (8000f28 <HAL_GPIO_Init+0x2c0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d013      	beq.n	8000e54 <HAL_GPIO_Init+0x1ec>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f2c <HAL_GPIO_Init+0x2c4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d00d      	beq.n	8000e50 <HAL_GPIO_Init+0x1e8>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a3e      	ldr	r2, [pc, #248]	@ (8000f30 <HAL_GPIO_Init+0x2c8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d007      	beq.n	8000e4c <HAL_GPIO_Init+0x1e4>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a3d      	ldr	r2, [pc, #244]	@ (8000f34 <HAL_GPIO_Init+0x2cc>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d101      	bne.n	8000e48 <HAL_GPIO_Init+0x1e0>
 8000e44:	2303      	movs	r3, #3
 8000e46:	e006      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e48:	2304      	movs	r3, #4
 8000e4a:	e004      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e002      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <HAL_GPIO_Init+0x1ee>
 8000e54:	2300      	movs	r3, #0
 8000e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e58:	f002 0203 	and.w	r2, r2, #3
 8000e5c:	0092      	lsls	r2, r2, #2
 8000e5e:	4093      	lsls	r3, r2
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e66:	492f      	ldr	r1, [pc, #188]	@ (8000f24 <HAL_GPIO_Init+0x2bc>)
 8000e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e80:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	492c      	ldr	r1, [pc, #176]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	608b      	str	r3, [r1, #8]
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	4928      	ldr	r1, [pc, #160]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d006      	beq.n	8000eb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ea8:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	4922      	ldr	r1, [pc, #136]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	60cb      	str	r3, [r1, #12]
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eb6:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	491e      	ldr	r1, [pc, #120]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	4918      	ldr	r1, [pc, #96]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	604b      	str	r3, [r1, #4]
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ede:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	4914      	ldr	r1, [pc, #80]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d021      	beq.n	8000f3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	490e      	ldr	r1, [pc, #56]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	600b      	str	r3, [r1, #0]
 8000f04:	e021      	b.n	8000f4a <HAL_GPIO_Init+0x2e2>
 8000f06:	bf00      	nop
 8000f08:	10320000 	.word	0x10320000
 8000f0c:	10310000 	.word	0x10310000
 8000f10:	10220000 	.word	0x10220000
 8000f14:	10210000 	.word	0x10210000
 8000f18:	10120000 	.word	0x10120000
 8000f1c:	10110000 	.word	0x10110000
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010000 	.word	0x40010000
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	40010c00 	.word	0x40010c00
 8000f30:	40011000 	.word	0x40011000
 8000f34:	40011400 	.word	0x40011400
 8000f38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_GPIO_Init+0x304>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	4909      	ldr	r1, [pc, #36]	@ (8000f6c <HAL_GPIO_Init+0x304>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f56:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f47f ae8e 	bne.w	8000c7c <HAL_GPIO_Init+0x14>
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	372c      	adds	r7, #44	@ 0x2c
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	40010400 	.word	0x40010400

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f80:	787b      	ldrb	r3, [r7, #1]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f8c:	e003      	b.n	8000f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	041a      	lsls	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	611a      	str	r2, [r3, #16]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	041a      	lsls	r2, r3, #16
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43d9      	mvns	r1, r3
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	400b      	ands	r3, r1
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	611a      	str	r2, [r3, #16]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e0e8      	b.n	80011b6 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d106      	bne.n	8000ffe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f006 fdff 	bl	8007bfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2203      	movs	r2, #3
 8001002:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fc16 	bl	8003842 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3304      	adds	r3, #4
 800101e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001020:	f002 fbec 	bl	80037fc <USB_CoreInit>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2202      	movs	r2, #2
 800102e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e0bf      	b.n	80011b6 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f002 fc1a 	bl	8003876 <USB_SetCurrentMode>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2202      	movs	r2, #2
 800104c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e0b0      	b.n	80011b6 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e03e      	b.n	80010d8 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	3311      	adds	r3, #17
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	440b      	add	r3, r1
 800107c:	3310      	adds	r3, #16
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	440b      	add	r3, r1
 8001090:	3313      	adds	r3, #19
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	440b      	add	r3, r1
 80010a4:	3320      	adds	r3, #32
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	3324      	adds	r3, #36	@ 0x24
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	440b      	add	r3, r1
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	3301      	adds	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	791b      	ldrb	r3, [r3, #4]
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d3bb      	bcc.n	800105a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e044      	b.n	8001172 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	440b      	add	r3, r1
 80010f6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	440b      	add	r3, r1
 800110c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	440b      	add	r3, r1
 8001122:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	440b      	add	r3, r1
 800114e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	440b      	add	r3, r1
 8001164:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	3301      	adds	r3, #1
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	791b      	ldrb	r3, [r3, #4]
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	429a      	cmp	r2, r3
 800117a:	d3b5      	bcc.n	80010e8 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3304      	adds	r3, #4
 8001184:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001186:	f002 fb82 	bl	800388e <USB_DevInit>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2202      	movs	r2, #2
 8001194:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e00c      	b.n	80011b6 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f004 fe01 	bl	8005db6 <USB_DevDisconnect>

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_PCD_Start+0x16>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e016      	b.n	8001202 <HAL_PCD_Start+0x44>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 fb18 	bl	8003816 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011e6:	2101      	movs	r1, #1
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f006 ff7a 	bl	80080e2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 fdd5 	bl	8005da2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b088      	sub	sp, #32
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f004 fdd7 	bl	8005dca <USB_ReadInterrupts>
 800121c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fb1a 	bl	8001862 <PCD_EP_ISR_Handler>

    return;
 800122e:	e119      	b.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001236:	2b00      	cmp	r3, #0
 8001238:	d013      	beq.n	8001262 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001242:	b29a      	uxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800124c:	b292      	uxth	r2, r2
 800124e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f006 fd4d 	bl	8007cf2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001258:	2100      	movs	r1, #0
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f905 	bl	800146a <HAL_PCD_SetAddress>

    return;
 8001260:	e100      	b.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00c      	beq.n	8001286 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001274:	b29a      	uxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800127e:	b292      	uxth	r2, r2
 8001280:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001284:	e0ee      	b.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00c      	beq.n	80012aa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001298:	b29a      	uxth	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80012a2:	b292      	uxth	r2, r2
 80012a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80012a8:	e0dc      	b.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d027      	beq.n	8001304 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012bc:	b29a      	uxth	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0204 	bic.w	r2, r2, #4
 80012c6:	b292      	uxth	r2, r2
 80012c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0208 	bic.w	r2, r2, #8
 80012de:	b292      	uxth	r2, r2
 80012e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f006 fd3d 	bl	8007d64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80012fc:	b292      	uxth	r2, r2
 80012fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001302:	e0af      	b.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8083 	beq.w	8001416 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001310:	2300      	movs	r3, #0
 8001312:	77fb      	strb	r3, [r7, #31]
 8001314:	e010      	b.n	8001338 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	7ffb      	ldrb	r3, [r7, #31]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	441a      	add	r2, r3
 8001322:	7ffb      	ldrb	r3, [r7, #31]
 8001324:	8812      	ldrh	r2, [r2, #0]
 8001326:	b292      	uxth	r2, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	3320      	adds	r3, #32
 800132c:	443b      	add	r3, r7
 800132e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001332:	7ffb      	ldrb	r3, [r7, #31]
 8001334:	3301      	adds	r3, #1
 8001336:	77fb      	strb	r3, [r7, #31]
 8001338:	7ffb      	ldrb	r3, [r7, #31]
 800133a:	2b07      	cmp	r3, #7
 800133c:	d9eb      	bls.n	8001316 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001346:	b29a      	uxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 0201 	orr.w	r2, r2, #1
 8001350:	b292      	uxth	r2, r2
 8001352:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800135e:	b29a      	uxth	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0201 	bic.w	r2, r2, #1
 8001368:	b292      	uxth	r2, r2
 800136a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800136e:	bf00      	nop
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001378:	b29b      	uxth	r3, r3
 800137a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f6      	beq.n	8001370 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800138a:	b29a      	uxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001394:	b292      	uxth	r2, r2
 8001396:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	77fb      	strb	r3, [r7, #31]
 800139e:	e00f      	b.n	80013c0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80013a0:	7ffb      	ldrb	r3, [r7, #31]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	4611      	mov	r1, r2
 80013a8:	7ffa      	ldrb	r2, [r7, #31]
 80013aa:	0092      	lsls	r2, r2, #2
 80013ac:	440a      	add	r2, r1
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	3320      	adds	r3, #32
 80013b2:	443b      	add	r3, r7
 80013b4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80013b8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80013ba:	7ffb      	ldrb	r3, [r7, #31]
 80013bc:	3301      	adds	r3, #1
 80013be:	77fb      	strb	r3, [r7, #31]
 80013c0:	7ffb      	ldrb	r3, [r7, #31]
 80013c2:	2b07      	cmp	r3, #7
 80013c4:	d9ec      	bls.n	80013a0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 0208 	orr.w	r2, r2, #8
 80013d8:	b292      	uxth	r2, r2
 80013da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013f0:	b292      	uxth	r2, r2
 80013f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80013fe:	b29a      	uxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0204 	orr.w	r2, r2, #4
 8001408:	b292      	uxth	r2, r2
 800140a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f006 fc8e 	bl	8007d30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001414:	e026      	b.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00f      	beq.n	8001440 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001432:	b292      	uxth	r2, r2
 8001434:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f006 fc4c 	bl	8007cd6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800143e:	e011      	b.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00c      	beq.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800145c:	b292      	uxth	r2, r2
 800145e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001462:	bf00      	nop
  }
}
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_PCD_SetAddress+0x1a>
 8001480:	2302      	movs	r3, #2
 8001482:	e012      	b.n	80014aa <HAL_PCD_SetAddress+0x40>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	78fa      	ldrb	r2, [r7, #3]
 8001490:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	78fa      	ldrb	r2, [r7, #3]
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f004 fc6e 	bl	8005d7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	4608      	mov	r0, r1
 80014bc:	4611      	mov	r1, r2
 80014be:	461a      	mov	r2, r3
 80014c0:	4603      	mov	r3, r0
 80014c2:	70fb      	strb	r3, [r7, #3]
 80014c4:	460b      	mov	r3, r1
 80014c6:	803b      	strh	r3, [r7, #0]
 80014c8:	4613      	mov	r3, r2
 80014ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	da0e      	bge.n	80014f6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	f003 0207 	and.w	r2, r3, #7
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	3310      	adds	r3, #16
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2201      	movs	r2, #1
 80014f2:	705a      	strb	r2, [r3, #1]
 80014f4:	e00e      	b.n	8001514 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	f003 0207 	and.w	r2, r3, #7
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	b2da      	uxtb	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001520:	883a      	ldrh	r2, [r7, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	78ba      	ldrb	r2, [r7, #2]
 800152a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800152c:	78bb      	ldrb	r3, [r7, #2]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d102      	bne.n	8001538 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2200      	movs	r2, #0
 8001536:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_PCD_EP_Open+0x94>
 8001542:	2302      	movs	r3, #2
 8001544:	e00e      	b.n	8001564 <HAL_PCD_EP_Open+0xb2>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	4618      	mov	r0, r3
 8001556:	f002 f9b7 	bl	80038c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001562:	7afb      	ldrb	r3, [r7, #11]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800157c:	2b00      	cmp	r3, #0
 800157e:	da0e      	bge.n	800159e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	f003 0207 	and.w	r2, r3, #7
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	3310      	adds	r3, #16
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2201      	movs	r2, #1
 800159a:	705a      	strb	r2, [r3, #1]
 800159c:	e00e      	b.n	80015bc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	f003 0207 	and.w	r2, r3, #7
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_PCD_EP_Close+0x6a>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e00e      	b.n	80015f4 <HAL_PCD_EP_Close+0x88>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68f9      	ldr	r1, [r7, #12]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 fd2f 	bl	8004048 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	460b      	mov	r3, r1
 800160a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800160c:	7afb      	ldrb	r3, [r7, #11]
 800160e:	f003 0207 	and.w	r2, r3, #7
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4413      	add	r3, r2
 8001622:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2200      	movs	r2, #0
 800163a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800163c:	7afb      	ldrb	r3, [r7, #11]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	b2da      	uxtb	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6979      	ldr	r1, [r7, #20]
 800164e:	4618      	mov	r0, r3
 8001650:	f002 fee6 	bl	8004420 <USB_EPStartXfer>

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	460b      	mov	r3, r1
 8001668:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	f003 0207 	and.w	r2, r3, #7
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001680:	681b      	ldr	r3, [r3, #0]
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	460b      	mov	r3, r1
 800169a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800169c:	7afb      	ldrb	r3, [r7, #11]
 800169e:	f003 0207 	and.w	r2, r3, #7
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	3310      	adds	r3, #16
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2201      	movs	r2, #1
 80016d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016d8:	7afb      	ldrb	r3, [r7, #11]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6979      	ldr	r1, [r7, #20]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fe98 	bl	8004420 <USB_EPStartXfer>

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	460b      	mov	r3, r1
 8001704:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	7912      	ldrb	r2, [r2, #4]
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e04c      	b.n	80017b2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800171c:	2b00      	cmp	r3, #0
 800171e:	da0e      	bge.n	800173e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	f003 0207 	and.w	r2, r3, #7
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	3310      	adds	r3, #16
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2201      	movs	r2, #1
 800173a:	705a      	strb	r2, [r3, #1]
 800173c:	e00c      	b.n	8001758 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2201      	movs	r2, #1
 800175c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	b2da      	uxtb	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_PCD_EP_SetStall+0x7e>
 8001774:	2302      	movs	r3, #2
 8001776:	e01c      	b.n	80017b2 <HAL_PCD_EP_SetStall+0xb8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68f9      	ldr	r1, [r7, #12]
 8001786:	4618      	mov	r0, r3
 8001788:	f004 f9fb 	bl	8005b82 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	2b00      	cmp	r3, #0
 8001794:	d108      	bne.n	80017a8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80017a0:	4619      	mov	r1, r3
 80017a2:	4610      	mov	r0, r2
 80017a4:	f004 fb20 	bl	8005de8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	7912      	ldrb	r2, [r2, #4]
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e040      	b.n	800185a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	da0e      	bge.n	80017fe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	f003 0207 	and.w	r2, r3, #7
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	3310      	adds	r3, #16
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2201      	movs	r2, #1
 80017fa:	705a      	strb	r2, [r3, #1]
 80017fc:	e00e      	b.n	800181c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	f003 0207 	and.w	r2, r3, #7
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	b2da      	uxtb	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_PCD_EP_ClrStall+0x82>
 8001838:	2302      	movs	r3, #2
 800183a:	e00e      	b.n	800185a <HAL_PCD_EP_ClrStall+0xa0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68f9      	ldr	r1, [r7, #12]
 800184a:	4618      	mov	r0, r3
 800184c:	f004 f9e9 	bl	8005c22 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b096      	sub	sp, #88	@ 0x58
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800186a:	e3bb      	b.n	8001fe4 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001874:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001878:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800187c:	b2db      	uxtb	r3, r3
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001886:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 8175 	bne.w	8001b7a <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001890:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	d14e      	bne.n	800193a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80018a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018ac:	81fb      	strh	r3, [r7, #14]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	89fb      	ldrh	r3, [r7, #14]
 80018b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018bc:	b29b      	uxth	r3, r3
 80018be:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3310      	adds	r3, #16
 80018c4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4413      	add	r3, r2
 80018da:	3302      	adds	r3, #2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f4:	695a      	ldr	r2, [r3, #20]
 80018f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	441a      	add	r2, r3
 80018fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018fe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001900:	2100      	movs	r1, #0
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f006 f9cd 	bl	8007ca2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7b5b      	ldrb	r3, [r3, #13]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 8368 	beq.w	8001fe4 <PCD_EP_ISR_Handler+0x782>
 8001914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b00      	cmp	r3, #0
 800191a:	f040 8363 	bne.w	8001fe4 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7b5b      	ldrb	r3, [r3, #13]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001928:	b2da      	uxtb	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	735a      	strb	r2, [r3, #13]
 8001938:	e354      	b.n	8001fe4 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001940:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800194c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001950:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001954:	2b00      	cmp	r3, #0
 8001956:	d034      	beq.n	80019c2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001960:	b29b      	uxth	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	3306      	adds	r3, #6
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	4413      	add	r3, r2
 8001976:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001982:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800198e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001990:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001994:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001996:	b29b      	uxth	r3, r3
 8001998:	f004 fa77 	bl	8005e8a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80019a8:	4013      	ands	r3, r2
 80019aa:	823b      	strh	r3, [r7, #16]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	8a3a      	ldrh	r2, [r7, #16]
 80019b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019b6:	b292      	uxth	r2, r2
 80019b8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f006 f944 	bl	8007c48 <HAL_PCD_SetupStageCallback>
 80019c0:	e310      	b.n	8001fe4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019c2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f280 830c 	bge.w	8001fe4 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80019d8:	4013      	ands	r3, r2
 80019da:	83fb      	strh	r3, [r7, #30]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	8bfa      	ldrh	r2, [r7, #30]
 80019e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019e6:	b292      	uxth	r2, r2
 80019e8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	3306      	adds	r3, #6
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a14:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d019      	beq.n	8001a52 <PCD_EP_ISR_Handler+0x1f0>
 8001a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d015      	beq.n	8001a52 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a2c:	6959      	ldr	r1, [r3, #20]
 8001a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a30:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a34:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	f004 fa27 	bl	8005e8a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	441a      	add	r2, r3
 8001a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a48:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f006 f90d 	bl	8007c6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001a5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f040 82bd 	bne.w	8001fe4 <PCD_EP_ISR_Handler+0x782>
 8001a6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a6e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001a72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001a76:	f000 82b5 	beq.w	8001fe4 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	4413      	add	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	801a      	strh	r2, [r3, #0]
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ab0:	d91d      	bls.n	8001aee <PCD_EP_ISR_Handler+0x28c>
 8001ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d102      	bne.n	8001acc <PCD_EP_ISR_Handler+0x26a>
 8001ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	647b      	str	r3, [r7, #68]	@ 0x44
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	029b      	lsls	r3, r3, #10
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	4313      	orrs	r3, r2
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	801a      	strh	r2, [r3, #0]
 8001aec:	e026      	b.n	8001b3c <PCD_EP_ISR_Handler+0x2da>
 8001aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10a      	bne.n	8001b0c <PCD_EP_ISR_Handler+0x2aa>
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	801a      	strh	r2, [r3, #0]
 8001b0a:	e017      	b.n	8001b3c <PCD_EP_ISR_Handler+0x2da>
 8001b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <PCD_EP_ISR_Handler+0x2c4>
 8001b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b22:	3301      	adds	r3, #1
 8001b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	029b      	lsls	r3, r3, #10
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b4c:	827b      	strh	r3, [r7, #18]
 8001b4e:	8a7b      	ldrh	r3, [r7, #18]
 8001b50:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001b54:	827b      	strh	r3, [r7, #18]
 8001b56:	8a7b      	ldrh	r3, [r7, #18]
 8001b58:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001b5c:	827b      	strh	r3, [r7, #18]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	8a7b      	ldrh	r3, [r7, #18]
 8001b64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	8013      	strh	r3, [r2, #0]
 8001b78:	e234      	b.n	8001fe4 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b8e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f280 80fc 	bge.w	8001d90 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001bae:	4013      	ands	r3, r2
 8001bb0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001bc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bca:	b292      	uxth	r2, r2
 8001bcc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001bce:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be6:	7b1b      	ldrb	r3, [r3, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d125      	bne.n	8001c38 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	3306      	adds	r3, #6
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c14:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001c18:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 8092 	beq.w	8001d46 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c28:	6959      	ldr	r1, [r3, #20]
 8001c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2c:	88da      	ldrh	r2, [r3, #6]
 8001c2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c32:	f004 f92a 	bl	8005e8a <USB_ReadPMA>
 8001c36:	e086      	b.n	8001d46 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3a:	78db      	ldrb	r3, [r3, #3]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d10a      	bne.n	8001c56 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c44:	461a      	mov	r2, r3
 8001c46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f9d9 	bl	8002000 <HAL_PCD_EP_DB_Receive>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001c54:	e077      	b.n	8001d46 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c70:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	441a      	add	r2, r3
 8001c82:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001c86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c92:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d024      	beq.n	8001cfe <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cdc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001ce0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d02e      	beq.n	8001d46 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cee:	6959      	ldr	r1, [r3, #20]
 8001cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf2:	891a      	ldrh	r2, [r3, #8]
 8001cf4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cf8:	f004 f8c7 	bl	8005e8a <USB_ReadPMA>
 8001cfc:	e023      	b.n	8001d46 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	3306      	adds	r3, #6
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d26:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001d2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d38:	6959      	ldr	r1, [r3, #20]
 8001d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d3c:	895a      	ldrh	r2, [r3, #10]
 8001d3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d42:	f004 f8a2 	bl	8005e8a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d4e:	441a      	add	r2, r3
 8001d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d52:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d5c:	441a      	add	r2, r3
 8001d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d60:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <PCD_EP_ISR_Handler+0x514>
 8001d6a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d206      	bcs.n	8001d84 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f005 ff75 	bl	8007c6c <HAL_PCD_DataOutStageCallback>
 8001d82:	e005      	b.n	8001d90 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f002 fb48 	bl	8004420 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8123 	beq.w	8001fe4 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d9e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	3310      	adds	r3, #16
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dcc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	441a      	add	r2, r3
 8001dde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df0:	78db      	ldrb	r3, [r3, #3]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	f040 80a2 	bne.w	8001f3c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e00:	7b1b      	ldrb	r3, [r3, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8093 	beq.w	8001f2e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d046      	beq.n	8001ea2 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e16:	785b      	ldrb	r3, [r3, #1]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d126      	bne.n	8001e6a <PCD_EP_ISR_Handler+0x608>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	4413      	add	r3, r2
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	011a      	lsls	r2, r3, #4
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001e42:	623b      	str	r3, [r7, #32]
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	801a      	strh	r2, [r3, #0]
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	801a      	strh	r2, [r3, #0]
 8001e68:	e061      	b.n	8001f2e <PCD_EP_ISR_Handler+0x6cc>
 8001e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6c:	785b      	ldrb	r3, [r3, #1]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d15d      	bne.n	8001f2e <PCD_EP_ISR_Handler+0x6cc>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e86:	4413      	add	r3, r2
 8001e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	011a      	lsls	r2, r3, #4
 8001e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e92:	4413      	add	r3, r2
 8001e94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001e98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	801a      	strh	r2, [r3, #0]
 8001ea0:	e045      	b.n	8001f2e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eaa:	785b      	ldrb	r3, [r3, #1]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d126      	bne.n	8001efe <PCD_EP_ISR_Handler+0x69c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec4:	4413      	add	r3, r2
 8001ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	011a      	lsls	r2, r3, #4
 8001ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee6:	801a      	strh	r2, [r3, #0]
 8001ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efa:	801a      	strh	r2, [r3, #0]
 8001efc:	e017      	b.n	8001f2e <PCD_EP_ISR_Handler+0x6cc>
 8001efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f00:	785b      	ldrb	r3, [r3, #1]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d113      	bne.n	8001f2e <PCD_EP_ISR_Handler+0x6cc>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f14:	4413      	add	r3, r2
 8001f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	011a      	lsls	r2, r3, #4
 8001f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f20:	4413      	add	r3, r2
 8001f22:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	4619      	mov	r1, r3
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f005 feb4 	bl	8007ca2 <HAL_PCD_DataInStageCallback>
 8001f3a:	e053      	b.n	8001fe4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d146      	bne.n	8001fd6 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f70:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d907      	bls.n	8001f90 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f82:	699a      	ldr	r2, [r3, #24]
 8001f84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f88:	1ad2      	subs	r2, r2, r3
 8001f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f8c:	619a      	str	r2, [r3, #24]
 8001f8e:	e002      	b.n	8001f96 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f005 fe7c 	bl	8007ca2 <HAL_PCD_DataInStageCallback>
 8001faa:	e01b      	b.n	8001fe4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001fb4:	441a      	add	r2, r3
 8001fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fbc:	69da      	ldr	r2, [r3, #28]
 8001fbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001fc2:	441a      	add	r2, r3
 8001fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 fa26 	bl	8004420 <USB_EPStartXfer>
 8001fd4:	e006      	b.n	8001fe4 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001fd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fda:	461a      	mov	r2, r3
 8001fdc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f91b 	bl	800221a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f6ff ac3b 	blt.w	800186c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3758      	adds	r7, #88	@ 0x58
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	4613      	mov	r3, r2
 800200c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d07e      	beq.n	8002116 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002020:	b29b      	uxth	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	3302      	adds	r3, #2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002040:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	8b7b      	ldrh	r3, [r7, #26]
 8002048:	429a      	cmp	r2, r3
 800204a:	d306      	bcc.n	800205a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	8b7b      	ldrh	r3, [r7, #26]
 8002052:	1ad2      	subs	r2, r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	619a      	str	r2, [r3, #24]
 8002058:	e002      	b.n	8002060 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d123      	bne.n	80020b0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800207e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002082:	833b      	strh	r3, [r7, #24]
 8002084:	8b3b      	ldrh	r3, [r7, #24]
 8002086:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800208a:	833b      	strh	r3, [r7, #24]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	441a      	add	r2, r3
 800209a:	8b3b      	ldrh	r3, [r7, #24]
 800209c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d01f      	beq.n	80020fa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020d4:	82fb      	strh	r3, [r7, #22]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	441a      	add	r2, r3
 80020e4:	8afb      	ldrh	r3, [r7, #22]
 80020e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020fa:	8b7b      	ldrh	r3, [r7, #26]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8087 	beq.w	8002210 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	6959      	ldr	r1, [r3, #20]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	891a      	ldrh	r2, [r3, #8]
 800210e:	8b7b      	ldrh	r3, [r7, #26]
 8002110:	f003 febb 	bl	8005e8a <USB_ReadPMA>
 8002114:	e07c      	b.n	8002210 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800211e:	b29b      	uxth	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	3306      	adds	r3, #6
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	4413      	add	r3, r2
 8002134:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800213e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	699a      	ldr	r2, [r3, #24]
 8002144:	8b7b      	ldrh	r3, [r7, #26]
 8002146:	429a      	cmp	r2, r3
 8002148:	d306      	bcc.n	8002158 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	8b7b      	ldrh	r3, [r7, #26]
 8002150:	1ad2      	subs	r2, r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	619a      	str	r2, [r3, #24]
 8002156:	e002      	b.n	800215e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2200      	movs	r2, #0
 800215c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d123      	bne.n	80021ae <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800217c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002180:	83fb      	strh	r3, [r7, #30]
 8002182:	8bfb      	ldrh	r3, [r7, #30]
 8002184:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002188:	83fb      	strh	r3, [r7, #30]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	441a      	add	r2, r3
 8002198:	8bfb      	ldrh	r3, [r7, #30]
 800219a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800219e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d11f      	bne.n	80021f8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021d2:	83bb      	strh	r3, [r7, #28]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	441a      	add	r2, r3
 80021e2:	8bbb      	ldrh	r3, [r7, #28]
 80021e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021f8:	8b7b      	ldrh	r3, [r7, #26]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	6959      	ldr	r1, [r3, #20]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	895a      	ldrh	r2, [r3, #10]
 800220a:	8b7b      	ldrh	r3, [r7, #26]
 800220c:	f003 fe3d 	bl	8005e8a <USB_ReadPMA>
    }
  }

  return count;
 8002210:	8b7b      	ldrh	r3, [r7, #26]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b0a4      	sub	sp, #144	@ 0x90
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	4613      	mov	r3, r2
 8002226:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 81dd 	beq.w	80025ee <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800223c:	b29b      	uxth	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	3302      	adds	r3, #2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002268:	429a      	cmp	r2, r3
 800226a:	d907      	bls.n	800227c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002274:	1ad2      	subs	r2, r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	619a      	str	r2, [r3, #24]
 800227a:	e002      	b.n	8002282 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 80b9 	bne.w	80023fe <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	785b      	ldrb	r3, [r3, #1]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d126      	bne.n	80022e2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a8:	4413      	add	r3, r2
 80022aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	011a      	lsls	r2, r3, #4
 80022b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b4:	4413      	add	r3, r2
 80022b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80022ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ca:	801a      	strh	r2, [r3, #0]
 80022cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022da:	b29a      	uxth	r2, r3
 80022dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022de:	801a      	strh	r2, [r3, #0]
 80022e0:	e01a      	b.n	8002318 <HAL_PCD_EP_DB_Transmit+0xfe>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	785b      	ldrb	r3, [r3, #1]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d116      	bne.n	8002318 <HAL_PCD_EP_DB_Transmit+0xfe>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022fe:	4413      	add	r3, r2
 8002300:	637b      	str	r3, [r7, #52]	@ 0x34
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	011a      	lsls	r2, r3, #4
 8002308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800230a:	4413      	add	r3, r2
 800230c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002310:	633b      	str	r3, [r7, #48]	@ 0x30
 8002312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002314:	2200      	movs	r2, #0
 8002316:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	785b      	ldrb	r3, [r3, #1]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d126      	bne.n	8002374 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002334:	b29b      	uxth	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	4413      	add	r3, r2
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	011a      	lsls	r2, r3, #4
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	4413      	add	r3, r2
 8002348:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800234c:	61bb      	str	r3, [r7, #24]
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002358:	b29a      	uxth	r2, r3
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	801a      	strh	r2, [r3, #0]
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800236c:	b29a      	uxth	r2, r3
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	801a      	strh	r2, [r3, #0]
 8002372:	e017      	b.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	785b      	ldrb	r3, [r3, #1]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d113      	bne.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x18a>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002384:	b29b      	uxth	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238a:	4413      	add	r3, r2
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	011a      	lsls	r2, r3, #4
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	4413      	add	r3, r2
 8002398:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	2200      	movs	r2, #0
 80023a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f005 fc79 	bl	8007ca2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 82fc 	beq.w	80029b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023d6:	82fb      	strh	r3, [r7, #22]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	441a      	add	r2, r3
 80023e6:	8afb      	ldrh	r3, [r7, #22]
 80023e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	8013      	strh	r3, [r2, #0]
 80023fc:	e2da      	b.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d021      	beq.n	800244c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800241e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002422:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	441a      	add	r2, r3
 8002434:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800243c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002440:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002448:	b29b      	uxth	r3, r3
 800244a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002452:	2b01      	cmp	r3, #1
 8002454:	f040 82ae 	bne.w	80029b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002460:	441a      	add	r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	69da      	ldr	r2, [r3, #28]
 800246a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800246e:	441a      	add	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	429a      	cmp	r2, r3
 800247e:	d30b      	bcc.n	8002498 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	6a1a      	ldr	r2, [r3, #32]
 800248c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002490:	1ad2      	subs	r2, r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	621a      	str	r2, [r3, #32]
 8002496:	e017      	b.n	80024c8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d108      	bne.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80024a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80024b0:	e00a      	b.n	80024c8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	785b      	ldrb	r3, [r3, #1]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d165      	bne.n	800259c <HAL_PCD_EP_DB_Transmit+0x382>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024de:	b29b      	uxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024e4:	4413      	add	r3, r2
 80024e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	011a      	lsls	r2, r3, #4
 80024ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f0:	4413      	add	r3, r2
 80024f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002502:	b29a      	uxth	r2, r3
 8002504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002506:	801a      	strh	r2, [r3, #0]
 8002508:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800250c:	2b3e      	cmp	r3, #62	@ 0x3e
 800250e:	d91d      	bls.n	800254c <HAL_PCD_EP_DB_Transmit+0x332>
 8002510:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002518:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <HAL_PCD_EP_DB_Transmit+0x310>
 8002524:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002526:	3b01      	subs	r3, #1
 8002528:	64bb      	str	r3, [r7, #72]	@ 0x48
 800252a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29a      	uxth	r2, r3
 8002530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002532:	b29b      	uxth	r3, r3
 8002534:	029b      	lsls	r3, r3, #10
 8002536:	b29b      	uxth	r3, r3
 8002538:	4313      	orrs	r3, r2
 800253a:	b29b      	uxth	r3, r3
 800253c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002544:	b29a      	uxth	r2, r3
 8002546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	e044      	b.n	80025d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800254c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10a      	bne.n	800256a <HAL_PCD_EP_DB_Transmit+0x350>
 8002554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800255e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002562:	b29a      	uxth	r2, r3
 8002564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002566:	801a      	strh	r2, [r3, #0]
 8002568:	e035      	b.n	80025d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800256a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002572:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <HAL_PCD_EP_DB_Transmit+0x36a>
 800257e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002580:	3301      	adds	r3, #1
 8002582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b29a      	uxth	r2, r3
 800258a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800258c:	b29b      	uxth	r3, r3
 800258e:	029b      	lsls	r3, r3, #10
 8002590:	b29b      	uxth	r3, r3
 8002592:	4313      	orrs	r3, r2
 8002594:	b29a      	uxth	r2, r3
 8002596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002598:	801a      	strh	r2, [r3, #0]
 800259a:	e01c      	b.n	80025d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	785b      	ldrb	r3, [r3, #1]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d118      	bne.n	80025d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025b8:	4413      	add	r3, r2
 80025ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	011a      	lsls	r2, r3, #4
 80025c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025c4:	4413      	add	r3, r2
 80025c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80025cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025d4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	6959      	ldr	r1, [r3, #20]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	891a      	ldrh	r2, [r3, #8]
 80025e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f003 fc09 	bl	8005dfe <USB_WritePMA>
 80025ec:	e1e2      	b.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	3306      	adds	r3, #6
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	4413      	add	r3, r2
 800260c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002616:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002622:	429a      	cmp	r2, r3
 8002624:	d307      	bcc.n	8002636 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800262e:	1ad2      	subs	r2, r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	619a      	str	r2, [r3, #24]
 8002634:	e002      	b.n	800263c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2200      	movs	r2, #0
 800263a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 80c0 	bne.w	80027c6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	785b      	ldrb	r3, [r3, #1]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d126      	bne.n	800269c <HAL_PCD_EP_DB_Transmit+0x482>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800265c:	b29b      	uxth	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002662:	4413      	add	r3, r2
 8002664:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	011a      	lsls	r2, r3, #4
 800266c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800266e:	4413      	add	r3, r2
 8002670:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002674:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002676:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002680:	b29a      	uxth	r2, r3
 8002682:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002684:	801a      	strh	r2, [r3, #0]
 8002686:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002694:	b29a      	uxth	r2, r3
 8002696:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002698:	801a      	strh	r2, [r3, #0]
 800269a:	e01a      	b.n	80026d2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	785b      	ldrb	r3, [r3, #1]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d116      	bne.n	80026d2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026b8:	4413      	add	r3, r2
 80026ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	011a      	lsls	r2, r3, #4
 80026c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026c4:	4413      	add	r3, r2
 80026c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80026cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026ce:	2200      	movs	r2, #0
 80026d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	785b      	ldrb	r3, [r3, #1]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d12b      	bne.n	8002738 <HAL_PCD_EP_DB_Transmit+0x51e>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026f4:	4413      	add	r3, r2
 80026f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	011a      	lsls	r2, r3, #4
 80026fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002700:	4413      	add	r3, r2
 8002702:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002706:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800270a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002716:	b29a      	uxth	r2, r3
 8002718:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	b29b      	uxth	r3, r3
 8002726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800272a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800272e:	b29a      	uxth	r2, r3
 8002730:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002734:	801a      	strh	r2, [r3, #0]
 8002736:	e017      	b.n	8002768 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	785b      	ldrb	r3, [r3, #1]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d113      	bne.n	8002768 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800274e:	4413      	add	r3, r2
 8002750:	677b      	str	r3, [r7, #116]	@ 0x74
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	011a      	lsls	r2, r3, #4
 8002758:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800275a:	4413      	add	r3, r2
 800275c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002760:	673b      	str	r3, [r7, #112]	@ 0x70
 8002762:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002764:	2200      	movs	r2, #0
 8002766:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f005 fa97 	bl	8007ca2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 811a 	bne.w	80029b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800279a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	441a      	add	r2, r3
 80027ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80027b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	8013      	strh	r3, [r2, #0]
 80027c4:	e0f6      	b.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d121      	bne.n	8002814 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	441a      	add	r2, r3
 80027fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002808:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800280c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002810:	b29b      	uxth	r3, r3
 8002812:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800281a:	2b01      	cmp	r3, #1
 800281c:	f040 80ca 	bne.w	80029b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002828:	441a      	add	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002836:	441a      	add	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d30b      	bcc.n	8002860 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	6a1a      	ldr	r2, [r3, #32]
 8002854:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002858:	1ad2      	subs	r2, r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	621a      	str	r2, [r3, #32]
 800285e:	e017      	b.n	8002890 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d108      	bne.n	800287a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002868:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800286c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002878:	e00a      	b.n	8002890 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	657b      	str	r3, [r7, #84]	@ 0x54
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	785b      	ldrb	r3, [r3, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d165      	bne.n	800296a <HAL_PCD_EP_DB_Transmit+0x750>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028b2:	4413      	add	r3, r2
 80028b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	011a      	lsls	r2, r3, #4
 80028bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028be:	4413      	add	r3, r2
 80028c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028d4:	801a      	strh	r2, [r3, #0]
 80028d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028da:	2b3e      	cmp	r3, #62	@ 0x3e
 80028dc:	d91d      	bls.n	800291a <HAL_PCD_EP_DB_Transmit+0x700>
 80028de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <HAL_PCD_EP_DB_Transmit+0x6de>
 80028f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028f4:	3b01      	subs	r3, #1
 80028f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002900:	b29b      	uxth	r3, r3
 8002902:	029b      	lsls	r3, r3, #10
 8002904:	b29b      	uxth	r3, r3
 8002906:	4313      	orrs	r3, r2
 8002908:	b29b      	uxth	r3, r3
 800290a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800290e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002912:	b29a      	uxth	r2, r3
 8002914:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002916:	801a      	strh	r2, [r3, #0]
 8002918:	e041      	b.n	800299e <HAL_PCD_EP_DB_Transmit+0x784>
 800291a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002922:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	b29b      	uxth	r3, r3
 8002928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800292c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002930:	b29a      	uxth	r2, r3
 8002932:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	e032      	b.n	800299e <HAL_PCD_EP_DB_Transmit+0x784>
 8002938:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002940:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_PCD_EP_DB_Transmit+0x738>
 800294c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800294e:	3301      	adds	r3, #1
 8002950:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002952:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29a      	uxth	r2, r3
 8002958:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800295a:	b29b      	uxth	r3, r3
 800295c:	029b      	lsls	r3, r3, #10
 800295e:	b29b      	uxth	r3, r3
 8002960:	4313      	orrs	r3, r2
 8002962:	b29a      	uxth	r2, r3
 8002964:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002966:	801a      	strh	r2, [r3, #0]
 8002968:	e019      	b.n	800299e <HAL_PCD_EP_DB_Transmit+0x784>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	785b      	ldrb	r3, [r3, #1]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d115      	bne.n	800299e <HAL_PCD_EP_DB_Transmit+0x784>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800297a:	b29b      	uxth	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002980:	4413      	add	r3, r2
 8002982:	657b      	str	r3, [r7, #84]	@ 0x54
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	011a      	lsls	r2, r3, #4
 800298a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800298c:	4413      	add	r3, r2
 800298e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002992:	653b      	str	r3, [r7, #80]	@ 0x50
 8002994:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002998:	b29a      	uxth	r2, r3
 800299a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800299c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	6959      	ldr	r1, [r3, #20]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	895a      	ldrh	r2, [r3, #10]
 80029aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f003 fa25 	bl	8005dfe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029ce:	82bb      	strh	r3, [r7, #20]
 80029d0:	8abb      	ldrh	r3, [r7, #20]
 80029d2:	f083 0310 	eor.w	r3, r3, #16
 80029d6:	82bb      	strh	r3, [r7, #20]
 80029d8:	8abb      	ldrh	r3, [r7, #20]
 80029da:	f083 0320 	eor.w	r3, r3, #32
 80029de:	82bb      	strh	r3, [r7, #20]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	441a      	add	r2, r3
 80029ee:	8abb      	ldrh	r3, [r7, #20]
 80029f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3790      	adds	r7, #144	@ 0x90
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b087      	sub	sp, #28
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	817b      	strh	r3, [r7, #10]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a20:	897b      	ldrh	r3, [r7, #10]
 8002a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00b      	beq.n	8002a44 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2c:	897b      	ldrh	r3, [r7, #10]
 8002a2e:	f003 0207 	and.w	r2, r3, #7
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	3310      	adds	r3, #16
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4413      	add	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	e009      	b.n	8002a58 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a44:	897a      	ldrh	r2, [r7, #10]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4413      	add	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a58:	893b      	ldrh	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2200      	movs	r2, #0
 8002a62:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	80da      	strh	r2, [r3, #6]
 8002a6c:	e00b      	b.n	8002a86 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2201      	movs	r2, #1
 8002a72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	0c1b      	lsrs	r3, r3, #16
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002a98:	4b03      	ldr	r3, [pc, #12]	@ (8002aa8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	420e0020 	.word	0x420e0020

08002aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e272      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8087 	beq.w	8002bda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002acc:	4b92      	ldr	r3, [pc, #584]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d00c      	beq.n	8002af2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ad8:	4b8f      	ldr	r3, [pc, #572]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d112      	bne.n	8002b0a <HAL_RCC_OscConfig+0x5e>
 8002ae4:	4b8c      	ldr	r3, [pc, #560]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af0:	d10b      	bne.n	8002b0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af2:	4b89      	ldr	r3, [pc, #548]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d06c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x12c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d168      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e24c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b12:	d106      	bne.n	8002b22 <HAL_RCC_OscConfig+0x76>
 8002b14:	4b80      	ldr	r3, [pc, #512]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a7f      	ldr	r2, [pc, #508]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	e02e      	b.n	8002b80 <HAL_RCC_OscConfig+0xd4>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x98>
 8002b2a:	4b7b      	ldr	r3, [pc, #492]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a7a      	ldr	r2, [pc, #488]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b78      	ldr	r3, [pc, #480]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a77      	ldr	r2, [pc, #476]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e01d      	b.n	8002b80 <HAL_RCC_OscConfig+0xd4>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0xbc>
 8002b4e:	4b72      	ldr	r3, [pc, #456]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a71      	ldr	r2, [pc, #452]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b6f      	ldr	r3, [pc, #444]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6e      	ldr	r2, [pc, #440]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0xd4>
 8002b68:	4b6b      	ldr	r3, [pc, #428]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a6a      	ldr	r2, [pc, #424]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b68      	ldr	r3, [pc, #416]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a67      	ldr	r2, [pc, #412]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d013      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fd ff32 	bl	80009f0 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b90:	f7fd ff2e 	bl	80009f0 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	@ 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e200      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0xe4>
 8002bae:	e014      	b.n	8002bda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fd ff1e 	bl	80009f0 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fd ff1a 	bl	80009f0 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	@ 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e1ec      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bca:	4b53      	ldr	r3, [pc, #332]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x10c>
 8002bd6:	e000      	b.n	8002bda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d063      	beq.n	8002cae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002be6:	4b4c      	ldr	r3, [pc, #304]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bf2:	4b49      	ldr	r3, [pc, #292]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d11c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x18c>
 8002bfe:	4b46      	ldr	r3, [pc, #280]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d116      	bne.n	8002c38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0a:	4b43      	ldr	r3, [pc, #268]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <HAL_RCC_OscConfig+0x176>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e1c0      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c22:	4b3d      	ldr	r3, [pc, #244]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4939      	ldr	r1, [pc, #228]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c36:	e03a      	b.n	8002cae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d020      	beq.n	8002c82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c40:	4b36      	ldr	r3, [pc, #216]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c46:	f7fd fed3 	bl	80009f0 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7fd fecf 	bl	80009f0 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e1a1      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	4b2d      	ldr	r3, [pc, #180]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4927      	ldr	r1, [pc, #156]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]
 8002c80:	e015      	b.n	8002cae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c82:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fd feb2 	bl	80009f0 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fd feae 	bl	80009f0 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e180      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d03a      	beq.n	8002d30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d019      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc2:	4b17      	ldr	r3, [pc, #92]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc8:	f7fd fe92 	bl	80009f0 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd0:	f7fd fe8e 	bl	80009f0 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e160      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cee:	2001      	movs	r0, #1
 8002cf0:	f000 faba 	bl	8003268 <RCC_Delay>
 8002cf4:	e01c      	b.n	8002d30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfc:	f7fd fe78 	bl	80009f0 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d02:	e00f      	b.n	8002d24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d04:	f7fd fe74 	bl	80009f0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d908      	bls.n	8002d24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e146      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	42420000 	.word	0x42420000
 8002d20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b92      	ldr	r3, [pc, #584]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e9      	bne.n	8002d04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80a6 	beq.w	8002e8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b8b      	ldr	r3, [pc, #556]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10d      	bne.n	8002d6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	4b88      	ldr	r3, [pc, #544]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a87      	ldr	r2, [pc, #540]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d58:	61d3      	str	r3, [r2, #28]
 8002d5a:	4b85      	ldr	r3, [pc, #532]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b82      	ldr	r3, [pc, #520]	@ (8002f74 <HAL_RCC_OscConfig+0x4c8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d118      	bne.n	8002da8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d76:	4b7f      	ldr	r3, [pc, #508]	@ (8002f74 <HAL_RCC_OscConfig+0x4c8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f74 <HAL_RCC_OscConfig+0x4c8>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d82:	f7fd fe35 	bl	80009f0 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8a:	f7fd fe31 	bl	80009f0 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b64      	cmp	r3, #100	@ 0x64
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e103      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	4b75      	ldr	r3, [pc, #468]	@ (8002f74 <HAL_RCC_OscConfig+0x4c8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d106      	bne.n	8002dbe <HAL_RCC_OscConfig+0x312>
 8002db0:	4b6f      	ldr	r3, [pc, #444]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4a6e      	ldr	r2, [pc, #440]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6213      	str	r3, [r2, #32]
 8002dbc:	e02d      	b.n	8002e1a <HAL_RCC_OscConfig+0x36e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x334>
 8002dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a69      	ldr	r2, [pc, #420]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6213      	str	r3, [r2, #32]
 8002dd2:	4b67      	ldr	r3, [pc, #412]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a66      	ldr	r2, [pc, #408]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	6213      	str	r3, [r2, #32]
 8002dde:	e01c      	b.n	8002e1a <HAL_RCC_OscConfig+0x36e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d10c      	bne.n	8002e02 <HAL_RCC_OscConfig+0x356>
 8002de8:	4b61      	ldr	r3, [pc, #388]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4a60      	ldr	r2, [pc, #384]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	6213      	str	r3, [r2, #32]
 8002df4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4a5d      	ldr	r2, [pc, #372]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6213      	str	r3, [r2, #32]
 8002e00:	e00b      	b.n	8002e1a <HAL_RCC_OscConfig+0x36e>
 8002e02:	4b5b      	ldr	r3, [pc, #364]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4a5a      	ldr	r2, [pc, #360]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6213      	str	r3, [r2, #32]
 8002e0e:	4b58      	ldr	r3, [pc, #352]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a57      	ldr	r2, [pc, #348]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d015      	beq.n	8002e4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e22:	f7fd fde5 	bl	80009f0 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fd fde1 	bl	80009f0 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0b1      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	4b4b      	ldr	r3, [pc, #300]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ee      	beq.n	8002e2a <HAL_RCC_OscConfig+0x37e>
 8002e4c:	e014      	b.n	8002e78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4e:	f7fd fdcf 	bl	80009f0 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7fd fdcb 	bl	80009f0 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e09b      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6c:	4b40      	ldr	r3, [pc, #256]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ee      	bne.n	8002e56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	4a3b      	ldr	r2, [pc, #236]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8087 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e94:	4b36      	ldr	r3, [pc, #216]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d061      	beq.n	8002f64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d146      	bne.n	8002f36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea8:	4b33      	ldr	r3, [pc, #204]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fd fd9f 	bl	80009f0 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fd fd9b 	bl	80009f0 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e06d      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec8:	4b29      	ldr	r3, [pc, #164]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f0      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002edc:	d108      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ede:	4b24      	ldr	r3, [pc, #144]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	4921      	ldr	r1, [pc, #132]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a19      	ldr	r1, [r3, #32]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	430b      	orrs	r3, r1
 8002f02:	491b      	ldr	r1, [pc, #108]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f08:	4b1b      	ldr	r3, [pc, #108]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fd fd6f 	bl	80009f0 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fd fd6b 	bl	80009f0 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e03d      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f28:	4b11      	ldr	r3, [pc, #68]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x46a>
 8002f34:	e035      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f36:	4b10      	ldr	r3, [pc, #64]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fd fd58 	bl	80009f0 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fd fd54 	bl	80009f0 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e026      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f56:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x498>
 8002f62:	e01e      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e019      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40007000 	.word	0x40007000
 8002f78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <HAL_RCC_OscConfig+0x500>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d106      	bne.n	8002f9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000

08002fb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0d0      	b.n	8003166 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d910      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b67      	ldr	r3, [pc, #412]	@ (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 0207 	bic.w	r2, r3, #7
 8002fda:	4965      	ldr	r1, [pc, #404]	@ (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b63      	ldr	r3, [pc, #396]	@ (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0b8      	b.n	8003166 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d020      	beq.n	8003042 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800300c:	4b59      	ldr	r3, [pc, #356]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a58      	ldr	r2, [pc, #352]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003016:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003024:	4b53      	ldr	r3, [pc, #332]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a52      	ldr	r2, [pc, #328]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800302e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003030:	4b50      	ldr	r3, [pc, #320]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	494d      	ldr	r1, [pc, #308]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d040      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b47      	ldr	r3, [pc, #284]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d115      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e07f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306e:	4b41      	ldr	r3, [pc, #260]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e073      	b.n	8003166 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307e:	4b3d      	ldr	r3, [pc, #244]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e06b      	b.n	8003166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800308e:	4b39      	ldr	r3, [pc, #228]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f023 0203 	bic.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4936      	ldr	r1, [pc, #216]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	4313      	orrs	r3, r2
 800309e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a0:	f7fd fca6 	bl	80009f0 <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	e00a      	b.n	80030be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a8:	f7fd fca2 	bl	80009f0 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e053      	b.n	8003166 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	4b2d      	ldr	r3, [pc, #180]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 020c 	and.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1eb      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030d0:	4b27      	ldr	r3, [pc, #156]	@ (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d210      	bcs.n	8003100 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b24      	ldr	r3, [pc, #144]	@ (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 0207 	bic.w	r2, r3, #7
 80030e6:	4922      	ldr	r1, [pc, #136]	@ (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b20      	ldr	r3, [pc, #128]	@ (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e032      	b.n	8003166 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800310c:	4b19      	ldr	r3, [pc, #100]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4916      	ldr	r1, [pc, #88]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800312a:	4b12      	ldr	r3, [pc, #72]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	490e      	ldr	r1, [pc, #56]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800313e:	f000 f821 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8003142:	4602      	mov	r2, r0
 8003144:	4b0b      	ldr	r3, [pc, #44]	@ (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	490a      	ldr	r1, [pc, #40]	@ (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003150:	5ccb      	ldrb	r3, [r1, r3]
 8003152:	fa22 f303 	lsr.w	r3, r2, r3
 8003156:	4a09      	ldr	r2, [pc, #36]	@ (800317c <HAL_RCC_ClockConfig+0x1cc>)
 8003158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800315a:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <HAL_RCC_ClockConfig+0x1d0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd fc04 	bl	800096c <HAL_InitTick>

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40022000 	.word	0x40022000
 8003174:	40021000 	.word	0x40021000
 8003178:	08008b98 	.word	0x08008b98
 800317c:	20000000 	.word	0x20000000
 8003180:	2000000c 	.word	0x2000000c

08003184 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	2300      	movs	r3, #0
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	2300      	movs	r3, #0
 8003198:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800319e:	4b1e      	ldr	r3, [pc, #120]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x94>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d002      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x30>
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d003      	beq.n	80031ba <HAL_RCC_GetSysClockFreq+0x36>
 80031b2:	e027      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031b4:	4b19      	ldr	r3, [pc, #100]	@ (800321c <HAL_RCC_GetSysClockFreq+0x98>)
 80031b6:	613b      	str	r3, [r7, #16]
      break;
 80031b8:	e027      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	0c9b      	lsrs	r3, r3, #18
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	4a17      	ldr	r2, [pc, #92]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031c4:	5cd3      	ldrb	r3, [r2, r3]
 80031c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d010      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031d2:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x94>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	0c5b      	lsrs	r3, r3, #17
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	4a11      	ldr	r2, [pc, #68]	@ (8003224 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031de:	5cd3      	ldrb	r3, [r2, r3]
 80031e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a0d      	ldr	r2, [pc, #52]	@ (800321c <HAL_RCC_GetSysClockFreq+0x98>)
 80031e6:	fb03 f202 	mul.w	r2, r3, r2
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	e004      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003228 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031f8:	fb02 f303 	mul.w	r3, r2, r3
 80031fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	613b      	str	r3, [r7, #16]
      break;
 8003202:	e002      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003204:	4b05      	ldr	r3, [pc, #20]	@ (800321c <HAL_RCC_GetSysClockFreq+0x98>)
 8003206:	613b      	str	r3, [r7, #16]
      break;
 8003208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800320a:	693b      	ldr	r3, [r7, #16]
}
 800320c:	4618      	mov	r0, r3
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	007a1200 	.word	0x007a1200
 8003220:	08008bb0 	.word	0x08008bb0
 8003224:	08008bc0 	.word	0x08008bc0
 8003228:	003d0900 	.word	0x003d0900

0800322c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003230:	4b02      	ldr	r3, [pc, #8]	@ (800323c <HAL_RCC_GetHCLKFreq+0x10>)
 8003232:	681b      	ldr	r3, [r3, #0]
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	20000000 	.word	0x20000000

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003244:	f7ff fff2 	bl	800322c <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	0adb      	lsrs	r3, r3, #11
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4903      	ldr	r1, [pc, #12]	@ (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	08008ba8 	.word	0x08008ba8

08003268 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003270:	4b0a      	ldr	r3, [pc, #40]	@ (800329c <RCC_Delay+0x34>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0a      	ldr	r2, [pc, #40]	@ (80032a0 <RCC_Delay+0x38>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0a5b      	lsrs	r3, r3, #9
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003284:	bf00      	nop
  }
  while (Delay --);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	60fa      	str	r2, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f9      	bne.n	8003284 <RCC_Delay+0x1c>
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	20000000 	.word	0x20000000
 80032a0:	10624dd3 	.word	0x10624dd3

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d07d      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032c0:	2300      	movs	r3, #0
 80032c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032da:	61d3      	str	r3, [r2, #28]
 80032dc:	4b49      	ldr	r3, [pc, #292]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e8:	2301      	movs	r3, #1
 80032ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	4b46      	ldr	r3, [pc, #280]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d118      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f8:	4b43      	ldr	r3, [pc, #268]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a42      	ldr	r2, [pc, #264]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003302:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003304:	f7fd fb74 	bl	80009f0 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330a:	e008      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330c:	f7fd fb70 	bl	80009f0 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	@ 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e06d      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b3a      	ldr	r3, [pc, #232]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800332a:	4b36      	ldr	r3, [pc, #216]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003332:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d02e      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	429a      	cmp	r2, r3
 8003346:	d027      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003348:	4b2e      	ldr	r3, [pc, #184]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003350:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003352:	4b2e      	ldr	r3, [pc, #184]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003358:	4b2c      	ldr	r3, [pc, #176]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800335e:	4a29      	ldr	r2, [pc, #164]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d014      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336e:	f7fd fb3f 	bl	80009f0 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fd fb3b 	bl	80009f0 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e036      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338c:	4b1d      	ldr	r3, [pc, #116]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ee      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003398:	4b1a      	ldr	r3, [pc, #104]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4917      	ldr	r1, [pc, #92]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d105      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b0:	4b14      	ldr	r3, [pc, #80]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	4a13      	ldr	r2, [pc, #76]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	490b      	ldr	r1, [pc, #44]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e6:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	4904      	ldr	r1, [pc, #16]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
 800340c:	42420440 	.word	0x42420440

08003410 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b10      	cmp	r3, #16
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b10      	cmp	r3, #16
 8003436:	f200 808a 	bhi.w	800354e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d045      	beq.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d075      	beq.n	8003532 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003446:	e082      	b.n	800354e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003448:	4b46      	ldr	r3, [pc, #280]	@ (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800344e:	4b45      	ldr	r3, [pc, #276]	@ (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d07b      	beq.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	0c9b      	lsrs	r3, r3, #18
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	4a41      	ldr	r2, [pc, #260]	@ (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003464:	5cd3      	ldrb	r3, [r2, r3]
 8003466:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d015      	beq.n	800349e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003472:	4b3c      	ldr	r3, [pc, #240]	@ (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	0c5b      	lsrs	r3, r3, #17
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	4a3b      	ldr	r2, [pc, #236]	@ (800356c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800348c:	4a38      	ldr	r2, [pc, #224]	@ (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	fbb2 f2f3 	udiv	r2, r2, r3
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	e004      	b.n	80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4a34      	ldr	r2, [pc, #208]	@ (8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80034a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034b4:	d102      	bne.n	80034bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	61bb      	str	r3, [r7, #24]
      break;
 80034ba:	e04a      	b.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	085b      	lsrs	r3, r3, #1
 80034c8:	61bb      	str	r3, [r7, #24]
      break;
 80034ca:	e042      	b.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80034cc:	4b25      	ldr	r3, [pc, #148]	@ (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034dc:	d108      	bne.n	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80034e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	e01f      	b.n	8003530 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034fa:	d109      	bne.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80034fc:	4b19      	ldr	r3, [pc, #100]	@ (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003508:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	e00f      	b.n	8003530 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003516:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800351a:	d11c      	bne.n	8003556 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800351c:	4b11      	ldr	r3, [pc, #68]	@ (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d016      	beq.n	8003556 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003528:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800352c:	61bb      	str	r3, [r7, #24]
      break;
 800352e:	e012      	b.n	8003556 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003530:	e011      	b.n	8003556 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003532:	f7ff fe85 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8003536:	4602      	mov	r2, r0
 8003538:	4b0a      	ldr	r3, [pc, #40]	@ (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	0b9b      	lsrs	r3, r3, #14
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	3301      	adds	r3, #1
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	61bb      	str	r3, [r7, #24]
      break;
 800354c:	e004      	b.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800354e:	bf00      	nop
 8003550:	e002      	b.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003556:	bf00      	nop
    }
  }
  return (frequency);
 8003558:	69bb      	ldr	r3, [r7, #24]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3720      	adds	r7, #32
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	08008bc4 	.word	0x08008bc4
 800356c:	08008bd4 	.word	0x08008bd4
 8003570:	007a1200 	.word	0x007a1200
 8003574:	003d0900 	.word	0x003d0900
 8003578:	aaaaaaab 	.word	0xaaaaaaab

0800357c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07a      	b.n	8003688 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	7c5b      	ldrb	r3, [r3, #17]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd f8a2 	bl	80006ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f870 	bl	8003694 <HAL_RTC_WaitForSynchro>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2204      	movs	r2, #4
 80035be:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e061      	b.n	8003688 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f892 	bl	80036ee <RTC_EnterInitMode>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d004      	beq.n	80035da <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2204      	movs	r2, #4
 80035d4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e056      	b.n	8003688 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0207 	bic.w	r2, r2, #7
 80035e8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80035f2:	4b27      	ldr	r3, [pc, #156]	@ (8003690 <HAL_RTC_Init+0x114>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f6:	4a26      	ldr	r2, [pc, #152]	@ (8003690 <HAL_RTC_Init+0x114>)
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80035fe:	4b24      	ldr	r3, [pc, #144]	@ (8003690 <HAL_RTC_Init+0x114>)
 8003600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003602:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	4921      	ldr	r1, [pc, #132]	@ (8003690 <HAL_RTC_Init+0x114>)
 800360c:	4313      	orrs	r3, r2
 800360e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d003      	beq.n	8003622 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	e00e      	b.n	8003640 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003622:	2001      	movs	r0, #1
 8003624:	f7ff fef4 	bl	8003410 <HAL_RCCEx_GetPeriphCLKFreq>
 8003628:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d104      	bne.n	800363a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2204      	movs	r2, #4
 8003634:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e026      	b.n	8003688 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	3b01      	subs	r3, #1
 800363e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	0c1a      	lsrs	r2, r3, #16
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f002 020f 	and.w	r2, r2, #15
 800364c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	b292      	uxth	r2, r2
 8003656:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f870 	bl	800373e <RTC_ExitInitMode>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d004      	beq.n	800366e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2204      	movs	r2, #4
 8003668:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e00c      	b.n	8003688 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003686:	2300      	movs	r3, #0
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40006c00 	.word	0x40006c00

08003694 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e01d      	b.n	80036e6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0208 	bic.w	r2, r2, #8
 80036b8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80036ba:	f7fd f999 	bl	80009f0 <HAL_GetTick>
 80036be:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80036c0:	e009      	b.n	80036d6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80036c2:	f7fd f995 	bl	80009f0 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036d0:	d901      	bls.n	80036d6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e007      	b.n	80036e6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ee      	beq.n	80036c2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80036fa:	f7fd f979 	bl	80009f0 <HAL_GetTick>
 80036fe:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003700:	e009      	b.n	8003716 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003702:	f7fd f975 	bl	80009f0 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003710:	d901      	bls.n	8003716 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e00f      	b.n	8003736 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ee      	beq.n	8003702 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0210 	orr.w	r2, r2, #16
 8003732:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0210 	bic.w	r2, r2, #16
 8003758:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800375a:	f7fd f949 	bl	80009f0 <HAL_GetTick>
 800375e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003760:	e009      	b.n	8003776 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003762:	f7fd f945 	bl	80009f0 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003770:	d901      	bls.n	8003776 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e007      	b.n	8003786 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ee      	beq.n	8003762 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 80037a0:	4b07      	ldr	r3, [pc, #28]	@ (80037c0 <HAL_RTCEx_BKUPWrite+0x30>)
 80037a2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4413      	add	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	b292      	uxth	r2, r2
 80037b4:	601a      	str	r2, [r3, #0]
}
 80037b6:	bf00      	nop
 80037b8:	371c      	adds	r7, #28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	40006c00 	.word	0x40006c00

080037c4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 80037d6:	4b08      	ldr	r3, [pc, #32]	@ (80037f8 <HAL_RTCEx_BKUPRead+0x34>)
 80037d8:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4413      	add	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80037ec:	68bb      	ldr	r3, [r7, #8]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40006c00 	.word	0x40006c00

080037fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	4638      	mov	r0, r7
 8003806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003826:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800382a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003842:	b480      	push	{r7}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800384a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800384e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	b29b      	uxth	r3, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	b29b      	uxth	r3, r3
 8003860:	4013      	ands	r3, r2
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	4638      	mov	r0, r7
 8003898:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b09d      	sub	sp, #116	@ 0x74
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80038ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ee:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	78db      	ldrb	r3, [r3, #3]
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d81f      	bhi.n	800393a <USB_ActivateEndpoint+0x72>
 80038fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003900 <USB_ActivateEndpoint+0x38>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	08003911 	.word	0x08003911
 8003904:	0800392d 	.word	0x0800392d
 8003908:	08003943 	.word	0x08003943
 800390c:	0800391f 	.word	0x0800391f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003910:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003914:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003918:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800391c:	e012      	b.n	8003944 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800391e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003922:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003926:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800392a:	e00b      	b.n	8003944 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800392c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003930:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003934:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003938:	e004      	b.n	8003944 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003940:	e000      	b.n	8003944 <USB_ActivateEndpoint+0x7c>
      break;
 8003942:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	441a      	add	r2, r3
 800394e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003952:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003956:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800395a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800395e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003962:	b29b      	uxth	r3, r3
 8003964:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	b29b      	uxth	r3, r3
 8003974:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800397c:	b29b      	uxth	r3, r3
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	7812      	ldrb	r2, [r2, #0]
 8003982:	4313      	orrs	r3, r2
 8003984:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	441a      	add	r2, r3
 8003992:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800399a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800399e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	7b1b      	ldrb	r3, [r3, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f040 8178 	bne.w	8003ca4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8084 	beq.w	8003ac6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	4413      	add	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	011a      	lsls	r2, r3, #4
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	88db      	ldrh	r3, [r3, #6]
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	827b      	strh	r3, [r7, #18]
 8003a00:	8a7b      	ldrh	r3, [r7, #18]
 8003a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d01b      	beq.n	8003a42 <USB_ActivateEndpoint+0x17a>
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a20:	823b      	strh	r3, [r7, #16]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	441a      	add	r2, r3
 8003a2c:	8a3b      	ldrh	r3, [r7, #16]
 8003a2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	78db      	ldrb	r3, [r3, #3]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d020      	beq.n	8003a8c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a60:	81bb      	strh	r3, [r7, #12]
 8003a62:	89bb      	ldrh	r3, [r7, #12]
 8003a64:	f083 0320 	eor.w	r3, r3, #32
 8003a68:	81bb      	strh	r3, [r7, #12]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	441a      	add	r2, r3
 8003a74:	89bb      	ldrh	r3, [r7, #12]
 8003a76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	8013      	strh	r3, [r2, #0]
 8003a8a:	e2d5      	b.n	8004038 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aa2:	81fb      	strh	r3, [r7, #14]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	441a      	add	r2, r3
 8003aae:	89fb      	ldrh	r3, [r7, #14]
 8003ab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ab8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	8013      	strh	r3, [r2, #0]
 8003ac4:	e2b8      	b.n	8004038 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad6:	4413      	add	r3, r2
 8003ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	011a      	lsls	r2, r3, #4
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	88db      	ldrh	r3, [r3, #6]
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	461a      	mov	r2, r3
 8003b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0a:	4413      	add	r3, r2
 8003b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	011a      	lsls	r2, r3, #4
 8003b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b16:	4413      	add	r3, r2
 8003b18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b34:	d91d      	bls.n	8003b72 <USB_ActivateEndpoint+0x2aa>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d102      	bne.n	8003b50 <USB_ActivateEndpoint+0x288>
 8003b4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	029b      	lsls	r3, r3, #10
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	801a      	strh	r2, [r3, #0]
 8003b70:	e026      	b.n	8003bc0 <USB_ActivateEndpoint+0x2f8>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <USB_ActivateEndpoint+0x2c8>
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	801a      	strh	r2, [r3, #0]
 8003b8e:	e017      	b.n	8003bc0 <USB_ActivateEndpoint+0x2f8>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	085b      	lsrs	r3, r3, #1
 8003b96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <USB_ActivateEndpoint+0x2e2>
 8003ba4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	029b      	lsls	r3, r3, #10
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003bce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003bd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01b      	beq.n	8003c10 <USB_ActivateEndpoint+0x348>
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bee:	843b      	strh	r3, [r7, #32]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	441a      	add	r2, r3
 8003bfa:	8c3b      	ldrh	r3, [r7, #32]
 8003bfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d124      	bne.n	8003c62 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2e:	83bb      	strh	r3, [r7, #28]
 8003c30:	8bbb      	ldrh	r3, [r7, #28]
 8003c32:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003c36:	83bb      	strh	r3, [r7, #28]
 8003c38:	8bbb      	ldrh	r3, [r7, #28]
 8003c3a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c3e:	83bb      	strh	r3, [r7, #28]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	441a      	add	r2, r3
 8003c4a:	8bbb      	ldrh	r3, [r7, #28]
 8003c4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	8013      	strh	r3, [r2, #0]
 8003c60:	e1ea      	b.n	8004038 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c78:	83fb      	strh	r3, [r7, #30]
 8003c7a:	8bfb      	ldrh	r3, [r7, #30]
 8003c7c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c80:	83fb      	strh	r3, [r7, #30]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	441a      	add	r2, r3
 8003c8c:	8bfb      	ldrh	r3, [r7, #30]
 8003c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	8013      	strh	r3, [r2, #0]
 8003ca2:	e1c9      	b.n	8004038 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	78db      	ldrb	r3, [r3, #3]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d11e      	bne.n	8003cea <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	441a      	add	r2, r3
 8003cd0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003cd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cdc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	8013      	strh	r3, [r2, #0]
 8003ce8:	e01d      	b.n	8003d26 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d00:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	441a      	add	r2, r3
 8003d0e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003d12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d36:	4413      	add	r3, r2
 8003d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	011a      	lsls	r2, r3, #4
 8003d40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	891b      	ldrh	r3, [r3, #8]
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d58:	801a      	strh	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d6a:	4413      	add	r3, r2
 8003d6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	011a      	lsls	r2, r3, #4
 8003d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003d7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	895b      	ldrh	r3, [r3, #10]
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d8c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	785b      	ldrb	r3, [r3, #1]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f040 8093 	bne.w	8003ebe <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003da8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003dac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01b      	beq.n	8003dec <USB_ActivateEndpoint+0x524>
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003de0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003dfa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01b      	beq.n	8003e3c <USB_ActivateEndpoint+0x574>
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e1a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	441a      	add	r2, r3
 8003e26:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e52:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003e54:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003e56:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003e5a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003e5c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003e5e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e62:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	441a      	add	r2, r3
 8003e6e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e9a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	441a      	add	r2, r3
 8003ea6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ea8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003eac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	8013      	strh	r3, [r2, #0]
 8003ebc:	e0bc      	b.n	8004038 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003ece:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d01d      	beq.n	8003f16 <USB_ActivateEndpoint+0x64e>
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ef0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	441a      	add	r2, r3
 8003efe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003f02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003f26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01d      	beq.n	8003f6e <USB_ActivateEndpoint+0x6a6>
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f48:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	441a      	add	r2, r3
 8003f56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003f5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	78db      	ldrb	r3, [r3, #3]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d024      	beq.n	8003fc0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f8c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003f90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003f94:	f083 0320 	eor.w	r3, r3, #32
 8003f98:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	441a      	add	r2, r3
 8003fa6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	8013      	strh	r3, [r2, #0]
 8003fbe:	e01d      	b.n	8003ffc <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fd6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	441a      	add	r2, r3
 8003fe4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003fe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800400e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004012:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	441a      	add	r2, r3
 8004020:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004024:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004028:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800402c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004034:	b29b      	uxth	r3, r3
 8004036:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004038:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800403c:	4618      	mov	r0, r3
 800403e:	3774      	adds	r7, #116	@ 0x74
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop

08004048 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004048:	b480      	push	{r7}
 800404a:	b08d      	sub	sp, #52	@ 0x34
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	7b1b      	ldrb	r3, [r3, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f040 808e 	bne.w	8004178 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	785b      	ldrb	r3, [r3, #1]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d044      	beq.n	80040ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	81bb      	strh	r3, [r7, #12]
 8004072:	89bb      	ldrh	r3, [r7, #12]
 8004074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01b      	beq.n	80040b4 <USB_DeactivateEndpoint+0x6c>
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	b29b      	uxth	r3, r3
 800408a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800408e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004092:	817b      	strh	r3, [r7, #10]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	441a      	add	r2, r3
 800409e:	897b      	ldrh	r3, [r7, #10]
 80040a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040ca:	813b      	strh	r3, [r7, #8]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	441a      	add	r2, r3
 80040d6:	893b      	ldrh	r3, [r7, #8]
 80040d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	8013      	strh	r3, [r2, #0]
 80040ec:	e192      	b.n	8004414 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	827b      	strh	r3, [r7, #18]
 80040fc:	8a7b      	ldrh	r3, [r7, #18]
 80040fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01b      	beq.n	800413e <USB_DeactivateEndpoint+0xf6>
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	b29b      	uxth	r3, r3
 8004114:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800411c:	823b      	strh	r3, [r7, #16]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	441a      	add	r2, r3
 8004128:	8a3b      	ldrh	r3, [r7, #16]
 800412a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800412e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004132:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800413a:	b29b      	uxth	r3, r3
 800413c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004154:	81fb      	strh	r3, [r7, #14]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	441a      	add	r2, r3
 8004160:	89fb      	ldrh	r3, [r7, #14]
 8004162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800416a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800416e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004172:	b29b      	uxth	r3, r3
 8004174:	8013      	strh	r3, [r2, #0]
 8004176:	e14d      	b.n	8004414 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	785b      	ldrb	r3, [r3, #1]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f040 80a5 	bne.w	80042cc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	843b      	strh	r3, [r7, #32]
 8004190:	8c3b      	ldrh	r3, [r7, #32]
 8004192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d01b      	beq.n	80041d2 <USB_DeactivateEndpoint+0x18a>
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b0:	83fb      	strh	r3, [r7, #30]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	441a      	add	r2, r3
 80041bc:	8bfb      	ldrh	r3, [r7, #30]
 80041be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	83bb      	strh	r3, [r7, #28]
 80041e0:	8bbb      	ldrh	r3, [r7, #28]
 80041e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d01b      	beq.n	8004222 <USB_DeactivateEndpoint+0x1da>
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004200:	837b      	strh	r3, [r7, #26]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	441a      	add	r2, r3
 800420c:	8b7b      	ldrh	r3, [r7, #26]
 800420e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004212:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800421a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800421e:	b29b      	uxth	r3, r3
 8004220:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29b      	uxth	r3, r3
 8004230:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004238:	833b      	strh	r3, [r7, #24]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	441a      	add	r2, r3
 8004244:	8b3b      	ldrh	r3, [r7, #24]
 8004246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800424a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800424e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004252:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004256:	b29b      	uxth	r3, r3
 8004258:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800426c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004270:	82fb      	strh	r3, [r7, #22]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	441a      	add	r2, r3
 800427c:	8afb      	ldrh	r3, [r7, #22]
 800427e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004282:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800428a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800428e:	b29b      	uxth	r3, r3
 8004290:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042a8:	82bb      	strh	r3, [r7, #20]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	441a      	add	r2, r3
 80042b4:	8abb      	ldrh	r3, [r7, #20]
 80042b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	8013      	strh	r3, [r2, #0]
 80042ca:	e0a3      	b.n	8004414 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80042da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80042dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01b      	beq.n	800431c <USB_DeactivateEndpoint+0x2d4>
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042fa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	441a      	add	r2, r3
 8004306:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004308:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800430c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004310:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004318:	b29b      	uxth	r3, r3
 800431a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800432a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800432c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01b      	beq.n	800436c <USB_DeactivateEndpoint+0x324>
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800434a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	441a      	add	r2, r3
 8004356:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004358:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800435c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004364:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004368:	b29b      	uxth	r3, r3
 800436a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800437e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004382:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	441a      	add	r2, r3
 800438e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004398:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800439c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	441a      	add	r2, r3
 80043c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80043c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043d8:	b29b      	uxth	r3, r3
 80043da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043f2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	441a      	add	r2, r3
 80043fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004400:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004404:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800440c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004410:	b29b      	uxth	r3, r3
 8004412:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3734      	adds	r7, #52	@ 0x34
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b0c2      	sub	sp, #264	@ 0x108
 8004424:	af00      	add	r7, sp, #0
 8004426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800442a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800442e:	6018      	str	r0, [r3, #0]
 8004430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004438:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800443a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800443e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	2b01      	cmp	r3, #1
 8004448:	f040 86b7 	bne.w	80051ba <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800444c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800445c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	429a      	cmp	r2, r3
 8004466:	d908      	bls.n	800447a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800446c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004478:	e007      	b.n	800448a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800447a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800447e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800448a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800448e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	7b1b      	ldrb	r3, [r3, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d13a      	bne.n	8004510 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800449a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800449e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6959      	ldr	r1, [r3, #20]
 80044a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	88da      	ldrh	r2, [r3, #6]
 80044b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80044bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80044c0:	6800      	ldr	r0, [r0, #0]
 80044c2:	f001 fc9c 	bl	8005dfe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80044c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4413      	add	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	011a      	lsls	r2, r3, #4
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4413      	add	r3, r2
 80044fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	f000 be1f 	b.w	800514e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	78db      	ldrb	r3, [r3, #3]
 800451c:	2b02      	cmp	r3, #2
 800451e:	f040 8462 	bne.w	8004de6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6a1a      	ldr	r2, [r3, #32]
 800452e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	429a      	cmp	r2, r3
 800453c:	f240 83df 	bls.w	8004cfe <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004544:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800454e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004566:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800456a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800456e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	441a      	add	r2, r3
 8004584:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800458c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004590:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004598:	b29b      	uxth	r3, r3
 800459a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800459c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a1a      	ldr	r2, [r3, #32]
 80045a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ac:	1ad2      	subs	r2, r2, r3
 80045ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80045ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 81c7 	beq.w	8004970 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	785b      	ldrb	r3, [r3, #1]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d177      	bne.n	80046ee <USB_EPStartXfer+0x2ce>
 80045fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800460a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800460e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004618:	b29b      	uxth	r3, r3
 800461a:	461a      	mov	r2, r3
 800461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461e:	4413      	add	r3, r2
 8004620:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	011a      	lsls	r2, r3, #4
 8004630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004632:	4413      	add	r3, r2
 8004634:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	b29b      	uxth	r3, r3
 8004640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004644:	b29a      	uxth	r2, r3
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	801a      	strh	r2, [r3, #0]
 800464a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800464e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004650:	d921      	bls.n	8004696 <USB_EPStartXfer+0x276>
 8004652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800465c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <USB_EPStartXfer+0x252>
 8004668:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800466c:	3b01      	subs	r3, #1
 800466e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29a      	uxth	r2, r3
 8004678:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800467c:	b29b      	uxth	r3, r3
 800467e:	029b      	lsls	r3, r3, #10
 8004680:	b29b      	uxth	r3, r3
 8004682:	4313      	orrs	r3, r2
 8004684:	b29b      	uxth	r3, r3
 8004686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800468a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800468e:	b29a      	uxth	r2, r3
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	801a      	strh	r2, [r3, #0]
 8004694:	e050      	b.n	8004738 <USB_EPStartXfer+0x318>
 8004696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <USB_EPStartXfer+0x294>
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	801a      	strh	r2, [r3, #0]
 80046b2:	e041      	b.n	8004738 <USB_EPStartXfer+0x318>
 80046b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80046be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d004      	beq.n	80046d4 <USB_EPStartXfer+0x2b4>
 80046ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80046ce:	3301      	adds	r3, #1
 80046d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29a      	uxth	r2, r3
 80046da:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80046de:	b29b      	uxth	r3, r3
 80046e0:	029b      	lsls	r3, r3, #10
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	4313      	orrs	r3, r2
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	801a      	strh	r2, [r3, #0]
 80046ec:	e024      	b.n	8004738 <USB_EPStartXfer+0x318>
 80046ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	785b      	ldrb	r3, [r3, #1]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d11c      	bne.n	8004738 <USB_EPStartXfer+0x318>
 80046fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004702:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800470c:	b29b      	uxth	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004712:	4413      	add	r3, r2
 8004714:	633b      	str	r3, [r7, #48]	@ 0x30
 8004716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800471a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	011a      	lsls	r2, r3, #4
 8004724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004726:	4413      	add	r3, r2
 8004728:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800472c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800472e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004732:	b29a      	uxth	r2, r3
 8004734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004736:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800473c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	895b      	ldrh	r3, [r3, #10]
 8004744:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800474c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6959      	ldr	r1, [r3, #20]
 8004754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004758:	b29b      	uxth	r3, r3
 800475a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800475e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004762:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004766:	6800      	ldr	r0, [r0, #0]
 8004768:	f001 fb49 	bl	8005dfe <USB_WritePMA>
            ep->xfer_buff += len;
 800476c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695a      	ldr	r2, [r3, #20]
 8004778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800477c:	441a      	add	r2, r3
 800477e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800478a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800478e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6a1a      	ldr	r2, [r3, #32]
 8004796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800479a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d90f      	bls.n	80047c6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80047a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6a1a      	ldr	r2, [r3, #32]
 80047b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b6:	1ad2      	subs	r2, r2, r3
 80047b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	621a      	str	r2, [r3, #32]
 80047c4:	e00e      	b.n	80047e4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80047c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80047d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2200      	movs	r2, #0
 80047e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d177      	bne.n	80048e4 <USB_EPStartXfer+0x4c4>
 80047f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004804:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800480e:	b29b      	uxth	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	4413      	add	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800481c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	011a      	lsls	r2, r3, #4
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	4413      	add	r3, r2
 800482a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800483a:	b29a      	uxth	r2, r3
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004844:	2b3e      	cmp	r3, #62	@ 0x3e
 8004846:	d921      	bls.n	800488c <USB_EPStartXfer+0x46c>
 8004848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004856:	f003 031f 	and.w	r3, r3, #31
 800485a:	2b00      	cmp	r3, #0
 800485c:	d104      	bne.n	8004868 <USB_EPStartXfer+0x448>
 800485e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004862:	3b01      	subs	r3, #1
 8004864:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29a      	uxth	r2, r3
 800486e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004872:	b29b      	uxth	r3, r3
 8004874:	029b      	lsls	r3, r3, #10
 8004876:	b29b      	uxth	r3, r3
 8004878:	4313      	orrs	r3, r2
 800487a:	b29b      	uxth	r3, r3
 800487c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004884:	b29a      	uxth	r2, r3
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	e056      	b.n	800493a <USB_EPStartXfer+0x51a>
 800488c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <USB_EPStartXfer+0x48a>
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	b29b      	uxth	r3, r3
 800489a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800489e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	801a      	strh	r2, [r3, #0]
 80048a8:	e047      	b.n	800493a <USB_EPStartXfer+0x51a>
 80048aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80048b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d004      	beq.n	80048ca <USB_EPStartXfer+0x4aa>
 80048c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048c4:	3301      	adds	r3, #1
 80048c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	029b      	lsls	r3, r3, #10
 80048d8:	b29b      	uxth	r3, r3
 80048da:	4313      	orrs	r3, r2
 80048dc:	b29a      	uxth	r2, r3
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	801a      	strh	r2, [r3, #0]
 80048e2:	e02a      	b.n	800493a <USB_EPStartXfer+0x51a>
 80048e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	785b      	ldrb	r3, [r3, #1]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d122      	bne.n	800493a <USB_EPStartXfer+0x51a>
 80048f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	623b      	str	r3, [r7, #32]
 8004900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004904:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800490e:	b29b      	uxth	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	4413      	add	r3, r2
 8004916:	623b      	str	r3, [r7, #32]
 8004918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800491c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	011a      	lsls	r2, r3, #4
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	4413      	add	r3, r2
 800492a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004934:	b29a      	uxth	r2, r3
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800493a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800493e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	891b      	ldrh	r3, [r3, #8]
 8004946:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800494a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800494e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6959      	ldr	r1, [r3, #20]
 8004956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800495a:	b29b      	uxth	r3, r3
 800495c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004960:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004964:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004968:	6800      	ldr	r0, [r0, #0]
 800496a:	f001 fa48 	bl	8005dfe <USB_WritePMA>
 800496e:	e3ee      	b.n	800514e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	785b      	ldrb	r3, [r3, #1]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d177      	bne.n	8004a70 <USB_EPStartXfer+0x650>
 8004980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004984:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800498c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004990:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800499a:	b29b      	uxth	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049a0:	4413      	add	r3, r2
 80049a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	011a      	lsls	r2, r3, #4
 80049b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049b4:	4413      	add	r3, r2
 80049b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80049ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80049bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80049d2:	d921      	bls.n	8004a18 <USB_EPStartXfer+0x5f8>
 80049d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80049de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d104      	bne.n	80049f4 <USB_EPStartXfer+0x5d4>
 80049ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049ee:	3b01      	subs	r3, #1
 80049f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80049f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	029b      	lsls	r3, r3, #10
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	4313      	orrs	r3, r2
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a14:	801a      	strh	r2, [r3, #0]
 8004a16:	e056      	b.n	8004ac6 <USB_EPStartXfer+0x6a6>
 8004a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10a      	bne.n	8004a36 <USB_EPStartXfer+0x616>
 8004a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a32:	801a      	strh	r2, [r3, #0]
 8004a34:	e047      	b.n	8004ac6 <USB_EPStartXfer+0x6a6>
 8004a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <USB_EPStartXfer+0x636>
 8004a4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a50:	3301      	adds	r3, #1
 8004a52:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	029b      	lsls	r3, r3, #10
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	4313      	orrs	r3, r2
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a6c:	801a      	strh	r2, [r3, #0]
 8004a6e:	e02a      	b.n	8004ac6 <USB_EPStartXfer+0x6a6>
 8004a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	785b      	ldrb	r3, [r3, #1]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d122      	bne.n	8004ac6 <USB_EPStartXfer+0x6a6>
 8004a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004aa0:	4413      	add	r3, r2
 8004aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	011a      	lsls	r2, r3, #4
 8004ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	891b      	ldrh	r3, [r3, #8]
 8004ad2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6959      	ldr	r1, [r3, #20]
 8004ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004aec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004af0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004af4:	6800      	ldr	r0, [r0, #0]
 8004af6:	f001 f982 	bl	8005dfe <USB_WritePMA>
            ep->xfer_buff += len;
 8004afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004afe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695a      	ldr	r2, [r3, #20]
 8004b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b0a:	441a      	add	r2, r3
 8004b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6a1a      	ldr	r2, [r3, #32]
 8004b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d90f      	bls.n	8004b54 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6a1a      	ldr	r2, [r3, #32]
 8004b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b44:	1ad2      	subs	r2, r2, r3
 8004b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	621a      	str	r2, [r3, #32]
 8004b52:	e00e      	b.n	8004b72 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d177      	bne.n	8004c7e <USB_EPStartXfer+0x85e>
 8004b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bae:	4413      	add	r3, r2
 8004bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	011a      	lsls	r2, r3, #4
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd8:	801a      	strh	r2, [r3, #0]
 8004bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bde:	2b3e      	cmp	r3, #62	@ 0x3e
 8004be0:	d921      	bls.n	8004c26 <USB_EPStartXfer+0x806>
 8004be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d104      	bne.n	8004c02 <USB_EPStartXfer+0x7e2>
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	029b      	lsls	r3, r3, #10
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	4313      	orrs	r3, r2
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c22:	801a      	strh	r2, [r3, #0]
 8004c24:	e050      	b.n	8004cc8 <USB_EPStartXfer+0x8a8>
 8004c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <USB_EPStartXfer+0x824>
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c40:	801a      	strh	r2, [r3, #0]
 8004c42:	e041      	b.n	8004cc8 <USB_EPStartXfer+0x8a8>
 8004c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <USB_EPStartXfer+0x844>
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	3301      	adds	r3, #1
 8004c60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	029b      	lsls	r3, r3, #10
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	4313      	orrs	r3, r2
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c7a:	801a      	strh	r2, [r3, #0]
 8004c7c:	e024      	b.n	8004cc8 <USB_EPStartXfer+0x8a8>
 8004c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	785b      	ldrb	r3, [r3, #1]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d11c      	bne.n	8004cc8 <USB_EPStartXfer+0x8a8>
 8004c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ca2:	4413      	add	r3, r2
 8004ca4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	011a      	lsls	r2, r3, #4
 8004cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	895b      	ldrh	r3, [r3, #10]
 8004cd4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6959      	ldr	r1, [r3, #20]
 8004ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004cee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004cf2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004cf6:	6800      	ldr	r0, [r0, #0]
 8004cf8:	f001 f881 	bl	8005dfe <USB_WritePMA>
 8004cfc:	e227      	b.n	800514e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d34:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004d56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d8a:	4413      	add	r3, r2
 8004d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	011a      	lsls	r2, r3, #4
 8004d9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d9e:	4413      	add	r3, r2
 8004da0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004da4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	891b      	ldrh	r3, [r3, #8]
 8004dbc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6959      	ldr	r1, [r3, #20]
 8004dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004dd6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004dda:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004dde:	6800      	ldr	r0, [r0, #0]
 8004de0:	f001 f80d 	bl	8005dfe <USB_WritePMA>
 8004de4:	e1b3      	b.n	800514e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6a1a      	ldr	r2, [r3, #32]
 8004df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df6:	1ad2      	subs	r2, r2, r3
 8004df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80c6 	beq.w	8004fb8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	785b      	ldrb	r3, [r3, #1]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d177      	bne.n	8004f38 <USB_EPStartXfer+0xb18>
 8004e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e68:	4413      	add	r3, r2
 8004e6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	011a      	lsls	r2, r3, #4
 8004e7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e82:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e92:	801a      	strh	r2, [r3, #0]
 8004e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e98:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e9a:	d921      	bls.n	8004ee0 <USB_EPStartXfer+0xac0>
 8004e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eaa:	f003 031f 	and.w	r3, r3, #31
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d104      	bne.n	8004ebc <USB_EPStartXfer+0xa9c>
 8004eb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004ebc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	029b      	lsls	r3, r3, #10
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	e050      	b.n	8004f82 <USB_EPStartXfer+0xb62>
 8004ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10a      	bne.n	8004efe <USB_EPStartXfer+0xade>
 8004ee8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004efa:	801a      	strh	r2, [r3, #0]
 8004efc:	e041      	b.n	8004f82 <USB_EPStartXfer+0xb62>
 8004efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f02:	085b      	lsrs	r3, r3, #1
 8004f04:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d004      	beq.n	8004f1e <USB_EPStartXfer+0xafe>
 8004f14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004f18:	3301      	adds	r3, #1
 8004f1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004f1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	029b      	lsls	r3, r3, #10
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	e024      	b.n	8004f82 <USB_EPStartXfer+0xb62>
 8004f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	785b      	ldrb	r3, [r3, #1]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d11c      	bne.n	8004f82 <USB_EPStartXfer+0xb62>
 8004f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f5c:	4413      	add	r3, r2
 8004f5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	011a      	lsls	r2, r3, #4
 8004f6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f70:	4413      	add	r3, r2
 8004f72:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	895b      	ldrh	r3, [r3, #10]
 8004f8e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6959      	ldr	r1, [r3, #20]
 8004f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004fa8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004fac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004fb0:	6800      	ldr	r0, [r0, #0]
 8004fb2:	f000 ff24 	bl	8005dfe <USB_WritePMA>
 8004fb6:	e0ca      	b.n	800514e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d177      	bne.n	80050b8 <USB_EPStartXfer+0xc98>
 8004fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fe8:	4413      	add	r3, r2
 8004fea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	011a      	lsls	r2, r3, #4
 8004ffa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005002:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800500e:	b29a      	uxth	r2, r3
 8005010:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005012:	801a      	strh	r2, [r3, #0]
 8005014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005018:	2b3e      	cmp	r3, #62	@ 0x3e
 800501a:	d921      	bls.n	8005060 <USB_EPStartXfer+0xc40>
 800501c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800502a:	f003 031f 	and.w	r3, r3, #31
 800502e:	2b00      	cmp	r3, #0
 8005030:	d104      	bne.n	800503c <USB_EPStartXfer+0xc1c>
 8005032:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005036:	3b01      	subs	r3, #1
 8005038:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800503c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29a      	uxth	r2, r3
 8005042:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005046:	b29b      	uxth	r3, r3
 8005048:	029b      	lsls	r3, r3, #10
 800504a:	b29b      	uxth	r3, r3
 800504c:	4313      	orrs	r3, r2
 800504e:	b29b      	uxth	r3, r3
 8005050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005058:	b29a      	uxth	r2, r3
 800505a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800505c:	801a      	strh	r2, [r3, #0]
 800505e:	e05c      	b.n	800511a <USB_EPStartXfer+0xcfa>
 8005060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10a      	bne.n	800507e <USB_EPStartXfer+0xc5e>
 8005068:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005076:	b29a      	uxth	r2, r3
 8005078:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	e04d      	b.n	800511a <USB_EPStartXfer+0xcfa>
 800507e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d004      	beq.n	800509e <USB_EPStartXfer+0xc7e>
 8005094:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005098:	3301      	adds	r3, #1
 800509a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800509e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	029b      	lsls	r3, r3, #10
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	4313      	orrs	r3, r2
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	e030      	b.n	800511a <USB_EPStartXfer+0xcfa>
 80050b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	785b      	ldrb	r3, [r3, #1]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d128      	bne.n	800511a <USB_EPStartXfer+0xcfa>
 80050c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050ec:	4413      	add	r3, r2
 80050ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	011a      	lsls	r2, r3, #4
 8005100:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005104:	4413      	add	r3, r2
 8005106:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800510a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800510e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005112:	b29a      	uxth	r2, r3
 8005114:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005118:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800511a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800511e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	891b      	ldrh	r3, [r3, #8]
 8005126:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800512a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800512e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6959      	ldr	r1, [r3, #20]
 8005136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800513a:	b29b      	uxth	r3, r3
 800513c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005140:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005144:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005148:	6800      	ldr	r0, [r0, #0]
 800514a:	f000 fe58 	bl	8005dfe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800514e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005152:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800515c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005174:	817b      	strh	r3, [r7, #10]
 8005176:	897b      	ldrh	r3, [r7, #10]
 8005178:	f083 0310 	eor.w	r3, r3, #16
 800517c:	817b      	strh	r3, [r7, #10]
 800517e:	897b      	ldrh	r3, [r7, #10]
 8005180:	f083 0320 	eor.w	r3, r3, #32
 8005184:	817b      	strh	r3, [r7, #10]
 8005186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800518a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	441a      	add	r2, r3
 80051a0:	897b      	ldrh	r3, [r7, #10]
 80051a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	8013      	strh	r3, [r2, #0]
 80051b6:	f000 bcde 	b.w	8005b76 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80051ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	7b1b      	ldrb	r3, [r3, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f040 80bb 	bne.w	8005342 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80051cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699a      	ldr	r2, [r3, #24]
 80051d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d917      	bls.n	8005218 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80051e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80051f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	699a      	ldr	r2, [r3, #24]
 8005204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005208:	1ad2      	subs	r2, r2, r3
 800520a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	619a      	str	r2, [r3, #24]
 8005216:	e00e      	b.n	8005236 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800521c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800522c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2200      	movs	r2, #0
 8005234:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005248:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005252:	b29b      	uxth	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800525a:	4413      	add	r3, r2
 800525c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	011a      	lsls	r2, r3, #4
 800526e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005272:	4413      	add	r3, r2
 8005274:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005278:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800527c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005288:	b29a      	uxth	r2, r3
 800528a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005294:	2b3e      	cmp	r3, #62	@ 0x3e
 8005296:	d924      	bls.n	80052e2 <USB_EPStartXfer+0xec2>
 8005298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d104      	bne.n	80052b8 <USB_EPStartXfer+0xe98>
 80052ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80052b2:	3b01      	subs	r3, #1
 80052b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29a      	uxth	r2, r3
 80052c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	029b      	lsls	r3, r3, #10
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	4313      	orrs	r3, r2
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052dc:	801a      	strh	r2, [r3, #0]
 80052de:	f000 bc10 	b.w	8005b02 <USB_EPStartXfer+0x16e2>
 80052e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10c      	bne.n	8005304 <USB_EPStartXfer+0xee4>
 80052ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	e3fe      	b.n	8005b02 <USB_EPStartXfer+0x16e2>
 8005304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800530e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <USB_EPStartXfer+0xf04>
 800531a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800531e:	3301      	adds	r3, #1
 8005320:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005324:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29a      	uxth	r2, r3
 800532c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005330:	b29b      	uxth	r3, r3
 8005332:	029b      	lsls	r3, r3, #10
 8005334:	b29b      	uxth	r3, r3
 8005336:	4313      	orrs	r3, r2
 8005338:	b29a      	uxth	r2, r3
 800533a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	e3df      	b.n	8005b02 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	78db      	ldrb	r3, [r3, #3]
 800534e:	2b02      	cmp	r3, #2
 8005350:	f040 8218 	bne.w	8005784 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	785b      	ldrb	r3, [r3, #1]
 8005360:	2b00      	cmp	r3, #0
 8005362:	f040 809d 	bne.w	80054a0 <USB_EPStartXfer+0x1080>
 8005366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005382:	b29b      	uxth	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800538a:	4413      	add	r3, r2
 800538c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	011a      	lsls	r2, r3, #4
 800539e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053a2:	4413      	add	r3, r2
 80053a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053be:	801a      	strh	r2, [r3, #0]
 80053c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80053ce:	d92b      	bls.n	8005428 <USB_EPStartXfer+0x1008>
 80053d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <USB_EPStartXfer+0xfe0>
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053fa:	3b01      	subs	r3, #1
 80053fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29a      	uxth	r2, r3
 8005408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540c:	b29b      	uxth	r3, r3
 800540e:	029b      	lsls	r3, r3, #10
 8005410:	b29b      	uxth	r3, r3
 8005412:	4313      	orrs	r3, r2
 8005414:	b29b      	uxth	r3, r3
 8005416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800541e:	b29a      	uxth	r2, r3
 8005420:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	e070      	b.n	800550a <USB_EPStartXfer+0x10ea>
 8005428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800542c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10c      	bne.n	8005452 <USB_EPStartXfer+0x1032>
 8005438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005448:	b29a      	uxth	r2, r3
 800544a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800544e:	801a      	strh	r2, [r3, #0]
 8005450:	e05b      	b.n	800550a <USB_EPStartXfer+0x10ea>
 8005452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	085b      	lsrs	r3, r3, #1
 8005460:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <USB_EPStartXfer+0x1062>
 8005478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547c:	3301      	adds	r3, #1
 800547e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29a      	uxth	r2, r3
 800548a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548e:	b29b      	uxth	r3, r3
 8005490:	029b      	lsls	r3, r3, #10
 8005492:	b29b      	uxth	r3, r3
 8005494:	4313      	orrs	r3, r2
 8005496:	b29a      	uxth	r2, r3
 8005498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800549c:	801a      	strh	r2, [r3, #0]
 800549e:	e034      	b.n	800550a <USB_EPStartXfer+0x10ea>
 80054a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d12c      	bne.n	800550a <USB_EPStartXfer+0x10ea>
 80054b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054d4:	4413      	add	r3, r2
 80054d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	011a      	lsls	r2, r3, #4
 80054e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054ec:	4413      	add	r3, r2
 80054ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	b29a      	uxth	r2, r3
 8005504:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005508:	801a      	strh	r2, [r3, #0]
 800550a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	785b      	ldrb	r3, [r3, #1]
 8005524:	2b00      	cmp	r3, #0
 8005526:	f040 809d 	bne.w	8005664 <USB_EPStartXfer+0x1244>
 800552a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800553c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005546:	b29b      	uxth	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800554e:	4413      	add	r3, r2
 8005550:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	011a      	lsls	r2, r3, #4
 8005562:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005566:	4413      	add	r3, r2
 8005568:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800556c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005570:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800557c:	b29a      	uxth	r2, r3
 800557e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	2b3e      	cmp	r3, #62	@ 0x3e
 8005592:	d92b      	bls.n	80055ec <USB_EPStartXfer+0x11cc>
 8005594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 031f 	and.w	r3, r3, #31
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d104      	bne.n	80055c4 <USB_EPStartXfer+0x11a4>
 80055ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055be:	3b01      	subs	r3, #1
 80055c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	029b      	lsls	r3, r3, #10
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	4313      	orrs	r3, r2
 80055d8:	b29b      	uxth	r3, r3
 80055da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055e8:	801a      	strh	r2, [r3, #0]
 80055ea:	e069      	b.n	80056c0 <USB_EPStartXfer+0x12a0>
 80055ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10c      	bne.n	8005616 <USB_EPStartXfer+0x11f6>
 80055fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b29b      	uxth	r3, r3
 8005604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800560c:	b29a      	uxth	r2, r3
 800560e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005612:	801a      	strh	r2, [r3, #0]
 8005614:	e054      	b.n	80056c0 <USB_EPStartXfer+0x12a0>
 8005616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800561a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	085b      	lsrs	r3, r3, #1
 8005624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d004      	beq.n	8005646 <USB_EPStartXfer+0x1226>
 800563c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005640:	3301      	adds	r3, #1
 8005642:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005646:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	b29a      	uxth	r2, r3
 800564e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005652:	b29b      	uxth	r3, r3
 8005654:	029b      	lsls	r3, r3, #10
 8005656:	b29b      	uxth	r3, r3
 8005658:	4313      	orrs	r3, r2
 800565a:	b29a      	uxth	r2, r3
 800565c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005660:	801a      	strh	r2, [r3, #0]
 8005662:	e02d      	b.n	80056c0 <USB_EPStartXfer+0x12a0>
 8005664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	785b      	ldrb	r3, [r3, #1]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d125      	bne.n	80056c0 <USB_EPStartXfer+0x12a0>
 8005674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005678:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005682:	b29b      	uxth	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800568a:	4413      	add	r3, r2
 800568c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	011a      	lsls	r2, r3, #4
 800569e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80056a2:	4413      	add	r3, r2
 80056a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056be:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80056c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 8218 	beq.w	8005b02 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80056d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80056f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d005      	beq.n	800570a <USB_EPStartXfer+0x12ea>
 80056fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10d      	bne.n	8005726 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800570a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800570e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005712:	2b00      	cmp	r3, #0
 8005714:	f040 81f5 	bne.w	8005b02 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005718:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800571c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	f040 81ee 	bne.w	8005b02 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29b      	uxth	r3, r3
 8005744:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800575e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	441a      	add	r2, r3
 800576a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800576e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005772:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800577a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800577e:	b29b      	uxth	r3, r3
 8005780:	8013      	strh	r3, [r2, #0]
 8005782:	e1be      	b.n	8005b02 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	78db      	ldrb	r3, [r3, #3]
 8005790:	2b01      	cmp	r3, #1
 8005792:	f040 81b4 	bne.w	8005afe <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d917      	bls.n	80057e2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80057b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80057c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d2:	1ad2      	subs	r2, r2, r3
 80057d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	619a      	str	r2, [r3, #24]
 80057e0:	e00e      	b.n	8005800 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80057e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80057f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2200      	movs	r2, #0
 80057fe:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	785b      	ldrb	r3, [r3, #1]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f040 8085 	bne.w	800591c <USB_EPStartXfer+0x14fc>
 8005812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005824:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800582e:	b29b      	uxth	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005836:	4413      	add	r3, r2
 8005838:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800583c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	011a      	lsls	r2, r3, #4
 800584a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800584e:	4413      	add	r3, r2
 8005850:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005854:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005858:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005864:	b29a      	uxth	r2, r3
 8005866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800586a:	801a      	strh	r2, [r3, #0]
 800586c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005870:	2b3e      	cmp	r3, #62	@ 0x3e
 8005872:	d923      	bls.n	80058bc <USB_EPStartXfer+0x149c>
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800587e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005882:	f003 031f 	and.w	r3, r3, #31
 8005886:	2b00      	cmp	r3, #0
 8005888:	d104      	bne.n	8005894 <USB_EPStartXfer+0x1474>
 800588a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800588e:	3b01      	subs	r3, #1
 8005890:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005894:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29a      	uxth	r2, r3
 800589c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	029b      	lsls	r3, r3, #10
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	4313      	orrs	r3, r2
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80058b8:	801a      	strh	r2, [r3, #0]
 80058ba:	e060      	b.n	800597e <USB_EPStartXfer+0x155e>
 80058bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10c      	bne.n	80058de <USB_EPStartXfer+0x14be>
 80058c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	e04f      	b.n	800597e <USB_EPStartXfer+0x155e>
 80058de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80058e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <USB_EPStartXfer+0x14de>
 80058f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058f8:	3301      	adds	r3, #1
 80058fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80058fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	b29a      	uxth	r2, r3
 8005906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800590a:	b29b      	uxth	r3, r3
 800590c:	029b      	lsls	r3, r3, #10
 800590e:	b29b      	uxth	r3, r3
 8005910:	4313      	orrs	r3, r2
 8005912:	b29a      	uxth	r2, r3
 8005914:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005918:	801a      	strh	r2, [r3, #0]
 800591a:	e030      	b.n	800597e <USB_EPStartXfer+0x155e>
 800591c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d128      	bne.n	800597e <USB_EPStartXfer+0x155e>
 800592c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005930:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800593a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005948:	b29b      	uxth	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005950:	4413      	add	r3, r2
 8005952:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	011a      	lsls	r2, r3, #4
 8005964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005968:	4413      	add	r3, r2
 800596a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800596e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005976:	b29a      	uxth	r2, r3
 8005978:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800597c:	801a      	strh	r2, [r3, #0]
 800597e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005982:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800598c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f040 8085 	bne.w	8005aa8 <USB_EPStartXfer+0x1688>
 800599e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80059ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80059c2:	4413      	add	r3, r2
 80059c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80059c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	011a      	lsls	r2, r3, #4
 80059d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80059da:	4413      	add	r3, r2
 80059dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80059f6:	801a      	strh	r2, [r3, #0]
 80059f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80059fe:	d923      	bls.n	8005a48 <USB_EPStartXfer+0x1628>
 8005a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0e:	f003 031f 	and.w	r3, r3, #31
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d104      	bne.n	8005a20 <USB_EPStartXfer+0x1600>
 8005a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	029b      	lsls	r3, r3, #10
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	4313      	orrs	r3, r2
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a44:	801a      	strh	r2, [r3, #0]
 8005a46:	e05c      	b.n	8005b02 <USB_EPStartXfer+0x16e2>
 8005a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10c      	bne.n	8005a6a <USB_EPStartXfer+0x164a>
 8005a50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	e04b      	b.n	8005b02 <USB_EPStartXfer+0x16e2>
 8005a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <USB_EPStartXfer+0x166a>
 8005a80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a84:	3301      	adds	r3, #1
 8005a86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	029b      	lsls	r3, r3, #10
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	e02c      	b.n	8005b02 <USB_EPStartXfer+0x16e2>
 8005aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d124      	bne.n	8005b02 <USB_EPStartXfer+0x16e2>
 8005ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ace:	4413      	add	r3, r2
 8005ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	011a      	lsls	r2, r3, #4
 8005ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005aec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005afa:	801a      	strh	r2, [r3, #0]
 8005afc:	e001      	b.n	8005b02 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e03a      	b.n	8005b78 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b28:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005b2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005b30:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005b34:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005b38:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005b3c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b40:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	441a      	add	r2, r3
 8005b5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005b62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d020      	beq.n	8005bd6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005baa:	81bb      	strh	r3, [r7, #12]
 8005bac:	89bb      	ldrh	r3, [r7, #12]
 8005bae:	f083 0310 	eor.w	r3, r3, #16
 8005bb2:	81bb      	strh	r3, [r7, #12]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	441a      	add	r2, r3
 8005bbe:	89bb      	ldrh	r3, [r7, #12]
 8005bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	8013      	strh	r3, [r2, #0]
 8005bd4:	e01f      	b.n	8005c16 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bec:	81fb      	strh	r3, [r7, #14]
 8005bee:	89fb      	ldrh	r3, [r7, #14]
 8005bf0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005bf4:	81fb      	strh	r3, [r7, #14]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	441a      	add	r2, r3
 8005c00:	89fb      	ldrh	r3, [r7, #14]
 8005c02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr

08005c22 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b087      	sub	sp, #28
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	7b1b      	ldrb	r3, [r3, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f040 809d 	bne.w	8005d70 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d04c      	beq.n	8005cd8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	823b      	strh	r3, [r7, #16]
 8005c4c:	8a3b      	ldrh	r3, [r7, #16]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d01b      	beq.n	8005c8e <USB_EPClearStall+0x6c>
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c6c:	81fb      	strh	r3, [r7, #14]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	441a      	add	r2, r3
 8005c78:	89fb      	ldrh	r3, [r7, #14]
 8005c7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	78db      	ldrb	r3, [r3, #3]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d06c      	beq.n	8005d70 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cac:	81bb      	strh	r3, [r7, #12]
 8005cae:	89bb      	ldrh	r3, [r7, #12]
 8005cb0:	f083 0320 	eor.w	r3, r3, #32
 8005cb4:	81bb      	strh	r3, [r7, #12]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	441a      	add	r2, r3
 8005cc0:	89bb      	ldrh	r3, [r7, #12]
 8005cc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	8013      	strh	r3, [r2, #0]
 8005cd6:	e04b      	b.n	8005d70 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	82fb      	strh	r3, [r7, #22]
 8005ce6:	8afb      	ldrh	r3, [r7, #22]
 8005ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01b      	beq.n	8005d28 <USB_EPClearStall+0x106>
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d06:	82bb      	strh	r3, [r7, #20]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	441a      	add	r2, r3
 8005d12:	8abb      	ldrh	r3, [r7, #20]
 8005d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3e:	827b      	strh	r3, [r7, #18]
 8005d40:	8a7b      	ldrh	r3, [r7, #18]
 8005d42:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005d46:	827b      	strh	r3, [r7, #18]
 8005d48:	8a7b      	ldrh	r3, [r7, #18]
 8005d4a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d4e:	827b      	strh	r3, [r7, #18]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	441a      	add	r2, r3
 8005d5a:	8a7b      	ldrh	r3, [r7, #18]
 8005d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr

08005d7c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005d88:	78fb      	ldrb	r3, [r7, #3]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d103      	bne.n	8005d96 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2280      	movs	r2, #128	@ 0x80
 8005d92:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr

08005da2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bc80      	pop	{r7}
 8005db4:	4770      	bx	lr

08005db6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bc80      	pop	{r7}
 8005de6:	4770      	bx	lr

08005de8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr

08005dfe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b08b      	sub	sp, #44	@ 0x2c
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	4611      	mov	r1, r2
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	80fb      	strh	r3, [r7, #6]
 8005e10:	4613      	mov	r3, r2
 8005e12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005e14:	88bb      	ldrh	r3, [r7, #4]
 8005e16:	3301      	adds	r3, #1
 8005e18:	085b      	lsrs	r3, r3, #1
 8005e1a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e24:	88fb      	ldrh	r3, [r7, #6]
 8005e26:	005a      	lsls	r2, r3, #1
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e30:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e36:	e01f      	b.n	8005e78 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	3301      	adds	r3, #1
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	b21b      	sxth	r3, r3
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	b21a      	sxth	r2, r3
 8005e4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	b21b      	sxth	r3, r3
 8005e52:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	8a7a      	ldrh	r2, [r7, #18]
 8005e58:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	3302      	adds	r3, #2
 8005e64:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e74:	3b01      	subs	r3, #1
 8005e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1dc      	bne.n	8005e38 <USB_WritePMA+0x3a>
  }
}
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
 8005e82:	372c      	adds	r7, #44	@ 0x2c
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr

08005e8a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b08b      	sub	sp, #44	@ 0x2c
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	4611      	mov	r1, r2
 8005e96:	461a      	mov	r2, r3
 8005e98:	460b      	mov	r3, r1
 8005e9a:	80fb      	strh	r3, [r7, #6]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005ea0:	88bb      	ldrh	r3, [r7, #4]
 8005ea2:	085b      	lsrs	r3, r3, #1
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005eb0:	88fb      	ldrh	r3, [r7, #6]
 8005eb2:	005a      	lsls	r2, r3, #1
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ebc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ec2:	e01b      	b.n	8005efc <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	3302      	adds	r3, #2
 8005ed0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	3301      	adds	r3, #1
 8005ede:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	0a1b      	lsrs	r3, r3, #8
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	3301      	adds	r3, #1
 8005eee:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e0      	bne.n	8005ec4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005f02:	88bb      	ldrh	r3, [r7, #4]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	701a      	strb	r2, [r3, #0]
  }
}
 8005f1e:	bf00      	nop
 8005f20:	372c      	adds	r7, #44	@ 0x2c
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr

08005f28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	7c1b      	ldrb	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d115      	bne.n	8005f6c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f44:	2202      	movs	r2, #2
 8005f46:	2181      	movs	r1, #129	@ 0x81
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f001 ff8e 	bl	8007e6a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f58:	2202      	movs	r2, #2
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 ff84 	bl	8007e6a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8005f6a:	e012      	b.n	8005f92 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f6c:	2340      	movs	r3, #64	@ 0x40
 8005f6e:	2202      	movs	r2, #2
 8005f70:	2181      	movs	r1, #129	@ 0x81
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 ff79 	bl	8007e6a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f7e:	2340      	movs	r3, #64	@ 0x40
 8005f80:	2202      	movs	r2, #2
 8005f82:	2101      	movs	r1, #1
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f001 ff70 	bl	8007e6a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f92:	2308      	movs	r3, #8
 8005f94:	2203      	movs	r2, #3
 8005f96:	2182      	movs	r1, #130	@ 0x82
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f001 ff66 	bl	8007e6a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fa4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005fa8:	f002 f886 	bl	80080b8 <USBD_static_malloc>
 8005fac:	4602      	mov	r2, r0
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	73fb      	strb	r3, [r7, #15]
 8005fc2:	e026      	b.n	8006012 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fca:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	7c1b      	ldrb	r3, [r3, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d109      	bne.n	8006002 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ff4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f002 f825 	bl	800804a <USBD_LL_PrepareReceive>
 8006000:	e007      	b.n	8006012 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006008:	2340      	movs	r3, #64	@ 0x40
 800600a:	2101      	movs	r1, #1
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f002 f81c 	bl	800804a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006012:	7bfb      	ldrb	r3, [r7, #15]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	460b      	mov	r3, r1
 8006026:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800602c:	2181      	movs	r1, #129	@ 0x81
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 ff41 	bl	8007eb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800603a:	2101      	movs	r1, #1
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 ff3a 	bl	8007eb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800604a:	2182      	movs	r1, #130	@ 0x82
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 ff32 	bl	8007eb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00e      	beq.n	8006080 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006072:	4618      	mov	r0, r3
 8006074:	f002 f82c 	bl	80080d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006080:	7bfb      	ldrb	r3, [r7, #15]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b086      	sub	sp, #24
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800609a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d039      	beq.n	8006128 <USBD_CDC_Setup+0x9e>
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d17f      	bne.n	80061b8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	88db      	ldrh	r3, [r3, #6]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d029      	beq.n	8006114 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	b25b      	sxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da11      	bge.n	80060ee <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80060d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	88d2      	ldrh	r2, [r2, #6]
 80060dc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80060de:	6939      	ldr	r1, [r7, #16]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	88db      	ldrh	r3, [r3, #6]
 80060e4:	461a      	mov	r2, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f001 fa06 	bl	80074f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80060ec:	e06b      	b.n	80061c6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	785a      	ldrb	r2, [r3, #1]
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	88db      	ldrh	r3, [r3, #6]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006104:	6939      	ldr	r1, [r7, #16]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	88db      	ldrh	r3, [r3, #6]
 800610a:	461a      	mov	r2, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 fa21 	bl	8007554 <USBD_CtlPrepareRx>
      break;
 8006112:	e058      	b.n	80061c6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	7850      	ldrb	r0, [r2, #1]
 8006120:	2200      	movs	r2, #0
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	4798      	blx	r3
      break;
 8006126:	e04e      	b.n	80061c6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	785b      	ldrb	r3, [r3, #1]
 800612c:	2b0b      	cmp	r3, #11
 800612e:	d02e      	beq.n	800618e <USBD_CDC_Setup+0x104>
 8006130:	2b0b      	cmp	r3, #11
 8006132:	dc38      	bgt.n	80061a6 <USBD_CDC_Setup+0x11c>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <USBD_CDC_Setup+0xb4>
 8006138:	2b0a      	cmp	r3, #10
 800613a:	d014      	beq.n	8006166 <USBD_CDC_Setup+0xdc>
 800613c:	e033      	b.n	80061a6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006144:	2b03      	cmp	r3, #3
 8006146:	d107      	bne.n	8006158 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006148:	f107 030c 	add.w	r3, r7, #12
 800614c:	2202      	movs	r2, #2
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 f9d1 	bl	80074f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006156:	e02e      	b.n	80061b6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f001 f962 	bl	8007424 <USBD_CtlError>
            ret = USBD_FAIL;
 8006160:	2302      	movs	r3, #2
 8006162:	75fb      	strb	r3, [r7, #23]
          break;
 8006164:	e027      	b.n	80061b6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800616c:	2b03      	cmp	r3, #3
 800616e:	d107      	bne.n	8006180 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006170:	f107 030f 	add.w	r3, r7, #15
 8006174:	2201      	movs	r2, #1
 8006176:	4619      	mov	r1, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f001 f9bd 	bl	80074f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800617e:	e01a      	b.n	80061b6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 f94e 	bl	8007424 <USBD_CtlError>
            ret = USBD_FAIL;
 8006188:	2302      	movs	r3, #2
 800618a:	75fb      	strb	r3, [r7, #23]
          break;
 800618c:	e013      	b.n	80061b6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006194:	2b03      	cmp	r3, #3
 8006196:	d00d      	beq.n	80061b4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006198:	6839      	ldr	r1, [r7, #0]
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 f942 	bl	8007424 <USBD_CtlError>
            ret = USBD_FAIL;
 80061a0:	2302      	movs	r3, #2
 80061a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80061a4:	e006      	b.n	80061b4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 f93b 	bl	8007424 <USBD_CtlError>
          ret = USBD_FAIL;
 80061ae:	2302      	movs	r3, #2
 80061b0:	75fb      	strb	r3, [r7, #23]
          break;
 80061b2:	e000      	b.n	80061b6 <USBD_CDC_Setup+0x12c>
          break;
 80061b4:	bf00      	nop
      }
      break;
 80061b6:	e006      	b.n	80061c6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f001 f932 	bl	8007424 <USBD_CtlError>
      ret = USBD_FAIL;
 80061c0:	2302      	movs	r3, #2
 80061c2:	75fb      	strb	r3, [r7, #23]
      break;
 80061c4:	bf00      	nop
  }

  return ret;
 80061c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061e2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80061ea:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d03a      	beq.n	800626c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80061f6:	78fa      	ldrb	r2, [r7, #3]
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	440b      	add	r3, r1
 8006204:	331c      	adds	r3, #28
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d029      	beq.n	8006260 <USBD_CDC_DataIn+0x90>
 800620c:	78fa      	ldrb	r2, [r7, #3]
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	331c      	adds	r3, #28
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	78f9      	ldrb	r1, [r7, #3]
 8006220:	68b8      	ldr	r0, [r7, #8]
 8006222:	460b      	mov	r3, r1
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	440b      	add	r3, r1
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	4403      	add	r3, r0
 800622c:	3320      	adds	r3, #32
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	fbb2 f1f3 	udiv	r1, r2, r3
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d110      	bne.n	8006260 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800623e:	78fa      	ldrb	r2, [r7, #3]
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	331c      	adds	r3, #28
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006252:	78f9      	ldrb	r1, [r7, #3]
 8006254:	2300      	movs	r3, #0
 8006256:	2200      	movs	r2, #0
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f001 fed3 	bl	8008004 <USBD_LL_Transmit>
 800625e:	e003      	b.n	8006268 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	e000      	b.n	800626e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800626c:	2302      	movs	r3, #2
  }
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006288:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	4619      	mov	r1, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f001 fefe 	bl	8008090 <USBD_LL_GetRxDataSize>
 8006294:	4602      	mov	r2, r0
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00d      	beq.n	80062c2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80062ba:	4611      	mov	r1, r2
 80062bc:	4798      	blx	r3

    return USBD_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	e000      	b.n	80062c4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80062c2:	2302      	movs	r3, #2
  }
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062da:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d014      	beq.n	8006310 <USBD_CDC_EP0_RxReady+0x44>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80062ec:	2bff      	cmp	r3, #255	@ 0xff
 80062ee:	d00f      	beq.n	8006310 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80062fe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006306:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	22ff      	movs	r2, #255	@ 0xff
 800630c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2243      	movs	r2, #67	@ 0x43
 8006328:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800632a:	4b03      	ldr	r3, [pc, #12]	@ (8006338 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	2000009c 	.word	0x2000009c

0800633c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2243      	movs	r2, #67	@ 0x43
 8006348:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800634a:	4b03      	ldr	r3, [pc, #12]	@ (8006358 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	bc80      	pop	{r7}
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	20000058 	.word	0x20000058

0800635c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2243      	movs	r2, #67	@ 0x43
 8006368:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800636a:	4b03      	ldr	r3, [pc, #12]	@ (8006378 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800636c:	4618      	mov	r0, r3
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	200000e0 	.word	0x200000e0

0800637c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	220a      	movs	r2, #10
 8006388:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800638a:	4b03      	ldr	r3, [pc, #12]	@ (8006398 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20000014 	.word	0x20000014

0800639c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80063a6:	2302      	movs	r3, #2
 80063a8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc80      	pop	{r7}
 80063c6:	4770      	bx	lr

080063c8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	4613      	mov	r3, r2
 80063d4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063dc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80063e6:	88fa      	ldrh	r2, [r7, #6]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr

080063fa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800640a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	bc80      	pop	{r7}
 800641e:	4770      	bx	lr

08006420 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800642e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01c      	beq.n	8006474 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006440:	2b00      	cmp	r3, #0
 8006442:	d115      	bne.n	8006470 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006462:	b29b      	uxth	r3, r3
 8006464:	2181      	movs	r1, #129	@ 0x81
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fdcc 	bl	8008004 <USBD_LL_Transmit>

      return USBD_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	e002      	b.n	8006476 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006474:	2302      	movs	r3, #2
  }
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800648c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d017      	beq.n	80064c8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	7c1b      	ldrb	r3, [r3, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d109      	bne.n	80064b4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064aa:	2101      	movs	r1, #1
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 fdcc 	bl	800804a <USBD_LL_PrepareReceive>
 80064b2:	e007      	b.n	80064c4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064ba:	2340      	movs	r3, #64	@ 0x40
 80064bc:	2101      	movs	r1, #1
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f001 fdc3 	bl	800804a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e000      	b.n	80064ca <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80064c8:	2302      	movs	r3, #2
  }
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	4613      	mov	r3, r2
 80064de:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80064e6:	2302      	movs	r3, #2
 80064e8:	e01a      	b.n	8006520 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	79fa      	ldrb	r2, [r7, #7]
 8006516:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f001 fc31 	bl	8007d80 <USBD_LL_Init>

  return USBD_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d006      	beq.n	800654a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]
 8006548:	e001      	b.n	800654e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800654a:	2302      	movs	r3, #2
 800654c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800654e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr

0800655a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b082      	sub	sp, #8
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f001 fc66 	bl	8007e34 <USBD_LL_Start>

  return USBD_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	bc80      	pop	{r7}
 8006584:	4770      	bx	lr

08006586 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	460b      	mov	r3, r1
 8006590:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006592:	2302      	movs	r3, #2
 8006594:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00c      	beq.n	80065ba <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	78fa      	ldrb	r2, [r7, #3]
 80065aa:	4611      	mov	r1, r2
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	4798      	blx	r3
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	78fa      	ldrb	r2, [r7, #3]
 80065da:	4611      	mov	r1, r2
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3

  return USBD_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fed8 	bl	80073b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006610:	461a      	mov	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800661e:	f003 031f 	and.w	r3, r3, #31
 8006622:	2b02      	cmp	r3, #2
 8006624:	d016      	beq.n	8006654 <USBD_LL_SetupStage+0x6a>
 8006626:	2b02      	cmp	r3, #2
 8006628:	d81c      	bhi.n	8006664 <USBD_LL_SetupStage+0x7a>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <USBD_LL_SetupStage+0x4a>
 800662e:	2b01      	cmp	r3, #1
 8006630:	d008      	beq.n	8006644 <USBD_LL_SetupStage+0x5a>
 8006632:	e017      	b.n	8006664 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f9cb 	bl	80069d8 <USBD_StdDevReq>
      break;
 8006642:	e01a      	b.n	800667a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fa2d 	bl	8006aac <USBD_StdItfReq>
      break;
 8006652:	e012      	b.n	800667a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fa6d 	bl	8006b3c <USBD_StdEPReq>
      break;
 8006662:	e00a      	b.n	800667a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800666a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800666e:	b2db      	uxtb	r3, r3
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f001 fc3e 	bl	8007ef4 <USBD_LL_StallEP>
      break;
 8006678:	bf00      	nop
  }

  return USBD_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	460b      	mov	r3, r1
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006692:	7afb      	ldrb	r3, [r7, #11]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d14b      	bne.n	8006730 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800669e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d134      	bne.n	8006714 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d919      	bls.n	80066ea <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	1ad2      	subs	r2, r2, r3
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d203      	bcs.n	80066d8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	e002      	b.n	80066de <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80066dc:	b29b      	uxth	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 ff54 	bl	8007590 <USBD_CtlContinueRx>
 80066e8:	e038      	b.n	800675c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d105      	bne.n	800670c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 ff51 	bl	80075b4 <USBD_CtlSendStatus>
 8006712:	e023      	b.n	800675c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800671a:	2b05      	cmp	r3, #5
 800671c:	d11e      	bne.n	800675c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006726:	2100      	movs	r1, #0
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f001 fbe3 	bl	8007ef4 <USBD_LL_StallEP>
 800672e:	e015      	b.n	800675c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00d      	beq.n	8006758 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006742:	2b03      	cmp	r3, #3
 8006744:	d108      	bne.n	8006758 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	7afa      	ldrb	r2, [r7, #11]
 8006750:	4611      	mov	r1, r2
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	4798      	blx	r3
 8006756:	e001      	b.n	800675c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006758:	2302      	movs	r3, #2
 800675a:	e000      	b.n	800675e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b086      	sub	sp, #24
 800676a:	af00      	add	r7, sp, #0
 800676c:	60f8      	str	r0, [r7, #12]
 800676e:	460b      	mov	r3, r1
 8006770:	607a      	str	r2, [r7, #4]
 8006772:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006774:	7afb      	ldrb	r3, [r7, #11]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d17f      	bne.n	800687a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3314      	adds	r3, #20
 800677e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006786:	2b02      	cmp	r3, #2
 8006788:	d15c      	bne.n	8006844 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	429a      	cmp	r2, r3
 8006794:	d915      	bls.n	80067c2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	1ad2      	subs	r2, r2, r3
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	461a      	mov	r2, r3
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 febe 	bl	8007530 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067b4:	2300      	movs	r3, #0
 80067b6:	2200      	movs	r2, #0
 80067b8:	2100      	movs	r1, #0
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f001 fc45 	bl	800804a <USBD_LL_PrepareReceive>
 80067c0:	e04e      	b.n	8006860 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	6912      	ldr	r2, [r2, #16]
 80067ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80067ce:	fb01 f202 	mul.w	r2, r1, r2
 80067d2:	1a9b      	subs	r3, r3, r2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d11c      	bne.n	8006812 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d316      	bcc.n	8006812 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d20f      	bcs.n	8006812 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067f2:	2200      	movs	r2, #0
 80067f4:	2100      	movs	r1, #0
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fe9a 	bl	8007530 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006804:	2300      	movs	r3, #0
 8006806:	2200      	movs	r2, #0
 8006808:	2100      	movs	r1, #0
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f001 fc1d 	bl	800804a <USBD_LL_PrepareReceive>
 8006810:	e026      	b.n	8006860 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006824:	2b03      	cmp	r3, #3
 8006826:	d105      	bne.n	8006834 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006834:	2180      	movs	r1, #128	@ 0x80
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f001 fb5c 	bl	8007ef4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 fecc 	bl	80075da <USBD_CtlReceiveStatus>
 8006842:	e00d      	b.n	8006860 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800684a:	2b04      	cmp	r3, #4
 800684c:	d004      	beq.n	8006858 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006854:	2b00      	cmp	r3, #0
 8006856:	d103      	bne.n	8006860 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006858:	2180      	movs	r1, #128	@ 0x80
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f001 fb4a 	bl	8007ef4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006866:	2b01      	cmp	r3, #1
 8006868:	d11d      	bne.n	80068a6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7ff fe81 	bl	8006572 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006878:	e015      	b.n	80068a6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00d      	beq.n	80068a2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800688c:	2b03      	cmp	r3, #3
 800688e:	d108      	bne.n	80068a2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	7afa      	ldrb	r2, [r7, #11]
 800689a:	4611      	mov	r1, r2
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	4798      	blx	r3
 80068a0:	e001      	b.n	80068a6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068a2:	2302      	movs	r3, #2
 80068a4:	e000      	b.n	80068a8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068b8:	2340      	movs	r3, #64	@ 0x40
 80068ba:	2200      	movs	r2, #0
 80068bc:	2100      	movs	r1, #0
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 fad3 	bl	8007e6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2240      	movs	r2, #64	@ 0x40
 80068d0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068d4:	2340      	movs	r3, #64	@ 0x40
 80068d6:	2200      	movs	r2, #0
 80068d8:	2180      	movs	r1, #128	@ 0x80
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 fac5 	bl	8007e6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2240      	movs	r2, #64	@ 0x40
 80068ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006910:	2b00      	cmp	r3, #0
 8006912:	d009      	beq.n	8006928 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6852      	ldr	r2, [r2, #4]
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	4611      	mov	r1, r2
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	4798      	blx	r3
  }

  return USBD_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	460b      	mov	r3, r1
 800693c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	78fa      	ldrb	r2, [r7, #3]
 8006942:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	bc80      	pop	{r7}
 800694e:	4770      	bx	lr

08006950 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2204      	movs	r2, #4
 8006968:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	bc80      	pop	{r7}
 8006976:	4770      	bx	lr

08006978 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006986:	2b04      	cmp	r3, #4
 8006988:	d105      	bne.n	8006996 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr

080069a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b082      	sub	sp, #8
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d10b      	bne.n	80069cc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d005      	beq.n	80069cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069ee:	2b40      	cmp	r3, #64	@ 0x40
 80069f0:	d005      	beq.n	80069fe <USBD_StdDevReq+0x26>
 80069f2:	2b40      	cmp	r3, #64	@ 0x40
 80069f4:	d84f      	bhi.n	8006a96 <USBD_StdDevReq+0xbe>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <USBD_StdDevReq+0x36>
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d14b      	bne.n	8006a96 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	4798      	blx	r3
      break;
 8006a0c:	e048      	b.n	8006aa0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	785b      	ldrb	r3, [r3, #1]
 8006a12:	2b09      	cmp	r3, #9
 8006a14:	d839      	bhi.n	8006a8a <USBD_StdDevReq+0xb2>
 8006a16:	a201      	add	r2, pc, #4	@ (adr r2, 8006a1c <USBD_StdDevReq+0x44>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a6d 	.word	0x08006a6d
 8006a20:	08006a81 	.word	0x08006a81
 8006a24:	08006a8b 	.word	0x08006a8b
 8006a28:	08006a77 	.word	0x08006a77
 8006a2c:	08006a8b 	.word	0x08006a8b
 8006a30:	08006a4f 	.word	0x08006a4f
 8006a34:	08006a45 	.word	0x08006a45
 8006a38:	08006a8b 	.word	0x08006a8b
 8006a3c:	08006a63 	.word	0x08006a63
 8006a40:	08006a59 	.word	0x08006a59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f9dc 	bl	8006e04 <USBD_GetDescriptor>
          break;
 8006a4c:	e022      	b.n	8006a94 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fb3f 	bl	80070d4 <USBD_SetAddress>
          break;
 8006a56:	e01d      	b.n	8006a94 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fb7e 	bl	800715c <USBD_SetConfig>
          break;
 8006a60:	e018      	b.n	8006a94 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fc07 	bl	8007278 <USBD_GetConfig>
          break;
 8006a6a:	e013      	b.n	8006a94 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fc37 	bl	80072e2 <USBD_GetStatus>
          break;
 8006a74:	e00e      	b.n	8006a94 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fc65 	bl	8007348 <USBD_SetFeature>
          break;
 8006a7e:	e009      	b.n	8006a94 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fc74 	bl	8007370 <USBD_ClrFeature>
          break;
 8006a88:	e004      	b.n	8006a94 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fcc9 	bl	8007424 <USBD_CtlError>
          break;
 8006a92:	bf00      	nop
      }
      break;
 8006a94:	e004      	b.n	8006aa0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fcc3 	bl	8007424 <USBD_CtlError>
      break;
 8006a9e:	bf00      	nop
  }

  return ret;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop

08006aac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ac2:	2b40      	cmp	r3, #64	@ 0x40
 8006ac4:	d005      	beq.n	8006ad2 <USBD_StdItfReq+0x26>
 8006ac6:	2b40      	cmp	r3, #64	@ 0x40
 8006ac8:	d82e      	bhi.n	8006b28 <USBD_StdItfReq+0x7c>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <USBD_StdItfReq+0x26>
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d12a      	bne.n	8006b28 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d81d      	bhi.n	8006b1a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	889b      	ldrh	r3, [r3, #4]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d813      	bhi.n	8006b10 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	4798      	blx	r3
 8006af6:	4603      	mov	r3, r0
 8006af8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	88db      	ldrh	r3, [r3, #6]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d110      	bne.n	8006b24 <USBD_StdItfReq+0x78>
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10d      	bne.n	8006b24 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fd53 	bl	80075b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b0e:	e009      	b.n	8006b24 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fc86 	bl	8007424 <USBD_CtlError>
          break;
 8006b18:	e004      	b.n	8006b24 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fc81 	bl	8007424 <USBD_CtlError>
          break;
 8006b22:	e000      	b.n	8006b26 <USBD_StdItfReq+0x7a>
          break;
 8006b24:	bf00      	nop
      }
      break;
 8006b26:	e004      	b.n	8006b32 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fc7a 	bl	8007424 <USBD_CtlError>
      break;
 8006b30:	bf00      	nop
  }

  return USBD_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	889b      	ldrh	r3, [r3, #4]
 8006b4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b58:	2b40      	cmp	r3, #64	@ 0x40
 8006b5a:	d007      	beq.n	8006b6c <USBD_StdEPReq+0x30>
 8006b5c:	2b40      	cmp	r3, #64	@ 0x40
 8006b5e:	f200 8146 	bhi.w	8006dee <USBD_StdEPReq+0x2b2>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <USBD_StdEPReq+0x40>
 8006b66:	2b20      	cmp	r3, #32
 8006b68:	f040 8141 	bne.w	8006dee <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
      break;
 8006b7a:	e13d      	b.n	8006df8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b84:	2b20      	cmp	r3, #32
 8006b86:	d10a      	bne.n	8006b9e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
 8006b96:	4603      	mov	r3, r0
 8006b98:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
 8006b9c:	e12d      	b.n	8006dfa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	785b      	ldrb	r3, [r3, #1]
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d007      	beq.n	8006bb6 <USBD_StdEPReq+0x7a>
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	f300 811b 	bgt.w	8006de2 <USBD_StdEPReq+0x2a6>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d072      	beq.n	8006c96 <USBD_StdEPReq+0x15a>
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d03a      	beq.n	8006c2a <USBD_StdEPReq+0xee>
 8006bb4:	e115      	b.n	8006de2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d002      	beq.n	8006bc6 <USBD_StdEPReq+0x8a>
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d015      	beq.n	8006bf0 <USBD_StdEPReq+0xb4>
 8006bc4:	e02b      	b.n	8006c1e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bc6:	7bbb      	ldrb	r3, [r7, #14]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00c      	beq.n	8006be6 <USBD_StdEPReq+0xaa>
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	2b80      	cmp	r3, #128	@ 0x80
 8006bd0:	d009      	beq.n	8006be6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006bd2:	7bbb      	ldrb	r3, [r7, #14]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 f98c 	bl	8007ef4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bdc:	2180      	movs	r1, #128	@ 0x80
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 f988 	bl	8007ef4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006be4:	e020      	b.n	8006c28 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fc1b 	bl	8007424 <USBD_CtlError>
              break;
 8006bee:	e01b      	b.n	8006c28 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	885b      	ldrh	r3, [r3, #2]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10e      	bne.n	8006c16 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00b      	beq.n	8006c16 <USBD_StdEPReq+0xda>
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	2b80      	cmp	r3, #128	@ 0x80
 8006c02:	d008      	beq.n	8006c16 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	88db      	ldrh	r3, [r3, #6]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d104      	bne.n	8006c16 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 f96f 	bl	8007ef4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fccc 	bl	80075b4 <USBD_CtlSendStatus>

              break;
 8006c1c:	e004      	b.n	8006c28 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fbff 	bl	8007424 <USBD_CtlError>
              break;
 8006c26:	bf00      	nop
          }
          break;
 8006c28:	e0e0      	b.n	8006dec <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d002      	beq.n	8006c3a <USBD_StdEPReq+0xfe>
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d015      	beq.n	8006c64 <USBD_StdEPReq+0x128>
 8006c38:	e026      	b.n	8006c88 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00c      	beq.n	8006c5a <USBD_StdEPReq+0x11e>
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	2b80      	cmp	r3, #128	@ 0x80
 8006c44:	d009      	beq.n	8006c5a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 f952 	bl	8007ef4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006c50:	2180      	movs	r1, #128	@ 0x80
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 f94e 	bl	8007ef4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c58:	e01c      	b.n	8006c94 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fbe1 	bl	8007424 <USBD_CtlError>
              break;
 8006c62:	e017      	b.n	8006c94 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	885b      	ldrh	r3, [r3, #2]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d112      	bne.n	8006c92 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d004      	beq.n	8006c80 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 f959 	bl	8007f32 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fc97 	bl	80075b4 <USBD_CtlSendStatus>
              }
              break;
 8006c86:	e004      	b.n	8006c92 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fbca 	bl	8007424 <USBD_CtlError>
              break;
 8006c90:	e000      	b.n	8006c94 <USBD_StdEPReq+0x158>
              break;
 8006c92:	bf00      	nop
          }
          break;
 8006c94:	e0aa      	b.n	8006dec <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d002      	beq.n	8006ca6 <USBD_StdEPReq+0x16a>
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d032      	beq.n	8006d0a <USBD_StdEPReq+0x1ce>
 8006ca4:	e097      	b.n	8006dd6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d007      	beq.n	8006cbc <USBD_StdEPReq+0x180>
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	2b80      	cmp	r3, #128	@ 0x80
 8006cb0:	d004      	beq.n	8006cbc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fbb5 	bl	8007424 <USBD_CtlError>
                break;
 8006cba:	e091      	b.n	8006de0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	da0b      	bge.n	8006cdc <USBD_StdEPReq+0x1a0>
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	3310      	adds	r3, #16
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	3304      	adds	r3, #4
 8006cda:	e00b      	b.n	8006cf4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fbf8 	bl	80074f8 <USBD_CtlSendData>
              break;
 8006d08:	e06a      	b.n	8006de0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	da11      	bge.n	8006d36 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d12:	7bbb      	ldrb	r3, [r7, #14]
 8006d14:	f003 020f 	and.w	r2, r3, #15
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	440b      	add	r3, r1
 8006d24:	3318      	adds	r3, #24
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d117      	bne.n	8006d5c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fb78 	bl	8007424 <USBD_CtlError>
                  break;
 8006d34:	e054      	b.n	8006de0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	f003 020f 	and.w	r2, r3, #15
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d104      	bne.n	8006d5c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fb65 	bl	8007424 <USBD_CtlError>
                  break;
 8006d5a:	e041      	b.n	8006de0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	da0b      	bge.n	8006d7c <USBD_StdEPReq+0x240>
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	3310      	adds	r3, #16
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	4413      	add	r3, r2
 8006d78:	3304      	adds	r3, #4
 8006d7a:	e00b      	b.n	8006d94 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	4413      	add	r3, r2
 8006d92:	3304      	adds	r3, #4
 8006d94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <USBD_StdEPReq+0x266>
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	2b80      	cmp	r3, #128	@ 0x80
 8006da0:	d103      	bne.n	8006daa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	e00e      	b.n	8006dc8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006daa:	7bbb      	ldrb	r3, [r7, #14]
 8006dac:	4619      	mov	r1, r3
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f001 f8de 	bl	8007f70 <USBD_LL_IsStallEP>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	e002      	b.n	8006dc8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fb92 	bl	80074f8 <USBD_CtlSendData>
              break;
 8006dd4:	e004      	b.n	8006de0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fb23 	bl	8007424 <USBD_CtlError>
              break;
 8006dde:	bf00      	nop
          }
          break;
 8006de0:	e004      	b.n	8006dec <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fb1d 	bl	8007424 <USBD_CtlError>
          break;
 8006dea:	bf00      	nop
      }
      break;
 8006dec:	e004      	b.n	8006df8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fb17 	bl	8007424 <USBD_CtlError>
      break;
 8006df6:	bf00      	nop
  }

  return ret;
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	885b      	ldrh	r3, [r3, #2]
 8006e1e:	0a1b      	lsrs	r3, r3, #8
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	2b06      	cmp	r3, #6
 8006e26:	f200 8128 	bhi.w	800707a <USBD_GetDescriptor+0x276>
 8006e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e30 <USBD_GetDescriptor+0x2c>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006e4d 	.word	0x08006e4d
 8006e34:	08006e65 	.word	0x08006e65
 8006e38:	08006ea5 	.word	0x08006ea5
 8006e3c:	0800707b 	.word	0x0800707b
 8006e40:	0800707b 	.word	0x0800707b
 8006e44:	0800701b 	.word	0x0800701b
 8006e48:	08007047 	.word	0x08007047
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	7c12      	ldrb	r2, [r2, #16]
 8006e58:	f107 0108 	add.w	r1, r7, #8
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4798      	blx	r3
 8006e60:	60f8      	str	r0, [r7, #12]
      break;
 8006e62:	e112      	b.n	800708a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	7c1b      	ldrb	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10d      	bne.n	8006e88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e74:	f107 0208 	add.w	r2, r7, #8
 8006e78:	4610      	mov	r0, r2
 8006e7a:	4798      	blx	r3
 8006e7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3301      	adds	r3, #1
 8006e82:	2202      	movs	r2, #2
 8006e84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e86:	e100      	b.n	800708a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e90:	f107 0208 	add.w	r2, r7, #8
 8006e94:	4610      	mov	r0, r2
 8006e96:	4798      	blx	r3
 8006e98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	701a      	strb	r2, [r3, #0]
      break;
 8006ea2:	e0f2      	b.n	800708a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	885b      	ldrh	r3, [r3, #2]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b05      	cmp	r3, #5
 8006eac:	f200 80ac 	bhi.w	8007008 <USBD_GetDescriptor+0x204>
 8006eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb8 <USBD_GetDescriptor+0xb4>)
 8006eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb6:	bf00      	nop
 8006eb8:	08006ed1 	.word	0x08006ed1
 8006ebc:	08006f05 	.word	0x08006f05
 8006ec0:	08006f39 	.word	0x08006f39
 8006ec4:	08006f6d 	.word	0x08006f6d
 8006ec8:	08006fa1 	.word	0x08006fa1
 8006ecc:	08006fd5 	.word	0x08006fd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00b      	beq.n	8006ef4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	7c12      	ldrb	r2, [r2, #16]
 8006ee8:	f107 0108 	add.w	r1, r7, #8
 8006eec:	4610      	mov	r0, r2
 8006eee:	4798      	blx	r3
 8006ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ef2:	e091      	b.n	8007018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fa94 	bl	8007424 <USBD_CtlError>
            err++;
 8006efc:	7afb      	ldrb	r3, [r7, #11]
 8006efe:	3301      	adds	r3, #1
 8006f00:	72fb      	strb	r3, [r7, #11]
          break;
 8006f02:	e089      	b.n	8007018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00b      	beq.n	8006f28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	7c12      	ldrb	r2, [r2, #16]
 8006f1c:	f107 0108 	add.w	r1, r7, #8
 8006f20:	4610      	mov	r0, r2
 8006f22:	4798      	blx	r3
 8006f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f26:	e077      	b.n	8007018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fa7a 	bl	8007424 <USBD_CtlError>
            err++;
 8006f30:	7afb      	ldrb	r3, [r7, #11]
 8006f32:	3301      	adds	r3, #1
 8006f34:	72fb      	strb	r3, [r7, #11]
          break;
 8006f36:	e06f      	b.n	8007018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00b      	beq.n	8006f5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	7c12      	ldrb	r2, [r2, #16]
 8006f50:	f107 0108 	add.w	r1, r7, #8
 8006f54:	4610      	mov	r0, r2
 8006f56:	4798      	blx	r3
 8006f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f5a:	e05d      	b.n	8007018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fa60 	bl	8007424 <USBD_CtlError>
            err++;
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	3301      	adds	r3, #1
 8006f68:	72fb      	strb	r3, [r7, #11]
          break;
 8006f6a:	e055      	b.n	8007018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	7c12      	ldrb	r2, [r2, #16]
 8006f84:	f107 0108 	add.w	r1, r7, #8
 8006f88:	4610      	mov	r0, r2
 8006f8a:	4798      	blx	r3
 8006f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f8e:	e043      	b.n	8007018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa46 	bl	8007424 <USBD_CtlError>
            err++;
 8006f98:	7afb      	ldrb	r3, [r7, #11]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f9e:	e03b      	b.n	8007018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	7c12      	ldrb	r2, [r2, #16]
 8006fb8:	f107 0108 	add.w	r1, r7, #8
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4798      	blx	r3
 8006fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fc2:	e029      	b.n	8007018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa2c 	bl	8007424 <USBD_CtlError>
            err++;
 8006fcc:	7afb      	ldrb	r3, [r7, #11]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006fd2:	e021      	b.n	8007018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	7c12      	ldrb	r2, [r2, #16]
 8006fec:	f107 0108 	add.w	r1, r7, #8
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4798      	blx	r3
 8006ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ff6:	e00f      	b.n	8007018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa12 	bl	8007424 <USBD_CtlError>
            err++;
 8007000:	7afb      	ldrb	r3, [r7, #11]
 8007002:	3301      	adds	r3, #1
 8007004:	72fb      	strb	r3, [r7, #11]
          break;
 8007006:	e007      	b.n	8007018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fa0a 	bl	8007424 <USBD_CtlError>
          err++;
 8007010:	7afb      	ldrb	r3, [r7, #11]
 8007012:	3301      	adds	r3, #1
 8007014:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007016:	e038      	b.n	800708a <USBD_GetDescriptor+0x286>
 8007018:	e037      	b.n	800708a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	7c1b      	ldrb	r3, [r3, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d109      	bne.n	8007036 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800702a:	f107 0208 	add.w	r2, r7, #8
 800702e:	4610      	mov	r0, r2
 8007030:	4798      	blx	r3
 8007032:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007034:	e029      	b.n	800708a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f9f3 	bl	8007424 <USBD_CtlError>
        err++;
 800703e:	7afb      	ldrb	r3, [r7, #11]
 8007040:	3301      	adds	r3, #1
 8007042:	72fb      	strb	r3, [r7, #11]
      break;
 8007044:	e021      	b.n	800708a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	7c1b      	ldrb	r3, [r3, #16]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10d      	bne.n	800706a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007056:	f107 0208 	add.w	r2, r7, #8
 800705a:	4610      	mov	r0, r2
 800705c:	4798      	blx	r3
 800705e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3301      	adds	r3, #1
 8007064:	2207      	movs	r2, #7
 8007066:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007068:	e00f      	b.n	800708a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f9d9 	bl	8007424 <USBD_CtlError>
        err++;
 8007072:	7afb      	ldrb	r3, [r7, #11]
 8007074:	3301      	adds	r3, #1
 8007076:	72fb      	strb	r3, [r7, #11]
      break;
 8007078:	e007      	b.n	800708a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f9d1 	bl	8007424 <USBD_CtlError>
      err++;
 8007082:	7afb      	ldrb	r3, [r7, #11]
 8007084:	3301      	adds	r3, #1
 8007086:	72fb      	strb	r3, [r7, #11]
      break;
 8007088:	bf00      	nop
  }

  if (err != 0U)
 800708a:	7afb      	ldrb	r3, [r7, #11]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d11c      	bne.n	80070ca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007090:	893b      	ldrh	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d011      	beq.n	80070ba <USBD_GetDescriptor+0x2b6>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	88db      	ldrh	r3, [r3, #6]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00d      	beq.n	80070ba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	88da      	ldrh	r2, [r3, #6]
 80070a2:	893b      	ldrh	r3, [r7, #8]
 80070a4:	4293      	cmp	r3, r2
 80070a6:	bf28      	it	cs
 80070a8:	4613      	movcs	r3, r2
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070ae:	893b      	ldrh	r3, [r7, #8]
 80070b0:	461a      	mov	r2, r3
 80070b2:	68f9      	ldr	r1, [r7, #12]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fa1f 	bl	80074f8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	88db      	ldrh	r3, [r3, #6]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d104      	bne.n	80070cc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fa76 	bl	80075b4 <USBD_CtlSendStatus>
 80070c8:	e000      	b.n	80070cc <USBD_GetDescriptor+0x2c8>
    return;
 80070ca:	bf00      	nop
    }
  }
}
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop

080070d4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	889b      	ldrh	r3, [r3, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d130      	bne.n	8007148 <USBD_SetAddress+0x74>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	88db      	ldrh	r3, [r3, #6]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d12c      	bne.n	8007148 <USBD_SetAddress+0x74>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	885b      	ldrh	r3, [r3, #2]
 80070f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80070f4:	d828      	bhi.n	8007148 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	885b      	ldrh	r3, [r3, #2]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007100:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007108:	2b03      	cmp	r3, #3
 800710a:	d104      	bne.n	8007116 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f988 	bl	8007424 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007114:	e01d      	b.n	8007152 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	7bfa      	ldrb	r2, [r7, #15]
 800711a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 ff4f 	bl	8007fc6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fa43 	bl	80075b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d004      	beq.n	800713e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800713c:	e009      	b.n	8007152 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007146:	e004      	b.n	8007152 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f96a 	bl	8007424 <USBD_CtlError>
  }
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	885b      	ldrh	r3, [r3, #2]
 800716a:	b2da      	uxtb	r2, r3
 800716c:	4b41      	ldr	r3, [pc, #260]	@ (8007274 <USBD_SetConfig+0x118>)
 800716e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007170:	4b40      	ldr	r3, [pc, #256]	@ (8007274 <USBD_SetConfig+0x118>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d904      	bls.n	8007182 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f952 	bl	8007424 <USBD_CtlError>
 8007180:	e075      	b.n	800726e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007188:	2b02      	cmp	r3, #2
 800718a:	d002      	beq.n	8007192 <USBD_SetConfig+0x36>
 800718c:	2b03      	cmp	r3, #3
 800718e:	d023      	beq.n	80071d8 <USBD_SetConfig+0x7c>
 8007190:	e062      	b.n	8007258 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007192:	4b38      	ldr	r3, [pc, #224]	@ (8007274 <USBD_SetConfig+0x118>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01a      	beq.n	80071d0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800719a:	4b36      	ldr	r3, [pc, #216]	@ (8007274 <USBD_SetConfig+0x118>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2203      	movs	r2, #3
 80071a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80071ac:	4b31      	ldr	r3, [pc, #196]	@ (8007274 <USBD_SetConfig+0x118>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff f9e7 	bl	8006586 <USBD_SetClassConfig>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d104      	bne.n	80071c8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f92f 	bl	8007424 <USBD_CtlError>
            return;
 80071c6:	e052      	b.n	800726e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f9f3 	bl	80075b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80071ce:	e04e      	b.n	800726e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f9ef 	bl	80075b4 <USBD_CtlSendStatus>
        break;
 80071d6:	e04a      	b.n	800726e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80071d8:	4b26      	ldr	r3, [pc, #152]	@ (8007274 <USBD_SetConfig+0x118>)
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d112      	bne.n	8007206 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80071e8:	4b22      	ldr	r3, [pc, #136]	@ (8007274 <USBD_SetConfig+0x118>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80071f2:	4b20      	ldr	r3, [pc, #128]	@ (8007274 <USBD_SetConfig+0x118>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff f9e3 	bl	80065c4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f9d8 	bl	80075b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007204:	e033      	b.n	800726e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007206:	4b1b      	ldr	r3, [pc, #108]	@ (8007274 <USBD_SetConfig+0x118>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	429a      	cmp	r2, r3
 8007212:	d01d      	beq.n	8007250 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff f9d1 	bl	80065c4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007222:	4b14      	ldr	r3, [pc, #80]	@ (8007274 <USBD_SetConfig+0x118>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800722c:	4b11      	ldr	r3, [pc, #68]	@ (8007274 <USBD_SetConfig+0x118>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff f9a7 	bl	8006586 <USBD_SetClassConfig>
 8007238:	4603      	mov	r3, r0
 800723a:	2b02      	cmp	r3, #2
 800723c:	d104      	bne.n	8007248 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f8ef 	bl	8007424 <USBD_CtlError>
            return;
 8007246:	e012      	b.n	800726e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f9b3 	bl	80075b4 <USBD_CtlSendStatus>
        break;
 800724e:	e00e      	b.n	800726e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f9af 	bl	80075b4 <USBD_CtlSendStatus>
        break;
 8007256:	e00a      	b.n	800726e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f8e2 	bl	8007424 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007260:	4b04      	ldr	r3, [pc, #16]	@ (8007274 <USBD_SetConfig+0x118>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7ff f9ac 	bl	80065c4 <USBD_ClrClassConfig>
        break;
 800726c:	bf00      	nop
    }
  }
}
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000220 	.word	0x20000220

08007278 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	88db      	ldrh	r3, [r3, #6]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d004      	beq.n	8007294 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f8c9 	bl	8007424 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007292:	e022      	b.n	80072da <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800729a:	2b02      	cmp	r3, #2
 800729c:	dc02      	bgt.n	80072a4 <USBD_GetConfig+0x2c>
 800729e:	2b00      	cmp	r3, #0
 80072a0:	dc03      	bgt.n	80072aa <USBD_GetConfig+0x32>
 80072a2:	e015      	b.n	80072d0 <USBD_GetConfig+0x58>
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d00b      	beq.n	80072c0 <USBD_GetConfig+0x48>
 80072a8:	e012      	b.n	80072d0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3308      	adds	r3, #8
 80072b4:	2201      	movs	r2, #1
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f91d 	bl	80074f8 <USBD_CtlSendData>
        break;
 80072be:	e00c      	b.n	80072da <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3304      	adds	r3, #4
 80072c4:	2201      	movs	r2, #1
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f915 	bl	80074f8 <USBD_CtlSendData>
        break;
 80072ce:	e004      	b.n	80072da <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f8a6 	bl	8007424 <USBD_CtlError>
        break;
 80072d8:	bf00      	nop
}
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b082      	sub	sp, #8
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072f2:	3b01      	subs	r3, #1
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d81e      	bhi.n	8007336 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	88db      	ldrh	r3, [r3, #6]
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d004      	beq.n	800730a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f88e 	bl	8007424 <USBD_CtlError>
        break;
 8007308:	e01a      	b.n	8007340 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007316:	2b00      	cmp	r3, #0
 8007318:	d005      	beq.n	8007326 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f043 0202 	orr.w	r2, r3, #2
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	330c      	adds	r3, #12
 800732a:	2202      	movs	r2, #2
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f8e2 	bl	80074f8 <USBD_CtlSendData>
      break;
 8007334:	e004      	b.n	8007340 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f873 	bl	8007424 <USBD_CtlError>
      break;
 800733e:	bf00      	nop
  }
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	885b      	ldrh	r3, [r3, #2]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d106      	bne.n	8007368 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f926 	bl	80075b4 <USBD_CtlSendStatus>
  }
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007380:	3b01      	subs	r3, #1
 8007382:	2b02      	cmp	r3, #2
 8007384:	d80b      	bhi.n	800739e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	885b      	ldrh	r3, [r3, #2]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d10c      	bne.n	80073a8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f90c 	bl	80075b4 <USBD_CtlSendStatus>
      }
      break;
 800739c:	e004      	b.n	80073a8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f83f 	bl	8007424 <USBD_CtlError>
      break;
 80073a6:	e000      	b.n	80073aa <USBD_ClrFeature+0x3a>
      break;
 80073a8:	bf00      	nop
  }
}
 80073aa:	bf00      	nop
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781a      	ldrb	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	785a      	ldrb	r2, [r3, #1]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	3302      	adds	r3, #2
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	3303      	adds	r3, #3
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	021b      	lsls	r3, r3, #8
 80073dc:	b29b      	uxth	r3, r3
 80073de:	4413      	add	r3, r2
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	3304      	adds	r3, #4
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	3305      	adds	r3, #5
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	4413      	add	r3, r2
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	3306      	adds	r3, #6
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	3307      	adds	r3, #7
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	021b      	lsls	r3, r3, #8
 8007410:	b29b      	uxth	r3, r3
 8007412:	4413      	add	r3, r2
 8007414:	b29a      	uxth	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	80da      	strh	r2, [r3, #6]

}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	bc80      	pop	{r7}
 8007422:	4770      	bx	lr

08007424 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800742e:	2180      	movs	r1, #128	@ 0x80
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fd5f 	bl	8007ef4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007436:	2100      	movs	r1, #0
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fd5b 	bl	8007ef4 <USBD_LL_StallEP>
}
 800743e:	bf00      	nop
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b086      	sub	sp, #24
 800744a:	af00      	add	r7, sp, #0
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d032      	beq.n	80074c2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 f834 	bl	80074ca <USBD_GetLen>
 8007462:	4603      	mov	r3, r0
 8007464:	3301      	adds	r3, #1
 8007466:	b29b      	uxth	r3, r3
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	b29a      	uxth	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007470:	7dfb      	ldrb	r3, [r7, #23]
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	75fa      	strb	r2, [r7, #23]
 8007476:	461a      	mov	r2, r3
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	4413      	add	r3, r2
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	7812      	ldrb	r2, [r2, #0]
 8007480:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	75fa      	strb	r2, [r7, #23]
 8007488:	461a      	mov	r2, r3
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	4413      	add	r3, r2
 800748e:	2203      	movs	r2, #3
 8007490:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007492:	e012      	b.n	80074ba <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	60fa      	str	r2, [r7, #12]
 800749a:	7dfa      	ldrb	r2, [r7, #23]
 800749c:	1c51      	adds	r1, r2, #1
 800749e:	75f9      	strb	r1, [r7, #23]
 80074a0:	4611      	mov	r1, r2
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	440a      	add	r2, r1
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	75fa      	strb	r2, [r7, #23]
 80074b0:	461a      	mov	r2, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	4413      	add	r3, r2
 80074b6:	2200      	movs	r2, #0
 80074b8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e8      	bne.n	8007494 <USBD_GetString+0x4e>
    }
  }
}
 80074c2:	bf00      	nop
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80074d6:	e005      	b.n	80074e4 <USBD_GetLen+0x1a>
  {
    len++;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
 80074da:	3301      	adds	r3, #1
 80074dc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	3301      	adds	r3, #1
 80074e2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f5      	bne.n	80074d8 <USBD_GetLen+0xe>
  }

  return len;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bc80      	pop	{r7}
 80074f6:	4770      	bx	lr

080074f8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	4613      	mov	r3, r2
 8007504:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2202      	movs	r2, #2
 800750a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800750e:	88fa      	ldrh	r2, [r7, #6]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007514:	88fa      	ldrh	r2, [r7, #6]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800751a:	88fb      	ldrh	r3, [r7, #6]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	2100      	movs	r1, #0
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fd6f 	bl	8008004 <USBD_LL_Transmit>

  return USBD_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	4613      	mov	r3, r2
 800753c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	2100      	movs	r1, #0
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fd5d 	bl	8008004 <USBD_LL_Transmit>

  return USBD_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	4613      	mov	r3, r2
 8007560:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2203      	movs	r2, #3
 8007566:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800756a:	88fa      	ldrh	r2, [r7, #6]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007572:	88fa      	ldrh	r2, [r7, #6]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	2100      	movs	r1, #0
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 fd62 	bl	800804a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	4613      	mov	r3, r2
 800759c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800759e:	88fb      	ldrh	r3, [r7, #6]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	2100      	movs	r1, #0
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 fd50 	bl	800804a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2204      	movs	r2, #4
 80075c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075c4:	2300      	movs	r3, #0
 80075c6:	2200      	movs	r2, #0
 80075c8:	2100      	movs	r1, #0
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fd1a 	bl	8008004 <USBD_LL_Transmit>

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2205      	movs	r2, #5
 80075e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075ea:	2300      	movs	r3, #0
 80075ec:	2200      	movs	r2, #0
 80075ee:	2100      	movs	r1, #0
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fd2a 	bl	800804a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007604:	2200      	movs	r2, #0
 8007606:	4912      	ldr	r1, [pc, #72]	@ (8007650 <MX_USB_DEVICE_Init+0x50>)
 8007608:	4812      	ldr	r0, [pc, #72]	@ (8007654 <MX_USB_DEVICE_Init+0x54>)
 800760a:	f7fe ff62 	bl	80064d2 <USBD_Init>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007614:	f7f8 fe91 	bl	800033a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007618:	490f      	ldr	r1, [pc, #60]	@ (8007658 <MX_USB_DEVICE_Init+0x58>)
 800761a:	480e      	ldr	r0, [pc, #56]	@ (8007654 <MX_USB_DEVICE_Init+0x54>)
 800761c:	f7fe ff84 	bl	8006528 <USBD_RegisterClass>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007626:	f7f8 fe88 	bl	800033a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800762a:	490c      	ldr	r1, [pc, #48]	@ (800765c <MX_USB_DEVICE_Init+0x5c>)
 800762c:	4809      	ldr	r0, [pc, #36]	@ (8007654 <MX_USB_DEVICE_Init+0x54>)
 800762e:	f7fe feb5 	bl	800639c <USBD_CDC_RegisterInterface>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007638:	f7f8 fe7f 	bl	800033a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800763c:	4805      	ldr	r0, [pc, #20]	@ (8007654 <MX_USB_DEVICE_Init+0x54>)
 800763e:	f7fe ff8c 	bl	800655a <USBD_Start>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007648:	f7f8 fe77 	bl	800033a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800764c:	bf00      	nop
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20000140 	.word	0x20000140
 8007654:	20000224 	.word	0x20000224
 8007658:	20000020 	.word	0x20000020
 800765c:	20000130 	.word	0x20000130

08007660 <cdcAvailable>:
uint32_t rx_len = 512;
uint8_t rx_buf[512];


uint32_t cdcAvailable(void)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8007666:	4b09      	ldr	r3, [pc, #36]	@ (800768c <cdcAvailable+0x2c>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	4b09      	ldr	r3, [pc, #36]	@ (8007690 <cdcAvailable+0x30>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	4a08      	ldr	r2, [pc, #32]	@ (8007694 <cdcAvailable+0x34>)
 8007672:	6812      	ldr	r2, [r2, #0]
 8007674:	fbb3 f1f2 	udiv	r1, r3, r2
 8007678:	fb01 f202 	mul.w	r2, r1, r2
 800767c:	1a9b      	subs	r3, r3, r2
 800767e:	607b      	str	r3, [r7, #4]

  return ret;
 8007680:	687b      	ldr	r3, [r7, #4]
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	bc80      	pop	{r7}
 800768a:	4770      	bx	lr
 800768c:	200004e8 	.word	0x200004e8
 8007690:	200004ec 	.word	0x200004ec
 8007694:	2000012c 	.word	0x2000012c

08007698 <cdcRead>:


uint8_t cdcRead(void)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 800769e:	4b0e      	ldr	r3, [pc, #56]	@ (80076d8 <cdcRead+0x40>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a0e      	ldr	r2, [pc, #56]	@ (80076dc <cdcRead+0x44>)
 80076a4:	5cd3      	ldrb	r3, [r2, r3]
 80076a6:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 80076a8:	4b0b      	ldr	r3, [pc, #44]	@ (80076d8 <cdcRead+0x40>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	4b0c      	ldr	r3, [pc, #48]	@ (80076e0 <cdcRead+0x48>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d00b      	beq.n	80076cc <cdcRead+0x34>
  {
	  rx_out = (rx_out + 1) % rx_len;
 80076b4:	4b08      	ldr	r3, [pc, #32]	@ (80076d8 <cdcRead+0x40>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3301      	adds	r3, #1
 80076ba:	4a0a      	ldr	r2, [pc, #40]	@ (80076e4 <cdcRead+0x4c>)
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	fbb3 f1f2 	udiv	r1, r3, r2
 80076c2:	fb01 f202 	mul.w	r2, r1, r2
 80076c6:	1a9b      	subs	r3, r3, r2
 80076c8:	4a03      	ldr	r2, [pc, #12]	@ (80076d8 <cdcRead+0x40>)
 80076ca:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80076cc:	79fb      	ldrb	r3, [r7, #7]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bc80      	pop	{r7}
 80076d6:	4770      	bx	lr
 80076d8:	200004ec 	.word	0x200004ec
 80076dc:	200004f0 	.word	0x200004f0
 80076e0:	200004e8 	.word	0x200004e8
 80076e4:	2000012c 	.word	0x2000012c

080076e8 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] =rx_data;    //오버라이트
 80076f2:	4b0e      	ldr	r3, [pc, #56]	@ (800772c <cdcDataIn+0x44>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	490e      	ldr	r1, [pc, #56]	@ (8007730 <cdcDataIn+0x48>)
 80076f8:	79fa      	ldrb	r2, [r7, #7]
 80076fa:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in +1) % rx_len;
 80076fc:	4b0b      	ldr	r3, [pc, #44]	@ (800772c <cdcDataIn+0x44>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	3301      	adds	r3, #1
 8007702:	4a0c      	ldr	r2, [pc, #48]	@ (8007734 <cdcDataIn+0x4c>)
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	fbb3 f1f2 	udiv	r1, r3, r2
 800770a:	fb01 f202 	mul.w	r2, r1, r2
 800770e:	1a9b      	subs	r3, r3, r2
 8007710:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 8007712:	4b09      	ldr	r3, [pc, #36]	@ (8007738 <cdcDataIn+0x50>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	429a      	cmp	r2, r3
 800771a:	d002      	beq.n	8007722 <cdcDataIn+0x3a>
  {
	  rx_in = next_rx_in;
 800771c:	4a03      	ldr	r2, [pc, #12]	@ (800772c <cdcDataIn+0x44>)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6013      	str	r3, [r2, #0]
  }
}
 8007722:	bf00      	nop
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	bc80      	pop	{r7}
 800772a:	4770      	bx	lr
 800772c:	200004e8 	.word	0x200004e8
 8007730:	200004f0 	.word	0x200004f0
 8007734:	2000012c 	.word	0x2000012c
 8007738:	200004ec 	.word	0x200004ec

0800773c <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 8007746:	f7f8 fd92 	bl	800026e <millis>
 800774a:	60f8      	str	r0, [r7, #12]
  while(1)
  {
	  ret = CDC_Transmit_FS(p_data,length);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	b29b      	uxth	r3, r3
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f91e 	bl	8007994 <CDC_Transmit_FS>
 8007758:	4603      	mov	r3, r0
 800775a:	72fb      	strb	r3, [r7, #11]
    if(ret == USBD_OK)
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <cdcWrite+0x2a>
    {
    	return length;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	e00e      	b.n	8007784 <cdcWrite+0x48>
    }
    else if(ret ==USBD_FAIL)
 8007766:	7afb      	ldrb	r3, [r7, #11]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d101      	bne.n	8007770 <cdcWrite+0x34>
    {
    	return 0;
 800776c:	2300      	movs	r3, #0
 800776e:	e009      	b.n	8007784 <cdcWrite+0x48>
    }
    //busy 인 경우 while문을 돈다.
    if(millis()-pre_time >= 100)
 8007770:	f7f8 fd7d 	bl	800026e <millis>
 8007774:	4602      	mov	r2, r0
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b63      	cmp	r3, #99	@ 0x63
 800777c:	d800      	bhi.n	8007780 <cdcWrite+0x44>
	  ret = CDC_Transmit_FS(p_data,length);
 800777e:	e7e5      	b.n	800774c <cdcWrite+0x10>
    {
    	break;
 8007780:	bf00      	nop
    }
  }

  return 0;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <cdcGetBaud>:

uint32_t cdcGetBaud(void)
{
 800778c:	b480      	push	{r7}
 800778e:	af00      	add	r7, sp, #0
	return LineCoding.bitrate;
 8007790:	4b02      	ldr	r3, [pc, #8]	@ (800779c <cdcGetBaud+0x10>)
 8007792:	681b      	ldr	r3, [r3, #0]
}
 8007794:	4618      	mov	r0, r3
 8007796:	46bd      	mov	sp, r7
 8007798:	bc80      	pop	{r7}
 800779a:	4770      	bx	lr
 800779c:	20000124 	.word	0x20000124

080077a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077a4:	2200      	movs	r2, #0
 80077a6:	4905      	ldr	r1, [pc, #20]	@ (80077bc <CDC_Init_FS+0x1c>)
 80077a8:	4805      	ldr	r0, [pc, #20]	@ (80077c0 <CDC_Init_FS+0x20>)
 80077aa:	f7fe fe0d 	bl	80063c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80077ae:	4905      	ldr	r1, [pc, #20]	@ (80077c4 <CDC_Init_FS+0x24>)
 80077b0:	4803      	ldr	r0, [pc, #12]	@ (80077c0 <CDC_Init_FS+0x20>)
 80077b2:	f7fe fe22 	bl	80063fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80077b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	200008f0 	.word	0x200008f0
 80077c0:	20000224 	.word	0x20000224
 80077c4:	200006f0 	.word	0x200006f0

080077c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80077c8:	b480      	push	{r7}
 80077ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80077cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bc80      	pop	{r7}
 80077d4:	4770      	bx	lr
	...

080077d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	6039      	str	r1, [r7, #0]
 80077e2:	71fb      	strb	r3, [r7, #7]
 80077e4:	4613      	mov	r3, r2
 80077e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80077e8:	79fb      	ldrb	r3, [r7, #7]
 80077ea:	2b23      	cmp	r3, #35	@ 0x23
 80077ec:	f200 80a3 	bhi.w	8007936 <CDC_Control_FS+0x15e>
 80077f0:	a201      	add	r2, pc, #4	@ (adr r2, 80077f8 <CDC_Control_FS+0x20>)
 80077f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f6:	bf00      	nop
 80077f8:	08007937 	.word	0x08007937
 80077fc:	08007937 	.word	0x08007937
 8007800:	08007937 	.word	0x08007937
 8007804:	08007937 	.word	0x08007937
 8007808:	08007937 	.word	0x08007937
 800780c:	08007937 	.word	0x08007937
 8007810:	08007937 	.word	0x08007937
 8007814:	08007937 	.word	0x08007937
 8007818:	08007937 	.word	0x08007937
 800781c:	08007937 	.word	0x08007937
 8007820:	08007937 	.word	0x08007937
 8007824:	08007937 	.word	0x08007937
 8007828:	08007937 	.word	0x08007937
 800782c:	08007937 	.word	0x08007937
 8007830:	08007937 	.word	0x08007937
 8007834:	08007937 	.word	0x08007937
 8007838:	08007937 	.word	0x08007937
 800783c:	08007937 	.word	0x08007937
 8007840:	08007937 	.word	0x08007937
 8007844:	08007937 	.word	0x08007937
 8007848:	08007937 	.word	0x08007937
 800784c:	08007937 	.word	0x08007937
 8007850:	08007937 	.word	0x08007937
 8007854:	08007937 	.word	0x08007937
 8007858:	08007937 	.word	0x08007937
 800785c:	08007937 	.word	0x08007937
 8007860:	08007937 	.word	0x08007937
 8007864:	08007937 	.word	0x08007937
 8007868:	08007937 	.word	0x08007937
 800786c:	08007937 	.word	0x08007937
 8007870:	08007937 	.word	0x08007937
 8007874:	08007937 	.word	0x08007937
 8007878:	08007889 	.word	0x08007889
 800787c:	080078e3 	.word	0x080078e3
 8007880:	08007937 	.word	0x08007937
 8007884:	08007937 	.word	0x08007937
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	4b2d      	ldr	r3, [pc, #180]	@ (8007944 <CDC_Control_FS+0x16c>)
 8007890:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 8007892:	4b2c      	ldr	r3, [pc, #176]	@ (8007944 <CDC_Control_FS+0x16c>)
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	3301      	adds	r3, #1
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	021b      	lsls	r3, r3, #8
 800789e:	4313      	orrs	r3, r2
 80078a0:	4a28      	ldr	r2, [pc, #160]	@ (8007944 <CDC_Control_FS+0x16c>)
 80078a2:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 80078a4:	4b27      	ldr	r3, [pc, #156]	@ (8007944 <CDC_Control_FS+0x16c>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	3302      	adds	r3, #2
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	041b      	lsls	r3, r3, #16
 80078b0:	4313      	orrs	r3, r2
 80078b2:	4a24      	ldr	r2, [pc, #144]	@ (8007944 <CDC_Control_FS+0x16c>)
 80078b4:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 80078b6:	4b23      	ldr	r3, [pc, #140]	@ (8007944 <CDC_Control_FS+0x16c>)
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	3303      	adds	r3, #3
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	061b      	lsls	r3, r3, #24
 80078c2:	4313      	orrs	r3, r2
 80078c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007944 <CDC_Control_FS+0x16c>)
 80078c6:	6013      	str	r3, [r2, #0]
    	LineCoding.format   = pbuf[4];
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	791a      	ldrb	r2, [r3, #4]
 80078cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007944 <CDC_Control_FS+0x16c>)
 80078ce:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	795a      	ldrb	r2, [r3, #5]
 80078d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007944 <CDC_Control_FS+0x16c>)
 80078d6:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	799a      	ldrb	r2, [r3, #6]
 80078dc:	4b19      	ldr	r3, [pc, #100]	@ (8007944 <CDC_Control_FS+0x16c>)
 80078de:	719a      	strb	r2, [r3, #6]
    break;
 80078e0:	e02a      	b.n	8007938 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80078e2:	4b18      	ldr	r3, [pc, #96]	@ (8007944 <CDC_Control_FS+0x16c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 80078ec:	4b15      	ldr	r3, [pc, #84]	@ (8007944 <CDC_Control_FS+0x16c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	0a1a      	lsrs	r2, r3, #8
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	3301      	adds	r3, #1
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 80078fa:	4b12      	ldr	r3, [pc, #72]	@ (8007944 <CDC_Control_FS+0x16c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	0c1a      	lsrs	r2, r3, #16
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	3302      	adds	r3, #2
 8007904:	b2d2      	uxtb	r2, r2
 8007906:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8007908:	4b0e      	ldr	r3, [pc, #56]	@ (8007944 <CDC_Control_FS+0x16c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	0e1a      	lsrs	r2, r3, #24
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	3303      	adds	r3, #3
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	3304      	adds	r3, #4
 800791a:	4a0a      	ldr	r2, [pc, #40]	@ (8007944 <CDC_Control_FS+0x16c>)
 800791c:	7912      	ldrb	r2, [r2, #4]
 800791e:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	3305      	adds	r3, #5
 8007924:	4a07      	ldr	r2, [pc, #28]	@ (8007944 <CDC_Control_FS+0x16c>)
 8007926:	7952      	ldrb	r2, [r2, #5]
 8007928:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	3306      	adds	r3, #6
 800792e:	4a05      	ldr	r2, [pc, #20]	@ (8007944 <CDC_Control_FS+0x16c>)
 8007930:	7992      	ldrb	r2, [r2, #6]
 8007932:	701a      	strb	r2, [r3, #0]
    break;
 8007934:	e000      	b.n	8007938 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007936:	bf00      	nop
  }

  return (USBD_OK);
 8007938:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	bc80      	pop	{r7}
 8007942:	4770      	bx	lr
 8007944:	20000124 	.word	0x20000124

08007948 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	480e      	ldr	r0, [pc, #56]	@ (8007990 <CDC_Receive_FS+0x48>)
 8007956:	f7fe fd50 	bl	80063fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800795a:	480d      	ldr	r0, [pc, #52]	@ (8007990 <CDC_Receive_FS+0x48>)
 800795c:	f7fe fd8f 	bl	800647e <USBD_CDC_ReceivePacket>


  for(int i=0;i<*Len;i++)
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	e009      	b.n	800797a <CDC_Receive_FS+0x32>
  {
	  cdcDataIn(Buf[i]);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	4413      	add	r3, r2
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff feba 	bl	80076e8 <cdcDataIn>
  for(int i=0;i<*Len;i++)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3301      	adds	r3, #1
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	429a      	cmp	r2, r3
 8007982:	d8f0      	bhi.n	8007966 <CDC_Receive_FS+0x1e>
  }


  return (USBD_OK);
 8007984:	2300      	movs	r3, #0




  /* USER CODE END 6 */
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20000224 	.word	0x20000224

08007994 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80079a4:	4b0d      	ldr	r3, [pc, #52]	@ (80079dc <CDC_Transmit_FS+0x48>)
 80079a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e00b      	b.n	80079d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80079ba:	887b      	ldrh	r3, [r7, #2]
 80079bc:	461a      	mov	r2, r3
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	4806      	ldr	r0, [pc, #24]	@ (80079dc <CDC_Transmit_FS+0x48>)
 80079c2:	f7fe fd01 	bl	80063c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80079c6:	4805      	ldr	r0, [pc, #20]	@ (80079dc <CDC_Transmit_FS+0x48>)
 80079c8:	f7fe fd2a 	bl	8006420 <USBD_CDC_TransmitPacket>
 80079cc:	4603      	mov	r3, r0
 80079ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20000224 	.word	0x20000224

080079e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	4603      	mov	r3, r0
 80079e8:	6039      	str	r1, [r7, #0]
 80079ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2212      	movs	r2, #18
 80079f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80079f2:	4b03      	ldr	r3, [pc, #12]	@ (8007a00 <USBD_FS_DeviceDescriptor+0x20>)
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bc80      	pop	{r7}
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	2000015c 	.word	0x2000015c

08007a04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	6039      	str	r1, [r7, #0]
 8007a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2204      	movs	r2, #4
 8007a14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a16:	4b03      	ldr	r3, [pc, #12]	@ (8007a24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc80      	pop	{r7}
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	20000170 	.word	0x20000170

08007a28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	6039      	str	r1, [r7, #0]
 8007a32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d105      	bne.n	8007a46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	4907      	ldr	r1, [pc, #28]	@ (8007a5c <USBD_FS_ProductStrDescriptor+0x34>)
 8007a3e:	4808      	ldr	r0, [pc, #32]	@ (8007a60 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a40:	f7ff fd01 	bl	8007446 <USBD_GetString>
 8007a44:	e004      	b.n	8007a50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	4904      	ldr	r1, [pc, #16]	@ (8007a5c <USBD_FS_ProductStrDescriptor+0x34>)
 8007a4a:	4805      	ldr	r0, [pc, #20]	@ (8007a60 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a4c:	f7ff fcfb 	bl	8007446 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a50:	4b02      	ldr	r3, [pc, #8]	@ (8007a5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000af0 	.word	0x20000af0
 8007a60:	08008b50 	.word	0x08008b50

08007a64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	6039      	str	r1, [r7, #0]
 8007a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	4904      	ldr	r1, [pc, #16]	@ (8007a84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a74:	4804      	ldr	r0, [pc, #16]	@ (8007a88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a76:	f7ff fce6 	bl	8007446 <USBD_GetString>
  return USBD_StrDesc;
 8007a7a:	4b02      	ldr	r3, [pc, #8]	@ (8007a84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20000af0 	.word	0x20000af0
 8007a88:	08008b68 	.word	0x08008b68

08007a8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	6039      	str	r1, [r7, #0]
 8007a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	221a      	movs	r2, #26
 8007a9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a9e:	f000 f843 	bl	8007b28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007aa2:	4b02      	ldr	r3, [pc, #8]	@ (8007aac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20000174 	.word	0x20000174

08007ab0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	6039      	str	r1, [r7, #0]
 8007aba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d105      	bne.n	8007ace <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	4907      	ldr	r1, [pc, #28]	@ (8007ae4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ac6:	4808      	ldr	r0, [pc, #32]	@ (8007ae8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ac8:	f7ff fcbd 	bl	8007446 <USBD_GetString>
 8007acc:	e004      	b.n	8007ad8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	4904      	ldr	r1, [pc, #16]	@ (8007ae4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ad2:	4805      	ldr	r0, [pc, #20]	@ (8007ae8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ad4:	f7ff fcb7 	bl	8007446 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ad8:	4b02      	ldr	r3, [pc, #8]	@ (8007ae4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000af0 	.word	0x20000af0
 8007ae8:	08008b7c 	.word	0x08008b7c

08007aec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	6039      	str	r1, [r7, #0]
 8007af6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d105      	bne.n	8007b0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	4907      	ldr	r1, [pc, #28]	@ (8007b20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b02:	4808      	ldr	r0, [pc, #32]	@ (8007b24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b04:	f7ff fc9f 	bl	8007446 <USBD_GetString>
 8007b08:	e004      	b.n	8007b14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	4904      	ldr	r1, [pc, #16]	@ (8007b20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b0e:	4805      	ldr	r0, [pc, #20]	@ (8007b24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b10:	f7ff fc99 	bl	8007446 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b14:	4b02      	ldr	r3, [pc, #8]	@ (8007b20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000af0 	.word	0x20000af0
 8007b24:	08008b88 	.word	0x08008b88

08007b28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8007b6c <Get_SerialNum+0x44>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b34:	4b0e      	ldr	r3, [pc, #56]	@ (8007b70 <Get_SerialNum+0x48>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b74 <Get_SerialNum+0x4c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4413      	add	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d009      	beq.n	8007b62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b4e:	2208      	movs	r2, #8
 8007b50:	4909      	ldr	r1, [pc, #36]	@ (8007b78 <Get_SerialNum+0x50>)
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 f814 	bl	8007b80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b58:	2204      	movs	r2, #4
 8007b5a:	4908      	ldr	r1, [pc, #32]	@ (8007b7c <Get_SerialNum+0x54>)
 8007b5c:	68b8      	ldr	r0, [r7, #8]
 8007b5e:	f000 f80f 	bl	8007b80 <IntToUnicode>
  }
}
 8007b62:	bf00      	nop
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	1ffff7e8 	.word	0x1ffff7e8
 8007b70:	1ffff7ec 	.word	0x1ffff7ec
 8007b74:	1ffff7f0 	.word	0x1ffff7f0
 8007b78:	20000176 	.word	0x20000176
 8007b7c:	20000186 	.word	0x20000186

08007b80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b92:	2300      	movs	r3, #0
 8007b94:	75fb      	strb	r3, [r7, #23]
 8007b96:	e027      	b.n	8007be8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	0f1b      	lsrs	r3, r3, #28
 8007b9c:	2b09      	cmp	r3, #9
 8007b9e:	d80b      	bhi.n	8007bb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	0f1b      	lsrs	r3, r3, #28
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	4619      	mov	r1, r3
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	440b      	add	r3, r1
 8007bb0:	3230      	adds	r2, #48	@ 0x30
 8007bb2:	b2d2      	uxtb	r2, r2
 8007bb4:	701a      	strb	r2, [r3, #0]
 8007bb6:	e00a      	b.n	8007bce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	0f1b      	lsrs	r3, r3, #28
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	005b      	lsls	r3, r3, #1
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	440b      	add	r3, r1
 8007bc8:	3237      	adds	r2, #55	@ 0x37
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	011b      	lsls	r3, r3, #4
 8007bd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	005b      	lsls	r3, r3, #1
 8007bd8:	3301      	adds	r3, #1
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	4413      	add	r3, r2
 8007bde:	2200      	movs	r2, #0
 8007be0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	3301      	adds	r3, #1
 8007be6:	75fb      	strb	r3, [r7, #23]
 8007be8:	7dfa      	ldrb	r2, [r7, #23]
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d3d3      	bcc.n	8007b98 <IntToUnicode+0x18>
  }
}
 8007bf0:	bf00      	nop
 8007bf2:	bf00      	nop
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr

08007bfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a0d      	ldr	r2, [pc, #52]	@ (8007c40 <HAL_PCD_MspInit+0x44>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d113      	bne.n	8007c36 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c44 <HAL_PCD_MspInit+0x48>)
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	4a0c      	ldr	r2, [pc, #48]	@ (8007c44 <HAL_PCD_MspInit+0x48>)
 8007c14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007c18:	61d3      	str	r3, [r2, #28]
 8007c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c44 <HAL_PCD_MspInit+0x48>)
 8007c1c:	69db      	ldr	r3, [r3, #28]
 8007c1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007c26:	2200      	movs	r2, #0
 8007c28:	2100      	movs	r1, #0
 8007c2a:	2014      	movs	r0, #20
 8007c2c:	f7f8 ffe5 	bl	8000bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007c30:	2014      	movs	r0, #20
 8007c32:	f7f8 fffe 	bl	8000c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007c36:	bf00      	nop
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	40005c00 	.word	0x40005c00
 8007c44:	40021000 	.word	0x40021000

08007c48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f7fe fcc3 	bl	80065ea <USBD_LL_SetupStage>
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007c7e:	78fa      	ldrb	r2, [r7, #3]
 8007c80:	6879      	ldr	r1, [r7, #4]
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	440b      	add	r3, r1
 8007c8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	4619      	mov	r1, r3
 8007c96:	f7fe fcf5 	bl	8006684 <USBD_LL_DataOutStage>
}
 8007c9a:	bf00      	nop
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007cb4:	78fa      	ldrb	r2, [r7, #3]
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	440b      	add	r3, r1
 8007cc2:	3324      	adds	r3, #36	@ 0x24
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	78fb      	ldrb	r3, [r7, #3]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	f7fe fd4c 	bl	8006766 <USBD_LL_DataInStage>
}
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe fe5c 	bl	80069a2 <USBD_LL_SOF>
}
 8007cea:	bf00      	nop
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	799b      	ldrb	r3, [r3, #6]
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d001      	beq.n	8007d0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007d06:	f7f8 fb18 	bl	800033a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d10:	7bfa      	ldrb	r2, [r7, #15]
 8007d12:	4611      	mov	r1, r2
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe fe0c 	bl	8006932 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fe fdc5 	bl	80068b0 <USBD_LL_Reset>
}
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fe fe06 	bl	8006950 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	7a9b      	ldrb	r3, [r3, #10]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d005      	beq.n	8007d58 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d4c:	4b04      	ldr	r3, [pc, #16]	@ (8007d60 <HAL_PCD_SuspendCallback+0x30>)
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	4a03      	ldr	r2, [pc, #12]	@ (8007d60 <HAL_PCD_SuspendCallback+0x30>)
 8007d52:	f043 0306 	orr.w	r3, r3, #6
 8007d56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	e000ed00 	.word	0xe000ed00

08007d64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fe00 	bl	8006978 <USBD_LL_Resume>
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007d88:	4a28      	ldr	r2, [pc, #160]	@ (8007e2c <USBD_LL_Init+0xac>)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a26      	ldr	r2, [pc, #152]	@ (8007e2c <USBD_LL_Init+0xac>)
 8007d94:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007d98:	4b24      	ldr	r3, [pc, #144]	@ (8007e2c <USBD_LL_Init+0xac>)
 8007d9a:	4a25      	ldr	r2, [pc, #148]	@ (8007e30 <USBD_LL_Init+0xb0>)
 8007d9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007d9e:	4b23      	ldr	r3, [pc, #140]	@ (8007e2c <USBD_LL_Init+0xac>)
 8007da0:	2208      	movs	r2, #8
 8007da2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007da4:	4b21      	ldr	r3, [pc, #132]	@ (8007e2c <USBD_LL_Init+0xac>)
 8007da6:	2202      	movs	r2, #2
 8007da8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007daa:	4b20      	ldr	r3, [pc, #128]	@ (8007e2c <USBD_LL_Init+0xac>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007db0:	4b1e      	ldr	r3, [pc, #120]	@ (8007e2c <USBD_LL_Init+0xac>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007db6:	4b1d      	ldr	r3, [pc, #116]	@ (8007e2c <USBD_LL_Init+0xac>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007dbc:	481b      	ldr	r0, [pc, #108]	@ (8007e2c <USBD_LL_Init+0xac>)
 8007dbe:	f7f9 f908 	bl	8000fd2 <HAL_PCD_Init>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007dc8:	f7f8 fab7 	bl	800033a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007dd2:	2318      	movs	r3, #24
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	f7fa fe19 	bl	8002a0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007de2:	2358      	movs	r3, #88	@ 0x58
 8007de4:	2200      	movs	r2, #0
 8007de6:	2180      	movs	r1, #128	@ 0x80
 8007de8:	f7fa fe11 	bl	8002a0e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007df2:	23c0      	movs	r3, #192	@ 0xc0
 8007df4:	2200      	movs	r2, #0
 8007df6:	2181      	movs	r1, #129	@ 0x81
 8007df8:	f7fa fe09 	bl	8002a0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007e02:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007e06:	2200      	movs	r2, #0
 8007e08:	2101      	movs	r1, #1
 8007e0a:	f7fa fe00 	bl	8002a0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007e14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2182      	movs	r1, #130	@ 0x82
 8007e1c:	f7fa fdf7 	bl	8002a0e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000cf0 	.word	0x20000cf0
 8007e30:	40005c00 	.word	0x40005c00

08007e34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7f9 f9b7 	bl	80011be <HAL_PCD_Start>
 8007e50:	4603      	mov	r3, r0
 8007e52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 f94e 	bl	80080f8 <USBD_Get_USB_Status>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	4608      	mov	r0, r1
 8007e74:	4611      	mov	r1, r2
 8007e76:	461a      	mov	r2, r3
 8007e78:	4603      	mov	r3, r0
 8007e7a:	70fb      	strb	r3, [r7, #3]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70bb      	strb	r3, [r7, #2]
 8007e80:	4613      	mov	r3, r2
 8007e82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007e92:	78bb      	ldrb	r3, [r7, #2]
 8007e94:	883a      	ldrh	r2, [r7, #0]
 8007e96:	78f9      	ldrb	r1, [r7, #3]
 8007e98:	f7f9 fb0b 	bl	80014b2 <HAL_PCD_EP_Open>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 f928 	bl	80080f8 <USBD_Get_USB_Status>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b084      	sub	sp, #16
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007ed0:	78fa      	ldrb	r2, [r7, #3]
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7f9 fb49 	bl	800156c <HAL_PCD_EP_Close>
 8007eda:	4603      	mov	r3, r0
 8007edc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 f909 	bl	80080f8 <USBD_Get_USB_Status>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	4611      	mov	r1, r2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7f9 fbf1 	bl	80016fa <HAL_PCD_EP_SetStall>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 f8ea 	bl	80080f8 <USBD_Get_USB_Status>
 8007f24:	4603      	mov	r3, r0
 8007f26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f4c:	78fa      	ldrb	r2, [r7, #3]
 8007f4e:	4611      	mov	r1, r2
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7f9 fc32 	bl	80017ba <HAL_PCD_EP_ClrStall>
 8007f56:	4603      	mov	r3, r0
 8007f58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 f8cb 	bl	80080f8 <USBD_Get_USB_Status>
 8007f62:	4603      	mov	r3, r0
 8007f64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	da0b      	bge.n	8007fa4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f8c:	78fb      	ldrb	r3, [r7, #3]
 8007f8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f92:	68f9      	ldr	r1, [r7, #12]
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	440b      	add	r3, r1
 8007f9e:	3312      	adds	r3, #18
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	e00b      	b.n	8007fbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007faa:	68f9      	ldr	r1, [r7, #12]
 8007fac:	4613      	mov	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	440b      	add	r3, r1
 8007fb6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8007fba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3714      	adds	r7, #20
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bc80      	pop	{r7}
 8007fc4:	4770      	bx	lr

08007fc6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fe0:	78fa      	ldrb	r2, [r7, #3]
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7f9 fa40 	bl	800146a <HAL_PCD_SetAddress>
 8007fea:	4603      	mov	r3, r0
 8007fec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 f881 	bl	80080f8 <USBD_Get_USB_Status>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	607a      	str	r2, [r7, #4]
 800800e:	461a      	mov	r2, r3
 8008010:	460b      	mov	r3, r1
 8008012:	72fb      	strb	r3, [r7, #11]
 8008014:	4613      	mov	r3, r2
 8008016:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008026:	893b      	ldrh	r3, [r7, #8]
 8008028:	7af9      	ldrb	r1, [r7, #11]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	f7f9 fb2e 	bl	800168c <HAL_PCD_EP_Transmit>
 8008030:	4603      	mov	r3, r0
 8008032:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	4618      	mov	r0, r3
 8008038:	f000 f85e 	bl	80080f8 <USBD_Get_USB_Status>
 800803c:	4603      	mov	r3, r0
 800803e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008040:	7dbb      	ldrb	r3, [r7, #22]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b086      	sub	sp, #24
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	461a      	mov	r2, r3
 8008056:	460b      	mov	r3, r1
 8008058:	72fb      	strb	r3, [r7, #11]
 800805a:	4613      	mov	r3, r2
 800805c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800806c:	893b      	ldrh	r3, [r7, #8]
 800806e:	7af9      	ldrb	r1, [r7, #11]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	f7f9 fac3 	bl	80015fc <HAL_PCD_EP_Receive>
 8008076:	4603      	mov	r3, r0
 8008078:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	4618      	mov	r0, r3
 800807e:	f000 f83b 	bl	80080f8 <USBD_Get_USB_Status>
 8008082:	4603      	mov	r3, r0
 8008084:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008086:	7dbb      	ldrb	r3, [r7, #22]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080a2:	78fa      	ldrb	r2, [r7, #3]
 80080a4:	4611      	mov	r1, r2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7f9 fad9 	bl	800165e <HAL_PCD_EP_GetRxCount>
 80080ac:	4603      	mov	r3, r0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
	...

080080b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080c0:	4b02      	ldr	r3, [pc, #8]	@ (80080cc <USBD_static_malloc+0x14>)
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bc80      	pop	{r7}
 80080ca:	4770      	bx	lr
 80080cc:	20000fc8 	.word	0x20000fc8

080080d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]

}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	bc80      	pop	{r7}
 80080e0:	4770      	bx	lr

080080e2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080e2:	b480      	push	{r7}
 80080e4:	b083      	sub	sp, #12
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr

080080f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008106:	79fb      	ldrb	r3, [r7, #7]
 8008108:	2b03      	cmp	r3, #3
 800810a:	d817      	bhi.n	800813c <USBD_Get_USB_Status+0x44>
 800810c:	a201      	add	r2, pc, #4	@ (adr r2, 8008114 <USBD_Get_USB_Status+0x1c>)
 800810e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008112:	bf00      	nop
 8008114:	08008125 	.word	0x08008125
 8008118:	0800812b 	.word	0x0800812b
 800811c:	08008131 	.word	0x08008131
 8008120:	08008137 	.word	0x08008137
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	73fb      	strb	r3, [r7, #15]
    break;
 8008128:	e00b      	b.n	8008142 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800812a:	2302      	movs	r3, #2
 800812c:	73fb      	strb	r3, [r7, #15]
    break;
 800812e:	e008      	b.n	8008142 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008130:	2301      	movs	r3, #1
 8008132:	73fb      	strb	r3, [r7, #15]
    break;
 8008134:	e005      	b.n	8008142 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008136:	2302      	movs	r3, #2
 8008138:	73fb      	strb	r3, [r7, #15]
    break;
 800813a:	e002      	b.n	8008142 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800813c:	2302      	movs	r3, #2
 800813e:	73fb      	strb	r3, [r7, #15]
    break;
 8008140:	bf00      	nop
  }
  return usb_status;
 8008142:	7bfb      	ldrb	r3, [r7, #15]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	bc80      	pop	{r7}
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop

08008150 <main>:




int main(void)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
	hwInit();
 8008154:	f7f8 fbe4 	bl	8000920 <hwInit>
	apInit();
 8008158:	f7f7 fff8 	bl	800014c <apInit>

	apMain();
 800815c:	f7f8 f800 	bl	8000160 <apMain>

	return 0;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	bd80      	pop	{r7, pc}

08008166 <_vsniprintf_r>:
 8008166:	b530      	push	{r4, r5, lr}
 8008168:	4614      	mov	r4, r2
 800816a:	2c00      	cmp	r4, #0
 800816c:	4605      	mov	r5, r0
 800816e:	461a      	mov	r2, r3
 8008170:	b09b      	sub	sp, #108	@ 0x6c
 8008172:	da05      	bge.n	8008180 <_vsniprintf_r+0x1a>
 8008174:	238b      	movs	r3, #139	@ 0x8b
 8008176:	6003      	str	r3, [r0, #0]
 8008178:	f04f 30ff 	mov.w	r0, #4294967295
 800817c:	b01b      	add	sp, #108	@ 0x6c
 800817e:	bd30      	pop	{r4, r5, pc}
 8008180:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008184:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008188:	f04f 0300 	mov.w	r3, #0
 800818c:	9319      	str	r3, [sp, #100]	@ 0x64
 800818e:	bf0c      	ite	eq
 8008190:	4623      	moveq	r3, r4
 8008192:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008196:	9302      	str	r3, [sp, #8]
 8008198:	9305      	str	r3, [sp, #20]
 800819a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800819e:	9100      	str	r1, [sp, #0]
 80081a0:	9104      	str	r1, [sp, #16]
 80081a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80081a6:	4669      	mov	r1, sp
 80081a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80081aa:	f000 f99f 	bl	80084ec <_svfiprintf_r>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	bfbc      	itt	lt
 80081b2:	238b      	movlt	r3, #139	@ 0x8b
 80081b4:	602b      	strlt	r3, [r5, #0]
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	d0e0      	beq.n	800817c <_vsniprintf_r+0x16>
 80081ba:	2200      	movs	r2, #0
 80081bc:	9b00      	ldr	r3, [sp, #0]
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	e7dc      	b.n	800817c <_vsniprintf_r+0x16>
	...

080081c4 <vsniprintf>:
 80081c4:	b507      	push	{r0, r1, r2, lr}
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	4613      	mov	r3, r2
 80081ca:	460a      	mov	r2, r1
 80081cc:	4601      	mov	r1, r0
 80081ce:	4803      	ldr	r0, [pc, #12]	@ (80081dc <vsniprintf+0x18>)
 80081d0:	6800      	ldr	r0, [r0, #0]
 80081d2:	f7ff ffc8 	bl	8008166 <_vsniprintf_r>
 80081d6:	b003      	add	sp, #12
 80081d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80081dc:	20000190 	.word	0x20000190

080081e0 <memset>:
 80081e0:	4603      	mov	r3, r0
 80081e2:	4402      	add	r2, r0
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d100      	bne.n	80081ea <memset+0xa>
 80081e8:	4770      	bx	lr
 80081ea:	f803 1b01 	strb.w	r1, [r3], #1
 80081ee:	e7f9      	b.n	80081e4 <memset+0x4>

080081f0 <__errno>:
 80081f0:	4b01      	ldr	r3, [pc, #4]	@ (80081f8 <__errno+0x8>)
 80081f2:	6818      	ldr	r0, [r3, #0]
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	20000190 	.word	0x20000190

080081fc <__libc_init_array>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	2600      	movs	r6, #0
 8008200:	4d0c      	ldr	r5, [pc, #48]	@ (8008234 <__libc_init_array+0x38>)
 8008202:	4c0d      	ldr	r4, [pc, #52]	@ (8008238 <__libc_init_array+0x3c>)
 8008204:	1b64      	subs	r4, r4, r5
 8008206:	10a4      	asrs	r4, r4, #2
 8008208:	42a6      	cmp	r6, r4
 800820a:	d109      	bne.n	8008220 <__libc_init_array+0x24>
 800820c:	f000 fc76 	bl	8008afc <_init>
 8008210:	2600      	movs	r6, #0
 8008212:	4d0a      	ldr	r5, [pc, #40]	@ (800823c <__libc_init_array+0x40>)
 8008214:	4c0a      	ldr	r4, [pc, #40]	@ (8008240 <__libc_init_array+0x44>)
 8008216:	1b64      	subs	r4, r4, r5
 8008218:	10a4      	asrs	r4, r4, #2
 800821a:	42a6      	cmp	r6, r4
 800821c:	d105      	bne.n	800822a <__libc_init_array+0x2e>
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	f855 3b04 	ldr.w	r3, [r5], #4
 8008224:	4798      	blx	r3
 8008226:	3601      	adds	r6, #1
 8008228:	e7ee      	b.n	8008208 <__libc_init_array+0xc>
 800822a:	f855 3b04 	ldr.w	r3, [r5], #4
 800822e:	4798      	blx	r3
 8008230:	3601      	adds	r6, #1
 8008232:	e7f2      	b.n	800821a <__libc_init_array+0x1e>
 8008234:	08008c0c 	.word	0x08008c0c
 8008238:	08008c0c 	.word	0x08008c0c
 800823c:	08008c0c 	.word	0x08008c0c
 8008240:	08008c10 	.word	0x08008c10

08008244 <__retarget_lock_acquire_recursive>:
 8008244:	4770      	bx	lr

08008246 <__retarget_lock_release_recursive>:
 8008246:	4770      	bx	lr

08008248 <_free_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4605      	mov	r5, r0
 800824c:	2900      	cmp	r1, #0
 800824e:	d040      	beq.n	80082d2 <_free_r+0x8a>
 8008250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008254:	1f0c      	subs	r4, r1, #4
 8008256:	2b00      	cmp	r3, #0
 8008258:	bfb8      	it	lt
 800825a:	18e4      	addlt	r4, r4, r3
 800825c:	f000 f8de 	bl	800841c <__malloc_lock>
 8008260:	4a1c      	ldr	r2, [pc, #112]	@ (80082d4 <_free_r+0x8c>)
 8008262:	6813      	ldr	r3, [r2, #0]
 8008264:	b933      	cbnz	r3, 8008274 <_free_r+0x2c>
 8008266:	6063      	str	r3, [r4, #4]
 8008268:	6014      	str	r4, [r2, #0]
 800826a:	4628      	mov	r0, r5
 800826c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008270:	f000 b8da 	b.w	8008428 <__malloc_unlock>
 8008274:	42a3      	cmp	r3, r4
 8008276:	d908      	bls.n	800828a <_free_r+0x42>
 8008278:	6820      	ldr	r0, [r4, #0]
 800827a:	1821      	adds	r1, r4, r0
 800827c:	428b      	cmp	r3, r1
 800827e:	bf01      	itttt	eq
 8008280:	6819      	ldreq	r1, [r3, #0]
 8008282:	685b      	ldreq	r3, [r3, #4]
 8008284:	1809      	addeq	r1, r1, r0
 8008286:	6021      	streq	r1, [r4, #0]
 8008288:	e7ed      	b.n	8008266 <_free_r+0x1e>
 800828a:	461a      	mov	r2, r3
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	b10b      	cbz	r3, 8008294 <_free_r+0x4c>
 8008290:	42a3      	cmp	r3, r4
 8008292:	d9fa      	bls.n	800828a <_free_r+0x42>
 8008294:	6811      	ldr	r1, [r2, #0]
 8008296:	1850      	adds	r0, r2, r1
 8008298:	42a0      	cmp	r0, r4
 800829a:	d10b      	bne.n	80082b4 <_free_r+0x6c>
 800829c:	6820      	ldr	r0, [r4, #0]
 800829e:	4401      	add	r1, r0
 80082a0:	1850      	adds	r0, r2, r1
 80082a2:	4283      	cmp	r3, r0
 80082a4:	6011      	str	r1, [r2, #0]
 80082a6:	d1e0      	bne.n	800826a <_free_r+0x22>
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	4408      	add	r0, r1
 80082ae:	6010      	str	r0, [r2, #0]
 80082b0:	6053      	str	r3, [r2, #4]
 80082b2:	e7da      	b.n	800826a <_free_r+0x22>
 80082b4:	d902      	bls.n	80082bc <_free_r+0x74>
 80082b6:	230c      	movs	r3, #12
 80082b8:	602b      	str	r3, [r5, #0]
 80082ba:	e7d6      	b.n	800826a <_free_r+0x22>
 80082bc:	6820      	ldr	r0, [r4, #0]
 80082be:	1821      	adds	r1, r4, r0
 80082c0:	428b      	cmp	r3, r1
 80082c2:	bf01      	itttt	eq
 80082c4:	6819      	ldreq	r1, [r3, #0]
 80082c6:	685b      	ldreq	r3, [r3, #4]
 80082c8:	1809      	addeq	r1, r1, r0
 80082ca:	6021      	streq	r1, [r4, #0]
 80082cc:	6063      	str	r3, [r4, #4]
 80082ce:	6054      	str	r4, [r2, #4]
 80082d0:	e7cb      	b.n	800826a <_free_r+0x22>
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	2000132c 	.word	0x2000132c

080082d8 <sbrk_aligned>:
 80082d8:	b570      	push	{r4, r5, r6, lr}
 80082da:	4e0f      	ldr	r6, [pc, #60]	@ (8008318 <sbrk_aligned+0x40>)
 80082dc:	460c      	mov	r4, r1
 80082de:	6831      	ldr	r1, [r6, #0]
 80082e0:	4605      	mov	r5, r0
 80082e2:	b911      	cbnz	r1, 80082ea <sbrk_aligned+0x12>
 80082e4:	f000 fba8 	bl	8008a38 <_sbrk_r>
 80082e8:	6030      	str	r0, [r6, #0]
 80082ea:	4621      	mov	r1, r4
 80082ec:	4628      	mov	r0, r5
 80082ee:	f000 fba3 	bl	8008a38 <_sbrk_r>
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	d103      	bne.n	80082fe <sbrk_aligned+0x26>
 80082f6:	f04f 34ff 	mov.w	r4, #4294967295
 80082fa:	4620      	mov	r0, r4
 80082fc:	bd70      	pop	{r4, r5, r6, pc}
 80082fe:	1cc4      	adds	r4, r0, #3
 8008300:	f024 0403 	bic.w	r4, r4, #3
 8008304:	42a0      	cmp	r0, r4
 8008306:	d0f8      	beq.n	80082fa <sbrk_aligned+0x22>
 8008308:	1a21      	subs	r1, r4, r0
 800830a:	4628      	mov	r0, r5
 800830c:	f000 fb94 	bl	8008a38 <_sbrk_r>
 8008310:	3001      	adds	r0, #1
 8008312:	d1f2      	bne.n	80082fa <sbrk_aligned+0x22>
 8008314:	e7ef      	b.n	80082f6 <sbrk_aligned+0x1e>
 8008316:	bf00      	nop
 8008318:	20001328 	.word	0x20001328

0800831c <_malloc_r>:
 800831c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008320:	1ccd      	adds	r5, r1, #3
 8008322:	f025 0503 	bic.w	r5, r5, #3
 8008326:	3508      	adds	r5, #8
 8008328:	2d0c      	cmp	r5, #12
 800832a:	bf38      	it	cc
 800832c:	250c      	movcc	r5, #12
 800832e:	2d00      	cmp	r5, #0
 8008330:	4606      	mov	r6, r0
 8008332:	db01      	blt.n	8008338 <_malloc_r+0x1c>
 8008334:	42a9      	cmp	r1, r5
 8008336:	d904      	bls.n	8008342 <_malloc_r+0x26>
 8008338:	230c      	movs	r3, #12
 800833a:	6033      	str	r3, [r6, #0]
 800833c:	2000      	movs	r0, #0
 800833e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008342:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008418 <_malloc_r+0xfc>
 8008346:	f000 f869 	bl	800841c <__malloc_lock>
 800834a:	f8d8 3000 	ldr.w	r3, [r8]
 800834e:	461c      	mov	r4, r3
 8008350:	bb44      	cbnz	r4, 80083a4 <_malloc_r+0x88>
 8008352:	4629      	mov	r1, r5
 8008354:	4630      	mov	r0, r6
 8008356:	f7ff ffbf 	bl	80082d8 <sbrk_aligned>
 800835a:	1c43      	adds	r3, r0, #1
 800835c:	4604      	mov	r4, r0
 800835e:	d158      	bne.n	8008412 <_malloc_r+0xf6>
 8008360:	f8d8 4000 	ldr.w	r4, [r8]
 8008364:	4627      	mov	r7, r4
 8008366:	2f00      	cmp	r7, #0
 8008368:	d143      	bne.n	80083f2 <_malloc_r+0xd6>
 800836a:	2c00      	cmp	r4, #0
 800836c:	d04b      	beq.n	8008406 <_malloc_r+0xea>
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	4639      	mov	r1, r7
 8008372:	4630      	mov	r0, r6
 8008374:	eb04 0903 	add.w	r9, r4, r3
 8008378:	f000 fb5e 	bl	8008a38 <_sbrk_r>
 800837c:	4581      	cmp	r9, r0
 800837e:	d142      	bne.n	8008406 <_malloc_r+0xea>
 8008380:	6821      	ldr	r1, [r4, #0]
 8008382:	4630      	mov	r0, r6
 8008384:	1a6d      	subs	r5, r5, r1
 8008386:	4629      	mov	r1, r5
 8008388:	f7ff ffa6 	bl	80082d8 <sbrk_aligned>
 800838c:	3001      	adds	r0, #1
 800838e:	d03a      	beq.n	8008406 <_malloc_r+0xea>
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	442b      	add	r3, r5
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	f8d8 3000 	ldr.w	r3, [r8]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	bb62      	cbnz	r2, 80083f8 <_malloc_r+0xdc>
 800839e:	f8c8 7000 	str.w	r7, [r8]
 80083a2:	e00f      	b.n	80083c4 <_malloc_r+0xa8>
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	1b52      	subs	r2, r2, r5
 80083a8:	d420      	bmi.n	80083ec <_malloc_r+0xd0>
 80083aa:	2a0b      	cmp	r2, #11
 80083ac:	d917      	bls.n	80083de <_malloc_r+0xc2>
 80083ae:	1961      	adds	r1, r4, r5
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	6025      	str	r5, [r4, #0]
 80083b4:	bf18      	it	ne
 80083b6:	6059      	strne	r1, [r3, #4]
 80083b8:	6863      	ldr	r3, [r4, #4]
 80083ba:	bf08      	it	eq
 80083bc:	f8c8 1000 	streq.w	r1, [r8]
 80083c0:	5162      	str	r2, [r4, r5]
 80083c2:	604b      	str	r3, [r1, #4]
 80083c4:	4630      	mov	r0, r6
 80083c6:	f000 f82f 	bl	8008428 <__malloc_unlock>
 80083ca:	f104 000b 	add.w	r0, r4, #11
 80083ce:	1d23      	adds	r3, r4, #4
 80083d0:	f020 0007 	bic.w	r0, r0, #7
 80083d4:	1ac2      	subs	r2, r0, r3
 80083d6:	bf1c      	itt	ne
 80083d8:	1a1b      	subne	r3, r3, r0
 80083da:	50a3      	strne	r3, [r4, r2]
 80083dc:	e7af      	b.n	800833e <_malloc_r+0x22>
 80083de:	6862      	ldr	r2, [r4, #4]
 80083e0:	42a3      	cmp	r3, r4
 80083e2:	bf0c      	ite	eq
 80083e4:	f8c8 2000 	streq.w	r2, [r8]
 80083e8:	605a      	strne	r2, [r3, #4]
 80083ea:	e7eb      	b.n	80083c4 <_malloc_r+0xa8>
 80083ec:	4623      	mov	r3, r4
 80083ee:	6864      	ldr	r4, [r4, #4]
 80083f0:	e7ae      	b.n	8008350 <_malloc_r+0x34>
 80083f2:	463c      	mov	r4, r7
 80083f4:	687f      	ldr	r7, [r7, #4]
 80083f6:	e7b6      	b.n	8008366 <_malloc_r+0x4a>
 80083f8:	461a      	mov	r2, r3
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	42a3      	cmp	r3, r4
 80083fe:	d1fb      	bne.n	80083f8 <_malloc_r+0xdc>
 8008400:	2300      	movs	r3, #0
 8008402:	6053      	str	r3, [r2, #4]
 8008404:	e7de      	b.n	80083c4 <_malloc_r+0xa8>
 8008406:	230c      	movs	r3, #12
 8008408:	4630      	mov	r0, r6
 800840a:	6033      	str	r3, [r6, #0]
 800840c:	f000 f80c 	bl	8008428 <__malloc_unlock>
 8008410:	e794      	b.n	800833c <_malloc_r+0x20>
 8008412:	6005      	str	r5, [r0, #0]
 8008414:	e7d6      	b.n	80083c4 <_malloc_r+0xa8>
 8008416:	bf00      	nop
 8008418:	2000132c 	.word	0x2000132c

0800841c <__malloc_lock>:
 800841c:	4801      	ldr	r0, [pc, #4]	@ (8008424 <__malloc_lock+0x8>)
 800841e:	f7ff bf11 	b.w	8008244 <__retarget_lock_acquire_recursive>
 8008422:	bf00      	nop
 8008424:	20001324 	.word	0x20001324

08008428 <__malloc_unlock>:
 8008428:	4801      	ldr	r0, [pc, #4]	@ (8008430 <__malloc_unlock+0x8>)
 800842a:	f7ff bf0c 	b.w	8008246 <__retarget_lock_release_recursive>
 800842e:	bf00      	nop
 8008430:	20001324 	.word	0x20001324

08008434 <__ssputs_r>:
 8008434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008438:	461f      	mov	r7, r3
 800843a:	688e      	ldr	r6, [r1, #8]
 800843c:	4682      	mov	sl, r0
 800843e:	42be      	cmp	r6, r7
 8008440:	460c      	mov	r4, r1
 8008442:	4690      	mov	r8, r2
 8008444:	680b      	ldr	r3, [r1, #0]
 8008446:	d82d      	bhi.n	80084a4 <__ssputs_r+0x70>
 8008448:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800844c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008450:	d026      	beq.n	80084a0 <__ssputs_r+0x6c>
 8008452:	6965      	ldr	r5, [r4, #20]
 8008454:	6909      	ldr	r1, [r1, #16]
 8008456:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800845a:	eba3 0901 	sub.w	r9, r3, r1
 800845e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008462:	1c7b      	adds	r3, r7, #1
 8008464:	444b      	add	r3, r9
 8008466:	106d      	asrs	r5, r5, #1
 8008468:	429d      	cmp	r5, r3
 800846a:	bf38      	it	cc
 800846c:	461d      	movcc	r5, r3
 800846e:	0553      	lsls	r3, r2, #21
 8008470:	d527      	bpl.n	80084c2 <__ssputs_r+0x8e>
 8008472:	4629      	mov	r1, r5
 8008474:	f7ff ff52 	bl	800831c <_malloc_r>
 8008478:	4606      	mov	r6, r0
 800847a:	b360      	cbz	r0, 80084d6 <__ssputs_r+0xa2>
 800847c:	464a      	mov	r2, r9
 800847e:	6921      	ldr	r1, [r4, #16]
 8008480:	f000 faf8 	bl	8008a74 <memcpy>
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800848a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800848e:	81a3      	strh	r3, [r4, #12]
 8008490:	6126      	str	r6, [r4, #16]
 8008492:	444e      	add	r6, r9
 8008494:	6026      	str	r6, [r4, #0]
 8008496:	463e      	mov	r6, r7
 8008498:	6165      	str	r5, [r4, #20]
 800849a:	eba5 0509 	sub.w	r5, r5, r9
 800849e:	60a5      	str	r5, [r4, #8]
 80084a0:	42be      	cmp	r6, r7
 80084a2:	d900      	bls.n	80084a6 <__ssputs_r+0x72>
 80084a4:	463e      	mov	r6, r7
 80084a6:	4632      	mov	r2, r6
 80084a8:	4641      	mov	r1, r8
 80084aa:	6820      	ldr	r0, [r4, #0]
 80084ac:	f000 faaa 	bl	8008a04 <memmove>
 80084b0:	2000      	movs	r0, #0
 80084b2:	68a3      	ldr	r3, [r4, #8]
 80084b4:	1b9b      	subs	r3, r3, r6
 80084b6:	60a3      	str	r3, [r4, #8]
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	4433      	add	r3, r6
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c2:	462a      	mov	r2, r5
 80084c4:	f000 fae4 	bl	8008a90 <_realloc_r>
 80084c8:	4606      	mov	r6, r0
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d1e0      	bne.n	8008490 <__ssputs_r+0x5c>
 80084ce:	4650      	mov	r0, sl
 80084d0:	6921      	ldr	r1, [r4, #16]
 80084d2:	f7ff feb9 	bl	8008248 <_free_r>
 80084d6:	230c      	movs	r3, #12
 80084d8:	f8ca 3000 	str.w	r3, [sl]
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	f04f 30ff 	mov.w	r0, #4294967295
 80084e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084e6:	81a3      	strh	r3, [r4, #12]
 80084e8:	e7e9      	b.n	80084be <__ssputs_r+0x8a>
	...

080084ec <_svfiprintf_r>:
 80084ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f0:	4698      	mov	r8, r3
 80084f2:	898b      	ldrh	r3, [r1, #12]
 80084f4:	4607      	mov	r7, r0
 80084f6:	061b      	lsls	r3, r3, #24
 80084f8:	460d      	mov	r5, r1
 80084fa:	4614      	mov	r4, r2
 80084fc:	b09d      	sub	sp, #116	@ 0x74
 80084fe:	d510      	bpl.n	8008522 <_svfiprintf_r+0x36>
 8008500:	690b      	ldr	r3, [r1, #16]
 8008502:	b973      	cbnz	r3, 8008522 <_svfiprintf_r+0x36>
 8008504:	2140      	movs	r1, #64	@ 0x40
 8008506:	f7ff ff09 	bl	800831c <_malloc_r>
 800850a:	6028      	str	r0, [r5, #0]
 800850c:	6128      	str	r0, [r5, #16]
 800850e:	b930      	cbnz	r0, 800851e <_svfiprintf_r+0x32>
 8008510:	230c      	movs	r3, #12
 8008512:	603b      	str	r3, [r7, #0]
 8008514:	f04f 30ff 	mov.w	r0, #4294967295
 8008518:	b01d      	add	sp, #116	@ 0x74
 800851a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851e:	2340      	movs	r3, #64	@ 0x40
 8008520:	616b      	str	r3, [r5, #20]
 8008522:	2300      	movs	r3, #0
 8008524:	9309      	str	r3, [sp, #36]	@ 0x24
 8008526:	2320      	movs	r3, #32
 8008528:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800852c:	2330      	movs	r3, #48	@ 0x30
 800852e:	f04f 0901 	mov.w	r9, #1
 8008532:	f8cd 800c 	str.w	r8, [sp, #12]
 8008536:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80086d0 <_svfiprintf_r+0x1e4>
 800853a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800853e:	4623      	mov	r3, r4
 8008540:	469a      	mov	sl, r3
 8008542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008546:	b10a      	cbz	r2, 800854c <_svfiprintf_r+0x60>
 8008548:	2a25      	cmp	r2, #37	@ 0x25
 800854a:	d1f9      	bne.n	8008540 <_svfiprintf_r+0x54>
 800854c:	ebba 0b04 	subs.w	fp, sl, r4
 8008550:	d00b      	beq.n	800856a <_svfiprintf_r+0x7e>
 8008552:	465b      	mov	r3, fp
 8008554:	4622      	mov	r2, r4
 8008556:	4629      	mov	r1, r5
 8008558:	4638      	mov	r0, r7
 800855a:	f7ff ff6b 	bl	8008434 <__ssputs_r>
 800855e:	3001      	adds	r0, #1
 8008560:	f000 80a7 	beq.w	80086b2 <_svfiprintf_r+0x1c6>
 8008564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008566:	445a      	add	r2, fp
 8008568:	9209      	str	r2, [sp, #36]	@ 0x24
 800856a:	f89a 3000 	ldrb.w	r3, [sl]
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 809f 	beq.w	80086b2 <_svfiprintf_r+0x1c6>
 8008574:	2300      	movs	r3, #0
 8008576:	f04f 32ff 	mov.w	r2, #4294967295
 800857a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800857e:	f10a 0a01 	add.w	sl, sl, #1
 8008582:	9304      	str	r3, [sp, #16]
 8008584:	9307      	str	r3, [sp, #28]
 8008586:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800858a:	931a      	str	r3, [sp, #104]	@ 0x68
 800858c:	4654      	mov	r4, sl
 800858e:	2205      	movs	r2, #5
 8008590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008594:	484e      	ldr	r0, [pc, #312]	@ (80086d0 <_svfiprintf_r+0x1e4>)
 8008596:	f000 fa5f 	bl	8008a58 <memchr>
 800859a:	9a04      	ldr	r2, [sp, #16]
 800859c:	b9d8      	cbnz	r0, 80085d6 <_svfiprintf_r+0xea>
 800859e:	06d0      	lsls	r0, r2, #27
 80085a0:	bf44      	itt	mi
 80085a2:	2320      	movmi	r3, #32
 80085a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085a8:	0711      	lsls	r1, r2, #28
 80085aa:	bf44      	itt	mi
 80085ac:	232b      	movmi	r3, #43	@ 0x2b
 80085ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085b2:	f89a 3000 	ldrb.w	r3, [sl]
 80085b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80085b8:	d015      	beq.n	80085e6 <_svfiprintf_r+0xfa>
 80085ba:	4654      	mov	r4, sl
 80085bc:	2000      	movs	r0, #0
 80085be:	f04f 0c0a 	mov.w	ip, #10
 80085c2:	9a07      	ldr	r2, [sp, #28]
 80085c4:	4621      	mov	r1, r4
 80085c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ca:	3b30      	subs	r3, #48	@ 0x30
 80085cc:	2b09      	cmp	r3, #9
 80085ce:	d94b      	bls.n	8008668 <_svfiprintf_r+0x17c>
 80085d0:	b1b0      	cbz	r0, 8008600 <_svfiprintf_r+0x114>
 80085d2:	9207      	str	r2, [sp, #28]
 80085d4:	e014      	b.n	8008600 <_svfiprintf_r+0x114>
 80085d6:	eba0 0308 	sub.w	r3, r0, r8
 80085da:	fa09 f303 	lsl.w	r3, r9, r3
 80085de:	4313      	orrs	r3, r2
 80085e0:	46a2      	mov	sl, r4
 80085e2:	9304      	str	r3, [sp, #16]
 80085e4:	e7d2      	b.n	800858c <_svfiprintf_r+0xa0>
 80085e6:	9b03      	ldr	r3, [sp, #12]
 80085e8:	1d19      	adds	r1, r3, #4
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	9103      	str	r1, [sp, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	bfbb      	ittet	lt
 80085f2:	425b      	neglt	r3, r3
 80085f4:	f042 0202 	orrlt.w	r2, r2, #2
 80085f8:	9307      	strge	r3, [sp, #28]
 80085fa:	9307      	strlt	r3, [sp, #28]
 80085fc:	bfb8      	it	lt
 80085fe:	9204      	strlt	r2, [sp, #16]
 8008600:	7823      	ldrb	r3, [r4, #0]
 8008602:	2b2e      	cmp	r3, #46	@ 0x2e
 8008604:	d10a      	bne.n	800861c <_svfiprintf_r+0x130>
 8008606:	7863      	ldrb	r3, [r4, #1]
 8008608:	2b2a      	cmp	r3, #42	@ 0x2a
 800860a:	d132      	bne.n	8008672 <_svfiprintf_r+0x186>
 800860c:	9b03      	ldr	r3, [sp, #12]
 800860e:	3402      	adds	r4, #2
 8008610:	1d1a      	adds	r2, r3, #4
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	9203      	str	r2, [sp, #12]
 8008616:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800861a:	9305      	str	r3, [sp, #20]
 800861c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80086d4 <_svfiprintf_r+0x1e8>
 8008620:	2203      	movs	r2, #3
 8008622:	4650      	mov	r0, sl
 8008624:	7821      	ldrb	r1, [r4, #0]
 8008626:	f000 fa17 	bl	8008a58 <memchr>
 800862a:	b138      	cbz	r0, 800863c <_svfiprintf_r+0x150>
 800862c:	2240      	movs	r2, #64	@ 0x40
 800862e:	9b04      	ldr	r3, [sp, #16]
 8008630:	eba0 000a 	sub.w	r0, r0, sl
 8008634:	4082      	lsls	r2, r0
 8008636:	4313      	orrs	r3, r2
 8008638:	3401      	adds	r4, #1
 800863a:	9304      	str	r3, [sp, #16]
 800863c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008640:	2206      	movs	r2, #6
 8008642:	4825      	ldr	r0, [pc, #148]	@ (80086d8 <_svfiprintf_r+0x1ec>)
 8008644:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008648:	f000 fa06 	bl	8008a58 <memchr>
 800864c:	2800      	cmp	r0, #0
 800864e:	d036      	beq.n	80086be <_svfiprintf_r+0x1d2>
 8008650:	4b22      	ldr	r3, [pc, #136]	@ (80086dc <_svfiprintf_r+0x1f0>)
 8008652:	bb1b      	cbnz	r3, 800869c <_svfiprintf_r+0x1b0>
 8008654:	9b03      	ldr	r3, [sp, #12]
 8008656:	3307      	adds	r3, #7
 8008658:	f023 0307 	bic.w	r3, r3, #7
 800865c:	3308      	adds	r3, #8
 800865e:	9303      	str	r3, [sp, #12]
 8008660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008662:	4433      	add	r3, r6
 8008664:	9309      	str	r3, [sp, #36]	@ 0x24
 8008666:	e76a      	b.n	800853e <_svfiprintf_r+0x52>
 8008668:	460c      	mov	r4, r1
 800866a:	2001      	movs	r0, #1
 800866c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008670:	e7a8      	b.n	80085c4 <_svfiprintf_r+0xd8>
 8008672:	2300      	movs	r3, #0
 8008674:	f04f 0c0a 	mov.w	ip, #10
 8008678:	4619      	mov	r1, r3
 800867a:	3401      	adds	r4, #1
 800867c:	9305      	str	r3, [sp, #20]
 800867e:	4620      	mov	r0, r4
 8008680:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008684:	3a30      	subs	r2, #48	@ 0x30
 8008686:	2a09      	cmp	r2, #9
 8008688:	d903      	bls.n	8008692 <_svfiprintf_r+0x1a6>
 800868a:	2b00      	cmp	r3, #0
 800868c:	d0c6      	beq.n	800861c <_svfiprintf_r+0x130>
 800868e:	9105      	str	r1, [sp, #20]
 8008690:	e7c4      	b.n	800861c <_svfiprintf_r+0x130>
 8008692:	4604      	mov	r4, r0
 8008694:	2301      	movs	r3, #1
 8008696:	fb0c 2101 	mla	r1, ip, r1, r2
 800869a:	e7f0      	b.n	800867e <_svfiprintf_r+0x192>
 800869c:	ab03      	add	r3, sp, #12
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	462a      	mov	r2, r5
 80086a2:	4638      	mov	r0, r7
 80086a4:	4b0e      	ldr	r3, [pc, #56]	@ (80086e0 <_svfiprintf_r+0x1f4>)
 80086a6:	a904      	add	r1, sp, #16
 80086a8:	f3af 8000 	nop.w
 80086ac:	1c42      	adds	r2, r0, #1
 80086ae:	4606      	mov	r6, r0
 80086b0:	d1d6      	bne.n	8008660 <_svfiprintf_r+0x174>
 80086b2:	89ab      	ldrh	r3, [r5, #12]
 80086b4:	065b      	lsls	r3, r3, #25
 80086b6:	f53f af2d 	bmi.w	8008514 <_svfiprintf_r+0x28>
 80086ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086bc:	e72c      	b.n	8008518 <_svfiprintf_r+0x2c>
 80086be:	ab03      	add	r3, sp, #12
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	462a      	mov	r2, r5
 80086c4:	4638      	mov	r0, r7
 80086c6:	4b06      	ldr	r3, [pc, #24]	@ (80086e0 <_svfiprintf_r+0x1f4>)
 80086c8:	a904      	add	r1, sp, #16
 80086ca:	f000 f87d 	bl	80087c8 <_printf_i>
 80086ce:	e7ed      	b.n	80086ac <_svfiprintf_r+0x1c0>
 80086d0:	08008bd6 	.word	0x08008bd6
 80086d4:	08008bdc 	.word	0x08008bdc
 80086d8:	08008be0 	.word	0x08008be0
 80086dc:	00000000 	.word	0x00000000
 80086e0:	08008435 	.word	0x08008435

080086e4 <_printf_common>:
 80086e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e8:	4616      	mov	r6, r2
 80086ea:	4698      	mov	r8, r3
 80086ec:	688a      	ldr	r2, [r1, #8]
 80086ee:	690b      	ldr	r3, [r1, #16]
 80086f0:	4607      	mov	r7, r0
 80086f2:	4293      	cmp	r3, r2
 80086f4:	bfb8      	it	lt
 80086f6:	4613      	movlt	r3, r2
 80086f8:	6033      	str	r3, [r6, #0]
 80086fa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086fe:	460c      	mov	r4, r1
 8008700:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008704:	b10a      	cbz	r2, 800870a <_printf_common+0x26>
 8008706:	3301      	adds	r3, #1
 8008708:	6033      	str	r3, [r6, #0]
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	0699      	lsls	r1, r3, #26
 800870e:	bf42      	ittt	mi
 8008710:	6833      	ldrmi	r3, [r6, #0]
 8008712:	3302      	addmi	r3, #2
 8008714:	6033      	strmi	r3, [r6, #0]
 8008716:	6825      	ldr	r5, [r4, #0]
 8008718:	f015 0506 	ands.w	r5, r5, #6
 800871c:	d106      	bne.n	800872c <_printf_common+0x48>
 800871e:	f104 0a19 	add.w	sl, r4, #25
 8008722:	68e3      	ldr	r3, [r4, #12]
 8008724:	6832      	ldr	r2, [r6, #0]
 8008726:	1a9b      	subs	r3, r3, r2
 8008728:	42ab      	cmp	r3, r5
 800872a:	dc2b      	bgt.n	8008784 <_printf_common+0xa0>
 800872c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008730:	6822      	ldr	r2, [r4, #0]
 8008732:	3b00      	subs	r3, #0
 8008734:	bf18      	it	ne
 8008736:	2301      	movne	r3, #1
 8008738:	0692      	lsls	r2, r2, #26
 800873a:	d430      	bmi.n	800879e <_printf_common+0xba>
 800873c:	4641      	mov	r1, r8
 800873e:	4638      	mov	r0, r7
 8008740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008744:	47c8      	blx	r9
 8008746:	3001      	adds	r0, #1
 8008748:	d023      	beq.n	8008792 <_printf_common+0xae>
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	6922      	ldr	r2, [r4, #16]
 800874e:	f003 0306 	and.w	r3, r3, #6
 8008752:	2b04      	cmp	r3, #4
 8008754:	bf14      	ite	ne
 8008756:	2500      	movne	r5, #0
 8008758:	6833      	ldreq	r3, [r6, #0]
 800875a:	f04f 0600 	mov.w	r6, #0
 800875e:	bf08      	it	eq
 8008760:	68e5      	ldreq	r5, [r4, #12]
 8008762:	f104 041a 	add.w	r4, r4, #26
 8008766:	bf08      	it	eq
 8008768:	1aed      	subeq	r5, r5, r3
 800876a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800876e:	bf08      	it	eq
 8008770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008774:	4293      	cmp	r3, r2
 8008776:	bfc4      	itt	gt
 8008778:	1a9b      	subgt	r3, r3, r2
 800877a:	18ed      	addgt	r5, r5, r3
 800877c:	42b5      	cmp	r5, r6
 800877e:	d11a      	bne.n	80087b6 <_printf_common+0xd2>
 8008780:	2000      	movs	r0, #0
 8008782:	e008      	b.n	8008796 <_printf_common+0xb2>
 8008784:	2301      	movs	r3, #1
 8008786:	4652      	mov	r2, sl
 8008788:	4641      	mov	r1, r8
 800878a:	4638      	mov	r0, r7
 800878c:	47c8      	blx	r9
 800878e:	3001      	adds	r0, #1
 8008790:	d103      	bne.n	800879a <_printf_common+0xb6>
 8008792:	f04f 30ff 	mov.w	r0, #4294967295
 8008796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879a:	3501      	adds	r5, #1
 800879c:	e7c1      	b.n	8008722 <_printf_common+0x3e>
 800879e:	2030      	movs	r0, #48	@ 0x30
 80087a0:	18e1      	adds	r1, r4, r3
 80087a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087ac:	4422      	add	r2, r4
 80087ae:	3302      	adds	r3, #2
 80087b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087b4:	e7c2      	b.n	800873c <_printf_common+0x58>
 80087b6:	2301      	movs	r3, #1
 80087b8:	4622      	mov	r2, r4
 80087ba:	4641      	mov	r1, r8
 80087bc:	4638      	mov	r0, r7
 80087be:	47c8      	blx	r9
 80087c0:	3001      	adds	r0, #1
 80087c2:	d0e6      	beq.n	8008792 <_printf_common+0xae>
 80087c4:	3601      	adds	r6, #1
 80087c6:	e7d9      	b.n	800877c <_printf_common+0x98>

080087c8 <_printf_i>:
 80087c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	7e0f      	ldrb	r7, [r1, #24]
 80087ce:	4691      	mov	r9, r2
 80087d0:	2f78      	cmp	r7, #120	@ 0x78
 80087d2:	4680      	mov	r8, r0
 80087d4:	460c      	mov	r4, r1
 80087d6:	469a      	mov	sl, r3
 80087d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087de:	d807      	bhi.n	80087f0 <_printf_i+0x28>
 80087e0:	2f62      	cmp	r7, #98	@ 0x62
 80087e2:	d80a      	bhi.n	80087fa <_printf_i+0x32>
 80087e4:	2f00      	cmp	r7, #0
 80087e6:	f000 80d1 	beq.w	800898c <_printf_i+0x1c4>
 80087ea:	2f58      	cmp	r7, #88	@ 0x58
 80087ec:	f000 80b8 	beq.w	8008960 <_printf_i+0x198>
 80087f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087f8:	e03a      	b.n	8008870 <_printf_i+0xa8>
 80087fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087fe:	2b15      	cmp	r3, #21
 8008800:	d8f6      	bhi.n	80087f0 <_printf_i+0x28>
 8008802:	a101      	add	r1, pc, #4	@ (adr r1, 8008808 <_printf_i+0x40>)
 8008804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008808:	08008861 	.word	0x08008861
 800880c:	08008875 	.word	0x08008875
 8008810:	080087f1 	.word	0x080087f1
 8008814:	080087f1 	.word	0x080087f1
 8008818:	080087f1 	.word	0x080087f1
 800881c:	080087f1 	.word	0x080087f1
 8008820:	08008875 	.word	0x08008875
 8008824:	080087f1 	.word	0x080087f1
 8008828:	080087f1 	.word	0x080087f1
 800882c:	080087f1 	.word	0x080087f1
 8008830:	080087f1 	.word	0x080087f1
 8008834:	08008973 	.word	0x08008973
 8008838:	0800889f 	.word	0x0800889f
 800883c:	0800892d 	.word	0x0800892d
 8008840:	080087f1 	.word	0x080087f1
 8008844:	080087f1 	.word	0x080087f1
 8008848:	08008995 	.word	0x08008995
 800884c:	080087f1 	.word	0x080087f1
 8008850:	0800889f 	.word	0x0800889f
 8008854:	080087f1 	.word	0x080087f1
 8008858:	080087f1 	.word	0x080087f1
 800885c:	08008935 	.word	0x08008935
 8008860:	6833      	ldr	r3, [r6, #0]
 8008862:	1d1a      	adds	r2, r3, #4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6032      	str	r2, [r6, #0]
 8008868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800886c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008870:	2301      	movs	r3, #1
 8008872:	e09c      	b.n	80089ae <_printf_i+0x1e6>
 8008874:	6833      	ldr	r3, [r6, #0]
 8008876:	6820      	ldr	r0, [r4, #0]
 8008878:	1d19      	adds	r1, r3, #4
 800887a:	6031      	str	r1, [r6, #0]
 800887c:	0606      	lsls	r6, r0, #24
 800887e:	d501      	bpl.n	8008884 <_printf_i+0xbc>
 8008880:	681d      	ldr	r5, [r3, #0]
 8008882:	e003      	b.n	800888c <_printf_i+0xc4>
 8008884:	0645      	lsls	r5, r0, #25
 8008886:	d5fb      	bpl.n	8008880 <_printf_i+0xb8>
 8008888:	f9b3 5000 	ldrsh.w	r5, [r3]
 800888c:	2d00      	cmp	r5, #0
 800888e:	da03      	bge.n	8008898 <_printf_i+0xd0>
 8008890:	232d      	movs	r3, #45	@ 0x2d
 8008892:	426d      	negs	r5, r5
 8008894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008898:	230a      	movs	r3, #10
 800889a:	4858      	ldr	r0, [pc, #352]	@ (80089fc <_printf_i+0x234>)
 800889c:	e011      	b.n	80088c2 <_printf_i+0xfa>
 800889e:	6821      	ldr	r1, [r4, #0]
 80088a0:	6833      	ldr	r3, [r6, #0]
 80088a2:	0608      	lsls	r0, r1, #24
 80088a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80088a8:	d402      	bmi.n	80088b0 <_printf_i+0xe8>
 80088aa:	0649      	lsls	r1, r1, #25
 80088ac:	bf48      	it	mi
 80088ae:	b2ad      	uxthmi	r5, r5
 80088b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80088b2:	6033      	str	r3, [r6, #0]
 80088b4:	bf14      	ite	ne
 80088b6:	230a      	movne	r3, #10
 80088b8:	2308      	moveq	r3, #8
 80088ba:	4850      	ldr	r0, [pc, #320]	@ (80089fc <_printf_i+0x234>)
 80088bc:	2100      	movs	r1, #0
 80088be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088c2:	6866      	ldr	r6, [r4, #4]
 80088c4:	2e00      	cmp	r6, #0
 80088c6:	60a6      	str	r6, [r4, #8]
 80088c8:	db05      	blt.n	80088d6 <_printf_i+0x10e>
 80088ca:	6821      	ldr	r1, [r4, #0]
 80088cc:	432e      	orrs	r6, r5
 80088ce:	f021 0104 	bic.w	r1, r1, #4
 80088d2:	6021      	str	r1, [r4, #0]
 80088d4:	d04b      	beq.n	800896e <_printf_i+0x1a6>
 80088d6:	4616      	mov	r6, r2
 80088d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80088dc:	fb03 5711 	mls	r7, r3, r1, r5
 80088e0:	5dc7      	ldrb	r7, [r0, r7]
 80088e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088e6:	462f      	mov	r7, r5
 80088e8:	42bb      	cmp	r3, r7
 80088ea:	460d      	mov	r5, r1
 80088ec:	d9f4      	bls.n	80088d8 <_printf_i+0x110>
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	d10b      	bne.n	800890a <_printf_i+0x142>
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	07df      	lsls	r7, r3, #31
 80088f6:	d508      	bpl.n	800890a <_printf_i+0x142>
 80088f8:	6923      	ldr	r3, [r4, #16]
 80088fa:	6861      	ldr	r1, [r4, #4]
 80088fc:	4299      	cmp	r1, r3
 80088fe:	bfde      	ittt	le
 8008900:	2330      	movle	r3, #48	@ 0x30
 8008902:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008906:	f106 36ff 	addle.w	r6, r6, #4294967295
 800890a:	1b92      	subs	r2, r2, r6
 800890c:	6122      	str	r2, [r4, #16]
 800890e:	464b      	mov	r3, r9
 8008910:	4621      	mov	r1, r4
 8008912:	4640      	mov	r0, r8
 8008914:	f8cd a000 	str.w	sl, [sp]
 8008918:	aa03      	add	r2, sp, #12
 800891a:	f7ff fee3 	bl	80086e4 <_printf_common>
 800891e:	3001      	adds	r0, #1
 8008920:	d14a      	bne.n	80089b8 <_printf_i+0x1f0>
 8008922:	f04f 30ff 	mov.w	r0, #4294967295
 8008926:	b004      	add	sp, #16
 8008928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892c:	6823      	ldr	r3, [r4, #0]
 800892e:	f043 0320 	orr.w	r3, r3, #32
 8008932:	6023      	str	r3, [r4, #0]
 8008934:	2778      	movs	r7, #120	@ 0x78
 8008936:	4832      	ldr	r0, [pc, #200]	@ (8008a00 <_printf_i+0x238>)
 8008938:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	6831      	ldr	r1, [r6, #0]
 8008940:	061f      	lsls	r7, r3, #24
 8008942:	f851 5b04 	ldr.w	r5, [r1], #4
 8008946:	d402      	bmi.n	800894e <_printf_i+0x186>
 8008948:	065f      	lsls	r7, r3, #25
 800894a:	bf48      	it	mi
 800894c:	b2ad      	uxthmi	r5, r5
 800894e:	6031      	str	r1, [r6, #0]
 8008950:	07d9      	lsls	r1, r3, #31
 8008952:	bf44      	itt	mi
 8008954:	f043 0320 	orrmi.w	r3, r3, #32
 8008958:	6023      	strmi	r3, [r4, #0]
 800895a:	b11d      	cbz	r5, 8008964 <_printf_i+0x19c>
 800895c:	2310      	movs	r3, #16
 800895e:	e7ad      	b.n	80088bc <_printf_i+0xf4>
 8008960:	4826      	ldr	r0, [pc, #152]	@ (80089fc <_printf_i+0x234>)
 8008962:	e7e9      	b.n	8008938 <_printf_i+0x170>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	f023 0320 	bic.w	r3, r3, #32
 800896a:	6023      	str	r3, [r4, #0]
 800896c:	e7f6      	b.n	800895c <_printf_i+0x194>
 800896e:	4616      	mov	r6, r2
 8008970:	e7bd      	b.n	80088ee <_printf_i+0x126>
 8008972:	6833      	ldr	r3, [r6, #0]
 8008974:	6825      	ldr	r5, [r4, #0]
 8008976:	1d18      	adds	r0, r3, #4
 8008978:	6961      	ldr	r1, [r4, #20]
 800897a:	6030      	str	r0, [r6, #0]
 800897c:	062e      	lsls	r6, r5, #24
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	d501      	bpl.n	8008986 <_printf_i+0x1be>
 8008982:	6019      	str	r1, [r3, #0]
 8008984:	e002      	b.n	800898c <_printf_i+0x1c4>
 8008986:	0668      	lsls	r0, r5, #25
 8008988:	d5fb      	bpl.n	8008982 <_printf_i+0x1ba>
 800898a:	8019      	strh	r1, [r3, #0]
 800898c:	2300      	movs	r3, #0
 800898e:	4616      	mov	r6, r2
 8008990:	6123      	str	r3, [r4, #16]
 8008992:	e7bc      	b.n	800890e <_printf_i+0x146>
 8008994:	6833      	ldr	r3, [r6, #0]
 8008996:	2100      	movs	r1, #0
 8008998:	1d1a      	adds	r2, r3, #4
 800899a:	6032      	str	r2, [r6, #0]
 800899c:	681e      	ldr	r6, [r3, #0]
 800899e:	6862      	ldr	r2, [r4, #4]
 80089a0:	4630      	mov	r0, r6
 80089a2:	f000 f859 	bl	8008a58 <memchr>
 80089a6:	b108      	cbz	r0, 80089ac <_printf_i+0x1e4>
 80089a8:	1b80      	subs	r0, r0, r6
 80089aa:	6060      	str	r0, [r4, #4]
 80089ac:	6863      	ldr	r3, [r4, #4]
 80089ae:	6123      	str	r3, [r4, #16]
 80089b0:	2300      	movs	r3, #0
 80089b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089b6:	e7aa      	b.n	800890e <_printf_i+0x146>
 80089b8:	4632      	mov	r2, r6
 80089ba:	4649      	mov	r1, r9
 80089bc:	4640      	mov	r0, r8
 80089be:	6923      	ldr	r3, [r4, #16]
 80089c0:	47d0      	blx	sl
 80089c2:	3001      	adds	r0, #1
 80089c4:	d0ad      	beq.n	8008922 <_printf_i+0x15a>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	079b      	lsls	r3, r3, #30
 80089ca:	d413      	bmi.n	80089f4 <_printf_i+0x22c>
 80089cc:	68e0      	ldr	r0, [r4, #12]
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	4298      	cmp	r0, r3
 80089d2:	bfb8      	it	lt
 80089d4:	4618      	movlt	r0, r3
 80089d6:	e7a6      	b.n	8008926 <_printf_i+0x15e>
 80089d8:	2301      	movs	r3, #1
 80089da:	4632      	mov	r2, r6
 80089dc:	4649      	mov	r1, r9
 80089de:	4640      	mov	r0, r8
 80089e0:	47d0      	blx	sl
 80089e2:	3001      	adds	r0, #1
 80089e4:	d09d      	beq.n	8008922 <_printf_i+0x15a>
 80089e6:	3501      	adds	r5, #1
 80089e8:	68e3      	ldr	r3, [r4, #12]
 80089ea:	9903      	ldr	r1, [sp, #12]
 80089ec:	1a5b      	subs	r3, r3, r1
 80089ee:	42ab      	cmp	r3, r5
 80089f0:	dcf2      	bgt.n	80089d8 <_printf_i+0x210>
 80089f2:	e7eb      	b.n	80089cc <_printf_i+0x204>
 80089f4:	2500      	movs	r5, #0
 80089f6:	f104 0619 	add.w	r6, r4, #25
 80089fa:	e7f5      	b.n	80089e8 <_printf_i+0x220>
 80089fc:	08008be7 	.word	0x08008be7
 8008a00:	08008bf8 	.word	0x08008bf8

08008a04 <memmove>:
 8008a04:	4288      	cmp	r0, r1
 8008a06:	b510      	push	{r4, lr}
 8008a08:	eb01 0402 	add.w	r4, r1, r2
 8008a0c:	d902      	bls.n	8008a14 <memmove+0x10>
 8008a0e:	4284      	cmp	r4, r0
 8008a10:	4623      	mov	r3, r4
 8008a12:	d807      	bhi.n	8008a24 <memmove+0x20>
 8008a14:	1e43      	subs	r3, r0, #1
 8008a16:	42a1      	cmp	r1, r4
 8008a18:	d008      	beq.n	8008a2c <memmove+0x28>
 8008a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a22:	e7f8      	b.n	8008a16 <memmove+0x12>
 8008a24:	4601      	mov	r1, r0
 8008a26:	4402      	add	r2, r0
 8008a28:	428a      	cmp	r2, r1
 8008a2a:	d100      	bne.n	8008a2e <memmove+0x2a>
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a36:	e7f7      	b.n	8008a28 <memmove+0x24>

08008a38 <_sbrk_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	4d05      	ldr	r5, [pc, #20]	@ (8008a54 <_sbrk_r+0x1c>)
 8008a3e:	4604      	mov	r4, r0
 8008a40:	4608      	mov	r0, r1
 8008a42:	602b      	str	r3, [r5, #0]
 8008a44:	f7f7 fce8 	bl	8000418 <_sbrk>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d102      	bne.n	8008a52 <_sbrk_r+0x1a>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	b103      	cbz	r3, 8008a52 <_sbrk_r+0x1a>
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
 8008a54:	20001320 	.word	0x20001320

08008a58 <memchr>:
 8008a58:	4603      	mov	r3, r0
 8008a5a:	b510      	push	{r4, lr}
 8008a5c:	b2c9      	uxtb	r1, r1
 8008a5e:	4402      	add	r2, r0
 8008a60:	4293      	cmp	r3, r2
 8008a62:	4618      	mov	r0, r3
 8008a64:	d101      	bne.n	8008a6a <memchr+0x12>
 8008a66:	2000      	movs	r0, #0
 8008a68:	e003      	b.n	8008a72 <memchr+0x1a>
 8008a6a:	7804      	ldrb	r4, [r0, #0]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	428c      	cmp	r4, r1
 8008a70:	d1f6      	bne.n	8008a60 <memchr+0x8>
 8008a72:	bd10      	pop	{r4, pc}

08008a74 <memcpy>:
 8008a74:	440a      	add	r2, r1
 8008a76:	4291      	cmp	r1, r2
 8008a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a7c:	d100      	bne.n	8008a80 <memcpy+0xc>
 8008a7e:	4770      	bx	lr
 8008a80:	b510      	push	{r4, lr}
 8008a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a86:	4291      	cmp	r1, r2
 8008a88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a8c:	d1f9      	bne.n	8008a82 <memcpy+0xe>
 8008a8e:	bd10      	pop	{r4, pc}

08008a90 <_realloc_r>:
 8008a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a94:	4607      	mov	r7, r0
 8008a96:	4614      	mov	r4, r2
 8008a98:	460d      	mov	r5, r1
 8008a9a:	b921      	cbnz	r1, 8008aa6 <_realloc_r+0x16>
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa2:	f7ff bc3b 	b.w	800831c <_malloc_r>
 8008aa6:	b92a      	cbnz	r2, 8008ab4 <_realloc_r+0x24>
 8008aa8:	f7ff fbce 	bl	8008248 <_free_r>
 8008aac:	4625      	mov	r5, r4
 8008aae:	4628      	mov	r0, r5
 8008ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab4:	f000 f81a 	bl	8008aec <_malloc_usable_size_r>
 8008ab8:	4284      	cmp	r4, r0
 8008aba:	4606      	mov	r6, r0
 8008abc:	d802      	bhi.n	8008ac4 <_realloc_r+0x34>
 8008abe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ac2:	d8f4      	bhi.n	8008aae <_realloc_r+0x1e>
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	f7ff fc28 	bl	800831c <_malloc_r>
 8008acc:	4680      	mov	r8, r0
 8008ace:	b908      	cbnz	r0, 8008ad4 <_realloc_r+0x44>
 8008ad0:	4645      	mov	r5, r8
 8008ad2:	e7ec      	b.n	8008aae <_realloc_r+0x1e>
 8008ad4:	42b4      	cmp	r4, r6
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	4629      	mov	r1, r5
 8008ada:	bf28      	it	cs
 8008adc:	4632      	movcs	r2, r6
 8008ade:	f7ff ffc9 	bl	8008a74 <memcpy>
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	f7ff fbaf 	bl	8008248 <_free_r>
 8008aea:	e7f1      	b.n	8008ad0 <_realloc_r+0x40>

08008aec <_malloc_usable_size_r>:
 8008aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008af0:	1f18      	subs	r0, r3, #4
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	bfbc      	itt	lt
 8008af6:	580b      	ldrlt	r3, [r1, r0]
 8008af8:	18c0      	addlt	r0, r0, r3
 8008afa:	4770      	bx	lr

08008afc <_init>:
 8008afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afe:	bf00      	nop
 8008b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b02:	bc08      	pop	{r3}
 8008b04:	469e      	mov	lr, r3
 8008b06:	4770      	bx	lr

08008b08 <_fini>:
 8008b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0a:	bf00      	nop
 8008b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0e:	bc08      	pop	{r3}
 8008b10:	469e      	mov	lr, r3
 8008b12:	4770      	bx	lr
