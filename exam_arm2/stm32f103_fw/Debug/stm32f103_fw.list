
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009708  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009814  08009814  0000a814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800989c  0800989c  0000b190  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800989c  0800989c  0000b190  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800989c  0800989c  0000b190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800989c  0800989c  0000a89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098a0  080098a0  0000a8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  080098a4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b4  20000190  08009a34  0000b190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001344  08009a34  0000b344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001311d  00000000  00000000  0000b1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040e0  00000000  00000000  0001e2d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  000223b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd0  00000000  00000000  00023508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c103  00000000  00000000  000241d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cca3  00000000  00000000  000402db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d31  00000000  00000000  0005cf7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6caf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042a8  00000000  00000000  000e6cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000eaf9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	080097fc 	.word	0x080097fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	080097fc 	.word	0x080097fc

0800014c <apInit>:

#include "ap.h"


void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 57600);     //USB      (통신속도가 바뀌어서 통신이 안되지는 않음)
 8000150:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fab9 	bl	80006cc <uartOpen>
	uartOpen(_DEF_UART2, 57600);     //UART			(통신속도가 바뀌면 그에 맞춰서 데이터를 보내줘야함)
 800015a:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800015e:	2001      	movs	r0, #1
 8000160:	f000 fab4 	bl	80006cc <uartOpen>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <apMain>:

void apMain(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
	uint32_t pre_time;

	pre_time = millis();
 800016e:	f000 f842 	bl	80001f6 <millis>
 8000172:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(millis() - pre_time >= 500)
 8000174:	f000 f83f 	bl	80001f6 <millis>
 8000178:	4602      	mov	r2, r0
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	1ad3      	subs	r3, r2, r3
 800017e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000182:	d3f7      	bcc.n	8000174 <apMain+0xc>
		{
			pre_time = millis();
 8000184:	f000 f837 	bl	80001f6 <millis>
 8000188:	6078      	str	r0, [r7, #4]
			ledToggle(_DEF_LED1);
 800018a:	2000      	movs	r0, #0
 800018c:	f000 f9c8 	bl	8000520 <ledToggle>
		if(millis() - pre_time >= 500)
 8000190:	e7f0      	b.n	8000174 <apMain+0xc>
	...

08000194 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
	 HAL_Init();
 800019a:	f000 fc2b 	bl	80009f4 <HAL_Init>
	 SystemClock_Config();
 800019e:	f000 f831 	bl	8000204 <SystemClock_Config>

	 __HAL_RCC_GPIOD_CLK_ENABLE();
 80001a2:	4b0e      	ldr	r3, [pc, #56]	@ (80001dc <bspInit+0x48>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	4a0d      	ldr	r2, [pc, #52]	@ (80001dc <bspInit+0x48>)
 80001a8:	f043 0320 	orr.w	r3, r3, #32
 80001ac:	6193      	str	r3, [r2, #24]
 80001ae:	4b0b      	ldr	r3, [pc, #44]	@ (80001dc <bspInit+0x48>)
 80001b0:	699b      	ldr	r3, [r3, #24]
 80001b2:	f003 0320 	and.w	r3, r3, #32
 80001b6:	607b      	str	r3, [r7, #4]
 80001b8:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ba:	4b08      	ldr	r3, [pc, #32]	@ (80001dc <bspInit+0x48>)
 80001bc:	699b      	ldr	r3, [r3, #24]
 80001be:	4a07      	ldr	r2, [pc, #28]	@ (80001dc <bspInit+0x48>)
 80001c0:	f043 0304 	orr.w	r3, r3, #4
 80001c4:	6193      	str	r3, [r2, #24]
 80001c6:	4b05      	ldr	r3, [pc, #20]	@ (80001dc <bspInit+0x48>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	f003 0304 	and.w	r3, r3, #4
 80001ce:	603b      	str	r3, [r7, #0]
 80001d0:	683b      	ldr	r3, [r7, #0]



}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	40021000 	.word	0x40021000

080001e0 <delay>:

void delay(uint32_t ms)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80001e8:	6878      	ldr	r0, [r7, #4]
 80001ea:	f000 fc65 	bl	8000ab8 <HAL_Delay>
}
 80001ee:	bf00      	nop
 80001f0:	3708      	adds	r7, #8
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}

080001f6 <millis>:

uint32_t millis(void)
{
 80001f6:	b580      	push	{r7, lr}
 80001f8:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80001fa:	f000 fc53 	bl	8000aa4 <HAL_GetTick>
 80001fe:	4603      	mov	r3, r0
}
 8000200:	4618      	mov	r0, r3
 8000202:	bd80      	pop	{r7, pc}

08000204 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b094      	sub	sp, #80	@ 0x50
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800020e:	2228      	movs	r2, #40	@ 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f009 fac5 	bl	80097a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	f107 0314 	add.w	r3, r7, #20
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000234:	2305      	movs	r3, #5
 8000236:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000238:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800023c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000252:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800025e:	4618      	mov	r0, r3
 8000260:	f003 f86a 	bl	8003338 <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800026a:	f000 f82a 	bl	80002c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800027e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f003 fad6 	bl	800383c <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000296:	f000 f814 	bl	80002c2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 800029a:	2311      	movs	r3, #17
 800029c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800029e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002a4:	2300      	movs	r3, #0
 80002a6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	4618      	mov	r0, r3
 80002ac:	f003 fc54 	bl	8003b58 <HAL_RCCEx_PeriphCLKConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002b6:	f000 f804 	bl	80002c2 <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3750      	adds	r7, #80	@ 0x50
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c2:	b480      	push	{r7}
 80002c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c6:	b672      	cpsid	i
}
 80002c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ca:	bf00      	nop
 80002cc:	e7fd      	b.n	80002ca <Error_Handler+0x8>
	...

080002d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002d6:	4b15      	ldr	r3, [pc, #84]	@ (800032c <HAL_MspInit+0x5c>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	4a14      	ldr	r2, [pc, #80]	@ (800032c <HAL_MspInit+0x5c>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6193      	str	r3, [r2, #24]
 80002e2:	4b12      	ldr	r3, [pc, #72]	@ (800032c <HAL_MspInit+0x5c>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ee:	4b0f      	ldr	r3, [pc, #60]	@ (800032c <HAL_MspInit+0x5c>)
 80002f0:	69db      	ldr	r3, [r3, #28]
 80002f2:	4a0e      	ldr	r2, [pc, #56]	@ (800032c <HAL_MspInit+0x5c>)
 80002f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002f8:	61d3      	str	r3, [r2, #28]
 80002fa:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <HAL_MspInit+0x5c>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000306:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <HAL_MspInit+0x60>)
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	4a04      	ldr	r2, [pc, #16]	@ (8000330 <HAL_MspInit+0x60>)
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000322:	bf00      	nop
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40021000 	.word	0x40021000
 8000330:	40010000 	.word	0x40010000

08000334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <NMI_Handler+0x4>

0800033c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000340:	bf00      	nop
 8000342:	e7fd      	b.n	8000340 <HardFault_Handler+0x4>

08000344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <MemManage_Handler+0x4>

0800034c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000350:	bf00      	nop
 8000352:	e7fd      	b.n	8000350 <BusFault_Handler+0x4>

08000354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <UsageFault_Handler+0x4>

0800035c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000384:	f000 fb7c 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}

0800038c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000390:	4802      	ldr	r0, [pc, #8]	@ (800039c <DMA1_Channel5_IRQHandler+0x10>)
 8000392:	f000 febf 	bl	8001114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000330 	.word	0x20000330

080003a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003a4:	4802      	ldr	r0, [pc, #8]	@ (80003b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80003a6:	f001 fb76 	bl	8001a96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000e4c 	.word	0x20000e4c

080003b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80003b8:	4802      	ldr	r0, [pc, #8]	@ (80003c4 <USART1_IRQHandler+0x10>)
 80003ba:	f003 ff21 	bl	8004200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	200002e8 	.word	0x200002e8

080003c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr

080003d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003d4:	f7ff fff8 	bl	80003c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d8:	480b      	ldr	r0, [pc, #44]	@ (8000408 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003da:	490c      	ldr	r1, [pc, #48]	@ (800040c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000410 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a09      	ldr	r2, [pc, #36]	@ (8000414 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003f0:	4c09      	ldr	r4, [pc, #36]	@ (8000418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003fe:	f009 f9d9 	bl	80097b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000402:	f009 f9c3 	bl	800978c <main>
  bx lr
 8000406:	4770      	bx	lr
  ldr r0, =_sdata
 8000408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800040c:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000410:	080098a4 	.word	0x080098a4
  ldr r2, =_sbss
 8000414:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000418:	20001344 	.word	0x20001344

0800041c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800041c:	e7fe      	b.n	800041c <ADC1_2_IRQHandler>

0800041e <qbufferCreate>:
{

}

bool   qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800041e:	b480      	push	{r7}
 8000420:	b087      	sub	sp, #28
 8000422:	af00      	add	r7, sp, #0
 8000424:	60f8      	str	r0, [r7, #12]
 8000426:	60b9      	str	r1, [r7, #8]
 8000428:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800042a:	2301      	movs	r3, #1
 800042c:	75fb      	strb	r3, [r7, #23]

  p_node->in	  = 0;
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
  p_node->out 	= 0;
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	2200      	movs	r2, #0
 8000438:	605a      	str	r2, [r3, #4]
  p_node->len 	= length;
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	68ba      	ldr	r2, [r7, #8]
 8000444:	60da      	str	r2, [r3, #12]

  return ret;
 8000446:	7dfb      	ldrb	r3, [r7, #23]
}
 8000448:	4618      	mov	r0, r3
 800044a:	371c      	adds	r7, #28
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
	...

08000454 <ledInit>:
};



bool ledInit(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af00      	add	r7, sp, #0
	bool ret = true;
 800045a:	2301      	movs	r3, #1
 800045c:	76fb      	strb	r3, [r7, #27]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 0308 	add.w	r3, r7, #8
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]

	 /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 800046c:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <ledInit+0x84>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a19      	ldr	r2, [pc, #100]	@ (80004d8 <ledInit+0x84>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b17      	ldr	r3, [pc, #92]	@ (80004d8 <ledInit+0x84>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0308 	and.w	r3, r3, #8
 8000480:	607b      	str	r3, [r7, #4]
 8000482:	687b      	ldr	r3, [r7, #4]

	 /*Configure GPIO pin : PB12 */

	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000484:	2301      	movs	r3, #1
 8000486:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048c:	2302      	movs	r3, #2
 800048e:	617b      	str	r3, [r7, #20]

	 for(int i=0;i<LED_MAX_CH;i++)
 8000490:	2300      	movs	r3, #0
 8000492:	61fb      	str	r3, [r7, #28]
 8000494:	e017      	b.n	80004c6 <ledInit+0x72>
	 {
		 GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000496:	4a11      	ldr	r2, [pc, #68]	@ (80004dc <ledInit+0x88>)
 8000498:	69fb      	ldr	r3, [r7, #28]
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	4413      	add	r3, r2
 800049e:	889b      	ldrh	r3, [r3, #4]
 80004a0:	60bb      	str	r3, [r7, #8]
		 HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80004a2:	4a0e      	ldr	r2, [pc, #56]	@ (80004dc <ledInit+0x88>)
 80004a4:	69fb      	ldr	r3, [r7, #28]
 80004a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80004aa:	f107 0208 	add.w	r2, r7, #8
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 ff63 	bl	800137c <HAL_GPIO_Init>
		 ledOff(i);
 80004b6:	69fb      	ldr	r3, [r7, #28]
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f810 	bl	80004e0 <ledOff>
	 for(int i=0;i<LED_MAX_CH;i++)
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	3301      	adds	r3, #1
 80004c4:	61fb      	str	r3, [r7, #28]
 80004c6:	69fb      	ldr	r3, [r7, #28]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	dde4      	ble.n	8000496 <ledInit+0x42>
	 }

	return ret;
 80004cc:	7efb      	ldrb	r3, [r7, #27]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3720      	adds	r7, #32
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000
 80004dc:	20000004 	.word	0x20000004

080004e0 <ledOff>:
{
	if(ch >=LED_MAX_CH) return;
	 HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state); // Reset이 0
}
void ledOff(uint8_t ch)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
	if(ch >=LED_MAX_CH) return;
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d111      	bne.n	8000514 <ledOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	4a0a      	ldr	r2, [pc, #40]	@ (800051c <ledOff+0x3c>)
 80004f4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	4a08      	ldr	r2, [pc, #32]	@ (800051c <ledOff+0x3c>)
 80004fc:	00db      	lsls	r3, r3, #3
 80004fe:	4413      	add	r3, r2
 8000500:	8899      	ldrh	r1, [r3, #4]
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	4a05      	ldr	r2, [pc, #20]	@ (800051c <ledOff+0x3c>)
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	4413      	add	r3, r2
 800050a:	79db      	ldrb	r3, [r3, #7]
 800050c:	461a      	mov	r2, r3
 800050e:	f001 f975 	bl	80017fc <HAL_GPIO_WritePin>
 8000512:	e000      	b.n	8000516 <ledOff+0x36>
	if(ch >=LED_MAX_CH) return;
 8000514:	bf00      	nop

}
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000004 	.word	0x20000004

08000520 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	if(ch >=LED_MAX_CH) return;
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10d      	bne.n	800054c <ledToggle+0x2c>
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4a08      	ldr	r2, [pc, #32]	@ (8000554 <ledToggle+0x34>)
 8000534:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4906      	ldr	r1, [pc, #24]	@ (8000554 <ledToggle+0x34>)
 800053c:	00db      	lsls	r3, r3, #3
 800053e:	440b      	add	r3, r1
 8000540:	889b      	ldrh	r3, [r3, #4]
 8000542:	4619      	mov	r1, r3
 8000544:	4610      	mov	r0, r2
 8000546:	f001 f971 	bl	800182c <HAL_GPIO_TogglePin>
 800054a:	e000      	b.n	800054e <ledToggle+0x2e>
	if(ch >=LED_MAX_CH) return;
 800054c:	bf00      	nop
}
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000004 	.word	0x20000004

08000558 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
	bool ret = true;
 800055e:	2301      	movs	r3, #1
 8000560:	71fb      	strb	r3, [r7, #7]

	//만약 Reset 핀이 눌렸다면
	//delay 500ms 안에 다시 빠르게 누르면 레지스터 값이 증가
	if(RCC->CSR & (1<<26))
 8000562:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <resetInit+0x50>)
 8000564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000566:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800056a:	2b00      	cmp	r3, #0
 800056c:	d012      	beq.n	8000594 <resetInit+0x3c>
	{
		rtcBackupRegWrite(1,rtcBackupRegRead(1)+1);
 800056e:	2001      	movs	r0, #1
 8000570:	f000 f84e 	bl	8000610 <rtcBackupRegRead>
 8000574:	4603      	mov	r3, r0
 8000576:	3301      	adds	r3, #1
 8000578:	4619      	mov	r1, r3
 800057a:	2001      	movs	r0, #1
 800057c:	f000 f858 	bl	8000630 <rtcBackupRegWrite>
		delay(500);
 8000580:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000584:	f7ff fe2c 	bl	80001e0 <delay>
		reset_count = rtcBackupRegRead(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f000 f841 	bl	8000610 <rtcBackupRegRead>
 800058e:	4603      	mov	r3, r0
 8000590:	4a06      	ldr	r2, [pc, #24]	@ (80005ac <resetInit+0x54>)
 8000592:	6013      	str	r3, [r2, #0]
	}

	rtcBackupRegWrite(1,0);
 8000594:	2100      	movs	r1, #0
 8000596:	2001      	movs	r0, #1
 8000598:	f000 f84a 	bl	8000630 <rtcBackupRegWrite>

	return ret;
 800059c:	79fb      	ldrb	r3, [r7, #7]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000
 80005ac:	200001ac 	.word	0x200001ac

080005b0 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	bool ret = true;
 80005b6:	2301      	movs	r3, #1
 80005b8:	71fb      	strb	r3, [r7, #7]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <rtcInit+0x54>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a11      	ldr	r2, [pc, #68]	@ (8000604 <rtcInit+0x54>)
 80005c0:	f043 0310 	orr.w	r3, r3, #16
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <rtcInit+0x54>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0310 	and.w	r3, r3, #16
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]

	hrtc.Instance = RTC;
 80005d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <rtcInit+0x58>)
 80005d4:	4a0d      	ldr	r2, [pc, #52]	@ (800060c <rtcInit+0x5c>)
 80005d6:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <rtcInit+0x58>)
 80005da:	f04f 32ff 	mov.w	r2, #4294967295
 80005de:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <rtcInit+0x58>)
 80005e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005e6:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005e8:	4807      	ldr	r0, [pc, #28]	@ (8000608 <rtcInit+0x58>)
 80005ea:	f003 fc21 	bl	8003e30 <HAL_RTC_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <rtcInit+0x48>
	{
	   Error_Handler();
 80005f4:	f7ff fe65 	bl	80002c2 <Error_Handler>
	}


	return ret;
 80005f8:	79fb      	ldrb	r3, [r7, #7]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000
 8000608:	200001b0 	.word	0x200001b0
 800060c:	40002800 	.word	0x40002800

08000610 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	4804      	ldr	r0, [pc, #16]	@ (800062c <rtcBackupRegRead+0x1c>)
 800061c:	f003 fd2c 	bl	8004078 <HAL_RTCEx_BKUPRead>
 8000620:	4603      	mov	r3, r0
}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200001b0 	.word	0x200001b0

08000630 <rtcBackupRegWrite>:


void rtcBackupRegWrite(uint32_t index,uint32_t data)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	4803      	ldr	r0, [pc, #12]	@ (800064c <rtcBackupRegWrite+0x1c>)
 8000640:	f003 fd00 	bl	8004044 <HAL_RTCEx_BKUPWrite>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200001b0 	.word	0x200001b0

08000650 <HAL_RTC_MspInit>:




void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a0b      	ldr	r2, [pc, #44]	@ (800068c <HAL_RTC_MspInit+0x3c>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d110      	bne.n	8000684 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000662:	f002 fe5d 	bl	8003320 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000666:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <HAL_RTC_MspInit+0x40>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a09      	ldr	r2, [pc, #36]	@ (8000690 <HAL_RTC_MspInit+0x40>)
 800066c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <HAL_RTC_MspInit+0x40>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800067e:	4b05      	ldr	r3, [pc, #20]	@ (8000694 <HAL_RTC_MspInit+0x44>)
 8000680:	2201      	movs	r2, #1
 8000682:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40002800 	.word	0x40002800
 8000690:	40021000 	.word	0x40021000
 8000694:	4242043c 	.word	0x4242043c

08000698 <uartInit>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_rx;


bool  uartInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
	for (int i=0; i<UART_MAX_CH;i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	e007      	b.n	80006b4 <uartInit+0x1c>
	{
		is_open[i] = false;
 80006a4:	4a08      	ldr	r2, [pc, #32]	@ (80006c8 <uartInit+0x30>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<UART_MAX_CH;i++)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3301      	adds	r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	ddf4      	ble.n	80006a4 <uartInit+0xc>
	}

	return true;
 80006ba:	2301      	movs	r3, #1
}
 80006bc:	4618      	mov	r0, r3
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	200001c4 	.word	0x200001c4

080006cc <uartOpen>:

bool     uartOpen(uint8_t ch, uint32_t baud)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]


	switch(ch)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d002      	beq.n	80006e8 <uartOpen+0x1c>
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d007      	beq.n	80006f6 <uartOpen+0x2a>
 80006e6:	e074      	b.n	80007d2 <uartOpen+0x106>
	{
	case _DEF_UART1:
		is_open[ch] = true;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	4a3c      	ldr	r2, [pc, #240]	@ (80007dc <uartOpen+0x110>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	54d1      	strb	r1, [r2, r3]
		ret = true;
 80006f0:	2301      	movs	r3, #1
 80006f2:	73fb      	strb	r3, [r7, #15]
		break;
 80006f4:	e06d      	b.n	80007d2 <uartOpen+0x106>

	case _DEF_UART2:
			huart1.Instance          = USART1;
 80006f6:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <uartOpen+0x114>)
 80006f8:	4a3a      	ldr	r2, [pc, #232]	@ (80007e4 <uartOpen+0x118>)
 80006fa:	601a      	str	r2, [r3, #0]
		  huart1.Init.BaudRate     = baud;
 80006fc:	4a38      	ldr	r2, [pc, #224]	@ (80007e0 <uartOpen+0x114>)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	6053      	str	r3, [r2, #4]
		  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8000702:	4b37      	ldr	r3, [pc, #220]	@ (80007e0 <uartOpen+0x114>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
		  huart1.Init.StopBits     = UART_STOPBITS_1;
 8000708:	4b35      	ldr	r3, [pc, #212]	@ (80007e0 <uartOpen+0x114>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
		  huart1.Init.Parity       = UART_PARITY_NONE;
 800070e:	4b34      	ldr	r3, [pc, #208]	@ (80007e0 <uartOpen+0x114>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
		  huart1.Init.Mode         = UART_MODE_TX_RX;
 8000714:	4b32      	ldr	r3, [pc, #200]	@ (80007e0 <uartOpen+0x114>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
		  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800071a:	4b31      	ldr	r3, [pc, #196]	@ (80007e0 <uartOpen+0x114>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
		  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <uartOpen+0x114>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]

		  qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	4a2f      	ldr	r2, [pc, #188]	@ (80007e8 <uartOpen+0x11c>)
 800072c:	4413      	add	r3, r2
 800072e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000732:	492e      	ldr	r1, [pc, #184]	@ (80007ec <uartOpen+0x120>)
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fe72 	bl	800041e <qbufferCreate>

		  __HAL_RCC_DMA1_CLK_ENABLE();
 800073a:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <uartOpen+0x124>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a2c      	ldr	r2, [pc, #176]	@ (80007f0 <uartOpen+0x124>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <uartOpen+0x124>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
		  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	200f      	movs	r0, #15
 8000758:	f000 facd 	bl	8000cf6 <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800075c:	200f      	movs	r0, #15
 800075e:	f000 fae6 	bl	8000d2e <HAL_NVIC_EnableIRQ>

		  HAL_UART_DeInit(&huart1);
 8000762:	481f      	ldr	r0, [pc, #124]	@ (80007e0 <uartOpen+0x114>)
 8000764:	f003 fcf4 	bl	8004150 <HAL_UART_DeInit>

		  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000768:	481d      	ldr	r0, [pc, #116]	@ (80007e0 <uartOpen+0x114>)
 800076a:	f003 fca1 	bl	80040b0 <HAL_UART_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <uartOpen+0xae>
		  {
		  	ret = false;
 8000774:	2300      	movs	r3, #0
 8000776:	73fb      	strb	r3, [r7, #15]

		  	qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
		  	qbuffer[ch].out = qbuffer[ch].in;
		  }

		break;
 8000778:	e02a      	b.n	80007d0 <uartOpen+0x104>
		  	ret =true;
 800077a:	2301      	movs	r3, #1
 800077c:	73fb      	strb	r3, [r7, #15]
		  	is_open[ch]= true;
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4a16      	ldr	r2, [pc, #88]	@ (80007dc <uartOpen+0x110>)
 8000782:	2101      	movs	r1, #1
 8000784:	54d1      	strb	r1, [r2, r3]
		  	if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000786:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800078a:	4918      	ldr	r1, [pc, #96]	@ (80007ec <uartOpen+0x120>)
 800078c:	4814      	ldr	r0, [pc, #80]	@ (80007e0 <uartOpen+0x114>)
 800078e:	f003 fd11 	bl	80041b4 <HAL_UART_Receive_DMA>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <uartOpen+0xd0>
		  			ret =false;
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]
		  	qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <uartOpen+0x11c>)
 80007a0:	011b      	lsls	r3, r3, #4
 80007a2:	4413      	add	r3, r2
 80007a4:	3308      	adds	r3, #8
 80007a6:	6819      	ldr	r1, [r3, #0]
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <uartOpen+0x128>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	685a      	ldr	r2, [r3, #4]
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	1a8a      	subs	r2, r1, r2
 80007b2:	490d      	ldr	r1, [pc, #52]	@ (80007e8 <uartOpen+0x11c>)
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	440b      	add	r3, r1
 80007b8:	601a      	str	r2, [r3, #0]
		  	qbuffer[ch].out = qbuffer[ch].in;
 80007ba:	79fa      	ldrb	r2, [r7, #7]
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	490a      	ldr	r1, [pc, #40]	@ (80007e8 <uartOpen+0x11c>)
 80007c0:	0112      	lsls	r2, r2, #4
 80007c2:	440a      	add	r2, r1
 80007c4:	6812      	ldr	r2, [r2, #0]
 80007c6:	4908      	ldr	r1, [pc, #32]	@ (80007e8 <uartOpen+0x11c>)
 80007c8:	011b      	lsls	r3, r3, #4
 80007ca:	440b      	add	r3, r1
 80007cc:	3304      	adds	r3, #4
 80007ce:	601a      	str	r2, [r3, #0]
		break;
 80007d0:	bf00      	nop
	}


	return ret;
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200001c4 	.word	0x200001c4
 80007e0:	200002e8 	.word	0x200002e8
 80007e4:	40013800 	.word	0x40013800
 80007e8:	200001c8 	.word	0x200001c8
 80007ec:	200001e8 	.word	0x200001e8
 80007f0:	40021000 	.word	0x40021000
 80007f4:	20000330 	.word	0x20000330

080007f8 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	if(huart->Instance ==USART1)
	{

	}
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  		qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2],1);

  		HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a33      	ldr	r2, [pc, #204]	@ (8000904 <HAL_UART_MspInit+0xe8>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d15f      	bne.n	80008fc <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800083c:	4b32      	ldr	r3, [pc, #200]	@ (8000908 <HAL_UART_MspInit+0xec>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a31      	ldr	r2, [pc, #196]	@ (8000908 <HAL_UART_MspInit+0xec>)
 8000842:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b2f      	ldr	r3, [pc, #188]	@ (8000908 <HAL_UART_MspInit+0xec>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b2c      	ldr	r3, [pc, #176]	@ (8000908 <HAL_UART_MspInit+0xec>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a2b      	ldr	r2, [pc, #172]	@ (8000908 <HAL_UART_MspInit+0xec>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b29      	ldr	r3, [pc, #164]	@ (8000908 <HAL_UART_MspInit+0xec>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800086c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000870:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	4619      	mov	r1, r3
 8000880:	4822      	ldr	r0, [pc, #136]	@ (800090c <HAL_UART_MspInit+0xf0>)
 8000882:	f000 fd7b 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800088a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4619      	mov	r1, r3
 800089a:	481c      	ldr	r0, [pc, #112]	@ (800090c <HAL_UART_MspInit+0xf0>)
 800089c:	f000 fd6e 	bl	800137c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <HAL_UART_MspInit+0xf4>)
 80008a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000914 <HAL_UART_MspInit+0xf8>)
 80008a4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <HAL_UART_MspInit+0xf4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ac:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <HAL_UART_MspInit+0xf4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <HAL_UART_MspInit+0xf4>)
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <HAL_UART_MspInit+0xf4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008be:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <HAL_UART_MspInit+0xf4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <HAL_UART_MspInit+0xf4>)
 80008c6:	2220      	movs	r2, #32
 80008c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008ca:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <HAL_UART_MspInit+0xf4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008d0:	480f      	ldr	r0, [pc, #60]	@ (8000910 <HAL_UART_MspInit+0xf4>)
 80008d2:	f000 fa55 	bl	8000d80 <HAL_DMA_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80008dc:	f7ff fcf1 	bl	80002c2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000910 <HAL_UART_MspInit+0xf4>)
 80008e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <HAL_UART_MspInit+0xf4>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	2025      	movs	r0, #37	@ 0x25
 80008f2:	f000 fa00 	bl	8000cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008f6:	2025      	movs	r0, #37	@ 0x25
 80008f8:	f000 fa19 	bl	8000d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40013800 	.word	0x40013800
 8000908:	40021000 	.word	0x40021000
 800090c:	40010800 	.word	0x40010800
 8000910:	20000330 	.word	0x20000330
 8000914:	40020058 	.word	0x40020058

08000918 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0c      	ldr	r2, [pc, #48]	@ (8000958 <HAL_UART_MspDeInit+0x40>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d112      	bne.n	8000950 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800092a:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <HAL_UART_MspDeInit+0x44>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a0b      	ldr	r2, [pc, #44]	@ (800095c <HAL_UART_MspDeInit+0x44>)
 8000930:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000934:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000936:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800093a:	4809      	ldr	r0, [pc, #36]	@ (8000960 <HAL_UART_MspDeInit+0x48>)
 800093c:	f000 fea2 	bl	8001684 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fa75 	bl	8000e34 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800094a:	2025      	movs	r0, #37	@ 0x25
 800094c:	f000 f9fd 	bl	8000d4a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40013800 	.word	0x40013800
 800095c:	40021000 	.word	0x40021000
 8000960:	40010800 	.word	0x40010800

08000964 <usbInit>:

#include "usb_device.h"


bool usbInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
	bool ret = true;
 800096a:	2301      	movs	r3, #1
 800096c:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800097a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  //open drain
 8000980:	2311      	movs	r3, #17
 8000982:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2302      	movs	r3, #2
 800098a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	480f      	ldr	r0, [pc, #60]	@ (80009d0 <usbInit+0x6c>)
 8000992:	f000 fcf3 	bl	800137c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET); //회로에 풀업이
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <usbInit+0x6c>)
 800099e:	f000 ff2d 	bl	80017fc <HAL_GPIO_WritePin>
	delay(100);
 80009a2:	2064      	movs	r0, #100	@ 0x64
 80009a4:	f7ff fc1c 	bl	80001e0 <delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ae:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <usbInit+0x6c>)
 80009b0:	f000 ff24 	bl	80017fc <HAL_GPIO_WritePin>

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <usbInit+0x6c>)
 80009be:	f000 fcdd 	bl	800137c <HAL_GPIO_Init>


	 MX_USB_DEVICE_Init();
 80009c2:	f008 f987 	bl	8008cd4 <MX_USB_DEVICE_Init>

	return ret;
 80009c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40010800 	.word	0x40010800

080009d4 <hwInit>:




void hwInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	bspInit();
 80009d8:	f7ff fbdc 	bl	8000194 <bspInit>
	rtcInit();
 80009dc:	f7ff fde8 	bl	80005b0 <rtcInit>

	resetInit();
 80009e0:	f7ff fdba 	bl	8000558 <resetInit>
	ledInit();
 80009e4:	f7ff fd36 	bl	8000454 <ledInit>
	usbInit();
 80009e8:	f7ff ffbc 	bl	8000964 <usbInit>
	uartInit();
 80009ec:	f7ff fe54 	bl	8000698 <uartInit>

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <HAL_Init+0x28>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a07      	ldr	r2, [pc, #28]	@ (8000a1c <HAL_Init+0x28>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f96b 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	200f      	movs	r0, #15
 8000a0c:	f000 f808 	bl	8000a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a10:	f7ff fc5e 	bl	80002d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40022000 	.word	0x40022000

08000a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <HAL_InitTick+0x54>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_InitTick+0x58>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f991 	bl	8000d66 <HAL_SYSTICK_Config>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00e      	b.n	8000a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d80a      	bhi.n	8000a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f000 f94b 	bl	8000cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a60:	4a06      	ldr	r2, [pc, #24]	@ (8000a7c <HAL_InitTick+0x5c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000010 	.word	0x20000010
 8000a7c:	2000000c 	.word	0x2000000c

08000a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <HAL_IncTick+0x1c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <HAL_IncTick+0x20>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a03      	ldr	r2, [pc, #12]	@ (8000aa0 <HAL_IncTick+0x20>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	20000010 	.word	0x20000010
 8000aa0:	20000374 	.word	0x20000374

08000aa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b02      	ldr	r3, [pc, #8]	@ (8000ab4 <HAL_GetTick+0x10>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	20000374 	.word	0x20000374

08000ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac0:	f7ff fff0 	bl	8000aa4 <HAL_GetTick>
 8000ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad0:	d005      	beq.n	8000ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <HAL_Delay+0x44>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ade:	bf00      	nop
 8000ae0:	f7ff ffe0 	bl	8000aa4 <HAL_GetTick>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d8f7      	bhi.n	8000ae0 <HAL_Delay+0x28>
  {
  }
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000010 	.word	0x20000010

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4906      	ldr	r1, [pc, #24]	@ (8000b98 <__NVIC_EnableIRQ+0x34>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db12      	blt.n	8000bd4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	490a      	ldr	r1, [pc, #40]	@ (8000be0 <__NVIC_DisableIRQ+0x44>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	3320      	adds	r3, #32
 8000bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bc8:	f3bf 8f4f 	dsb	sy
}
 8000bcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bce:	f3bf 8f6f 	isb	sy
}
 8000bd2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	@ (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	@ (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	@ 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
         );
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	@ 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff90 	bl	8000be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff09 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff1e 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff90 	bl	8000c38 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5f 	bl	8000be4 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff11 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff1f 	bl	8000b9c <__NVIC_DisableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ff94 	bl	8000c9c <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e043      	b.n	8000e1e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <HAL_DMA_Init+0xa8>)
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a22      	ldr	r2, [pc, #136]	@ (8000e2c <HAL_DMA_Init+0xac>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	009a      	lsls	r2, r3, #2
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a1f      	ldr	r2, [pc, #124]	@ (8000e30 <HAL_DMA_Init+0xb0>)
 8000db2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2202      	movs	r2, #2
 8000db8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000dca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000dce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	bffdfff8 	.word	0xbffdfff8
 8000e2c:	cccccccd 	.word	0xcccccccd
 8000e30:	40020000 	.word	0x40020000

08000e34 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e046      	b.n	8000ed4 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0201 	bic.w	r2, r2, #1
 8000e54:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2200      	movs	r2, #0
 8000e64:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <HAL_DMA_DeInit+0xac>)
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <HAL_DMA_DeInit+0xb0>)
 8000e82:	fba2 2303 	umull	r2, r3, r2, r3
 8000e86:	091b      	lsrs	r3, r3, #4
 8000e88:	009a      	lsls	r2, r3, #2
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a15      	ldr	r2, [pc, #84]	@ (8000ee8 <HAL_DMA_DeInit+0xb4>)
 8000e92:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea2:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	bffdfff8 	.word	0xbffdfff8
 8000ee4:	cccccccd 	.word	0xcccccccd
 8000ee8:	40020000 	.word	0x40020000

08000eec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d101      	bne.n	8000f0c <HAL_DMA_Start_IT+0x20>
 8000f08:	2302      	movs	r3, #2
 8000f0a:	e04b      	b.n	8000fa4 <HAL_DMA_Start_IT+0xb8>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d13a      	bne.n	8000f96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2202      	movs	r2, #2
 8000f24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0201 	bic.w	r2, r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f000 f9eb 	bl	8001320 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d008      	beq.n	8000f64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f042 020e 	orr.w	r2, r2, #14
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	e00f      	b.n	8000f84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0204 	bic.w	r2, r2, #4
 8000f72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 020a 	orr.w	r2, r2, #10
 8000f82:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0201 	orr.w	r2, r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	e005      	b.n	8000fa2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d008      	beq.n	8000fd6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e020      	b.n	8001018 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 020e 	bic.w	r2, r2, #14
 8000fe4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0201 	bic.w	r2, r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ffe:	2101      	movs	r1, #1
 8001000:	fa01 f202 	lsl.w	r2, r1, r2
 8001004:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001016:	7bfb      	ldrb	r3, [r7, #15]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
	...

08001024 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d005      	beq.n	8001048 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2204      	movs	r2, #4
 8001040:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e051      	b.n	80010ec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 020e 	bic.w	r2, r2, #14
 8001056:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a22      	ldr	r2, [pc, #136]	@ (80010f8 <HAL_DMA_Abort_IT+0xd4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d029      	beq.n	80010c6 <HAL_DMA_Abort_IT+0xa2>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <HAL_DMA_Abort_IT+0xd8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d022      	beq.n	80010c2 <HAL_DMA_Abort_IT+0x9e>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a1f      	ldr	r2, [pc, #124]	@ (8001100 <HAL_DMA_Abort_IT+0xdc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d01a      	beq.n	80010bc <HAL_DMA_Abort_IT+0x98>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a1e      	ldr	r2, [pc, #120]	@ (8001104 <HAL_DMA_Abort_IT+0xe0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d012      	beq.n	80010b6 <HAL_DMA_Abort_IT+0x92>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a1c      	ldr	r2, [pc, #112]	@ (8001108 <HAL_DMA_Abort_IT+0xe4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00a      	beq.n	80010b0 <HAL_DMA_Abort_IT+0x8c>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a1b      	ldr	r2, [pc, #108]	@ (800110c <HAL_DMA_Abort_IT+0xe8>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d102      	bne.n	80010aa <HAL_DMA_Abort_IT+0x86>
 80010a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010a8:	e00e      	b.n	80010c8 <HAL_DMA_Abort_IT+0xa4>
 80010aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010ae:	e00b      	b.n	80010c8 <HAL_DMA_Abort_IT+0xa4>
 80010b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b4:	e008      	b.n	80010c8 <HAL_DMA_Abort_IT+0xa4>
 80010b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ba:	e005      	b.n	80010c8 <HAL_DMA_Abort_IT+0xa4>
 80010bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c0:	e002      	b.n	80010c8 <HAL_DMA_Abort_IT+0xa4>
 80010c2:	2310      	movs	r3, #16
 80010c4:	e000      	b.n	80010c8 <HAL_DMA_Abort_IT+0xa4>
 80010c6:	2301      	movs	r3, #1
 80010c8:	4a11      	ldr	r2, [pc, #68]	@ (8001110 <HAL_DMA_Abort_IT+0xec>)
 80010ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	4798      	blx	r3
    } 
  }
  return status;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40020008 	.word	0x40020008
 80010fc:	4002001c 	.word	0x4002001c
 8001100:	40020030 	.word	0x40020030
 8001104:	40020044 	.word	0x40020044
 8001108:	40020058 	.word	0x40020058
 800110c:	4002006c 	.word	0x4002006c
 8001110:	40020000 	.word	0x40020000

08001114 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	2204      	movs	r2, #4
 8001132:	409a      	lsls	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4013      	ands	r3, r2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d04f      	beq.n	80011dc <HAL_DMA_IRQHandler+0xc8>
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	2b00      	cmp	r3, #0
 8001144:	d04a      	beq.n	80011dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0320 	and.w	r3, r3, #32
 8001150:	2b00      	cmp	r3, #0
 8001152:	d107      	bne.n	8001164 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0204 	bic.w	r2, r2, #4
 8001162:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a66      	ldr	r2, [pc, #408]	@ (8001304 <HAL_DMA_IRQHandler+0x1f0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d029      	beq.n	80011c2 <HAL_DMA_IRQHandler+0xae>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a65      	ldr	r2, [pc, #404]	@ (8001308 <HAL_DMA_IRQHandler+0x1f4>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d022      	beq.n	80011be <HAL_DMA_IRQHandler+0xaa>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a63      	ldr	r2, [pc, #396]	@ (800130c <HAL_DMA_IRQHandler+0x1f8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d01a      	beq.n	80011b8 <HAL_DMA_IRQHandler+0xa4>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a62      	ldr	r2, [pc, #392]	@ (8001310 <HAL_DMA_IRQHandler+0x1fc>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d012      	beq.n	80011b2 <HAL_DMA_IRQHandler+0x9e>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a60      	ldr	r2, [pc, #384]	@ (8001314 <HAL_DMA_IRQHandler+0x200>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00a      	beq.n	80011ac <HAL_DMA_IRQHandler+0x98>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a5f      	ldr	r2, [pc, #380]	@ (8001318 <HAL_DMA_IRQHandler+0x204>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d102      	bne.n	80011a6 <HAL_DMA_IRQHandler+0x92>
 80011a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011a4:	e00e      	b.n	80011c4 <HAL_DMA_IRQHandler+0xb0>
 80011a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80011aa:	e00b      	b.n	80011c4 <HAL_DMA_IRQHandler+0xb0>
 80011ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80011b0:	e008      	b.n	80011c4 <HAL_DMA_IRQHandler+0xb0>
 80011b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011b6:	e005      	b.n	80011c4 <HAL_DMA_IRQHandler+0xb0>
 80011b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011bc:	e002      	b.n	80011c4 <HAL_DMA_IRQHandler+0xb0>
 80011be:	2340      	movs	r3, #64	@ 0x40
 80011c0:	e000      	b.n	80011c4 <HAL_DMA_IRQHandler+0xb0>
 80011c2:	2304      	movs	r3, #4
 80011c4:	4a55      	ldr	r2, [pc, #340]	@ (800131c <HAL_DMA_IRQHandler+0x208>)
 80011c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 8094 	beq.w	80012fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80011da:	e08e      	b.n	80012fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	2202      	movs	r2, #2
 80011e2:	409a      	lsls	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d056      	beq.n	800129a <HAL_DMA_IRQHandler+0x186>
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d051      	beq.n	800129a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0320 	and.w	r3, r3, #32
 8001200:	2b00      	cmp	r3, #0
 8001202:	d10b      	bne.n	800121c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 020a 	bic.w	r2, r2, #10
 8001212:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a38      	ldr	r2, [pc, #224]	@ (8001304 <HAL_DMA_IRQHandler+0x1f0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d029      	beq.n	800127a <HAL_DMA_IRQHandler+0x166>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a37      	ldr	r2, [pc, #220]	@ (8001308 <HAL_DMA_IRQHandler+0x1f4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d022      	beq.n	8001276 <HAL_DMA_IRQHandler+0x162>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a35      	ldr	r2, [pc, #212]	@ (800130c <HAL_DMA_IRQHandler+0x1f8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d01a      	beq.n	8001270 <HAL_DMA_IRQHandler+0x15c>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a34      	ldr	r2, [pc, #208]	@ (8001310 <HAL_DMA_IRQHandler+0x1fc>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d012      	beq.n	800126a <HAL_DMA_IRQHandler+0x156>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a32      	ldr	r2, [pc, #200]	@ (8001314 <HAL_DMA_IRQHandler+0x200>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00a      	beq.n	8001264 <HAL_DMA_IRQHandler+0x150>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a31      	ldr	r2, [pc, #196]	@ (8001318 <HAL_DMA_IRQHandler+0x204>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d102      	bne.n	800125e <HAL_DMA_IRQHandler+0x14a>
 8001258:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800125c:	e00e      	b.n	800127c <HAL_DMA_IRQHandler+0x168>
 800125e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001262:	e00b      	b.n	800127c <HAL_DMA_IRQHandler+0x168>
 8001264:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001268:	e008      	b.n	800127c <HAL_DMA_IRQHandler+0x168>
 800126a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800126e:	e005      	b.n	800127c <HAL_DMA_IRQHandler+0x168>
 8001270:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001274:	e002      	b.n	800127c <HAL_DMA_IRQHandler+0x168>
 8001276:	2320      	movs	r3, #32
 8001278:	e000      	b.n	800127c <HAL_DMA_IRQHandler+0x168>
 800127a:	2302      	movs	r3, #2
 800127c:	4a27      	ldr	r2, [pc, #156]	@ (800131c <HAL_DMA_IRQHandler+0x208>)
 800127e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128c:	2b00      	cmp	r3, #0
 800128e:	d034      	beq.n	80012fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001298:	e02f      	b.n	80012fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	2208      	movs	r2, #8
 80012a0:	409a      	lsls	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d028      	beq.n	80012fc <HAL_DMA_IRQHandler+0x1e8>
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d023      	beq.n	80012fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 020e 	bic.w	r2, r2, #14
 80012c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012cc:	2101      	movs	r1, #1
 80012ce:	fa01 f202 	lsl.w	r2, r1, r2
 80012d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4798      	blx	r3
    }
  }
  return;
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
}
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40020008 	.word	0x40020008
 8001308:	4002001c 	.word	0x4002001c
 800130c:	40020030 	.word	0x40020030
 8001310:	40020044 	.word	0x40020044
 8001314:	40020058 	.word	0x40020058
 8001318:	4002006c 	.word	0x4002006c
 800131c:	40020000 	.word	0x40020000

08001320 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f202 	lsl.w	r2, r1, r2
 800133c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b10      	cmp	r3, #16
 800134c:	d108      	bne.n	8001360 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800135e:	e007      	b.n	8001370 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	60da      	str	r2, [r3, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
	...

0800137c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800137c:	b480      	push	{r7}
 800137e:	b08b      	sub	sp, #44	@ 0x2c
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138e:	e169      	b.n	8001664 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001390:	2201      	movs	r2, #1
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	f040 8158 	bne.w	800165e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	4a9a      	ldr	r2, [pc, #616]	@ (800161c <HAL_GPIO_Init+0x2a0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d05e      	beq.n	8001476 <HAL_GPIO_Init+0xfa>
 80013b8:	4a98      	ldr	r2, [pc, #608]	@ (800161c <HAL_GPIO_Init+0x2a0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d875      	bhi.n	80014aa <HAL_GPIO_Init+0x12e>
 80013be:	4a98      	ldr	r2, [pc, #608]	@ (8001620 <HAL_GPIO_Init+0x2a4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d058      	beq.n	8001476 <HAL_GPIO_Init+0xfa>
 80013c4:	4a96      	ldr	r2, [pc, #600]	@ (8001620 <HAL_GPIO_Init+0x2a4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d86f      	bhi.n	80014aa <HAL_GPIO_Init+0x12e>
 80013ca:	4a96      	ldr	r2, [pc, #600]	@ (8001624 <HAL_GPIO_Init+0x2a8>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d052      	beq.n	8001476 <HAL_GPIO_Init+0xfa>
 80013d0:	4a94      	ldr	r2, [pc, #592]	@ (8001624 <HAL_GPIO_Init+0x2a8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d869      	bhi.n	80014aa <HAL_GPIO_Init+0x12e>
 80013d6:	4a94      	ldr	r2, [pc, #592]	@ (8001628 <HAL_GPIO_Init+0x2ac>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d04c      	beq.n	8001476 <HAL_GPIO_Init+0xfa>
 80013dc:	4a92      	ldr	r2, [pc, #584]	@ (8001628 <HAL_GPIO_Init+0x2ac>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d863      	bhi.n	80014aa <HAL_GPIO_Init+0x12e>
 80013e2:	4a92      	ldr	r2, [pc, #584]	@ (800162c <HAL_GPIO_Init+0x2b0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d046      	beq.n	8001476 <HAL_GPIO_Init+0xfa>
 80013e8:	4a90      	ldr	r2, [pc, #576]	@ (800162c <HAL_GPIO_Init+0x2b0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d85d      	bhi.n	80014aa <HAL_GPIO_Init+0x12e>
 80013ee:	2b12      	cmp	r3, #18
 80013f0:	d82a      	bhi.n	8001448 <HAL_GPIO_Init+0xcc>
 80013f2:	2b12      	cmp	r3, #18
 80013f4:	d859      	bhi.n	80014aa <HAL_GPIO_Init+0x12e>
 80013f6:	a201      	add	r2, pc, #4	@ (adr r2, 80013fc <HAL_GPIO_Init+0x80>)
 80013f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fc:	08001477 	.word	0x08001477
 8001400:	08001451 	.word	0x08001451
 8001404:	08001463 	.word	0x08001463
 8001408:	080014a5 	.word	0x080014a5
 800140c:	080014ab 	.word	0x080014ab
 8001410:	080014ab 	.word	0x080014ab
 8001414:	080014ab 	.word	0x080014ab
 8001418:	080014ab 	.word	0x080014ab
 800141c:	080014ab 	.word	0x080014ab
 8001420:	080014ab 	.word	0x080014ab
 8001424:	080014ab 	.word	0x080014ab
 8001428:	080014ab 	.word	0x080014ab
 800142c:	080014ab 	.word	0x080014ab
 8001430:	080014ab 	.word	0x080014ab
 8001434:	080014ab 	.word	0x080014ab
 8001438:	080014ab 	.word	0x080014ab
 800143c:	080014ab 	.word	0x080014ab
 8001440:	08001459 	.word	0x08001459
 8001444:	0800146d 	.word	0x0800146d
 8001448:	4a79      	ldr	r2, [pc, #484]	@ (8001630 <HAL_GPIO_Init+0x2b4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d013      	beq.n	8001476 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800144e:	e02c      	b.n	80014aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	623b      	str	r3, [r7, #32]
          break;
 8001456:	e029      	b.n	80014ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	3304      	adds	r3, #4
 800145e:	623b      	str	r3, [r7, #32]
          break;
 8001460:	e024      	b.n	80014ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	3308      	adds	r3, #8
 8001468:	623b      	str	r3, [r7, #32]
          break;
 800146a:	e01f      	b.n	80014ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	330c      	adds	r3, #12
 8001472:	623b      	str	r3, [r7, #32]
          break;
 8001474:	e01a      	b.n	80014ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800147e:	2304      	movs	r3, #4
 8001480:	623b      	str	r3, [r7, #32]
          break;
 8001482:	e013      	b.n	80014ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d105      	bne.n	8001498 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800148c:	2308      	movs	r3, #8
 800148e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	611a      	str	r2, [r3, #16]
          break;
 8001496:	e009      	b.n	80014ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001498:	2308      	movs	r3, #8
 800149a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	615a      	str	r2, [r3, #20]
          break;
 80014a2:	e003      	b.n	80014ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
          break;
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_Init+0x130>
          break;
 80014aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2bff      	cmp	r3, #255	@ 0xff
 80014b0:	d801      	bhi.n	80014b6 <HAL_GPIO_Init+0x13a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	e001      	b.n	80014ba <HAL_GPIO_Init+0x13e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3304      	adds	r3, #4
 80014ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2bff      	cmp	r3, #255	@ 0xff
 80014c0:	d802      	bhi.n	80014c8 <HAL_GPIO_Init+0x14c>
 80014c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	e002      	b.n	80014ce <HAL_GPIO_Init+0x152>
 80014c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ca:	3b08      	subs	r3, #8
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	210f      	movs	r1, #15
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	401a      	ands	r2, r3
 80014e0:	6a39      	ldr	r1, [r7, #32]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	431a      	orrs	r2, r3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80b1 	beq.w	800165e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001634 <HAL_GPIO_Init+0x2b8>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a4c      	ldr	r2, [pc, #304]	@ (8001634 <HAL_GPIO_Init+0x2b8>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b4a      	ldr	r3, [pc, #296]	@ (8001634 <HAL_GPIO_Init+0x2b8>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001514:	4a48      	ldr	r2, [pc, #288]	@ (8001638 <HAL_GPIO_Init+0x2bc>)
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	4013      	ands	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a40      	ldr	r2, [pc, #256]	@ (800163c <HAL_GPIO_Init+0x2c0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d013      	beq.n	8001568 <HAL_GPIO_Init+0x1ec>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a3f      	ldr	r2, [pc, #252]	@ (8001640 <HAL_GPIO_Init+0x2c4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d00d      	beq.n	8001564 <HAL_GPIO_Init+0x1e8>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a3e      	ldr	r2, [pc, #248]	@ (8001644 <HAL_GPIO_Init+0x2c8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d007      	beq.n	8001560 <HAL_GPIO_Init+0x1e4>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a3d      	ldr	r2, [pc, #244]	@ (8001648 <HAL_GPIO_Init+0x2cc>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d101      	bne.n	800155c <HAL_GPIO_Init+0x1e0>
 8001558:	2303      	movs	r3, #3
 800155a:	e006      	b.n	800156a <HAL_GPIO_Init+0x1ee>
 800155c:	2304      	movs	r3, #4
 800155e:	e004      	b.n	800156a <HAL_GPIO_Init+0x1ee>
 8001560:	2302      	movs	r3, #2
 8001562:	e002      	b.n	800156a <HAL_GPIO_Init+0x1ee>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <HAL_GPIO_Init+0x1ee>
 8001568:	2300      	movs	r3, #0
 800156a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800156c:	f002 0203 	and.w	r2, r2, #3
 8001570:	0092      	lsls	r2, r2, #2
 8001572:	4093      	lsls	r3, r2
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800157a:	492f      	ldr	r1, [pc, #188]	@ (8001638 <HAL_GPIO_Init+0x2bc>)
 800157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	3302      	adds	r3, #2
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001594:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <HAL_GPIO_Init+0x2d0>)
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	492c      	ldr	r1, [pc, #176]	@ (800164c <HAL_GPIO_Init+0x2d0>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	608b      	str	r3, [r1, #8]
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015a2:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <HAL_GPIO_Init+0x2d0>)
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	4928      	ldr	r1, [pc, #160]	@ (800164c <HAL_GPIO_Init+0x2d0>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015bc:	4b23      	ldr	r3, [pc, #140]	@ (800164c <HAL_GPIO_Init+0x2d0>)
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	4922      	ldr	r1, [pc, #136]	@ (800164c <HAL_GPIO_Init+0x2d0>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	60cb      	str	r3, [r1, #12]
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ca:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_GPIO_Init+0x2d0>)
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	491e      	ldr	r1, [pc, #120]	@ (800164c <HAL_GPIO_Init+0x2d0>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d006      	beq.n	80015f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015e4:	4b19      	ldr	r3, [pc, #100]	@ (800164c <HAL_GPIO_Init+0x2d0>)
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	4918      	ldr	r1, [pc, #96]	@ (800164c <HAL_GPIO_Init+0x2d0>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015f2:	4b16      	ldr	r3, [pc, #88]	@ (800164c <HAL_GPIO_Init+0x2d0>)
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	4914      	ldr	r1, [pc, #80]	@ (800164c <HAL_GPIO_Init+0x2d0>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d021      	beq.n	8001650 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800160c:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <HAL_GPIO_Init+0x2d0>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	490e      	ldr	r1, [pc, #56]	@ (800164c <HAL_GPIO_Init+0x2d0>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
 8001618:	e021      	b.n	800165e <HAL_GPIO_Init+0x2e2>
 800161a:	bf00      	nop
 800161c:	10320000 	.word	0x10320000
 8001620:	10310000 	.word	0x10310000
 8001624:	10220000 	.word	0x10220000
 8001628:	10210000 	.word	0x10210000
 800162c:	10120000 	.word	0x10120000
 8001630:	10110000 	.word	0x10110000
 8001634:	40021000 	.word	0x40021000
 8001638:	40010000 	.word	0x40010000
 800163c:	40010800 	.word	0x40010800
 8001640:	40010c00 	.word	0x40010c00
 8001644:	40011000 	.word	0x40011000
 8001648:	40011400 	.word	0x40011400
 800164c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001650:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <HAL_GPIO_Init+0x304>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	43db      	mvns	r3, r3
 8001658:	4909      	ldr	r1, [pc, #36]	@ (8001680 <HAL_GPIO_Init+0x304>)
 800165a:	4013      	ands	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800165e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001660:	3301      	adds	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	fa22 f303 	lsr.w	r3, r2, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	f47f ae8e 	bne.w	8001390 <HAL_GPIO_Init+0x14>
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	372c      	adds	r7, #44	@ 0x2c
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	@ 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001692:	e09a      	b.n	80017ca <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001694:	2201      	movs	r2, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 808d 	beq.w	80017c4 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80016aa:	4a4e      	ldr	r2, [pc, #312]	@ (80017e4 <HAL_GPIO_DeInit+0x160>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4013      	ands	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a46      	ldr	r2, [pc, #280]	@ (80017e8 <HAL_GPIO_DeInit+0x164>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d013      	beq.n	80016fc <HAL_GPIO_DeInit+0x78>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a45      	ldr	r2, [pc, #276]	@ (80017ec <HAL_GPIO_DeInit+0x168>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d00d      	beq.n	80016f8 <HAL_GPIO_DeInit+0x74>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a44      	ldr	r2, [pc, #272]	@ (80017f0 <HAL_GPIO_DeInit+0x16c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d007      	beq.n	80016f4 <HAL_GPIO_DeInit+0x70>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a43      	ldr	r2, [pc, #268]	@ (80017f4 <HAL_GPIO_DeInit+0x170>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d101      	bne.n	80016f0 <HAL_GPIO_DeInit+0x6c>
 80016ec:	2303      	movs	r3, #3
 80016ee:	e006      	b.n	80016fe <HAL_GPIO_DeInit+0x7a>
 80016f0:	2304      	movs	r3, #4
 80016f2:	e004      	b.n	80016fe <HAL_GPIO_DeInit+0x7a>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e002      	b.n	80016fe <HAL_GPIO_DeInit+0x7a>
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <HAL_GPIO_DeInit+0x7a>
 80016fc:	2300      	movs	r3, #0
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	f002 0203 	and.w	r2, r2, #3
 8001704:	0092      	lsls	r2, r2, #2
 8001706:	4093      	lsls	r3, r2
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	429a      	cmp	r2, r3
 800170c:	d132      	bne.n	8001774 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800170e:	4b3a      	ldr	r3, [pc, #232]	@ (80017f8 <HAL_GPIO_DeInit+0x174>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	4938      	ldr	r1, [pc, #224]	@ (80017f8 <HAL_GPIO_DeInit+0x174>)
 8001718:	4013      	ands	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800171c:	4b36      	ldr	r3, [pc, #216]	@ (80017f8 <HAL_GPIO_DeInit+0x174>)
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	43db      	mvns	r3, r3
 8001724:	4934      	ldr	r1, [pc, #208]	@ (80017f8 <HAL_GPIO_DeInit+0x174>)
 8001726:	4013      	ands	r3, r2
 8001728:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800172a:	4b33      	ldr	r3, [pc, #204]	@ (80017f8 <HAL_GPIO_DeInit+0x174>)
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	43db      	mvns	r3, r3
 8001732:	4931      	ldr	r1, [pc, #196]	@ (80017f8 <HAL_GPIO_DeInit+0x174>)
 8001734:	4013      	ands	r3, r2
 8001736:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001738:	4b2f      	ldr	r3, [pc, #188]	@ (80017f8 <HAL_GPIO_DeInit+0x174>)
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	43db      	mvns	r3, r3
 8001740:	492d      	ldr	r1, [pc, #180]	@ (80017f8 <HAL_GPIO_DeInit+0x174>)
 8001742:	4013      	ands	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	220f      	movs	r2, #15
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001756:	4a23      	ldr	r2, [pc, #140]	@ (80017e4 <HAL_GPIO_DeInit+0x160>)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	43da      	mvns	r2, r3
 8001766:	481f      	ldr	r0, [pc, #124]	@ (80017e4 <HAL_GPIO_DeInit+0x160>)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	400a      	ands	r2, r1
 800176e:	3302      	adds	r3, #2
 8001770:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2bff      	cmp	r3, #255	@ 0xff
 8001778:	d801      	bhi.n	800177e <HAL_GPIO_DeInit+0xfa>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	e001      	b.n	8001782 <HAL_GPIO_DeInit+0xfe>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3304      	adds	r3, #4
 8001782:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2bff      	cmp	r3, #255	@ 0xff
 8001788:	d802      	bhi.n	8001790 <HAL_GPIO_DeInit+0x10c>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	e002      	b.n	8001796 <HAL_GPIO_DeInit+0x112>
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	3b08      	subs	r3, #8
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	210f      	movs	r1, #15
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	401a      	ands	r2, r3
 80017a8:	2104      	movs	r1, #4
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	431a      	orrs	r2, r3
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	43db      	mvns	r3, r3
 80017be:	401a      	ands	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	3301      	adds	r3, #1
 80017c8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f47f af5e 	bne.w	8001694 <HAL_GPIO_DeInit+0x10>
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3724      	adds	r7, #36	@ 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40010000 	.word	0x40010000
 80017e8:	40010800 	.word	0x40010800
 80017ec:	40010c00 	.word	0x40010c00
 80017f0:	40011000 	.word	0x40011000
 80017f4:	40011400 	.word	0x40011400
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
 8001808:	4613      	mov	r3, r2
 800180a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001818:	e003      	b.n	8001822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	041a      	lsls	r2, r3, #16
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	611a      	str	r2, [r3, #16]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4013      	ands	r3, r2
 8001844:	041a      	lsls	r2, r3, #16
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43d9      	mvns	r1, r3
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	400b      	ands	r3, r1
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	611a      	str	r2, [r3, #16]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0e8      	b.n	8001a42 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d106      	bne.n	800188a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f007 fcd7 	bl	8009238 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2203      	movs	r2, #3
 800188e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f003 fb6a 	bl	8004f76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3304      	adds	r3, #4
 80018aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ac:	f003 fb40 	bl	8004f30 <USB_CoreInit>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2202      	movs	r2, #2
 80018ba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e0bf      	b.n	8001a42 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 fb6e 	bl	8004faa <USB_SetCurrentMode>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0b0      	b.n	8001a42 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	e03e      	b.n	8001964 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	3311      	adds	r3, #17
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	3310      	adds	r3, #16
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	3313      	adds	r3, #19
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	3320      	adds	r3, #32
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	3324      	adds	r3, #36	@ 0x24
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	3301      	adds	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	791b      	ldrb	r3, [r3, #4]
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	429a      	cmp	r2, r3
 800196c:	d3bb      	bcc.n	80018e6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	e044      	b.n	80019fe <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019b6:	7bfa      	ldrb	r2, [r7, #15]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	440b      	add	r3, r1
 80019da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	440b      	add	r3, r1
 80019f0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	3301      	adds	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	791b      	ldrb	r3, [r3, #4]
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d3b5      	bcc.n	8001974 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a12:	f003 fad6 	bl	8004fc2 <USB_DevInit>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e00c      	b.n	8001a42 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f005 fd55 	bl	80074ea <USB_DevDisconnect>

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <HAL_PCD_Start+0x16>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e016      	b.n	8001a8e <HAL_PCD_Start+0x44>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 fa6c 	bl	8004f4a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a72:	2101      	movs	r1, #1
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f007 fe52 	bl	800971e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f005 fd29 	bl	80074d6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b088      	sub	sp, #32
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f005 fd2b 	bl	80074fe <USB_ReadInterrupts>
 8001aa8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 fb1a 	bl	80020ee <PCD_EP_ISR_Handler>

    return;
 8001aba:	e119      	b.n	8001cf0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d013      	beq.n	8001aee <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ad8:	b292      	uxth	r2, r2
 8001ada:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f007 fc25 	bl	800932e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f905 	bl	8001cf6 <HAL_PCD_SetAddress>

    return;
 8001aec:	e100      	b.n	8001cf0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00c      	beq.n	8001b12 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001b0a:	b292      	uxth	r2, r2
 8001b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b10:	e0ee      	b.n	8001cf0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00c      	beq.n	8001b36 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b2e:	b292      	uxth	r2, r2
 8001b30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b34:	e0dc      	b.n	8001cf0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d027      	beq.n	8001b90 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0204 	bic.w	r2, r2, #4
 8001b52:	b292      	uxth	r2, r2
 8001b54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0208 	bic.w	r2, r2, #8
 8001b6a:	b292      	uxth	r2, r2
 8001b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f007 fc15 	bl	80093a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b88:	b292      	uxth	r2, r2
 8001b8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b8e:	e0af      	b.n	8001cf0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8083 	beq.w	8001ca2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	77fb      	strb	r3, [r7, #31]
 8001ba0:	e010      	b.n	8001bc4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	7ffb      	ldrb	r3, [r7, #31]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	441a      	add	r2, r3
 8001bae:	7ffb      	ldrb	r3, [r7, #31]
 8001bb0:	8812      	ldrh	r2, [r2, #0]
 8001bb2:	b292      	uxth	r2, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	3320      	adds	r3, #32
 8001bb8:	443b      	add	r3, r7
 8001bba:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001bbe:	7ffb      	ldrb	r3, [r7, #31]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	77fb      	strb	r3, [r7, #31]
 8001bc4:	7ffb      	ldrb	r3, [r7, #31]
 8001bc6:	2b07      	cmp	r3, #7
 8001bc8:	d9eb      	bls.n	8001ba2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0201 	orr.w	r2, r2, #1
 8001bdc:	b292      	uxth	r2, r2
 8001bde:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001bfa:	bf00      	nop
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f6      	beq.n	8001bfc <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c20:	b292      	uxth	r2, r2
 8001c22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	77fb      	strb	r3, [r7, #31]
 8001c2a:	e00f      	b.n	8001c4c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001c2c:	7ffb      	ldrb	r3, [r7, #31]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	4611      	mov	r1, r2
 8001c34:	7ffa      	ldrb	r2, [r7, #31]
 8001c36:	0092      	lsls	r2, r2, #2
 8001c38:	440a      	add	r2, r1
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	3320      	adds	r3, #32
 8001c3e:	443b      	add	r3, r7
 8001c40:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001c44:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c46:	7ffb      	ldrb	r3, [r7, #31]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	77fb      	strb	r3, [r7, #31]
 8001c4c:	7ffb      	ldrb	r3, [r7, #31]
 8001c4e:	2b07      	cmp	r3, #7
 8001c50:	d9ec      	bls.n	8001c2c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0208 	orr.w	r2, r2, #8
 8001c64:	b292      	uxth	r2, r2
 8001c66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c7c:	b292      	uxth	r2, r2
 8001c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0204 	orr.w	r2, r2, #4
 8001c94:	b292      	uxth	r2, r2
 8001c96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f007 fb66 	bl	800936c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ca0:	e026      	b.n	8001cf0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00f      	beq.n	8001ccc <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cbe:	b292      	uxth	r2, r2
 8001cc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f007 fb24 	bl	8009312 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001cca:	e011      	b.n	8001cf0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00c      	beq.n	8001cf0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ce8:	b292      	uxth	r2, r2
 8001cea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001cee:	bf00      	nop
  }
}
 8001cf0:	3720      	adds	r7, #32
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_PCD_SetAddress+0x1a>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e012      	b.n	8001d36 <HAL_PCD_SetAddress+0x40>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f005 fbc2 	bl	80074b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	4608      	mov	r0, r1
 8001d48:	4611      	mov	r1, r2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	70fb      	strb	r3, [r7, #3]
 8001d50:	460b      	mov	r3, r1
 8001d52:	803b      	strh	r3, [r7, #0]
 8001d54:	4613      	mov	r3, r2
 8001d56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da0e      	bge.n	8001d82 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 0207 	and.w	r2, r3, #7
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	3310      	adds	r3, #16
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	705a      	strb	r2, [r3, #1]
 8001d80:	e00e      	b.n	8001da0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	f003 0207 	and.w	r2, r3, #7
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dac:	883a      	ldrh	r2, [r7, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	78ba      	ldrb	r2, [r7, #2]
 8001db6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001db8:	78bb      	ldrb	r3, [r7, #2]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d102      	bne.n	8001dc4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_PCD_EP_Open+0x94>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e00e      	b.n	8001df0 <HAL_PCD_EP_Open+0xb2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68f9      	ldr	r1, [r7, #12]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 f90b 	bl	8004ffc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001dee:	7afb      	ldrb	r3, [r7, #11]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	da0e      	bge.n	8001e2a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	f003 0207 	and.w	r2, r3, #7
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	3310      	adds	r3, #16
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	705a      	strb	r2, [r3, #1]
 8001e28:	e00e      	b.n	8001e48 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 0207 	and.w	r2, r3, #7
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_PCD_EP_Close+0x6a>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e00e      	b.n	8001e80 <HAL_PCD_EP_Close+0x88>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68f9      	ldr	r1, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 fc83 	bl	800577c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	460b      	mov	r3, r1
 8001e96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e98:	7afb      	ldrb	r3, [r7, #11]
 8001e9a:	f003 0207 	and.w	r2, r3, #7
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec8:	7afb      	ldrb	r3, [r7, #11]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6979      	ldr	r1, [r7, #20]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 fe3a 	bl	8005b54 <USB_EPStartXfer>

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	f003 0207 	and.w	r2, r3, #7
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	440b      	add	r3, r1
 8001f08:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001f0c:	681b      	ldr	r3, [r3, #0]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	460b      	mov	r3, r1
 8001f26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	f003 0207 	and.w	r2, r3, #7
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	3310      	adds	r3, #16
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2201      	movs	r2, #1
 8001f62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f64:	7afb      	ldrb	r3, [r7, #11]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6979      	ldr	r1, [r7, #20]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 fdec 	bl	8005b54 <USB_EPStartXfer>

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	7912      	ldrb	r2, [r2, #4]
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e04c      	b.n	800203e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da0e      	bge.n	8001fca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	f003 0207 	and.w	r2, r3, #7
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	3310      	adds	r3, #16
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	705a      	strb	r2, [r3, #1]
 8001fc8:	e00c      	b.n	8001fe4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_PCD_EP_SetStall+0x7e>
 8002000:	2302      	movs	r3, #2
 8002002:	e01c      	b.n	800203e <HAL_PCD_EP_SetStall+0xb8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68f9      	ldr	r1, [r7, #12]
 8002012:	4618      	mov	r0, r3
 8002014:	f005 f94f 	bl	80072b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	2b00      	cmp	r3, #0
 8002020:	d108      	bne.n	8002034 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f005 fa74 	bl	800751c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	7912      	ldrb	r2, [r2, #4]
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e040      	b.n	80020e6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002068:	2b00      	cmp	r3, #0
 800206a:	da0e      	bge.n	800208a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 0207 	and.w	r2, r3, #7
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	3310      	adds	r3, #16
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2201      	movs	r2, #1
 8002086:	705a      	strb	r2, [r3, #1]
 8002088:	e00e      	b.n	80020a8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	f003 0207 	and.w	r2, r3, #7
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_PCD_EP_ClrStall+0x82>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e00e      	b.n	80020e6 <HAL_PCD_EP_ClrStall+0xa0>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68f9      	ldr	r1, [r7, #12]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f005 f93d 	bl	8007356 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b096      	sub	sp, #88	@ 0x58
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020f6:	e3bb      	b.n	8002870 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002100:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002104:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002112:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 8175 	bne.w	8002406 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800211c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d14e      	bne.n	80021c6 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002138:	81fb      	strh	r3, [r7, #14]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	89fb      	ldrh	r3, [r7, #14]
 8002140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002148:	b29b      	uxth	r3, r3
 800214a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3310      	adds	r3, #16
 8002150:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	3302      	adds	r3, #2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	4413      	add	r3, r2
 8002170:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800217a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800217e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	441a      	add	r2, r3
 8002188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800218c:	2100      	movs	r1, #0
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f007 f8a5 	bl	80092de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7b5b      	ldrb	r3, [r3, #13]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8368 	beq.w	8002870 <PCD_EP_ISR_Handler+0x782>
 80021a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 8363 	bne.w	8002870 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7b5b      	ldrb	r3, [r3, #13]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	735a      	strb	r2, [r3, #13]
 80021c4:	e354      	b.n	8002870 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021cc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d034      	beq.n	800224e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	3306      	adds	r3, #6
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800220c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800220e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800221a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800221e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002220:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002222:	b29b      	uxth	r3, r3
 8002224:	f005 f9cb 	bl	80075be <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	b29a      	uxth	r2, r3
 8002230:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002234:	4013      	ands	r3, r2
 8002236:	823b      	strh	r3, [r7, #16]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	8a3a      	ldrh	r2, [r7, #16]
 800223e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002242:	b292      	uxth	r2, r2
 8002244:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f007 f81c 	bl	8009284 <HAL_PCD_SetupStageCallback>
 800224c:	e310      	b.n	8002870 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800224e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002252:	2b00      	cmp	r3, #0
 8002254:	f280 830c 	bge.w	8002870 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29a      	uxth	r2, r3
 8002260:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002264:	4013      	ands	r3, r2
 8002266:	83fb      	strh	r3, [r7, #30]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	8bfa      	ldrh	r2, [r7, #30]
 800226e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002272:	b292      	uxth	r2, r2
 8002274:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	3306      	adds	r3, #6
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	4413      	add	r3, r2
 8002294:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800229e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d019      	beq.n	80022de <PCD_EP_ISR_Handler+0x1f0>
 80022aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d015      	beq.n	80022de <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b8:	6959      	ldr	r1, [r3, #20]
 80022ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022bc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022c0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	f005 f97b 	bl	80075be <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	441a      	add	r2, r3
 80022d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022d6:	2100      	movs	r1, #0
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f006 ffe5 	bl	80092a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80022e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80022ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 82bd 	bne.w	8002870 <PCD_EP_ISR_Handler+0x782>
 80022f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80022fa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80022fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002302:	f000 82b5 	beq.w	8002870 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002314:	b29b      	uxth	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	4413      	add	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002330:	b29a      	uxth	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b3e      	cmp	r3, #62	@ 0x3e
 800233c:	d91d      	bls.n	800237a <PCD_EP_ISR_Handler+0x28c>
 800233e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	647b      	str	r3, [r7, #68]	@ 0x44
 8002346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2b00      	cmp	r3, #0
 8002350:	d102      	bne.n	8002358 <PCD_EP_ISR_Handler+0x26a>
 8002352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002354:	3b01      	subs	r3, #1
 8002356:	647b      	str	r3, [r7, #68]	@ 0x44
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	b29a      	uxth	r2, r3
 800235e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002360:	b29b      	uxth	r3, r3
 8002362:	029b      	lsls	r3, r3, #10
 8002364:	b29b      	uxth	r3, r3
 8002366:	4313      	orrs	r3, r2
 8002368:	b29b      	uxth	r3, r3
 800236a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800236e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002372:	b29a      	uxth	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	801a      	strh	r2, [r3, #0]
 8002378:	e026      	b.n	80023c8 <PCD_EP_ISR_Handler+0x2da>
 800237a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10a      	bne.n	8002398 <PCD_EP_ISR_Handler+0x2aa>
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800238c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002390:	b29a      	uxth	r2, r3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	801a      	strh	r2, [r3, #0]
 8002396:	e017      	b.n	80023c8 <PCD_EP_ISR_Handler+0x2da>
 8002398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	085b      	lsrs	r3, r3, #1
 800239e:	647b      	str	r3, [r7, #68]	@ 0x44
 80023a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <PCD_EP_ISR_Handler+0x2c4>
 80023ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ae:	3301      	adds	r3, #1
 80023b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	029b      	lsls	r3, r3, #10
 80023be:	b29b      	uxth	r3, r3
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023d8:	827b      	strh	r3, [r7, #18]
 80023da:	8a7b      	ldrh	r3, [r7, #18]
 80023dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80023e0:	827b      	strh	r3, [r7, #18]
 80023e2:	8a7b      	ldrh	r3, [r7, #18]
 80023e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80023e8:	827b      	strh	r3, [r7, #18]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	8a7b      	ldrh	r3, [r7, #18]
 80023f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002400:	b29b      	uxth	r3, r3
 8002402:	8013      	strh	r3, [r2, #0]
 8002404:	e234      	b.n	8002870 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800241a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800241e:	2b00      	cmp	r3, #0
 8002420:	f280 80fc 	bge.w	800261c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29a      	uxth	r2, r3
 8002436:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800243a:	4013      	ands	r3, r2
 800243c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002452:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002456:	b292      	uxth	r2, r2
 8002458:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800245a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002472:	7b1b      	ldrb	r3, [r3, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d125      	bne.n	80024c4 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002480:	b29b      	uxth	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	3306      	adds	r3, #6
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	4413      	add	r3, r2
 8002496:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80024a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 8092 	beq.w	80025d2 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b4:	6959      	ldr	r1, [r3, #20]
 80024b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b8:	88da      	ldrh	r2, [r3, #6]
 80024ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024be:	f005 f87e 	bl	80075be <USB_ReadPMA>
 80024c2:	e086      	b.n	80025d2 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80024c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024c6:	78db      	ldrb	r3, [r3, #3]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d10a      	bne.n	80024e2 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024d0:	461a      	mov	r2, r3
 80024d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f9d9 	bl	800288c <HAL_PCD_EP_DB_Receive>
 80024da:	4603      	mov	r3, r0
 80024dc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80024e0:	e077      	b.n	80025d2 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024fc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	441a      	add	r2, r3
 800250e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800251a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800251e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002522:	b29b      	uxth	r3, r3
 8002524:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d024      	beq.n	800258a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002548:	b29b      	uxth	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	3302      	adds	r3, #2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	4413      	add	r3, r2
 800255e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002568:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800256c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002570:	2b00      	cmp	r3, #0
 8002572:	d02e      	beq.n	80025d2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257a:	6959      	ldr	r1, [r3, #20]
 800257c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257e:	891a      	ldrh	r2, [r3, #8]
 8002580:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002584:	f005 f81b 	bl	80075be <USB_ReadPMA>
 8002588:	e023      	b.n	80025d2 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	3306      	adds	r3, #6
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80025b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c4:	6959      	ldr	r1, [r3, #20]
 80025c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c8:	895a      	ldrh	r2, [r3, #10]
 80025ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80025ce:	f004 fff6 	bl	80075be <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80025d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80025da:	441a      	add	r2, r3
 80025dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80025e8:	441a      	add	r2, r3
 80025ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ec:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <PCD_EP_ISR_Handler+0x514>
 80025f6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80025fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d206      	bcs.n	8002610 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	4619      	mov	r1, r3
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f006 fe4d 	bl	80092a8 <HAL_PCD_DataOutStageCallback>
 800260e:	e005      	b.n	800261c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002616:	4618      	mov	r0, r3
 8002618:	f003 fa9c 	bl	8005b54 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800261c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8123 	beq.w	8002870 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800262a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	3310      	adds	r3, #16
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	4413      	add	r3, r2
 800263c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002658:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	441a      	add	r2, r3
 800266a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800266e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002676:	b29b      	uxth	r3, r3
 8002678:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800267a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800267c:	78db      	ldrb	r3, [r3, #3]
 800267e:	2b01      	cmp	r3, #1
 8002680:	f040 80a2 	bne.w	80027c8 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800268a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800268c:	7b1b      	ldrb	r3, [r3, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8093 	beq.w	80027ba <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002694:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800269c:	2b00      	cmp	r3, #0
 800269e:	d046      	beq.n	800272e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a2:	785b      	ldrb	r3, [r3, #1]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d126      	bne.n	80026f6 <PCD_EP_ISR_Handler+0x608>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	4413      	add	r3, r2
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	011a      	lsls	r2, r3, #4
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	4413      	add	r3, r2
 80026ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026da:	b29a      	uxth	r2, r3
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	801a      	strh	r2, [r3, #0]
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	801a      	strh	r2, [r3, #0]
 80026f4:	e061      	b.n	80027ba <PCD_EP_ISR_Handler+0x6cc>
 80026f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f8:	785b      	ldrb	r3, [r3, #1]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d15d      	bne.n	80027ba <PCD_EP_ISR_Handler+0x6cc>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800270c:	b29b      	uxth	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002712:	4413      	add	r3, r2
 8002714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	011a      	lsls	r2, r3, #4
 800271c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271e:	4413      	add	r3, r2
 8002720:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002728:	2200      	movs	r2, #0
 800272a:	801a      	strh	r2, [r3, #0]
 800272c:	e045      	b.n	80027ba <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002736:	785b      	ldrb	r3, [r3, #1]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d126      	bne.n	800278a <PCD_EP_ISR_Handler+0x69c>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	637b      	str	r3, [r7, #52]	@ 0x34
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800274a:	b29b      	uxth	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002750:	4413      	add	r3, r2
 8002752:	637b      	str	r3, [r7, #52]	@ 0x34
 8002754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	011a      	lsls	r2, r3, #4
 800275a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800275c:	4413      	add	r3, r2
 800275e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002762:	633b      	str	r3, [r7, #48]	@ 0x30
 8002764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800276e:	b29a      	uxth	r2, r3
 8002770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002772:	801a      	strh	r2, [r3, #0]
 8002774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800277e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002782:	b29a      	uxth	r2, r3
 8002784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002786:	801a      	strh	r2, [r3, #0]
 8002788:	e017      	b.n	80027ba <PCD_EP_ISR_Handler+0x6cc>
 800278a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d113      	bne.n	80027ba <PCD_EP_ISR_Handler+0x6cc>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800279a:	b29b      	uxth	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027a0:	4413      	add	r3, r2
 80027a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	011a      	lsls	r2, r3, #4
 80027aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ac:	4413      	add	r3, r2
 80027ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b6:	2200      	movs	r2, #0
 80027b8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	4619      	mov	r1, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f006 fd8c 	bl	80092de <HAL_PCD_DataInStageCallback>
 80027c6:	e053      	b.n	8002870 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80027c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d146      	bne.n	8002862 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027dc:	b29b      	uxth	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	3302      	adds	r3, #2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027fc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002802:	699a      	ldr	r2, [r3, #24]
 8002804:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002808:	429a      	cmp	r2, r3
 800280a:	d907      	bls.n	800281c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800280c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002814:	1ad2      	subs	r2, r2, r3
 8002816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002818:	619a      	str	r2, [r3, #24]
 800281a:	e002      	b.n	8002822 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800281c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800281e:	2200      	movs	r2, #0
 8002820:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800282a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f006 fd54 	bl	80092de <HAL_PCD_DataInStageCallback>
 8002836:	e01b      	b.n	8002870 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002840:	441a      	add	r2, r3
 8002842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002844:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002848:	69da      	ldr	r2, [r3, #28]
 800284a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800284e:	441a      	add	r2, r3
 8002850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002852:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800285a:	4618      	mov	r0, r3
 800285c:	f003 f97a 	bl	8005b54 <USB_EPStartXfer>
 8002860:	e006      	b.n	8002870 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002862:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002866:	461a      	mov	r2, r3
 8002868:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f91b 	bl	8002aa6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002878:	b29b      	uxth	r3, r3
 800287a:	b21b      	sxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	f6ff ac3b 	blt.w	80020f8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3758      	adds	r7, #88	@ 0x58
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d07e      	beq.n	80029a2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	3302      	adds	r3, #2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	8b7b      	ldrh	r3, [r7, #26]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d306      	bcc.n	80028e6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	699a      	ldr	r2, [r3, #24]
 80028dc:	8b7b      	ldrh	r3, [r7, #26]
 80028de:	1ad2      	subs	r2, r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	619a      	str	r2, [r3, #24]
 80028e4:	e002      	b.n	80028ec <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d123      	bne.n	800293c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800290a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290e:	833b      	strh	r3, [r7, #24]
 8002910:	8b3b      	ldrh	r3, [r7, #24]
 8002912:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002916:	833b      	strh	r3, [r7, #24]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	441a      	add	r2, r3
 8002926:	8b3b      	ldrh	r3, [r7, #24]
 8002928:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800292c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002938:	b29b      	uxth	r3, r3
 800293a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01f      	beq.n	8002986 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800295c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002960:	82fb      	strh	r3, [r7, #22]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	441a      	add	r2, r3
 8002970:	8afb      	ldrh	r3, [r7, #22]
 8002972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800297a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800297e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002982:	b29b      	uxth	r3, r3
 8002984:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002986:	8b7b      	ldrh	r3, [r7, #26]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8087 	beq.w	8002a9c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	6959      	ldr	r1, [r3, #20]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	891a      	ldrh	r2, [r3, #8]
 800299a:	8b7b      	ldrh	r3, [r7, #26]
 800299c:	f004 fe0f 	bl	80075be <USB_ReadPMA>
 80029a0:	e07c      	b.n	8002a9c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	3306      	adds	r3, #6
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	8b7b      	ldrh	r3, [r7, #26]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d306      	bcc.n	80029e4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	8b7b      	ldrh	r3, [r7, #26]
 80029dc:	1ad2      	subs	r2, r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	619a      	str	r2, [r3, #24]
 80029e2:	e002      	b.n	80029ea <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d123      	bne.n	8002a3a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a0c:	83fb      	strh	r3, [r7, #30]
 8002a0e:	8bfb      	ldrh	r3, [r7, #30]
 8002a10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002a14:	83fb      	strh	r3, [r7, #30]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	441a      	add	r2, r3
 8002a24:	8bfb      	ldrh	r3, [r7, #30]
 8002a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11f      	bne.n	8002a84 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a5e:	83bb      	strh	r3, [r7, #28]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	441a      	add	r2, r3
 8002a6e:	8bbb      	ldrh	r3, [r7, #28]
 8002a70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a84:	8b7b      	ldrh	r3, [r7, #26]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6959      	ldr	r1, [r3, #20]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	895a      	ldrh	r2, [r3, #10]
 8002a96:	8b7b      	ldrh	r3, [r7, #26]
 8002a98:	f004 fd91 	bl	80075be <USB_ReadPMA>
    }
  }

  return count;
 8002a9c:	8b7b      	ldrh	r3, [r7, #26]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b0a4      	sub	sp, #144	@ 0x90
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 81dd 	beq.w	8002e7a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	699a      	ldr	r2, [r3, #24]
 8002af0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d907      	bls.n	8002b08 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b00:	1ad2      	subs	r2, r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	619a      	str	r2, [r3, #24]
 8002b06:	e002      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 80b9 	bne.w	8002c8a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	785b      	ldrb	r3, [r3, #1]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d126      	bne.n	8002b6e <HAL_PCD_EP_DB_Transmit+0xc8>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b34:	4413      	add	r3, r2
 8002b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	011a      	lsls	r2, r3, #4
 8002b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b40:	4413      	add	r3, r2
 8002b42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b56:	801a      	strh	r2, [r3, #0]
 8002b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6a:	801a      	strh	r2, [r3, #0]
 8002b6c:	e01a      	b.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	785b      	ldrb	r3, [r3, #1]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d116      	bne.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8a:	4413      	add	r3, r2
 8002b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	011a      	lsls	r2, r3, #4
 8002b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b96:	4413      	add	r3, r2
 8002b98:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	785b      	ldrb	r3, [r3, #1]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d126      	bne.n	8002c00 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	011a      	lsls	r2, r3, #4
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	801a      	strh	r2, [r3, #0]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	801a      	strh	r2, [r3, #0]
 8002bfe:	e017      	b.n	8002c30 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	785b      	ldrb	r3, [r3, #1]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d113      	bne.n	8002c30 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	4413      	add	r3, r2
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	011a      	lsls	r2, r3, #4
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	4413      	add	r3, r2
 8002c24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c28:	623b      	str	r3, [r7, #32]
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4619      	mov	r1, r3
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f006 fb51 	bl	80092de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 82fc 	beq.w	8003240 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c62:	82fb      	strh	r3, [r7, #22]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	441a      	add	r2, r3
 8002c72:	8afb      	ldrh	r3, [r7, #22]
 8002c74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	8013      	strh	r3, [r2, #0]
 8002c88:	e2da      	b.n	8003240 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d021      	beq.n	8002cd8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cae:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	441a      	add	r2, r3
 8002cc0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002cc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ccc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	f040 82ae 	bne.w	8003240 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002cec:	441a      	add	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002cfa:	441a      	add	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d30b      	bcc.n	8002d24 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	6a1a      	ldr	r2, [r3, #32]
 8002d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d1c:	1ad2      	subs	r2, r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	621a      	str	r2, [r3, #32]
 8002d22:	e017      	b.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d108      	bne.n	8002d3e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002d2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002d3c:	e00a      	b.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2200      	movs	r2, #0
 8002d52:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d165      	bne.n	8002e28 <HAL_PCD_EP_DB_Transmit+0x382>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d70:	4413      	add	r3, r2
 8002d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	011a      	lsls	r2, r3, #4
 8002d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d92:	801a      	strh	r2, [r3, #0]
 8002d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d98:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d9a:	d91d      	bls.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x332>
 8002d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <HAL_PCD_EP_DB_Transmit+0x310>
 8002db0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002db2:	3b01      	subs	r3, #1
 8002db4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	029b      	lsls	r3, r3, #10
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd4:	801a      	strh	r2, [r3, #0]
 8002dd6:	e044      	b.n	8002e62 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002dd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <HAL_PCD_EP_DB_Transmit+0x350>
 8002de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df2:	801a      	strh	r2, [r3, #0]
 8002df4:	e035      	b.n	8002e62 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	029b      	lsls	r3, r3, #10
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e24:	801a      	strh	r2, [r3, #0]
 8002e26:	e01c      	b.n	8002e62 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	785b      	ldrb	r3, [r3, #1]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d118      	bne.n	8002e62 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e44:	4413      	add	r3, r2
 8002e46:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	011a      	lsls	r2, r3, #4
 8002e4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e50:	4413      	add	r3, r2
 8002e52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e56:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e60:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	6959      	ldr	r1, [r3, #20]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	891a      	ldrh	r2, [r3, #8]
 8002e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f004 fb5d 	bl	8007532 <USB_WritePMA>
 8002e78:	e1e2      	b.n	8003240 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3306      	adds	r3, #6
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ea2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d307      	bcc.n	8002ec2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002eba:	1ad2      	subs	r2, r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	619a      	str	r2, [r3, #24]
 8002ec0:	e002      	b.n	8002ec8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f040 80c0 	bne.w	8003052 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	785b      	ldrb	r3, [r3, #1]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d126      	bne.n	8002f28 <HAL_PCD_EP_DB_Transmit+0x482>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eee:	4413      	add	r3, r2
 8002ef0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	011a      	lsls	r2, r3, #4
 8002ef8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002efa:	4413      	add	r3, r2
 8002efc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f10:	801a      	strh	r2, [r3, #0]
 8002f12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f24:	801a      	strh	r2, [r3, #0]
 8002f26:	e01a      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	785b      	ldrb	r3, [r3, #1]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d116      	bne.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f44:	4413      	add	r3, r2
 8002f46:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	011a      	lsls	r2, r3, #4
 8002f4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f50:	4413      	add	r3, r2
 8002f52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f56:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	785b      	ldrb	r3, [r3, #1]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d12b      	bne.n	8002fc4 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f80:	4413      	add	r3, r2
 8002f82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	011a      	lsls	r2, r3, #4
 8002f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fa8:	801a      	strh	r2, [r3, #0]
 8002faa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fc0:	801a      	strh	r2, [r3, #0]
 8002fc2:	e017      	b.n	8002ff4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	785b      	ldrb	r3, [r3, #1]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d113      	bne.n	8002ff4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fda:	4413      	add	r3, r2
 8002fdc:	677b      	str	r3, [r7, #116]	@ 0x74
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	011a      	lsls	r2, r3, #4
 8002fe4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002fec:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f006 f96f 	bl	80092de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 811a 	bne.w	8003240 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003026:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	441a      	add	r2, r3
 8003038:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800303c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003040:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003044:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800304c:	b29b      	uxth	r3, r3
 800304e:	8013      	strh	r3, [r2, #0]
 8003050:	e0f6      	b.n	8003240 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d121      	bne.n	80030a0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003076:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	441a      	add	r2, r3
 8003088:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800308c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003090:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003094:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800309c:	b29b      	uxth	r3, r3
 800309e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	f040 80ca 	bne.w	8003240 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80030b4:	441a      	add	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	69da      	ldr	r2, [r3, #28]
 80030be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80030c2:	441a      	add	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6a1a      	ldr	r2, [r3, #32]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d30b      	bcc.n	80030ec <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	6a1a      	ldr	r2, [r3, #32]
 80030e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030e4:	1ad2      	subs	r2, r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	621a      	str	r2, [r3, #32]
 80030ea:	e017      	b.n	800311c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d108      	bne.n	8003106 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80030f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80030f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003104:	e00a      	b.n	800311c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2200      	movs	r2, #0
 8003112:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	657b      	str	r3, [r7, #84]	@ 0x54
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d165      	bne.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x750>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003138:	b29b      	uxth	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800313e:	4413      	add	r3, r2
 8003140:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	011a      	lsls	r2, r3, #4
 8003148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800314a:	4413      	add	r3, r2
 800314c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003150:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800315c:	b29a      	uxth	r2, r3
 800315e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003160:	801a      	strh	r2, [r3, #0]
 8003162:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003166:	2b3e      	cmp	r3, #62	@ 0x3e
 8003168:	d91d      	bls.n	80031a6 <HAL_PCD_EP_DB_Transmit+0x700>
 800316a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003172:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <HAL_PCD_EP_DB_Transmit+0x6de>
 800317e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003180:	3b01      	subs	r3, #1
 8003182:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003184:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	b29a      	uxth	r2, r3
 800318a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800318c:	b29b      	uxth	r3, r3
 800318e:	029b      	lsls	r3, r3, #10
 8003190:	b29b      	uxth	r3, r3
 8003192:	4313      	orrs	r3, r2
 8003194:	b29b      	uxth	r3, r3
 8003196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800319a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800319e:	b29a      	uxth	r2, r3
 80031a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031a2:	801a      	strh	r2, [r3, #0]
 80031a4:	e041      	b.n	800322a <HAL_PCD_EP_DB_Transmit+0x784>
 80031a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <HAL_PCD_EP_DB_Transmit+0x71e>
 80031ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031bc:	b29a      	uxth	r2, r3
 80031be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031c0:	801a      	strh	r2, [r3, #0]
 80031c2:	e032      	b.n	800322a <HAL_PCD_EP_DB_Transmit+0x784>
 80031c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_PCD_EP_DB_Transmit+0x738>
 80031d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031da:	3301      	adds	r3, #1
 80031dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	029b      	lsls	r3, r3, #10
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	4313      	orrs	r3, r2
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031f2:	801a      	strh	r2, [r3, #0]
 80031f4:	e019      	b.n	800322a <HAL_PCD_EP_DB_Transmit+0x784>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	785b      	ldrb	r3, [r3, #1]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d115      	bne.n	800322a <HAL_PCD_EP_DB_Transmit+0x784>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003206:	b29b      	uxth	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320c:	4413      	add	r3, r2
 800320e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	011a      	lsls	r2, r3, #4
 8003216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003218:	4413      	add	r3, r2
 800321a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800321e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003220:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003224:	b29a      	uxth	r2, r3
 8003226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003228:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	6959      	ldr	r1, [r3, #20]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	895a      	ldrh	r2, [r3, #10]
 8003236:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800323a:	b29b      	uxth	r3, r3
 800323c:	f004 f979 	bl	8007532 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800325a:	82bb      	strh	r3, [r7, #20]
 800325c:	8abb      	ldrh	r3, [r7, #20]
 800325e:	f083 0310 	eor.w	r3, r3, #16
 8003262:	82bb      	strh	r3, [r7, #20]
 8003264:	8abb      	ldrh	r3, [r7, #20]
 8003266:	f083 0320 	eor.w	r3, r3, #32
 800326a:	82bb      	strh	r3, [r7, #20]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	441a      	add	r2, r3
 800327a:	8abb      	ldrh	r3, [r7, #20]
 800327c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003280:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003284:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800328c:	b29b      	uxth	r3, r3
 800328e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3790      	adds	r7, #144	@ 0x90
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800329a:	b480      	push	{r7}
 800329c:	b087      	sub	sp, #28
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	817b      	strh	r3, [r7, #10]
 80032a8:	4613      	mov	r3, r2
 80032aa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80032ac:	897b      	ldrh	r3, [r7, #10]
 80032ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00b      	beq.n	80032d0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b8:	897b      	ldrh	r3, [r7, #10]
 80032ba:	f003 0207 	and.w	r2, r3, #7
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	3310      	adds	r3, #16
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e009      	b.n	80032e4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032d0:	897a      	ldrh	r2, [r7, #10]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4413      	add	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032e4:	893b      	ldrh	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d107      	bne.n	80032fa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2200      	movs	r2, #0
 80032ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	80da      	strh	r2, [r3, #6]
 80032f8:	e00b      	b.n	8003312 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2201      	movs	r2, #1
 80032fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	b29a      	uxth	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	0c1b      	lsrs	r3, r3, #16
 800330c:	b29a      	uxth	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
	...

08003320 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003324:	4b03      	ldr	r3, [pc, #12]	@ (8003334 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]
}
 800332a:	bf00      	nop
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	420e0020 	.word	0x420e0020

08003338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e272      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8087 	beq.w	8003466 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003358:	4b92      	ldr	r3, [pc, #584]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b04      	cmp	r3, #4
 8003362:	d00c      	beq.n	800337e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003364:	4b8f      	ldr	r3, [pc, #572]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	2b08      	cmp	r3, #8
 800336e:	d112      	bne.n	8003396 <HAL_RCC_OscConfig+0x5e>
 8003370:	4b8c      	ldr	r3, [pc, #560]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337c:	d10b      	bne.n	8003396 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337e:	4b89      	ldr	r3, [pc, #548]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d06c      	beq.n	8003464 <HAL_RCC_OscConfig+0x12c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d168      	bne.n	8003464 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e24c      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x76>
 80033a0:	4b80      	ldr	r3, [pc, #512]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a7f      	ldr	r2, [pc, #508]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	e02e      	b.n	800340c <HAL_RCC_OscConfig+0xd4>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x98>
 80033b6:	4b7b      	ldr	r3, [pc, #492]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7a      	ldr	r2, [pc, #488]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b78      	ldr	r3, [pc, #480]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a77      	ldr	r2, [pc, #476]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e01d      	b.n	800340c <HAL_RCC_OscConfig+0xd4>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0xbc>
 80033da:	4b72      	ldr	r3, [pc, #456]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a71      	ldr	r2, [pc, #452]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	4b6f      	ldr	r3, [pc, #444]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a6e      	ldr	r2, [pc, #440]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e00b      	b.n	800340c <HAL_RCC_OscConfig+0xd4>
 80033f4:	4b6b      	ldr	r3, [pc, #428]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a6a      	ldr	r2, [pc, #424]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	4b68      	ldr	r3, [pc, #416]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a67      	ldr	r2, [pc, #412]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800340a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d013      	beq.n	800343c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fd fb46 	bl	8000aa4 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341c:	f7fd fb42 	bl	8000aa4 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	@ 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e200      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	4b5d      	ldr	r3, [pc, #372]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0xe4>
 800343a:	e014      	b.n	8003466 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fd fb32 	bl	8000aa4 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003444:	f7fd fb2e 	bl	8000aa4 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	@ 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e1ec      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	4b53      	ldr	r3, [pc, #332]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x10c>
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d063      	beq.n	800353a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003472:	4b4c      	ldr	r3, [pc, #304]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800347e:	4b49      	ldr	r3, [pc, #292]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b08      	cmp	r3, #8
 8003488:	d11c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x18c>
 800348a:	4b46      	ldr	r3, [pc, #280]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d116      	bne.n	80034c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003496:	4b43      	ldr	r3, [pc, #268]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_RCC_OscConfig+0x176>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d001      	beq.n	80034ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e1c0      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ae:	4b3d      	ldr	r3, [pc, #244]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4939      	ldr	r1, [pc, #228]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c2:	e03a      	b.n	800353a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d020      	beq.n	800350e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034cc:	4b36      	ldr	r3, [pc, #216]	@ (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fd fae7 	bl	8000aa4 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034da:	f7fd fae3 	bl	8000aa4 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e1a1      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	4b2d      	ldr	r3, [pc, #180]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f8:	4b2a      	ldr	r3, [pc, #168]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4927      	ldr	r1, [pc, #156]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]
 800350c:	e015      	b.n	800353a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350e:	4b26      	ldr	r3, [pc, #152]	@ (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fd fac6 	bl	8000aa4 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351c:	f7fd fac2 	bl	8000aa4 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e180      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352e:	4b1d      	ldr	r3, [pc, #116]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d03a      	beq.n	80035bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d019      	beq.n	8003582 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354e:	4b17      	ldr	r3, [pc, #92]	@ (80035ac <HAL_RCC_OscConfig+0x274>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003554:	f7fd faa6 	bl	8000aa4 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355c:	f7fd faa2 	bl	8000aa4 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e160      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356e:	4b0d      	ldr	r3, [pc, #52]	@ (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800357a:	2001      	movs	r0, #1
 800357c:	f000 face 	bl	8003b1c <RCC_Delay>
 8003580:	e01c      	b.n	80035bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003582:	4b0a      	ldr	r3, [pc, #40]	@ (80035ac <HAL_RCC_OscConfig+0x274>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003588:	f7fd fa8c 	bl	8000aa4 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358e:	e00f      	b.n	80035b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003590:	f7fd fa88 	bl	8000aa4 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d908      	bls.n	80035b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e146      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
 80035a8:	42420000 	.word	0x42420000
 80035ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b0:	4b92      	ldr	r3, [pc, #584]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e9      	bne.n	8003590 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80a6 	beq.w	8003716 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ce:	4b8b      	ldr	r3, [pc, #556]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10d      	bne.n	80035f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	4b88      	ldr	r3, [pc, #544]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	4a87      	ldr	r2, [pc, #540]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e4:	61d3      	str	r3, [r2, #28]
 80035e6:	4b85      	ldr	r3, [pc, #532]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f2:	2301      	movs	r3, #1
 80035f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f6:	4b82      	ldr	r3, [pc, #520]	@ (8003800 <HAL_RCC_OscConfig+0x4c8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d118      	bne.n	8003634 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003602:	4b7f      	ldr	r3, [pc, #508]	@ (8003800 <HAL_RCC_OscConfig+0x4c8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a7e      	ldr	r2, [pc, #504]	@ (8003800 <HAL_RCC_OscConfig+0x4c8>)
 8003608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800360c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360e:	f7fd fa49 	bl	8000aa4 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003616:	f7fd fa45 	bl	8000aa4 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b64      	cmp	r3, #100	@ 0x64
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e103      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	4b75      	ldr	r3, [pc, #468]	@ (8003800 <HAL_RCC_OscConfig+0x4c8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d106      	bne.n	800364a <HAL_RCC_OscConfig+0x312>
 800363c:	4b6f      	ldr	r3, [pc, #444]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4a6e      	ldr	r2, [pc, #440]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6213      	str	r3, [r2, #32]
 8003648:	e02d      	b.n	80036a6 <HAL_RCC_OscConfig+0x36e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10c      	bne.n	800366c <HAL_RCC_OscConfig+0x334>
 8003652:	4b6a      	ldr	r3, [pc, #424]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4a69      	ldr	r2, [pc, #420]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	6213      	str	r3, [r2, #32]
 800365e:	4b67      	ldr	r3, [pc, #412]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4a66      	ldr	r2, [pc, #408]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003664:	f023 0304 	bic.w	r3, r3, #4
 8003668:	6213      	str	r3, [r2, #32]
 800366a:	e01c      	b.n	80036a6 <HAL_RCC_OscConfig+0x36e>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b05      	cmp	r3, #5
 8003672:	d10c      	bne.n	800368e <HAL_RCC_OscConfig+0x356>
 8003674:	4b61      	ldr	r3, [pc, #388]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	4a60      	ldr	r2, [pc, #384]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 800367a:	f043 0304 	orr.w	r3, r3, #4
 800367e:	6213      	str	r3, [r2, #32]
 8003680:	4b5e      	ldr	r3, [pc, #376]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	4a5d      	ldr	r2, [pc, #372]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6213      	str	r3, [r2, #32]
 800368c:	e00b      	b.n	80036a6 <HAL_RCC_OscConfig+0x36e>
 800368e:	4b5b      	ldr	r3, [pc, #364]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	4a5a      	ldr	r2, [pc, #360]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	6213      	str	r3, [r2, #32]
 800369a:	4b58      	ldr	r3, [pc, #352]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	4a57      	ldr	r2, [pc, #348]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	f023 0304 	bic.w	r3, r3, #4
 80036a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d015      	beq.n	80036da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ae:	f7fd f9f9 	bl	8000aa4 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b4:	e00a      	b.n	80036cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b6:	f7fd f9f5 	bl	8000aa4 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e0b1      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036cc:	4b4b      	ldr	r3, [pc, #300]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ee      	beq.n	80036b6 <HAL_RCC_OscConfig+0x37e>
 80036d8:	e014      	b.n	8003704 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036da:	f7fd f9e3 	bl	8000aa4 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e0:	e00a      	b.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fd f9df 	bl	8000aa4 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e09b      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f8:	4b40      	ldr	r3, [pc, #256]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1ee      	bne.n	80036e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003704:	7dfb      	ldrb	r3, [r7, #23]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d105      	bne.n	8003716 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370a:	4b3c      	ldr	r3, [pc, #240]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	4a3b      	ldr	r2, [pc, #236]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003714:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8087 	beq.w	800382e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003720:	4b36      	ldr	r3, [pc, #216]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b08      	cmp	r3, #8
 800372a:	d061      	beq.n	80037f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d146      	bne.n	80037c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003734:	4b33      	ldr	r3, [pc, #204]	@ (8003804 <HAL_RCC_OscConfig+0x4cc>)
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373a:	f7fd f9b3 	bl	8000aa4 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003742:	f7fd f9af 	bl	8000aa4 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e06d      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003754:	4b29      	ldr	r3, [pc, #164]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f0      	bne.n	8003742 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003768:	d108      	bne.n	800377c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800376a:	4b24      	ldr	r3, [pc, #144]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	4921      	ldr	r1, [pc, #132]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800377c:	4b1f      	ldr	r3, [pc, #124]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a19      	ldr	r1, [r3, #32]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	430b      	orrs	r3, r1
 800378e:	491b      	ldr	r1, [pc, #108]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003794:	4b1b      	ldr	r3, [pc, #108]	@ (8003804 <HAL_RCC_OscConfig+0x4cc>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fd f983 	bl	8000aa4 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a2:	f7fd f97f 	bl	8000aa4 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e03d      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b4:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x46a>
 80037c0:	e035      	b.n	800382e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4b10      	ldr	r3, [pc, #64]	@ (8003804 <HAL_RCC_OscConfig+0x4cc>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fd f96c 	bl	8000aa4 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fd f968 	bl	8000aa4 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e026      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e2:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x498>
 80037ee:	e01e      	b.n	800382e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e019      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
 80037fc:	40021000 	.word	0x40021000
 8003800:	40007000 	.word	0x40007000
 8003804:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003808:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <HAL_RCC_OscConfig+0x500>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	429a      	cmp	r2, r3
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003826:	429a      	cmp	r2, r3
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000

0800383c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0d0      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003850:	4b6a      	ldr	r3, [pc, #424]	@ (80039fc <HAL_RCC_ClockConfig+0x1c0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d910      	bls.n	8003880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385e:	4b67      	ldr	r3, [pc, #412]	@ (80039fc <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 0207 	bic.w	r2, r3, #7
 8003866:	4965      	ldr	r1, [pc, #404]	@ (80039fc <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b63      	ldr	r3, [pc, #396]	@ (80039fc <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0b8      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d020      	beq.n	80038ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003898:	4b59      	ldr	r3, [pc, #356]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4a58      	ldr	r2, [pc, #352]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038b0:	4b53      	ldr	r3, [pc, #332]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a52      	ldr	r2, [pc, #328]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80038ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038bc:	4b50      	ldr	r3, [pc, #320]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	494d      	ldr	r1, [pc, #308]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d040      	beq.n	800395c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d107      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	4b47      	ldr	r3, [pc, #284]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d115      	bne.n	800391a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e07f      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d107      	bne.n	800390a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fa:	4b41      	ldr	r3, [pc, #260]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e073      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e06b      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800391a:	4b39      	ldr	r3, [pc, #228]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f023 0203 	bic.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4936      	ldr	r1, [pc, #216]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800392c:	f7fd f8ba 	bl	8000aa4 <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	e00a      	b.n	800394a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003934:	f7fd f8b6 	bl	8000aa4 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d901      	bls.n	800394a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e053      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	4b2d      	ldr	r3, [pc, #180]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 020c 	and.w	r2, r3, #12
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	429a      	cmp	r2, r3
 800395a:	d1eb      	bne.n	8003934 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800395c:	4b27      	ldr	r3, [pc, #156]	@ (80039fc <HAL_RCC_ClockConfig+0x1c0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d210      	bcs.n	800398c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 0207 	bic.w	r2, r3, #7
 8003972:	4922      	ldr	r1, [pc, #136]	@ (80039fc <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b20      	ldr	r3, [pc, #128]	@ (80039fc <HAL_RCC_ClockConfig+0x1c0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e032      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003998:	4b19      	ldr	r3, [pc, #100]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4916      	ldr	r1, [pc, #88]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039b6:	4b12      	ldr	r3, [pc, #72]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	490e      	ldr	r1, [pc, #56]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ca:	f000 f821 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	490a      	ldr	r1, [pc, #40]	@ (8003a04 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	5ccb      	ldrb	r3, [r1, r3]
 80039de:	fa22 f303 	lsr.w	r3, r2, r3
 80039e2:	4a09      	ldr	r2, [pc, #36]	@ (8003a08 <HAL_RCC_ClockConfig+0x1cc>)
 80039e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039e6:	4b09      	ldr	r3, [pc, #36]	@ (8003a0c <HAL_RCC_ClockConfig+0x1d0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd f818 	bl	8000a20 <HAL_InitTick>

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40022000 	.word	0x40022000
 8003a00:	40021000 	.word	0x40021000
 8003a04:	0800985c 	.word	0x0800985c
 8003a08:	20000000 	.word	0x20000000
 8003a0c:	2000000c 	.word	0x2000000c

08003a10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	2300      	movs	r3, #0
 8003a24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d002      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x30>
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x36>
 8003a3e:	e027      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a40:	4b19      	ldr	r3, [pc, #100]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a42:	613b      	str	r3, [r7, #16]
      break;
 8003a44:	e027      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	0c9b      	lsrs	r3, r3, #18
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	4a17      	ldr	r2, [pc, #92]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a50:	5cd3      	ldrb	r3, [r2, r3]
 8003a52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d010      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a5e:	4b11      	ldr	r3, [pc, #68]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	0c5b      	lsrs	r3, r3, #17
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	4a11      	ldr	r2, [pc, #68]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a6a:	5cd3      	ldrb	r3, [r2, r3]
 8003a6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a72:	fb03 f202 	mul.w	r2, r3, r2
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	e004      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a0c      	ldr	r2, [pc, #48]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a84:	fb02 f303 	mul.w	r3, r2, r3
 8003a88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	613b      	str	r3, [r7, #16]
      break;
 8003a8e:	e002      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a90:	4b05      	ldr	r3, [pc, #20]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a92:	613b      	str	r3, [r7, #16]
      break;
 8003a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a96:	693b      	ldr	r3, [r7, #16]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	007a1200 	.word	0x007a1200
 8003aac:	08009874 	.word	0x08009874
 8003ab0:	08009884 	.word	0x08009884
 8003ab4:	003d0900 	.word	0x003d0900

08003ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003abc:	4b02      	ldr	r3, [pc, #8]	@ (8003ac8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr
 8003ac8:	20000000 	.word	0x20000000

08003acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ad0:	f7ff fff2 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	4903      	ldr	r1, [pc, #12]	@ (8003af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000
 8003af0:	0800986c 	.word	0x0800986c

08003af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003af8:	f7ff ffde 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003afc:	4602      	mov	r2, r0
 8003afe:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	0adb      	lsrs	r3, r3, #11
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	4903      	ldr	r1, [pc, #12]	@ (8003b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b0a:	5ccb      	ldrb	r3, [r1, r3]
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	0800986c 	.word	0x0800986c

08003b1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b24:	4b0a      	ldr	r3, [pc, #40]	@ (8003b50 <RCC_Delay+0x34>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0a      	ldr	r2, [pc, #40]	@ (8003b54 <RCC_Delay+0x38>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	0a5b      	lsrs	r3, r3, #9
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b38:	bf00      	nop
  }
  while (Delay --);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1e5a      	subs	r2, r3, #1
 8003b3e:	60fa      	str	r2, [r7, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f9      	bne.n	8003b38 <RCC_Delay+0x1c>
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr
 8003b50:	20000000 	.word	0x20000000
 8003b54:	10624dd3 	.word	0x10624dd3

08003b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d07d      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b74:	2300      	movs	r3, #0
 8003b76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b78:	4b4f      	ldr	r3, [pc, #316]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10d      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b84:	4b4c      	ldr	r3, [pc, #304]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	4a4b      	ldr	r2, [pc, #300]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b8e:	61d3      	str	r3, [r2, #28]
 8003b90:	4b49      	ldr	r3, [pc, #292]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	4b46      	ldr	r3, [pc, #280]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d118      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bac:	4b43      	ldr	r3, [pc, #268]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a42      	ldr	r2, [pc, #264]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb8:	f7fc ff74 	bl	8000aa4 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc0:	f7fc ff70 	bl	8000aa4 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	@ 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e06d      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bde:	4b36      	ldr	r3, [pc, #216]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003be6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d02e      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d027      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c06:	4b2e      	ldr	r3, [pc, #184]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c12:	4a29      	ldr	r2, [pc, #164]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d014      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c22:	f7fc ff3f 	bl	8000aa4 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c28:	e00a      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2a:	f7fc ff3b 	bl	8000aa4 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e036      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c40:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0ee      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4917      	ldr	r1, [pc, #92]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d105      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c64:	4b14      	ldr	r3, [pc, #80]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	4a13      	ldr	r2, [pc, #76]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	490b      	ldr	r1, [pc, #44]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c9a:	4b07      	ldr	r3, [pc, #28]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	4904      	ldr	r1, [pc, #16]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40007000 	.word	0x40007000
 8003cc0:	42420440 	.word	0x42420440

08003cc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b10      	cmp	r3, #16
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	f200 808a 	bhi.w	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d045      	beq.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d075      	beq.n	8003de6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003cfa:	e082      	b.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003cfc:	4b46      	ldr	r3, [pc, #280]	@ (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d02:	4b45      	ldr	r3, [pc, #276]	@ (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d07b      	beq.n	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	0c9b      	lsrs	r3, r3, #18
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	4a41      	ldr	r2, [pc, #260]	@ (8003e1c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003d18:	5cd3      	ldrb	r3, [r2, r3]
 8003d1a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d015      	beq.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d26:	4b3c      	ldr	r3, [pc, #240]	@ (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	0c5b      	lsrs	r3, r3, #17
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	4a3b      	ldr	r2, [pc, #236]	@ (8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003d32:	5cd3      	ldrb	r3, [r2, r3]
 8003d34:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00d      	beq.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d40:	4a38      	ldr	r2, [pc, #224]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	fb02 f303 	mul.w	r3, r2, r3
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	e004      	b.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4a34      	ldr	r2, [pc, #208]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d68:	d102      	bne.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	61bb      	str	r3, [r7, #24]
      break;
 8003d6e:	e04a      	b.n	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4a2d      	ldr	r2, [pc, #180]	@ (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	61bb      	str	r3, [r7, #24]
      break;
 8003d7e:	e042      	b.n	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003d80:	4b25      	ldr	r3, [pc, #148]	@ (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d90:	d108      	bne.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003d9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	e01f      	b.n	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dae:	d109      	bne.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003db0:	4b19      	ldr	r3, [pc, #100]	@ (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003dbc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	e00f      	b.n	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dce:	d11c      	bne.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003dd0:	4b11      	ldr	r3, [pc, #68]	@ (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d016      	beq.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003ddc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003de0:	61bb      	str	r3, [r7, #24]
      break;
 8003de2:	e012      	b.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003de4:	e011      	b.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003de6:	f7ff fe85 	bl	8003af4 <HAL_RCC_GetPCLK2Freq>
 8003dea:	4602      	mov	r2, r0
 8003dec:	4b0a      	ldr	r3, [pc, #40]	@ (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	0b9b      	lsrs	r3, r3, #14
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	3301      	adds	r3, #1
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfe:	61bb      	str	r3, [r7, #24]
      break;
 8003e00:	e004      	b.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e02:	bf00      	nop
 8003e04:	e002      	b.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e06:	bf00      	nop
 8003e08:	e000      	b.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e0a:	bf00      	nop
    }
  }
  return (frequency);
 8003e0c:	69bb      	ldr	r3, [r7, #24]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	08009888 	.word	0x08009888
 8003e20:	08009898 	.word	0x08009898
 8003e24:	007a1200 	.word	0x007a1200
 8003e28:	003d0900 	.word	0x003d0900
 8003e2c:	aaaaaaab 	.word	0xaaaaaaab

08003e30 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e07a      	b.n	8003f3c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7c5b      	ldrb	r3, [r3, #17]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fc fbfa 	bl	8000650 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f870 	bl	8003f48 <HAL_RTC_WaitForSynchro>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2204      	movs	r2, #4
 8003e72:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e061      	b.n	8003f3c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f892 	bl	8003fa2 <RTC_EnterInitMode>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2204      	movs	r2, #4
 8003e88:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e056      	b.n	8003f3c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0207 	bic.w	r2, r2, #7
 8003e9c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003ea6:	4b27      	ldr	r3, [pc, #156]	@ (8003f44 <HAL_RTC_Init+0x114>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eaa:	4a26      	ldr	r2, [pc, #152]	@ (8003f44 <HAL_RTC_Init+0x114>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003eb2:	4b24      	ldr	r3, [pc, #144]	@ (8003f44 <HAL_RTC_Init+0x114>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	4921      	ldr	r1, [pc, #132]	@ (8003f44 <HAL_RTC_Init+0x114>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e00e      	b.n	8003ef4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	f7ff fef4 	bl	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003edc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e026      	b.n	8003f3c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	0c1a      	lsrs	r2, r3, #16
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f002 020f 	and.w	r2, r2, #15
 8003f00:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	b292      	uxth	r2, r2
 8003f0a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f870 	bl	8003ff2 <RTC_ExitInitMode>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d004      	beq.n	8003f22 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e00c      	b.n	8003f3c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
  }
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40006c00 	.word	0x40006c00

08003f48 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e01d      	b.n	8003f9a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0208 	bic.w	r2, r2, #8
 8003f6c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003f6e:	f7fc fd99 	bl	8000aa4 <HAL_GetTick>
 8003f72:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003f74:	e009      	b.n	8003f8a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003f76:	f7fc fd95 	bl	8000aa4 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f84:	d901      	bls.n	8003f8a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e007      	b.n	8003f9a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0ee      	beq.n	8003f76 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003fae:	f7fc fd79 	bl	8000aa4 <HAL_GetTick>
 8003fb2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003fb4:	e009      	b.n	8003fca <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003fb6:	f7fc fd75 	bl	8000aa4 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fc4:	d901      	bls.n	8003fca <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e00f      	b.n	8003fea <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0ee      	beq.n	8003fb6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0210 	orr.w	r2, r2, #16
 8003fe6:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0210 	bic.w	r2, r2, #16
 800400c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800400e:	f7fc fd49 	bl	8000aa4 <HAL_GetTick>
 8004012:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004014:	e009      	b.n	800402a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004016:	f7fc fd45 	bl	8000aa4 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004024:	d901      	bls.n	800402a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e007      	b.n	800403a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0ee      	beq.n	8004016 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8004054:	4b07      	ldr	r3, [pc, #28]	@ (8004074 <HAL_RTCEx_BKUPWrite+0x30>)
 8004056:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4413      	add	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	b292      	uxth	r2, r2
 8004068:	601a      	str	r2, [r3, #0]
}
 800406a:	bf00      	nop
 800406c:	371c      	adds	r7, #28
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr
 8004074:	40006c00 	.word	0x40006c00

08004078 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 800408a:	4b08      	ldr	r3, [pc, #32]	@ (80040ac <HAL_RTCEx_BKUPRead+0x34>)
 800408c:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4413      	add	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	b29b      	uxth	r3, r3
 800409e:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80040a0:	68bb      	ldr	r3, [r7, #8]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr
 80040ac:	40006c00 	.word	0x40006c00

080040b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e042      	b.n	8004148 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fc fba0 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2224      	movs	r2, #36	@ 0x24
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fe8d 	bl	8004e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e024      	b.n	80041ac <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2224      	movs	r2, #36	@ 0x24
 8004166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004178:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc fbcc 	bl	8000918 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	4613      	mov	r3, r2
 80041c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d112      	bne.n	80041f4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_UART_Receive_DMA+0x26>
 80041d4:	88fb      	ldrh	r3, [r7, #6]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e00b      	b.n	80041f6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	461a      	mov	r2, r3
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fbb6 	bl	800495c <UART_Start_Receive_DMA>
 80041f0:	4603      	mov	r3, r0
 80041f2:	e000      	b.n	80041f6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
  }
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b0ba      	sub	sp, #232	@ 0xe8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004226:	2300      	movs	r3, #0
 8004228:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800423e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10f      	bne.n	8004266 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_UART_IRQHandler+0x66>
 8004252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fd1a 	bl	8004c98 <UART_Receive_IT>
      return;
 8004264:	e25b      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80de 	beq.w	800442c <HAL_UART_IRQHandler+0x22c>
 8004270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800427c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004280:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80d1 	beq.w	800442c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800428a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <HAL_UART_IRQHandler+0xae>
 8004296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800429a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	f043 0201 	orr.w	r2, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <HAL_UART_IRQHandler+0xd2>
 80042ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ca:	f043 0202 	orr.w	r2, r3, #2
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <HAL_UART_IRQHandler+0xf6>
 80042de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	f043 0204 	orr.w	r2, r3, #4
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d011      	beq.n	8004326 <HAL_UART_IRQHandler+0x126>
 8004302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d105      	bne.n	800431a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800430e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	f043 0208 	orr.w	r2, r3, #8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 81f2 	beq.w	8004714 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_UART_IRQHandler+0x14e>
 800433c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fca5 	bl	8004c98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <HAL_UART_IRQHandler+0x17a>
 8004372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d04f      	beq.n	800441a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fbaf 	bl	8004ade <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d041      	beq.n	8004412 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3314      	adds	r3, #20
 80043b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1d9      	bne.n	800438e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d013      	beq.n	800440a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e6:	4a7e      	ldr	r2, [pc, #504]	@ (80045e0 <HAL_UART_IRQHandler+0x3e0>)
 80043e8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fc fe18 	bl	8001024 <HAL_DMA_Abort_IT>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004404:	4610      	mov	r0, r2
 8004406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004408:	e00e      	b.n	8004428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fc f9f4 	bl	80007f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004410:	e00a      	b.n	8004428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fc f9f0 	bl	80007f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004418:	e006      	b.n	8004428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fc f9ec 	bl	80007f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004426:	e175      	b.n	8004714 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	bf00      	nop
    return;
 800442a:	e173      	b.n	8004714 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	2b01      	cmp	r3, #1
 8004432:	f040 814f 	bne.w	80046d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8148 	beq.w	80046d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8141 	beq.w	80046d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80b6 	beq.w	80045e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004484:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8145 	beq.w	8004718 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004496:	429a      	cmp	r2, r3
 8004498:	f080 813e 	bcs.w	8004718 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	f000 8088 	beq.w	80045c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	330c      	adds	r3, #12
 80044d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80044dc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044ec:	e841 2300 	strex	r3, r2, [r1]
 80044f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1d9      	bne.n	80044b0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3314      	adds	r3, #20
 8004502:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800450c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3314      	adds	r3, #20
 800451c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004520:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004524:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004528:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004532:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e1      	bne.n	80044fc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3314      	adds	r3, #20
 800453e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004548:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800454a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800454e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3314      	adds	r3, #20
 8004558:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800455c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800455e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004562:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800456a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e3      	bne.n	8004538 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	330c      	adds	r3, #12
 8004584:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800458e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004590:	f023 0310 	bic.w	r3, r3, #16
 8004594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	330c      	adds	r3, #12
 800459e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045a4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e3      	bne.n	800457e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fc fcf6 	bl	8000fac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	4619      	mov	r1, r3
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f8b6 	bl	8004748 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045dc:	e09c      	b.n	8004718 <HAL_UART_IRQHandler+0x518>
 80045de:	bf00      	nop
 80045e0:	08004ba3 	.word	0x08004ba3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 808e 	beq.w	800471c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8089 	beq.w	800471c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800461a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800461c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004620:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800462e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004630:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004634:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800463c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e3      	bne.n	800460a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3314      	adds	r3, #20
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	623b      	str	r3, [r7, #32]
   return(result);
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3314      	adds	r3, #20
 8004662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004666:	633a      	str	r2, [r7, #48]	@ 0x30
 8004668:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800466c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e3      	bne.n	8004642 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	60fb      	str	r3, [r7, #12]
   return(result);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0310 	bic.w	r3, r3, #16
 800469e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80046ac:	61fa      	str	r2, [r7, #28]
 80046ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b0:	69b9      	ldr	r1, [r7, #24]
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	e841 2300 	strex	r3, r2, [r1]
 80046b8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e3      	bne.n	8004688 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f83b 	bl	8004748 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046d2:	e023      	b.n	800471c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d009      	beq.n	80046f4 <HAL_UART_IRQHandler+0x4f4>
 80046e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fa6c 	bl	8004bca <UART_Transmit_IT>
    return;
 80046f2:	e014      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00e      	beq.n	800471e <HAL_UART_IRQHandler+0x51e>
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 faab 	bl	8004c68 <UART_EndTransmit_IT>
    return;
 8004712:	e004      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
    return;
 8004714:	bf00      	nop
 8004716:	e002      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
      return;
 8004718:	bf00      	nop
 800471a:	e000      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
      return;
 800471c:	bf00      	nop
  }
}
 800471e:	37e8      	adds	r7, #232	@ 0xe8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr

08004736 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr

08004748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr

0800475e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b09c      	sub	sp, #112	@ 0x70
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d172      	bne.n	8004860 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800477a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800477c:	2200      	movs	r2, #0
 800477e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004790:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004792:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004796:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80047a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80047a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e5      	bne.n	8004780 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3314      	adds	r3, #20
 80047ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80047cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3314      	adds	r3, #20
 80047d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80047d4:	647a      	str	r2, [r7, #68]	@ 0x44
 80047d6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e5      	bne.n	80047b4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3314      	adds	r3, #20
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	623b      	str	r3, [r7, #32]
   return(result);
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3314      	adds	r3, #20
 8004806:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004808:	633a      	str	r2, [r7, #48]	@ 0x30
 800480a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800480e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e5      	bne.n	80047e8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800481c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800481e:	2220      	movs	r2, #32
 8004820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004828:	2b01      	cmp	r3, #1
 800482a:	d119      	bne.n	8004860 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	60fb      	str	r3, [r7, #12]
   return(result);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0310 	bic.w	r3, r3, #16
 8004842:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800484c:	61fa      	str	r2, [r7, #28]
 800484e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	69b9      	ldr	r1, [r7, #24]
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	617b      	str	r3, [r7, #20]
   return(result);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e5      	bne.n	800482c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004862:	2200      	movs	r2, #0
 8004864:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004866:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486a:	2b01      	cmp	r3, #1
 800486c:	d106      	bne.n	800487c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800486e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004870:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004872:	4619      	mov	r1, r3
 8004874:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004876:	f7ff ff67 	bl	8004748 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800487a:	e002      	b.n	8004882 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800487c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800487e:	f7fb ffc4 	bl	800080a <HAL_UART_RxCpltCallback>
}
 8004882:	bf00      	nop
 8004884:	3770      	adds	r7, #112	@ 0x70
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004896:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d108      	bne.n	80048b8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	4619      	mov	r1, r3
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7ff ff49 	bl	8004748 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048b6:	e002      	b.n	80048be <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f7ff ff3c 	bl	8004736 <HAL_UART_RxHalfCpltCallback>
}
 80048be:	bf00      	nop
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bf14      	ite	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	2300      	moveq	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b21      	cmp	r3, #33	@ 0x21
 80048f8:	d108      	bne.n	800490c <UART_DMAError+0x46>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2200      	movs	r2, #0
 8004904:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004906:	68b8      	ldr	r0, [r7, #8]
 8004908:	f000 f8c2 	bl	8004a90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf14      	ite	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2300      	moveq	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b22      	cmp	r3, #34	@ 0x22
 800492c:	d108      	bne.n	8004940 <UART_DMAError+0x7a>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2200      	movs	r2, #0
 8004938:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800493a:	68b8      	ldr	r0, [r7, #8]
 800493c:	f000 f8cf 	bl	8004ade <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004944:	f043 0210 	orr.w	r2, r3, #16
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800494c:	68b8      	ldr	r0, [r7, #8]
 800494e:	f7fb ff53 	bl	80007f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004952:	bf00      	nop
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b098      	sub	sp, #96	@ 0x60
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	88fa      	ldrh	r2, [r7, #6]
 8004974:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2222      	movs	r2, #34	@ 0x22
 8004980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004988:	4a3e      	ldr	r2, [pc, #248]	@ (8004a84 <UART_Start_Receive_DMA+0x128>)
 800498a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004990:	4a3d      	ldr	r2, [pc, #244]	@ (8004a88 <UART_Start_Receive_DMA+0x12c>)
 8004992:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004998:	4a3c      	ldr	r2, [pc, #240]	@ (8004a8c <UART_Start_Receive_DMA+0x130>)
 800499a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a0:	2200      	movs	r2, #0
 80049a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80049a4:	f107 0308 	add.w	r3, r7, #8
 80049a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4619      	mov	r1, r3
 80049b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	f7fc fa96 	bl	8000eec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d019      	beq.n	8004a12 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049fe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004a00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004a04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e5      	bne.n	80049de <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3314      	adds	r3, #20
 8004a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3314      	adds	r3, #20
 8004a30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a32:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004a34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004a38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e5      	bne.n	8004a12 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3314      	adds	r3, #20
 8004a4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	617b      	str	r3, [r7, #20]
   return(result);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3314      	adds	r3, #20
 8004a64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004a66:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6a39      	ldr	r1, [r7, #32]
 8004a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e5      	bne.n	8004a46 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3760      	adds	r7, #96	@ 0x60
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	0800475f 	.word	0x0800475f
 8004a88:	0800488b 	.word	0x0800488b
 8004a8c:	080048c7 	.word	0x080048c7

08004a90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	@ 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	61ba      	str	r2, [r7, #24]
 8004aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6979      	ldr	r1, [r7, #20]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004ad4:	bf00      	nop
 8004ad6:	3724      	adds	r7, #36	@ 0x24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b095      	sub	sp, #84	@ 0x54
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	330c      	adds	r3, #12
 8004aec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	330c      	adds	r3, #12
 8004b04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b06:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e5      	bne.n	8004ae6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3314      	adds	r3, #20
 8004b20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3314      	adds	r3, #20
 8004b38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e5      	bne.n	8004b1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d119      	bne.n	8004b8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f023 0310 	bic.w	r3, r3, #16
 8004b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b76:	61ba      	str	r2, [r7, #24]
 8004b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	6979      	ldr	r1, [r7, #20]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	613b      	str	r3, [r7, #16]
   return(result);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e5      	bne.n	8004b56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b98:	bf00      	nop
 8004b9a:	3754      	adds	r7, #84	@ 0x54
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7fb fe1b 	bl	80007f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b21      	cmp	r3, #33	@ 0x21
 8004bdc:	d13e      	bne.n	8004c5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be6:	d114      	bne.n	8004c12 <UART_Transmit_IT+0x48>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d110      	bne.n	8004c12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	1c9a      	adds	r2, r3, #2
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	621a      	str	r2, [r3, #32]
 8004c10:	e008      	b.n	8004c24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	1c59      	adds	r1, r3, #1
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6211      	str	r1, [r2, #32]
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4619      	mov	r1, r3
 8004c32:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10f      	bne.n	8004c58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e000      	b.n	8004c5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
  }
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff fd4b 	bl	8004724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08c      	sub	sp, #48	@ 0x30
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b22      	cmp	r3, #34	@ 0x22
 8004caa:	f040 80ae 	bne.w	8004e0a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb6:	d117      	bne.n	8004ce8 <UART_Receive_IT+0x50>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d113      	bne.n	8004ce8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce0:	1c9a      	adds	r2, r3, #2
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ce6:	e026      	b.n	8004d36 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cfa:	d007      	beq.n	8004d0c <UART_Receive_IT+0x74>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <UART_Receive_IT+0x82>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e008      	b.n	8004d2c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4619      	mov	r1, r3
 8004d44:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d15d      	bne.n	8004e06 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0220 	bic.w	r2, r2, #32
 8004d58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0201 	bic.w	r2, r2, #1
 8004d78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d135      	bne.n	8004dfc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	613b      	str	r3, [r7, #16]
   return(result);
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f023 0310 	bic.w	r3, r3, #16
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db6:	623a      	str	r2, [r7, #32]
 8004db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	69f9      	ldr	r1, [r7, #28]
 8004dbc:	6a3a      	ldr	r2, [r7, #32]
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e5      	bne.n	8004d96 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d10a      	bne.n	8004dee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff fca7 	bl	8004748 <HAL_UARTEx_RxEventCallback>
 8004dfa:	e002      	b.n	8004e02 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fb fd04 	bl	800080a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e002      	b.n	8004e0c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e000      	b.n	8004e0c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
  }
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3730      	adds	r7, #48	@ 0x30
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004e4e:	f023 030c 	bic.w	r3, r3, #12
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2c      	ldr	r2, [pc, #176]	@ (8004f28 <UART_SetConfig+0x114>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d103      	bne.n	8004e84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e7c:	f7fe fe3a 	bl	8003af4 <HAL_RCC_GetPCLK2Freq>
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	e002      	b.n	8004e8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7fe fe22 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 8004e88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009a      	lsls	r2, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	4a22      	ldr	r2, [pc, #136]	@ (8004f2c <UART_SetConfig+0x118>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	0119      	lsls	r1, r3, #4
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009a      	lsls	r2, r3, #2
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f2c <UART_SetConfig+0x118>)
 8004ec2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2064      	movs	r0, #100	@ 0x64
 8004eca:	fb00 f303 	mul.w	r3, r0, r3
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	3332      	adds	r3, #50	@ 0x32
 8004ed4:	4a15      	ldr	r2, [pc, #84]	@ (8004f2c <UART_SetConfig+0x118>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ee0:	4419      	add	r1, r3
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009a      	lsls	r2, r3, #2
 8004eec:	441a      	add	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f2c <UART_SetConfig+0x118>)
 8004efa:	fba3 0302 	umull	r0, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	2064      	movs	r0, #100	@ 0x64
 8004f02:	fb00 f303 	mul.w	r3, r0, r3
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	3332      	adds	r3, #50	@ 0x32
 8004f0c:	4a07      	ldr	r2, [pc, #28]	@ (8004f2c <UART_SetConfig+0x118>)
 8004f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	f003 020f 	and.w	r2, r3, #15
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40013800 	.word	0x40013800
 8004f2c:	51eb851f 	.word	0x51eb851f

08004f30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	4638      	mov	r0, r7
 8004f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr

08004f4a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f5a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004f5e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f7e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004f82:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	4013      	ands	r3, r2
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr

08004faa <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b085      	sub	sp, #20
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	4638      	mov	r0, r7
 8004fcc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b09d      	sub	sp, #116	@ 0x74
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800501e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005022:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	78db      	ldrb	r3, [r3, #3]
 800502a:	2b03      	cmp	r3, #3
 800502c:	d81f      	bhi.n	800506e <USB_ActivateEndpoint+0x72>
 800502e:	a201      	add	r2, pc, #4	@ (adr r2, 8005034 <USB_ActivateEndpoint+0x38>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	08005045 	.word	0x08005045
 8005038:	08005061 	.word	0x08005061
 800503c:	08005077 	.word	0x08005077
 8005040:	08005053 	.word	0x08005053
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005044:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005048:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800504c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005050:	e012      	b.n	8005078 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005052:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005056:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800505a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800505e:	e00b      	b.n	8005078 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005060:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005064:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005068:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800506c:	e004      	b.n	8005078 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005074:	e000      	b.n	8005078 <USB_ActivateEndpoint+0x7c>
      break;
 8005076:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	441a      	add	r2, r3
 8005082:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800508a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800508e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005096:	b29b      	uxth	r3, r3
 8005098:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	7812      	ldrb	r2, [r2, #0]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80050ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050da:	b29b      	uxth	r3, r3
 80050dc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	7b1b      	ldrb	r3, [r3, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f040 8178 	bne.w	80053d8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	785b      	ldrb	r3, [r3, #1]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8084 	beq.w	80051fa <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	4413      	add	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	011a      	lsls	r2, r3, #4
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	88db      	ldrh	r3, [r3, #6]
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	b29b      	uxth	r3, r3
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	827b      	strh	r3, [r7, #18]
 8005134:	8a7b      	ldrh	r3, [r7, #18]
 8005136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01b      	beq.n	8005176 <USB_ActivateEndpoint+0x17a>
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005154:	823b      	strh	r3, [r7, #16]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	441a      	add	r2, r3
 8005160:	8a3b      	ldrh	r3, [r7, #16]
 8005162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800516a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800516e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005172:	b29b      	uxth	r3, r3
 8005174:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	78db      	ldrb	r3, [r3, #3]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d020      	beq.n	80051c0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005194:	81bb      	strh	r3, [r7, #12]
 8005196:	89bb      	ldrh	r3, [r7, #12]
 8005198:	f083 0320 	eor.w	r3, r3, #32
 800519c:	81bb      	strh	r3, [r7, #12]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	441a      	add	r2, r3
 80051a8:	89bb      	ldrh	r3, [r7, #12]
 80051aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	8013      	strh	r3, [r2, #0]
 80051be:	e2d5      	b.n	800576c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051d6:	81fb      	strh	r3, [r7, #14]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	441a      	add	r2, r3
 80051e2:	89fb      	ldrh	r3, [r7, #14]
 80051e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	8013      	strh	r3, [r2, #0]
 80051f8:	e2b8      	b.n	800576c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005204:	b29b      	uxth	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520a:	4413      	add	r3, r2
 800520c:	633b      	str	r3, [r7, #48]	@ 0x30
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	011a      	lsls	r2, r3, #4
 8005214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005216:	4413      	add	r3, r2
 8005218:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800521c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	88db      	ldrh	r3, [r3, #6]
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	b29b      	uxth	r3, r3
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005238:	b29b      	uxth	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523e:	4413      	add	r3, r2
 8005240:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	011a      	lsls	r2, r3, #4
 8005248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524a:	4413      	add	r3, r2
 800524c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800525c:	b29a      	uxth	r2, r3
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b3e      	cmp	r3, #62	@ 0x3e
 8005268:	d91d      	bls.n	80052a6 <USB_ActivateEndpoint+0x2aa>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <USB_ActivateEndpoint+0x288>
 800527e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005280:	3b01      	subs	r3, #1
 8005282:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29a      	uxth	r2, r3
 800528a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800528c:	b29b      	uxth	r3, r3
 800528e:	029b      	lsls	r3, r3, #10
 8005290:	b29b      	uxth	r3, r3
 8005292:	4313      	orrs	r3, r2
 8005294:	b29b      	uxth	r3, r3
 8005296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529e:	b29a      	uxth	r2, r3
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	e026      	b.n	80052f4 <USB_ActivateEndpoint+0x2f8>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <USB_ActivateEndpoint+0x2c8>
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052bc:	b29a      	uxth	r2, r3
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	801a      	strh	r2, [r3, #0]
 80052c2:	e017      	b.n	80052f4 <USB_ActivateEndpoint+0x2f8>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	085b      	lsrs	r3, r3, #1
 80052ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <USB_ActivateEndpoint+0x2e2>
 80052d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052da:	3301      	adds	r3, #1
 80052dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	029b      	lsls	r3, r3, #10
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	4313      	orrs	r3, r2
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005302:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005304:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <USB_ActivateEndpoint+0x348>
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800531e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005322:	843b      	strh	r3, [r7, #32]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	441a      	add	r2, r3
 800532e:	8c3b      	ldrh	r3, [r7, #32]
 8005330:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005334:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005338:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800533c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005340:	b29b      	uxth	r3, r3
 8005342:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d124      	bne.n	8005396 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	b29b      	uxth	r3, r3
 800535a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800535e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005362:	83bb      	strh	r3, [r7, #28]
 8005364:	8bbb      	ldrh	r3, [r7, #28]
 8005366:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800536a:	83bb      	strh	r3, [r7, #28]
 800536c:	8bbb      	ldrh	r3, [r7, #28]
 800536e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005372:	83bb      	strh	r3, [r7, #28]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	441a      	add	r2, r3
 800537e:	8bbb      	ldrh	r3, [r7, #28]
 8005380:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005384:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005388:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800538c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005390:	b29b      	uxth	r3, r3
 8005392:	8013      	strh	r3, [r2, #0]
 8005394:	e1ea      	b.n	800576c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ac:	83fb      	strh	r3, [r7, #30]
 80053ae:	8bfb      	ldrh	r3, [r7, #30]
 80053b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80053b4:	83fb      	strh	r3, [r7, #30]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	441a      	add	r2, r3
 80053c0:	8bfb      	ldrh	r3, [r7, #30]
 80053c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	8013      	strh	r3, [r2, #0]
 80053d6:	e1c9      	b.n	800576c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	78db      	ldrb	r3, [r3, #3]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d11e      	bne.n	800541e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	441a      	add	r2, r3
 8005404:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005408:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800540c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005410:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005418:	b29b      	uxth	r3, r3
 800541a:	8013      	strh	r3, [r2, #0]
 800541c:	e01d      	b.n	800545a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005434:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	441a      	add	r2, r3
 8005442:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005446:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800544a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800544e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005456:	b29b      	uxth	r3, r3
 8005458:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005464:	b29b      	uxth	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800546a:	4413      	add	r3, r2
 800546c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	011a      	lsls	r2, r3, #4
 8005474:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005476:	4413      	add	r3, r2
 8005478:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800547c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	891b      	ldrh	r3, [r3, #8]
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	b29b      	uxth	r3, r3
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800548c:	801a      	strh	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	657b      	str	r3, [r7, #84]	@ 0x54
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005498:	b29b      	uxth	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800549e:	4413      	add	r3, r2
 80054a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	011a      	lsls	r2, r3, #4
 80054a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80054b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	895b      	ldrh	r3, [r3, #10]
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054c0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	785b      	ldrb	r3, [r3, #1]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f040 8093 	bne.w	80055f2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80054dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80054e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01b      	beq.n	8005520 <USB_ActivateEndpoint+0x524>
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	441a      	add	r2, r3
 800550a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800550c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005514:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800551c:	b29b      	uxth	r3, r3
 800551e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800552e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01b      	beq.n	8005570 <USB_ActivateEndpoint+0x574>
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800554a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800554e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	441a      	add	r2, r3
 800555a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800555c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005560:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005564:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005568:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800556c:	b29b      	uxth	r3, r3
 800556e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005586:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005588:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800558a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800558e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005590:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005592:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005596:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	441a      	add	r2, r3
 80055a2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80055a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	441a      	add	r2, r3
 80055da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	8013      	strh	r3, [r2, #0]
 80055f0:	e0bc      	b.n	800576c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005602:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01d      	beq.n	800564a <USB_ActivateEndpoint+0x64e>
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005624:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	441a      	add	r2, r3
 8005632:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005636:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800563a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800563e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005646:	b29b      	uxth	r3, r3
 8005648:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800565a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800565e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01d      	beq.n	80056a2 <USB_ActivateEndpoint+0x6a6>
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	441a      	add	r2, r3
 800568a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800568e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800569a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800569e:	b29b      	uxth	r3, r3
 80056a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	78db      	ldrb	r3, [r3, #3]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d024      	beq.n	80056f4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056c0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80056c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80056c8:	f083 0320 	eor.w	r3, r3, #32
 80056cc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	441a      	add	r2, r3
 80056da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80056de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	8013      	strh	r3, [r2, #0]
 80056f2:	e01d      	b.n	8005730 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800570a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	441a      	add	r2, r3
 8005718:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800571c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800572c:	b29b      	uxth	r3, r3
 800572e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005746:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	441a      	add	r2, r3
 8005754:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800575c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005768:	b29b      	uxth	r3, r3
 800576a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800576c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005770:	4618      	mov	r0, r3
 8005772:	3774      	adds	r7, #116	@ 0x74
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop

0800577c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800577c:	b480      	push	{r7}
 800577e:	b08d      	sub	sp, #52	@ 0x34
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	7b1b      	ldrb	r3, [r3, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f040 808e 	bne.w	80058ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d044      	beq.n	8005822 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	81bb      	strh	r3, [r7, #12]
 80057a6:	89bb      	ldrh	r3, [r7, #12]
 80057a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01b      	beq.n	80057e8 <USB_DeactivateEndpoint+0x6c>
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057c6:	817b      	strh	r3, [r7, #10]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	441a      	add	r2, r3
 80057d2:	897b      	ldrh	r3, [r7, #10]
 80057d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057fe:	813b      	strh	r3, [r7, #8]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	441a      	add	r2, r3
 800580a:	893b      	ldrh	r3, [r7, #8]
 800580c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800581c:	b29b      	uxth	r3, r3
 800581e:	8013      	strh	r3, [r2, #0]
 8005820:	e192      	b.n	8005b48 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	827b      	strh	r3, [r7, #18]
 8005830:	8a7b      	ldrh	r3, [r7, #18]
 8005832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d01b      	beq.n	8005872 <USB_DeactivateEndpoint+0xf6>
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800584c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005850:	823b      	strh	r3, [r7, #16]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	441a      	add	r2, r3
 800585c:	8a3b      	ldrh	r3, [r7, #16]
 800585e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005866:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800586a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800586e:	b29b      	uxth	r3, r3
 8005870:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005888:	81fb      	strh	r3, [r7, #14]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	441a      	add	r2, r3
 8005894:	89fb      	ldrh	r3, [r7, #14]
 8005896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800589a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800589e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	8013      	strh	r3, [r2, #0]
 80058aa:	e14d      	b.n	8005b48 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f040 80a5 	bne.w	8005a00 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	843b      	strh	r3, [r7, #32]
 80058c4:	8c3b      	ldrh	r3, [r7, #32]
 80058c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d01b      	beq.n	8005906 <USB_DeactivateEndpoint+0x18a>
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e4:	83fb      	strh	r3, [r7, #30]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	441a      	add	r2, r3
 80058f0:	8bfb      	ldrh	r3, [r7, #30]
 80058f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005902:	b29b      	uxth	r3, r3
 8005904:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	83bb      	strh	r3, [r7, #28]
 8005914:	8bbb      	ldrh	r3, [r7, #28]
 8005916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d01b      	beq.n	8005956 <USB_DeactivateEndpoint+0x1da>
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005934:	837b      	strh	r3, [r7, #26]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	441a      	add	r2, r3
 8005940:	8b7b      	ldrh	r3, [r7, #26]
 8005942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800594a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800594e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005952:	b29b      	uxth	r3, r3
 8005954:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800596c:	833b      	strh	r3, [r7, #24]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	441a      	add	r2, r3
 8005978:	8b3b      	ldrh	r3, [r7, #24]
 800597a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800597e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005986:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800598a:	b29b      	uxth	r3, r3
 800598c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a4:	82fb      	strh	r3, [r7, #22]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	441a      	add	r2, r3
 80059b0:	8afb      	ldrh	r3, [r7, #22]
 80059b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059dc:	82bb      	strh	r3, [r7, #20]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	441a      	add	r2, r3
 80059e8:	8abb      	ldrh	r3, [r7, #20]
 80059ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	8013      	strh	r3, [r2, #0]
 80059fe:	e0a3      	b.n	8005b48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005a0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01b      	beq.n	8005a50 <USB_DeactivateEndpoint+0x2d4>
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	441a      	add	r2, r3
 8005a3a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005a5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01b      	beq.n	8005aa0 <USB_DeactivateEndpoint+0x324>
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	441a      	add	r2, r3
 8005a8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	441a      	add	r2, r3
 8005ac2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ac4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ac8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005acc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	441a      	add	r2, r3
 8005afa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005afc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b26:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	441a      	add	r2, r3
 8005b32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3734      	adds	r7, #52	@ 0x34
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr

08005b54 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b0c2      	sub	sp, #264	@ 0x108
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b62:	6018      	str	r0, [r3, #0]
 8005b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b6c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	785b      	ldrb	r3, [r3, #1]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	f040 86b7 	bne.w	80068ee <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	699a      	ldr	r2, [r3, #24]
 8005b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d908      	bls.n	8005bae <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005bac:	e007      	b.n	8005bbe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	7b1b      	ldrb	r3, [r3, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d13a      	bne.n	8005c44 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6959      	ldr	r1, [r3, #20]
 8005bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	88da      	ldrh	r2, [r3, #6]
 8005be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005bf0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bf4:	6800      	ldr	r0, [r0, #0]
 8005bf6:	f001 fc9c 	bl	8007532 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	461a      	mov	r2, r3
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	011a      	lsls	r2, r3, #4
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	f000 be1f 	b.w	8006882 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	78db      	ldrb	r3, [r3, #3]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	f040 8462 	bne.w	800651a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6a1a      	ldr	r2, [r3, #32]
 8005c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	f240 83df 	bls.w	8006432 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c9a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	441a      	add	r2, r3
 8005cb8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005cbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cc4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6a1a      	ldr	r2, [r3, #32]
 8005cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce0:	1ad2      	subs	r2, r2, r3
 8005ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 81c7 	beq.w	80060a4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	785b      	ldrb	r3, [r3, #1]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d177      	bne.n	8005e22 <USB_EPStartXfer+0x2ce>
 8005d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d52:	4413      	add	r3, r2
 8005d54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	011a      	lsls	r2, r3, #4
 8005d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d66:	4413      	add	r3, r2
 8005d68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	801a      	strh	r2, [r3, #0]
 8005d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d82:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d84:	d921      	bls.n	8005dca <USB_EPStartXfer+0x276>
 8005d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8a:	095b      	lsrs	r3, r3, #5
 8005d8c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <USB_EPStartXfer+0x252>
 8005d9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005da0:	3b01      	subs	r3, #1
 8005da2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	029b      	lsls	r3, r3, #10
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	4313      	orrs	r3, r2
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	e050      	b.n	8005e6c <USB_EPStartXfer+0x318>
 8005dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10a      	bne.n	8005de8 <USB_EPStartXfer+0x294>
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	801a      	strh	r2, [r3, #0]
 8005de6:	e041      	b.n	8005e6c <USB_EPStartXfer+0x318>
 8005de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dec:	085b      	lsrs	r3, r3, #1
 8005dee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d004      	beq.n	8005e08 <USB_EPStartXfer+0x2b4>
 8005dfe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005e02:	3301      	adds	r3, #1
 8005e04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	029b      	lsls	r3, r3, #10
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	801a      	strh	r2, [r3, #0]
 8005e20:	e024      	b.n	8005e6c <USB_EPStartXfer+0x318>
 8005e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d11c      	bne.n	8005e6c <USB_EPStartXfer+0x318>
 8005e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	461a      	mov	r2, r3
 8005e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e46:	4413      	add	r3, r2
 8005e48:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	011a      	lsls	r2, r3, #4
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	895b      	ldrh	r3, [r3, #10]
 8005e78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6959      	ldr	r1, [r3, #20]
 8005e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e92:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e96:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e9a:	6800      	ldr	r0, [r0, #0]
 8005e9c:	f001 fb49 	bl	8007532 <USB_WritePMA>
            ep->xfer_buff += len;
 8005ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695a      	ldr	r2, [r3, #20]
 8005eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb0:	441a      	add	r2, r3
 8005eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6a1a      	ldr	r2, [r3, #32]
 8005eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d90f      	bls.n	8005efa <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6a1a      	ldr	r2, [r3, #32]
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eea:	1ad2      	subs	r2, r2, r3
 8005eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	621a      	str	r2, [r3, #32]
 8005ef8:	e00e      	b.n	8005f18 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2200      	movs	r2, #0
 8005f16:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	785b      	ldrb	r3, [r3, #1]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d177      	bne.n	8006018 <USB_EPStartXfer+0x4c4>
 8005f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	4413      	add	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
 8005f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	011a      	lsls	r2, r3, #4
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f78:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f7a:	d921      	bls.n	8005fc0 <USB_EPStartXfer+0x46c>
 8005f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f8a:	f003 031f 	and.w	r3, r3, #31
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d104      	bne.n	8005f9c <USB_EPStartXfer+0x448>
 8005f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f96:	3b01      	subs	r3, #1
 8005f98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	029b      	lsls	r3, r3, #10
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	4313      	orrs	r3, r2
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	801a      	strh	r2, [r3, #0]
 8005fbe:	e056      	b.n	800606e <USB_EPStartXfer+0x51a>
 8005fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10a      	bne.n	8005fde <USB_EPStartXfer+0x48a>
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	801a      	strh	r2, [r3, #0]
 8005fdc:	e047      	b.n	800606e <USB_EPStartXfer+0x51a>
 8005fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe2:	085b      	lsrs	r3, r3, #1
 8005fe4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d004      	beq.n	8005ffe <USB_EPStartXfer+0x4aa>
 8005ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29a      	uxth	r2, r3
 8006004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006008:	b29b      	uxth	r3, r3
 800600a:	029b      	lsls	r3, r3, #10
 800600c:	b29b      	uxth	r3, r3
 800600e:	4313      	orrs	r3, r2
 8006010:	b29a      	uxth	r2, r3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	801a      	strh	r2, [r3, #0]
 8006016:	e02a      	b.n	800606e <USB_EPStartXfer+0x51a>
 8006018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d122      	bne.n	800606e <USB_EPStartXfer+0x51a>
 8006028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	623b      	str	r3, [r7, #32]
 8006034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006038:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006042:	b29b      	uxth	r3, r3
 8006044:	461a      	mov	r2, r3
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	4413      	add	r3, r2
 800604a:	623b      	str	r3, [r7, #32]
 800604c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	011a      	lsls	r2, r3, #4
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	4413      	add	r3, r2
 800605e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006062:	61fb      	str	r3, [r7, #28]
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006068:	b29a      	uxth	r2, r3
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800606e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	891b      	ldrh	r3, [r3, #8]
 800607a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800607e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6959      	ldr	r1, [r3, #20]
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608e:	b29b      	uxth	r3, r3
 8006090:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006094:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006098:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800609c:	6800      	ldr	r0, [r0, #0]
 800609e:	f001 fa48 	bl	8007532 <USB_WritePMA>
 80060a2:	e3ee      	b.n	8006882 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	785b      	ldrb	r3, [r3, #1]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d177      	bne.n	80061a4 <USB_EPStartXfer+0x650>
 80060b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	461a      	mov	r2, r3
 80060d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060d4:	4413      	add	r3, r2
 80060d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	011a      	lsls	r2, r3, #4
 80060e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060e8:	4413      	add	r3, r2
 80060ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80060f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060fe:	801a      	strh	r2, [r3, #0]
 8006100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006104:	2b3e      	cmp	r3, #62	@ 0x3e
 8006106:	d921      	bls.n	800614c <USB_EPStartXfer+0x5f8>
 8006108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	2b00      	cmp	r3, #0
 800611c:	d104      	bne.n	8006128 <USB_EPStartXfer+0x5d4>
 800611e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006122:	3b01      	subs	r3, #1
 8006124:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29a      	uxth	r2, r3
 800612e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006132:	b29b      	uxth	r3, r3
 8006134:	029b      	lsls	r3, r3, #10
 8006136:	b29b      	uxth	r3, r3
 8006138:	4313      	orrs	r3, r2
 800613a:	b29b      	uxth	r3, r3
 800613c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006144:	b29a      	uxth	r2, r3
 8006146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	e056      	b.n	80061fa <USB_EPStartXfer+0x6a6>
 800614c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <USB_EPStartXfer+0x616>
 8006154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006162:	b29a      	uxth	r2, r3
 8006164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	e047      	b.n	80061fa <USB_EPStartXfer+0x6a6>
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <USB_EPStartXfer+0x636>
 8006180:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006184:	3301      	adds	r3, #1
 8006186:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800618a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29a      	uxth	r2, r3
 8006190:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006194:	b29b      	uxth	r3, r3
 8006196:	029b      	lsls	r3, r3, #10
 8006198:	b29b      	uxth	r3, r3
 800619a:	4313      	orrs	r3, r2
 800619c:	b29a      	uxth	r2, r3
 800619e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061a0:	801a      	strh	r2, [r3, #0]
 80061a2:	e02a      	b.n	80061fa <USB_EPStartXfer+0x6a6>
 80061a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	785b      	ldrb	r3, [r3, #1]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d122      	bne.n	80061fa <USB_EPStartXfer+0x6a6>
 80061b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	653b      	str	r3, [r7, #80]	@ 0x50
 80061c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061d4:	4413      	add	r3, r2
 80061d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80061d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	011a      	lsls	r2, r3, #4
 80061e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061e8:	4413      	add	r3, r2
 80061ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	891b      	ldrh	r3, [r3, #8]
 8006206:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800620a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6959      	ldr	r1, [r3, #20]
 8006216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621a:	b29b      	uxth	r3, r3
 800621c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006220:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006224:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006228:	6800      	ldr	r0, [r0, #0]
 800622a:	f001 f982 	bl	8007532 <USB_WritePMA>
            ep->xfer_buff += len;
 800622e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695a      	ldr	r2, [r3, #20]
 800623a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623e:	441a      	add	r2, r3
 8006240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800624c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6a1a      	ldr	r2, [r3, #32]
 8006258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	429a      	cmp	r2, r3
 8006266:	d90f      	bls.n	8006288 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6a1a      	ldr	r2, [r3, #32]
 8006274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006278:	1ad2      	subs	r2, r2, r3
 800627a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	621a      	str	r2, [r3, #32]
 8006286:	e00e      	b.n	80062a6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2200      	movs	r2, #0
 80062a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80062b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d177      	bne.n	80063b2 <USB_EPStartXfer+0x85e>
 80062c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062dc:	b29b      	uxth	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e2:	4413      	add	r3, r2
 80062e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	011a      	lsls	r2, r3, #4
 80062f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f6:	4413      	add	r3, r2
 80062f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80062fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006308:	b29a      	uxth	r2, r3
 800630a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800630c:	801a      	strh	r2, [r3, #0]
 800630e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006312:	2b3e      	cmp	r3, #62	@ 0x3e
 8006314:	d921      	bls.n	800635a <USB_EPStartXfer+0x806>
 8006316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631a:	095b      	lsrs	r3, r3, #5
 800631c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006324:	f003 031f 	and.w	r3, r3, #31
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <USB_EPStartXfer+0x7e2>
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	3b01      	subs	r3, #1
 8006332:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29a      	uxth	r2, r3
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006340:	b29b      	uxth	r3, r3
 8006342:	029b      	lsls	r3, r3, #10
 8006344:	b29b      	uxth	r3, r3
 8006346:	4313      	orrs	r3, r2
 8006348:	b29b      	uxth	r3, r3
 800634a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800634e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006352:	b29a      	uxth	r2, r3
 8006354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006356:	801a      	strh	r2, [r3, #0]
 8006358:	e050      	b.n	80063fc <USB_EPStartXfer+0x8a8>
 800635a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10a      	bne.n	8006378 <USB_EPStartXfer+0x824>
 8006362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29b      	uxth	r3, r3
 8006368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800636c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006370:	b29a      	uxth	r2, r3
 8006372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e041      	b.n	80063fc <USB_EPStartXfer+0x8a8>
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637c:	085b      	lsrs	r3, r3, #1
 800637e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d004      	beq.n	8006398 <USB_EPStartXfer+0x844>
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006392:	3301      	adds	r3, #1
 8006394:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29a      	uxth	r2, r3
 800639e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	029b      	lsls	r3, r3, #10
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	4313      	orrs	r3, r2
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ae:	801a      	strh	r2, [r3, #0]
 80063b0:	e024      	b.n	80063fc <USB_EPStartXfer+0x8a8>
 80063b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	785b      	ldrb	r3, [r3, #1]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d11c      	bne.n	80063fc <USB_EPStartXfer+0x8a8>
 80063c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	461a      	mov	r2, r3
 80063d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063d6:	4413      	add	r3, r2
 80063d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80063da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	011a      	lsls	r2, r3, #4
 80063e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063ea:	4413      	add	r3, r2
 80063ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	895b      	ldrh	r3, [r3, #10]
 8006408:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800640c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6959      	ldr	r1, [r3, #20]
 8006418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641c:	b29b      	uxth	r3, r3
 800641e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006422:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006426:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800642a:	6800      	ldr	r0, [r0, #0]
 800642c:	f001 f881 	bl	8007532 <USB_WritePMA>
 8006430:	e227      	b.n	8006882 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006468:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800646c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006470:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	441a      	add	r2, r3
 8006486:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800648a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800648e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800649a:	b29b      	uxth	r3, r3
 800649c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800649e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	461a      	mov	r2, r3
 80064bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064be:	4413      	add	r3, r2
 80064c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	011a      	lsls	r2, r3, #4
 80064d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064d2:	4413      	add	r3, r2
 80064d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064de:	b29a      	uxth	r2, r3
 80064e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	891b      	ldrh	r3, [r3, #8]
 80064f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6959      	ldr	r1, [r3, #20]
 8006500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006504:	b29b      	uxth	r3, r3
 8006506:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800650a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800650e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006512:	6800      	ldr	r0, [r0, #0]
 8006514:	f001 f80d 	bl	8007532 <USB_WritePMA>
 8006518:	e1b3      	b.n	8006882 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800651a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652a:	1ad2      	subs	r2, r2, r3
 800652c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 80c6 	beq.w	80066ec <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006564:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	673b      	str	r3, [r7, #112]	@ 0x70
 800656c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d177      	bne.n	800666c <USB_EPStartXfer+0xb18>
 800657c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006580:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006596:	b29b      	uxth	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800659c:	4413      	add	r3, r2
 800659e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	011a      	lsls	r2, r3, #4
 80065ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80065b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065c6:	801a      	strh	r2, [r3, #0]
 80065c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80065ce:	d921      	bls.n	8006614 <USB_EPStartXfer+0xac0>
 80065d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d4:	095b      	lsrs	r3, r3, #5
 80065d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80065da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d104      	bne.n	80065f0 <USB_EPStartXfer+0xa9c>
 80065e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80065ea:	3b01      	subs	r3, #1
 80065ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80065f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	029b      	lsls	r3, r3, #10
 80065fe:	b29b      	uxth	r3, r3
 8006600:	4313      	orrs	r3, r2
 8006602:	b29b      	uxth	r3, r3
 8006604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660c:	b29a      	uxth	r2, r3
 800660e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006610:	801a      	strh	r2, [r3, #0]
 8006612:	e050      	b.n	80066b6 <USB_EPStartXfer+0xb62>
 8006614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <USB_EPStartXfer+0xade>
 800661c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662a:	b29a      	uxth	r2, r3
 800662c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	e041      	b.n	80066b6 <USB_EPStartXfer+0xb62>
 8006632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006636:	085b      	lsrs	r3, r3, #1
 8006638:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d004      	beq.n	8006652 <USB_EPStartXfer+0xafe>
 8006648:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800664c:	3301      	adds	r3, #1
 800664e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006652:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	b29a      	uxth	r2, r3
 8006658:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800665c:	b29b      	uxth	r3, r3
 800665e:	029b      	lsls	r3, r3, #10
 8006660:	b29b      	uxth	r3, r3
 8006662:	4313      	orrs	r3, r2
 8006664:	b29a      	uxth	r2, r3
 8006666:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006668:	801a      	strh	r2, [r3, #0]
 800666a:	e024      	b.n	80066b6 <USB_EPStartXfer+0xb62>
 800666c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d11c      	bne.n	80066b6 <USB_EPStartXfer+0xb62>
 800667c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006680:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800668a:	b29b      	uxth	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006690:	4413      	add	r3, r2
 8006692:	673b      	str	r3, [r7, #112]	@ 0x70
 8006694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	011a      	lsls	r2, r3, #4
 80066a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066a4:	4413      	add	r3, r2
 80066a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80066b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	895b      	ldrh	r3, [r3, #10]
 80066c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6959      	ldr	r1, [r3, #20]
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066e4:	6800      	ldr	r0, [r0, #0]
 80066e6:	f000 ff24 	bl	8007532 <USB_WritePMA>
 80066ea:	e0ca      	b.n	8006882 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	785b      	ldrb	r3, [r3, #1]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d177      	bne.n	80067ec <USB_EPStartXfer+0xc98>
 80066fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800670c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006716:	b29b      	uxth	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800671c:	4413      	add	r3, r2
 800671e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	011a      	lsls	r2, r3, #4
 800672e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006730:	4413      	add	r3, r2
 8006732:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006736:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006738:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29b      	uxth	r3, r3
 800673e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006742:	b29a      	uxth	r2, r3
 8006744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006746:	801a      	strh	r2, [r3, #0]
 8006748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674c:	2b3e      	cmp	r3, #62	@ 0x3e
 800674e:	d921      	bls.n	8006794 <USB_EPStartXfer+0xc40>
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800675a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	2b00      	cmp	r3, #0
 8006764:	d104      	bne.n	8006770 <USB_EPStartXfer+0xc1c>
 8006766:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800676a:	3b01      	subs	r3, #1
 800676c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006770:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29a      	uxth	r2, r3
 8006776:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800677a:	b29b      	uxth	r3, r3
 800677c:	029b      	lsls	r3, r3, #10
 800677e:	b29b      	uxth	r3, r3
 8006780:	4313      	orrs	r3, r2
 8006782:	b29b      	uxth	r3, r3
 8006784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800678c:	b29a      	uxth	r2, r3
 800678e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006790:	801a      	strh	r2, [r3, #0]
 8006792:	e05c      	b.n	800684e <USB_EPStartXfer+0xcfa>
 8006794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10a      	bne.n	80067b2 <USB_EPStartXfer+0xc5e>
 800679c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067ae:	801a      	strh	r2, [r3, #0]
 80067b0:	e04d      	b.n	800684e <USB_EPStartXfer+0xcfa>
 80067b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80067bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d004      	beq.n	80067d2 <USB_EPStartXfer+0xc7e>
 80067c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80067cc:	3301      	adds	r3, #1
 80067ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80067d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80067dc:	b29b      	uxth	r3, r3
 80067de:	029b      	lsls	r3, r3, #10
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	4313      	orrs	r3, r2
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067e8:	801a      	strh	r2, [r3, #0]
 80067ea:	e030      	b.n	800684e <USB_EPStartXfer+0xcfa>
 80067ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d128      	bne.n	800684e <USB_EPStartXfer+0xcfa>
 80067fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006800:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800680a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006818:	b29b      	uxth	r3, r3
 800681a:	461a      	mov	r2, r3
 800681c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006820:	4413      	add	r3, r2
 8006822:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	011a      	lsls	r2, r3, #4
 8006834:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006838:	4413      	add	r3, r2
 800683a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800683e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006846:	b29a      	uxth	r2, r3
 8006848:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800684c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800684e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	891b      	ldrh	r3, [r3, #8]
 800685a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800685e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6959      	ldr	r1, [r3, #20]
 800686a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686e:	b29b      	uxth	r3, r3
 8006870:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006874:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006878:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800687c:	6800      	ldr	r0, [r0, #0]
 800687e:	f000 fe58 	bl	8007532 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006886:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068a8:	817b      	strh	r3, [r7, #10]
 80068aa:	897b      	ldrh	r3, [r7, #10]
 80068ac:	f083 0310 	eor.w	r3, r3, #16
 80068b0:	817b      	strh	r3, [r7, #10]
 80068b2:	897b      	ldrh	r3, [r7, #10]
 80068b4:	f083 0320 	eor.w	r3, r3, #32
 80068b8:	817b      	strh	r3, [r7, #10]
 80068ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	441a      	add	r2, r3
 80068d4:	897b      	ldrh	r3, [r7, #10]
 80068d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8013      	strh	r3, [r2, #0]
 80068ea:	f000 bcde 	b.w	80072aa <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80068ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	7b1b      	ldrb	r3, [r3, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f040 80bb 	bne.w	8006a76 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	699a      	ldr	r2, [r3, #24]
 800690c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	429a      	cmp	r2, r3
 800691a:	d917      	bls.n	800694c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800691c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800692c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699a      	ldr	r2, [r3, #24]
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693c:	1ad2      	subs	r2, r2, r3
 800693e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	619a      	str	r2, [r3, #24]
 800694a:	e00e      	b.n	800696a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800694c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800695c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2200      	movs	r2, #0
 8006968:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800696a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006986:	b29b      	uxth	r3, r3
 8006988:	461a      	mov	r2, r3
 800698a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800698e:	4413      	add	r3, r2
 8006990:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	011a      	lsls	r2, r3, #4
 80069a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80069a6:	4413      	add	r3, r2
 80069a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80069ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80069b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069bc:	b29a      	uxth	r2, r3
 80069be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069c2:	801a      	strh	r2, [r3, #0]
 80069c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80069ca:	d924      	bls.n	8006a16 <USB_EPStartXfer+0xec2>
 80069cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80069d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069da:	f003 031f 	and.w	r3, r3, #31
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d104      	bne.n	80069ec <USB_EPStartXfer+0xe98>
 80069e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80069e6:	3b01      	subs	r3, #1
 80069e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80069ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	029b      	lsls	r3, r3, #10
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	4313      	orrs	r3, r2
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a10:	801a      	strh	r2, [r3, #0]
 8006a12:	f000 bc10 	b.w	8007236 <USB_EPStartXfer+0x16e2>
 8006a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10c      	bne.n	8006a38 <USB_EPStartXfer+0xee4>
 8006a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a34:	801a      	strh	r2, [r3, #0]
 8006a36:	e3fe      	b.n	8007236 <USB_EPStartXfer+0x16e2>
 8006a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a3c:	085b      	lsrs	r3, r3, #1
 8006a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d004      	beq.n	8006a58 <USB_EPStartXfer+0xf04>
 8006a4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006a52:	3301      	adds	r3, #1
 8006a54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	029b      	lsls	r3, r3, #10
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a72:	801a      	strh	r2, [r3, #0]
 8006a74:	e3df      	b.n	8007236 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	78db      	ldrb	r3, [r3, #3]
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	f040 8218 	bne.w	8006eb8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f040 809d 	bne.w	8006bd4 <USB_EPStartXfer+0x1080>
 8006a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006abe:	4413      	add	r3, r2
 8006ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	011a      	lsls	r2, r3, #4
 8006ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006adc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006af2:	801a      	strh	r2, [r3, #0]
 8006af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b02:	d92b      	bls.n	8006b5c <USB_EPStartXfer+0x1008>
 8006b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	095b      	lsrs	r3, r3, #5
 8006b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f003 031f 	and.w	r3, r3, #31
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d104      	bne.n	8006b34 <USB_EPStartXfer+0xfe0>
 8006b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	029b      	lsls	r3, r3, #10
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	4313      	orrs	r3, r2
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b58:	801a      	strh	r2, [r3, #0]
 8006b5a:	e070      	b.n	8006c3e <USB_EPStartXfer+0x10ea>
 8006b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10c      	bne.n	8006b86 <USB_EPStartXfer+0x1032>
 8006b6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	e05b      	b.n	8006c3e <USB_EPStartXfer+0x10ea>
 8006b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	085b      	lsrs	r3, r3, #1
 8006b94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d004      	beq.n	8006bb6 <USB_EPStartXfer+0x1062>
 8006bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	029b      	lsls	r3, r3, #10
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bd0:	801a      	strh	r2, [r3, #0]
 8006bd2:	e034      	b.n	8006c3e <USB_EPStartXfer+0x10ea>
 8006bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d12c      	bne.n	8006c3e <USB_EPStartXfer+0x10ea>
 8006be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	461a      	mov	r2, r3
 8006c04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c08:	4413      	add	r3, r2
 8006c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	011a      	lsls	r2, r3, #4
 8006c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c20:	4413      	add	r3, r2
 8006c22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006c3c:	801a      	strh	r2, [r3, #0]
 8006c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f040 809d 	bne.w	8006d98 <USB_EPStartXfer+0x1244>
 8006c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c82:	4413      	add	r3, r2
 8006c84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	011a      	lsls	r2, r3, #4
 8006c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cc6:	d92b      	bls.n	8006d20 <USB_EPStartXfer+0x11cc>
 8006cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	095b      	lsrs	r3, r3, #5
 8006cd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 031f 	and.w	r3, r3, #31
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d104      	bne.n	8006cf8 <USB_EPStartXfer+0x11a4>
 8006cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	029b      	lsls	r3, r3, #10
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d1c:	801a      	strh	r2, [r3, #0]
 8006d1e:	e069      	b.n	8006df4 <USB_EPStartXfer+0x12a0>
 8006d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10c      	bne.n	8006d4a <USB_EPStartXfer+0x11f6>
 8006d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d46:	801a      	strh	r2, [r3, #0]
 8006d48:	e054      	b.n	8006df4 <USB_EPStartXfer+0x12a0>
 8006d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	085b      	lsrs	r3, r3, #1
 8006d58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d004      	beq.n	8006d7a <USB_EPStartXfer+0x1226>
 8006d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d74:	3301      	adds	r3, #1
 8006d76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	029b      	lsls	r3, r3, #10
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d94:	801a      	strh	r2, [r3, #0]
 8006d96:	e02d      	b.n	8006df4 <USB_EPStartXfer+0x12a0>
 8006d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	785b      	ldrb	r3, [r3, #1]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d125      	bne.n	8006df4 <USB_EPStartXfer+0x12a0>
 8006da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	461a      	mov	r2, r3
 8006dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	011a      	lsls	r2, r3, #4
 8006dd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006df2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8218 	beq.w	8007236 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e26:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d005      	beq.n	8006e3e <USB_EPStartXfer+0x12ea>
 8006e32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10d      	bne.n	8006e5a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f040 81f5 	bne.w	8007236 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e4c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f040 81ee 	bne.w	8007236 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e80:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	441a      	add	r2, r3
 8006e9e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006ea2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ea6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	8013      	strh	r3, [r2, #0]
 8006eb6:	e1be      	b.n	8007236 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	78db      	ldrb	r3, [r3, #3]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	f040 81b4 	bne.w	8007232 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699a      	ldr	r2, [r3, #24]
 8006ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d917      	bls.n	8006f16 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	699a      	ldr	r2, [r3, #24]
 8006f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f06:	1ad2      	subs	r2, r2, r3
 8006f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	619a      	str	r2, [r3, #24]
 8006f14:	e00e      	b.n	8006f34 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2200      	movs	r2, #0
 8006f32:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	785b      	ldrb	r3, [r3, #1]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f040 8085 	bne.w	8007050 <USB_EPStartXfer+0x14fc>
 8006f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	011a      	lsls	r2, r3, #4
 8006f7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f82:	4413      	add	r3, r2
 8006f84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f9e:	801a      	strh	r2, [r3, #0]
 8006fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fa6:	d923      	bls.n	8006ff0 <USB_EPStartXfer+0x149c>
 8006fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d104      	bne.n	8006fc8 <USB_EPStartXfer+0x1474>
 8006fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006fc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	029b      	lsls	r3, r3, #10
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fec:	801a      	strh	r2, [r3, #0]
 8006fee:	e060      	b.n	80070b2 <USB_EPStartXfer+0x155e>
 8006ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10c      	bne.n	8007012 <USB_EPStartXfer+0x14be>
 8006ff8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007008:	b29a      	uxth	r2, r3
 800700a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800700e:	801a      	strh	r2, [r3, #0]
 8007010:	e04f      	b.n	80070b2 <USB_EPStartXfer+0x155e>
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007016:	085b      	lsrs	r3, r3, #1
 8007018:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800701c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	d004      	beq.n	8007032 <USB_EPStartXfer+0x14de>
 8007028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800702c:	3301      	adds	r3, #1
 800702e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	b29a      	uxth	r2, r3
 800703a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800703e:	b29b      	uxth	r3, r3
 8007040:	029b      	lsls	r3, r3, #10
 8007042:	b29b      	uxth	r3, r3
 8007044:	4313      	orrs	r3, r2
 8007046:	b29a      	uxth	r2, r3
 8007048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800704c:	801a      	strh	r2, [r3, #0]
 800704e:	e030      	b.n	80070b2 <USB_EPStartXfer+0x155e>
 8007050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d128      	bne.n	80070b2 <USB_EPStartXfer+0x155e>
 8007060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007064:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800706e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007072:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800707c:	b29b      	uxth	r3, r3
 800707e:	461a      	mov	r2, r3
 8007080:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007084:	4413      	add	r3, r2
 8007086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800708a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	011a      	lsls	r2, r3, #4
 8007098:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800709c:	4413      	add	r3, r2
 800709e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80070c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	785b      	ldrb	r3, [r3, #1]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f040 8085 	bne.w	80071dc <USB_EPStartXfer+0x1688>
 80070d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80070e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	461a      	mov	r2, r3
 80070f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80070f6:	4413      	add	r3, r2
 80070f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80070fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	011a      	lsls	r2, r3, #4
 800710a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800710e:	4413      	add	r3, r2
 8007110:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007114:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007118:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	b29b      	uxth	r3, r3
 8007120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007124:	b29a      	uxth	r2, r3
 8007126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800712a:	801a      	strh	r2, [r3, #0]
 800712c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007130:	2b3e      	cmp	r3, #62	@ 0x3e
 8007132:	d923      	bls.n	800717c <USB_EPStartXfer+0x1628>
 8007134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007138:	095b      	lsrs	r3, r3, #5
 800713a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800713e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	2b00      	cmp	r3, #0
 8007148:	d104      	bne.n	8007154 <USB_EPStartXfer+0x1600>
 800714a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800714e:	3b01      	subs	r3, #1
 8007150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007154:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29a      	uxth	r2, r3
 800715c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007160:	b29b      	uxth	r3, r3
 8007162:	029b      	lsls	r3, r3, #10
 8007164:	b29b      	uxth	r3, r3
 8007166:	4313      	orrs	r3, r2
 8007168:	b29b      	uxth	r3, r3
 800716a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007172:	b29a      	uxth	r2, r3
 8007174:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007178:	801a      	strh	r2, [r3, #0]
 800717a:	e05c      	b.n	8007236 <USB_EPStartXfer+0x16e2>
 800717c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10c      	bne.n	800719e <USB_EPStartXfer+0x164a>
 8007184:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007194:	b29a      	uxth	r2, r3
 8007196:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	e04b      	b.n	8007236 <USB_EPStartXfer+0x16e2>
 800719e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a2:	085b      	lsrs	r3, r3, #1
 80071a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <USB_EPStartXfer+0x166a>
 80071b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071b8:	3301      	adds	r3, #1
 80071ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	029b      	lsls	r3, r3, #10
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	4313      	orrs	r3, r2
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071d8:	801a      	strh	r2, [r3, #0]
 80071da:	e02c      	b.n	8007236 <USB_EPStartXfer+0x16e2>
 80071dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	785b      	ldrb	r3, [r3, #1]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d124      	bne.n	8007236 <USB_EPStartXfer+0x16e2>
 80071ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007202:	4413      	add	r3, r2
 8007204:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	011a      	lsls	r2, r3, #4
 8007216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800721a:	4413      	add	r3, r2
 800721c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007220:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007228:	b29a      	uxth	r2, r3
 800722a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800722e:	801a      	strh	r2, [r3, #0]
 8007230:	e001      	b.n	8007236 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e03a      	b.n	80072ac <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800725c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007260:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007264:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007268:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800726c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007270:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007274:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800727c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007286:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	441a      	add	r2, r3
 8007292:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800729a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800729e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	785b      	ldrb	r3, [r3, #1]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d020      	beq.n	800730a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072de:	81bb      	strh	r3, [r7, #12]
 80072e0:	89bb      	ldrh	r3, [r7, #12]
 80072e2:	f083 0310 	eor.w	r3, r3, #16
 80072e6:	81bb      	strh	r3, [r7, #12]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	441a      	add	r2, r3
 80072f2:	89bb      	ldrh	r3, [r7, #12]
 80072f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007304:	b29b      	uxth	r3, r3
 8007306:	8013      	strh	r3, [r2, #0]
 8007308:	e01f      	b.n	800734a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800731c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007320:	81fb      	strh	r3, [r7, #14]
 8007322:	89fb      	ldrh	r3, [r7, #14]
 8007324:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007328:	81fb      	strh	r3, [r7, #14]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	441a      	add	r2, r3
 8007334:	89fb      	ldrh	r3, [r7, #14]
 8007336:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800733a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800733e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007346:	b29b      	uxth	r3, r3
 8007348:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	bc80      	pop	{r7}
 8007354:	4770      	bx	lr

08007356 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007356:	b480      	push	{r7}
 8007358:	b087      	sub	sp, #28
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	7b1b      	ldrb	r3, [r3, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	f040 809d 	bne.w	80074a4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d04c      	beq.n	800740c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	823b      	strh	r3, [r7, #16]
 8007380:	8a3b      	ldrh	r3, [r7, #16]
 8007382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01b      	beq.n	80073c2 <USB_EPClearStall+0x6c>
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800739c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a0:	81fb      	strh	r3, [r7, #14]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	441a      	add	r2, r3
 80073ac:	89fb      	ldrh	r3, [r7, #14]
 80073ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80073be:	b29b      	uxth	r3, r3
 80073c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	78db      	ldrb	r3, [r3, #3]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d06c      	beq.n	80074a4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073e0:	81bb      	strh	r3, [r7, #12]
 80073e2:	89bb      	ldrh	r3, [r7, #12]
 80073e4:	f083 0320 	eor.w	r3, r3, #32
 80073e8:	81bb      	strh	r3, [r7, #12]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	441a      	add	r2, r3
 80073f4:	89bb      	ldrh	r3, [r7, #12]
 80073f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007406:	b29b      	uxth	r3, r3
 8007408:	8013      	strh	r3, [r2, #0]
 800740a:	e04b      	b.n	80074a4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	881b      	ldrh	r3, [r3, #0]
 8007418:	82fb      	strh	r3, [r7, #22]
 800741a:	8afb      	ldrh	r3, [r7, #22]
 800741c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01b      	beq.n	800745c <USB_EPClearStall+0x106>
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800743a:	82bb      	strh	r3, [r7, #20]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	441a      	add	r2, r3
 8007446:	8abb      	ldrh	r3, [r7, #20]
 8007448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800744c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007450:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007458:	b29b      	uxth	r3, r3
 800745a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	b29b      	uxth	r3, r3
 800746a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800746e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007472:	827b      	strh	r3, [r7, #18]
 8007474:	8a7b      	ldrh	r3, [r7, #18]
 8007476:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800747a:	827b      	strh	r3, [r7, #18]
 800747c:	8a7b      	ldrh	r3, [r7, #18]
 800747e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007482:	827b      	strh	r3, [r7, #18]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	441a      	add	r2, r3
 800748e:	8a7b      	ldrh	r3, [r7, #18]
 8007490:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007494:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800749c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bc80      	pop	{r7}
 80074ae:	4770      	bx	lr

080074b0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d103      	bne.n	80074ca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2280      	movs	r2, #128	@ 0x80
 80074c6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr

080074d6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr

080074ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bc80      	pop	{r7}
 80074fc:	4770      	bx	lr

080074fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80074fe:	b480      	push	{r7}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800750c:	b29b      	uxth	r3, r3
 800750e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007510:	68fb      	ldr	r3, [r7, #12]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr

0800751c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	bc80      	pop	{r7}
 8007530:	4770      	bx	lr

08007532 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007532:	b480      	push	{r7}
 8007534:	b08b      	sub	sp, #44	@ 0x2c
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	4611      	mov	r1, r2
 800753e:	461a      	mov	r2, r3
 8007540:	460b      	mov	r3, r1
 8007542:	80fb      	strh	r3, [r7, #6]
 8007544:	4613      	mov	r3, r2
 8007546:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007548:	88bb      	ldrh	r3, [r7, #4]
 800754a:	3301      	adds	r3, #1
 800754c:	085b      	lsrs	r3, r3, #1
 800754e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007558:	88fb      	ldrh	r3, [r7, #6]
 800755a:	005a      	lsls	r2, r3, #1
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007564:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	627b      	str	r3, [r7, #36]	@ 0x24
 800756a:	e01f      	b.n	80075ac <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	3301      	adds	r3, #1
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	b21b      	sxth	r3, r3
 800757a:	021b      	lsls	r3, r3, #8
 800757c:	b21a      	sxth	r2, r3
 800757e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007582:	4313      	orrs	r3, r2
 8007584:	b21b      	sxth	r3, r3
 8007586:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	8a7a      	ldrh	r2, [r7, #18]
 800758c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	3302      	adds	r3, #2
 8007592:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	3302      	adds	r3, #2
 8007598:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	3301      	adds	r3, #1
 800759e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	3301      	adds	r3, #1
 80075a4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80075a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a8:	3b01      	subs	r3, #1
 80075aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80075ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1dc      	bne.n	800756c <USB_WritePMA+0x3a>
  }
}
 80075b2:	bf00      	nop
 80075b4:	bf00      	nop
 80075b6:	372c      	adds	r7, #44	@ 0x2c
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bc80      	pop	{r7}
 80075bc:	4770      	bx	lr

080075be <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075be:	b480      	push	{r7}
 80075c0:	b08b      	sub	sp, #44	@ 0x2c
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	4611      	mov	r1, r2
 80075ca:	461a      	mov	r2, r3
 80075cc:	460b      	mov	r3, r1
 80075ce:	80fb      	strh	r3, [r7, #6]
 80075d0:	4613      	mov	r3, r2
 80075d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80075d4:	88bb      	ldrh	r3, [r7, #4]
 80075d6:	085b      	lsrs	r3, r3, #1
 80075d8:	b29b      	uxth	r3, r3
 80075da:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	005a      	lsls	r2, r3, #1
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075f0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80075f6:	e01b      	b.n	8007630 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	3302      	adds	r3, #2
 8007604:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	b2da      	uxtb	r2, r3
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	3301      	adds	r3, #1
 8007612:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	0a1b      	lsrs	r3, r3, #8
 8007618:	b2da      	uxtb	r2, r3
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	3301      	adds	r3, #1
 8007622:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	3302      	adds	r3, #2
 8007628:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	3b01      	subs	r3, #1
 800762e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e0      	bne.n	80075f8 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007636:	88bb      	ldrh	r3, [r7, #4]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	b29b      	uxth	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	b29b      	uxth	r3, r3
 8007648:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	b2da      	uxtb	r2, r3
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	701a      	strb	r2, [r3, #0]
  }
}
 8007652:	bf00      	nop
 8007654:	372c      	adds	r7, #44	@ 0x2c
 8007656:	46bd      	mov	sp, r7
 8007658:	bc80      	pop	{r7}
 800765a:	4770      	bx	lr

0800765c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	7c1b      	ldrb	r3, [r3, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d115      	bne.n	80076a0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007674:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007678:	2202      	movs	r2, #2
 800767a:	2181      	movs	r1, #129	@ 0x81
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 ff12 	bl	80094a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007688:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800768c:	2202      	movs	r2, #2
 800768e:	2101      	movs	r1, #1
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 ff08 	bl	80094a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800769e:	e012      	b.n	80076c6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80076a0:	2340      	movs	r3, #64	@ 0x40
 80076a2:	2202      	movs	r2, #2
 80076a4:	2181      	movs	r1, #129	@ 0x81
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f001 fefd 	bl	80094a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80076b2:	2340      	movs	r3, #64	@ 0x40
 80076b4:	2202      	movs	r2, #2
 80076b6:	2101      	movs	r1, #1
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 fef4 	bl	80094a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80076c6:	2308      	movs	r3, #8
 80076c8:	2203      	movs	r2, #3
 80076ca:	2182      	movs	r1, #130	@ 0x82
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f001 feea 	bl	80094a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80076d8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80076dc:	f002 f80a 	bl	80096f4 <USBD_static_malloc>
 80076e0:	4602      	mov	r2, r0
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d102      	bne.n	80076f8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80076f2:	2301      	movs	r3, #1
 80076f4:	73fb      	strb	r3, [r7, #15]
 80076f6:	e026      	b.n	8007746 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076fe:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2200      	movs	r2, #0
 800770e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2200      	movs	r2, #0
 8007716:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	7c1b      	ldrb	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d109      	bne.n	8007736 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007728:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800772c:	2101      	movs	r1, #1
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 ffa9 	bl	8009686 <USBD_LL_PrepareReceive>
 8007734:	e007      	b.n	8007746 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800773c:	2340      	movs	r3, #64	@ 0x40
 800773e:	2101      	movs	r1, #1
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 ffa0 	bl	8009686 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007746:	7bfb      	ldrb	r3, [r7, #15]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007760:	2181      	movs	r1, #129	@ 0x81
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f001 fec5 	bl	80094f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800776e:	2101      	movs	r1, #1
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 febe 	bl	80094f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800777e:	2182      	movs	r1, #130	@ 0x82
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 feb6 	bl	80094f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00e      	beq.n	80077b4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077a6:	4618      	mov	r0, r3
 80077a8:	f001 ffb0 	bl	800970c <USBD_static_free>
    pdev->pClassData = NULL;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b086      	sub	sp, #24
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ce:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d039      	beq.n	800785c <USBD_CDC_Setup+0x9e>
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	d17f      	bne.n	80078ec <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	88db      	ldrh	r3, [r3, #6]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d029      	beq.n	8007848 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	b25b      	sxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	da11      	bge.n	8007822 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800780a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	88d2      	ldrh	r2, [r2, #6]
 8007810:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007812:	6939      	ldr	r1, [r7, #16]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	88db      	ldrh	r3, [r3, #6]
 8007818:	461a      	mov	r2, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 f9d6 	bl	8008bcc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007820:	e06b      	b.n	80078fa <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	785a      	ldrb	r2, [r3, #1]
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	88db      	ldrh	r3, [r3, #6]
 8007830:	b2da      	uxtb	r2, r3
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007838:	6939      	ldr	r1, [r7, #16]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	88db      	ldrh	r3, [r3, #6]
 800783e:	461a      	mov	r2, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 f9f1 	bl	8008c28 <USBD_CtlPrepareRx>
      break;
 8007846:	e058      	b.n	80078fa <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	7850      	ldrb	r0, [r2, #1]
 8007854:	2200      	movs	r2, #0
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	4798      	blx	r3
      break;
 800785a:	e04e      	b.n	80078fa <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	785b      	ldrb	r3, [r3, #1]
 8007860:	2b0b      	cmp	r3, #11
 8007862:	d02e      	beq.n	80078c2 <USBD_CDC_Setup+0x104>
 8007864:	2b0b      	cmp	r3, #11
 8007866:	dc38      	bgt.n	80078da <USBD_CDC_Setup+0x11c>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <USBD_CDC_Setup+0xb4>
 800786c:	2b0a      	cmp	r3, #10
 800786e:	d014      	beq.n	800789a <USBD_CDC_Setup+0xdc>
 8007870:	e033      	b.n	80078da <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007878:	2b03      	cmp	r3, #3
 800787a:	d107      	bne.n	800788c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800787c:	f107 030c 	add.w	r3, r7, #12
 8007880:	2202      	movs	r2, #2
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 f9a1 	bl	8008bcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800788a:	e02e      	b.n	80078ea <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f001 f932 	bl	8008af8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007894:	2302      	movs	r3, #2
 8007896:	75fb      	strb	r3, [r7, #23]
          break;
 8007898:	e027      	b.n	80078ea <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d107      	bne.n	80078b4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80078a4:	f107 030f 	add.w	r3, r7, #15
 80078a8:	2201      	movs	r2, #1
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f001 f98d 	bl	8008bcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078b2:	e01a      	b.n	80078ea <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 f91e 	bl	8008af8 <USBD_CtlError>
            ret = USBD_FAIL;
 80078bc:	2302      	movs	r3, #2
 80078be:	75fb      	strb	r3, [r7, #23]
          break;
 80078c0:	e013      	b.n	80078ea <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d00d      	beq.n	80078e8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 f912 	bl	8008af8 <USBD_CtlError>
            ret = USBD_FAIL;
 80078d4:	2302      	movs	r3, #2
 80078d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80078d8:	e006      	b.n	80078e8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 f90b 	bl	8008af8 <USBD_CtlError>
          ret = USBD_FAIL;
 80078e2:	2302      	movs	r3, #2
 80078e4:	75fb      	strb	r3, [r7, #23]
          break;
 80078e6:	e000      	b.n	80078ea <USBD_CDC_Setup+0x12c>
          break;
 80078e8:	bf00      	nop
      }
      break;
 80078ea:	e006      	b.n	80078fa <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f001 f902 	bl	8008af8 <USBD_CtlError>
      ret = USBD_FAIL;
 80078f4:	2302      	movs	r3, #2
 80078f6:	75fb      	strb	r3, [r7, #23]
      break;
 80078f8:	bf00      	nop
  }

  return ret;
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007916:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800791e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007926:	2b00      	cmp	r3, #0
 8007928:	d03a      	beq.n	80079a0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800792a:	78fa      	ldrb	r2, [r7, #3]
 800792c:	6879      	ldr	r1, [r7, #4]
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	440b      	add	r3, r1
 8007938:	331c      	adds	r3, #28
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d029      	beq.n	8007994 <USBD_CDC_DataIn+0x90>
 8007940:	78fa      	ldrb	r2, [r7, #3]
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	4613      	mov	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	440b      	add	r3, r1
 800794e:	331c      	adds	r3, #28
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	78f9      	ldrb	r1, [r7, #3]
 8007954:	68b8      	ldr	r0, [r7, #8]
 8007956:	460b      	mov	r3, r1
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	440b      	add	r3, r1
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	4403      	add	r3, r0
 8007960:	3320      	adds	r3, #32
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	fbb2 f1f3 	udiv	r1, r2, r3
 8007968:	fb01 f303 	mul.w	r3, r1, r3
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d110      	bne.n	8007994 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007972:	78fa      	ldrb	r2, [r7, #3]
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	4613      	mov	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	440b      	add	r3, r1
 8007980:	331c      	adds	r3, #28
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007986:	78f9      	ldrb	r1, [r7, #3]
 8007988:	2300      	movs	r3, #0
 800798a:	2200      	movs	r2, #0
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f001 fe57 	bl	8009640 <USBD_LL_Transmit>
 8007992:	e003      	b.n	800799c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	e000      	b.n	80079a2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80079a0:	2302      	movs	r3, #2
  }
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	460b      	mov	r3, r1
 80079b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079bc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 fe82 	bl	80096cc <USBD_LL_GetRxDataSize>
 80079c8:	4602      	mov	r2, r0
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00d      	beq.n	80079f6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80079ee:	4611      	mov	r1, r2
 80079f0:	4798      	blx	r3

    return USBD_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	e000      	b.n	80079f8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80079f6:	2302      	movs	r3, #2
  }
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a0e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d014      	beq.n	8007a44 <USBD_CDC_EP0_RxReady+0x44>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007a20:	2bff      	cmp	r3, #255	@ 0xff
 8007a22:	d00f      	beq.n	8007a44 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007a32:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	22ff      	movs	r2, #255	@ 0xff
 8007a40:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2243      	movs	r2, #67	@ 0x43
 8007a5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007a5e:	4b03      	ldr	r3, [pc, #12]	@ (8007a6c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	2000009c 	.word	0x2000009c

08007a70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2243      	movs	r2, #67	@ 0x43
 8007a7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007a7e:	4b03      	ldr	r3, [pc, #12]	@ (8007a8c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bc80      	pop	{r7}
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	20000058 	.word	0x20000058

08007a90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2243      	movs	r2, #67	@ 0x43
 8007a9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007a9e:	4b03      	ldr	r3, [pc, #12]	@ (8007aac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bc80      	pop	{r7}
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	200000e0 	.word	0x200000e0

08007ab0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	220a      	movs	r2, #10
 8007abc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007abe:	4b03      	ldr	r3, [pc, #12]	@ (8007acc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bc80      	pop	{r7}
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	20000014 	.word	0x20000014

08007ad0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007ada:	2302      	movs	r3, #2
 8007adc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bc80      	pop	{r7}
 8007afa:	4770      	bx	lr

08007afc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b10:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007b1a:	88fa      	ldrh	r2, [r7, #6]
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bc80      	pop	{r7}
 8007b2c:	4770      	bx	lr

08007b2e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b085      	sub	sp, #20
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b3e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bc80      	pop	{r7}
 8007b52:	4770      	bx	lr

08007b54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d017      	beq.n	8007b9e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	7c1b      	ldrb	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d109      	bne.n	8007b8a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b80:	2101      	movs	r1, #1
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 fd7f 	bl	8009686 <USBD_LL_PrepareReceive>
 8007b88:	e007      	b.n	8007b9a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b90:	2340      	movs	r3, #64	@ 0x40
 8007b92:	2101      	movs	r1, #1
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 fd76 	bl	8009686 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e000      	b.n	8007ba0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007b9e:	2302      	movs	r3, #2
  }
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e01a      	b.n	8007bf6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	79fa      	ldrb	r2, [r7, #7]
 8007bec:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f001 fbe4 	bl	80093bc <USBD_LL_Init>

  return USBD_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d006      	beq.n	8007c20 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]
 8007c1e:	e001      	b.n	8007c24 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c20:	2302      	movs	r3, #2
 8007c22:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bc80      	pop	{r7}
 8007c2e:	4770      	bx	lr

08007c30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 fc19 	bl	8009470 <USBD_LL_Start>

  return USBD_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bc80      	pop	{r7}
 8007c5a:	4770      	bx	lr

08007c5c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c68:	2302      	movs	r3, #2
 8007c6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00c      	beq.n	8007c90 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	78fa      	ldrb	r2, [r7, #3]
 8007c80:	4611      	mov	r1, r2
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	4798      	blx	r3
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	78fa      	ldrb	r2, [r7, #3]
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4798      	blx	r3

  return USBD_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 fed7 	bl	8008a86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007cf4:	f003 031f 	and.w	r3, r3, #31
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d016      	beq.n	8007d2a <USBD_LL_SetupStage+0x6a>
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d81c      	bhi.n	8007d3a <USBD_LL_SetupStage+0x7a>
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <USBD_LL_SetupStage+0x4a>
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d008      	beq.n	8007d1a <USBD_LL_SetupStage+0x5a>
 8007d08:	e017      	b.n	8007d3a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f9ca 	bl	80080ac <USBD_StdDevReq>
      break;
 8007d18:	e01a      	b.n	8007d50 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa2c 	bl	8008180 <USBD_StdItfReq>
      break;
 8007d28:	e012      	b.n	8007d50 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa6c 	bl	8008210 <USBD_StdEPReq>
      break;
 8007d38:	e00a      	b.n	8007d50 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007d40:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f001 fbf1 	bl	8009530 <USBD_LL_StallEP>
      break;
 8007d4e:	bf00      	nop
  }

  return USBD_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	460b      	mov	r3, r1
 8007d64:	607a      	str	r2, [r7, #4]
 8007d66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d68:	7afb      	ldrb	r3, [r7, #11]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d14b      	bne.n	8007e06 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007d74:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d134      	bne.n	8007dea <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d919      	bls.n	8007dc0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	1ad2      	subs	r2, r2, r3
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d203      	bcs.n	8007dae <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	e002      	b.n	8007db4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	461a      	mov	r2, r3
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 ff53 	bl	8008c64 <USBD_CtlContinueRx>
 8007dbe:	e038      	b.n	8007e32 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00a      	beq.n	8007de2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d105      	bne.n	8007de2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 ff50 	bl	8008c88 <USBD_CtlSendStatus>
 8007de8:	e023      	b.n	8007e32 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007df0:	2b05      	cmp	r3, #5
 8007df2:	d11e      	bne.n	8007e32 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f001 fb96 	bl	8009530 <USBD_LL_StallEP>
 8007e04:	e015      	b.n	8007e32 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00d      	beq.n	8007e2e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d108      	bne.n	8007e2e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	7afa      	ldrb	r2, [r7, #11]
 8007e26:	4611      	mov	r1, r2
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	4798      	blx	r3
 8007e2c:	e001      	b.n	8007e32 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e000      	b.n	8007e34 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	460b      	mov	r3, r1
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e4a:	7afb      	ldrb	r3, [r7, #11]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d17f      	bne.n	8007f50 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3314      	adds	r3, #20
 8007e54:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d15c      	bne.n	8007f1a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d915      	bls.n	8007e98 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	68da      	ldr	r2, [r3, #12]
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	1ad2      	subs	r2, r2, r3
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 febd 	bl	8008c04 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2100      	movs	r1, #0
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f001 fbf8 	bl	8009686 <USBD_LL_PrepareReceive>
 8007e96:	e04e      	b.n	8007f36 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	6912      	ldr	r2, [r2, #16]
 8007ea0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ea4:	fb01 f202 	mul.w	r2, r1, r2
 8007ea8:	1a9b      	subs	r3, r3, r2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d11c      	bne.n	8007ee8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	689a      	ldr	r2, [r3, #8]
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d316      	bcc.n	8007ee8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d20f      	bcs.n	8007ee8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2100      	movs	r1, #0
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 fe99 	bl	8008c04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eda:	2300      	movs	r3, #0
 8007edc:	2200      	movs	r2, #0
 8007ede:	2100      	movs	r1, #0
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f001 fbd0 	bl	8009686 <USBD_LL_PrepareReceive>
 8007ee6:	e026      	b.n	8007f36 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d105      	bne.n	8007f0a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f0a:	2180      	movs	r1, #128	@ 0x80
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f001 fb0f 	bl	8009530 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 fecb 	bl	8008cae <USBD_CtlReceiveStatus>
 8007f18:	e00d      	b.n	8007f36 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d004      	beq.n	8007f2e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d103      	bne.n	8007f36 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f2e:	2180      	movs	r1, #128	@ 0x80
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f001 fafd 	bl	8009530 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d11d      	bne.n	8007f7c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f7ff fe81 	bl	8007c48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007f4e:	e015      	b.n	8007f7c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00d      	beq.n	8007f78 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d108      	bne.n	8007f78 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	7afa      	ldrb	r2, [r7, #11]
 8007f70:	4611      	mov	r1, r2
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	4798      	blx	r3
 8007f76:	e001      	b.n	8007f7c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f78:	2302      	movs	r3, #2
 8007f7a:	e000      	b.n	8007f7e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3718      	adds	r7, #24
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b082      	sub	sp, #8
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f8e:	2340      	movs	r3, #64	@ 0x40
 8007f90:	2200      	movs	r2, #0
 8007f92:	2100      	movs	r1, #0
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f001 fa86 	bl	80094a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2240      	movs	r2, #64	@ 0x40
 8007fa6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007faa:	2340      	movs	r3, #64	@ 0x40
 8007fac:	2200      	movs	r2, #0
 8007fae:	2180      	movs	r1, #128	@ 0x80
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f001 fa78 	bl	80094a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2240      	movs	r2, #64	@ 0x40
 8007fc0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d009      	beq.n	8007ffe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6852      	ldr	r2, [r2, #4]
 8007ff6:	b2d2      	uxtb	r2, r2
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	4798      	blx	r3
  }

  return USBD_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	78fa      	ldrb	r2, [r7, #3]
 8008018:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	bc80      	pop	{r7}
 8008024:	4770      	bx	lr

08008026 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2204      	movs	r2, #4
 800803e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	bc80      	pop	{r7}
 800804c:	4770      	bx	lr

0800804e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800805c:	2b04      	cmp	r3, #4
 800805e:	d105      	bne.n	800806c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	bc80      	pop	{r7}
 8008076:	4770      	bx	lr

08008078 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008086:	2b03      	cmp	r3, #3
 8008088:	d10b      	bne.n	80080a2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d005      	beq.n	80080a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080c2:	2b40      	cmp	r3, #64	@ 0x40
 80080c4:	d005      	beq.n	80080d2 <USBD_StdDevReq+0x26>
 80080c6:	2b40      	cmp	r3, #64	@ 0x40
 80080c8:	d84f      	bhi.n	800816a <USBD_StdDevReq+0xbe>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d009      	beq.n	80080e2 <USBD_StdDevReq+0x36>
 80080ce:	2b20      	cmp	r3, #32
 80080d0:	d14b      	bne.n	800816a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	4798      	blx	r3
      break;
 80080e0:	e048      	b.n	8008174 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	785b      	ldrb	r3, [r3, #1]
 80080e6:	2b09      	cmp	r3, #9
 80080e8:	d839      	bhi.n	800815e <USBD_StdDevReq+0xb2>
 80080ea:	a201      	add	r2, pc, #4	@ (adr r2, 80080f0 <USBD_StdDevReq+0x44>)
 80080ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f0:	08008141 	.word	0x08008141
 80080f4:	08008155 	.word	0x08008155
 80080f8:	0800815f 	.word	0x0800815f
 80080fc:	0800814b 	.word	0x0800814b
 8008100:	0800815f 	.word	0x0800815f
 8008104:	08008123 	.word	0x08008123
 8008108:	08008119 	.word	0x08008119
 800810c:	0800815f 	.word	0x0800815f
 8008110:	08008137 	.word	0x08008137
 8008114:	0800812d 	.word	0x0800812d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f9dc 	bl	80084d8 <USBD_GetDescriptor>
          break;
 8008120:	e022      	b.n	8008168 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fb3f 	bl	80087a8 <USBD_SetAddress>
          break;
 800812a:	e01d      	b.n	8008168 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fb7e 	bl	8008830 <USBD_SetConfig>
          break;
 8008134:	e018      	b.n	8008168 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fc07 	bl	800894c <USBD_GetConfig>
          break;
 800813e:	e013      	b.n	8008168 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fc37 	bl	80089b6 <USBD_GetStatus>
          break;
 8008148:	e00e      	b.n	8008168 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fc65 	bl	8008a1c <USBD_SetFeature>
          break;
 8008152:	e009      	b.n	8008168 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fc74 	bl	8008a44 <USBD_ClrFeature>
          break;
 800815c:	e004      	b.n	8008168 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800815e:	6839      	ldr	r1, [r7, #0]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fcc9 	bl	8008af8 <USBD_CtlError>
          break;
 8008166:	bf00      	nop
      }
      break;
 8008168:	e004      	b.n	8008174 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fcc3 	bl	8008af8 <USBD_CtlError>
      break;
 8008172:	bf00      	nop
  }

  return ret;
 8008174:	7bfb      	ldrb	r3, [r7, #15]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop

08008180 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008196:	2b40      	cmp	r3, #64	@ 0x40
 8008198:	d005      	beq.n	80081a6 <USBD_StdItfReq+0x26>
 800819a:	2b40      	cmp	r3, #64	@ 0x40
 800819c:	d82e      	bhi.n	80081fc <USBD_StdItfReq+0x7c>
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <USBD_StdItfReq+0x26>
 80081a2:	2b20      	cmp	r3, #32
 80081a4:	d12a      	bne.n	80081fc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081ac:	3b01      	subs	r3, #1
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d81d      	bhi.n	80081ee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	889b      	ldrh	r3, [r3, #4]
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d813      	bhi.n	80081e4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	4798      	blx	r3
 80081ca:	4603      	mov	r3, r0
 80081cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	88db      	ldrh	r3, [r3, #6]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d110      	bne.n	80081f8 <USBD_StdItfReq+0x78>
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10d      	bne.n	80081f8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fd53 	bl	8008c88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081e2:	e009      	b.n	80081f8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fc86 	bl	8008af8 <USBD_CtlError>
          break;
 80081ec:	e004      	b.n	80081f8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fc81 	bl	8008af8 <USBD_CtlError>
          break;
 80081f6:	e000      	b.n	80081fa <USBD_StdItfReq+0x7a>
          break;
 80081f8:	bf00      	nop
      }
      break;
 80081fa:	e004      	b.n	8008206 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fc7a 	bl	8008af8 <USBD_CtlError>
      break;
 8008204:	bf00      	nop
  }

  return USBD_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	889b      	ldrh	r3, [r3, #4]
 8008222:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800822c:	2b40      	cmp	r3, #64	@ 0x40
 800822e:	d007      	beq.n	8008240 <USBD_StdEPReq+0x30>
 8008230:	2b40      	cmp	r3, #64	@ 0x40
 8008232:	f200 8146 	bhi.w	80084c2 <USBD_StdEPReq+0x2b2>
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <USBD_StdEPReq+0x40>
 800823a:	2b20      	cmp	r3, #32
 800823c:	f040 8141 	bne.w	80084c2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	4798      	blx	r3
      break;
 800824e:	e13d      	b.n	80084cc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008258:	2b20      	cmp	r3, #32
 800825a:	d10a      	bne.n	8008272 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	4798      	blx	r3
 800826a:	4603      	mov	r3, r0
 800826c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	e12d      	b.n	80084ce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	785b      	ldrb	r3, [r3, #1]
 8008276:	2b03      	cmp	r3, #3
 8008278:	d007      	beq.n	800828a <USBD_StdEPReq+0x7a>
 800827a:	2b03      	cmp	r3, #3
 800827c:	f300 811b 	bgt.w	80084b6 <USBD_StdEPReq+0x2a6>
 8008280:	2b00      	cmp	r3, #0
 8008282:	d072      	beq.n	800836a <USBD_StdEPReq+0x15a>
 8008284:	2b01      	cmp	r3, #1
 8008286:	d03a      	beq.n	80082fe <USBD_StdEPReq+0xee>
 8008288:	e115      	b.n	80084b6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008290:	2b02      	cmp	r3, #2
 8008292:	d002      	beq.n	800829a <USBD_StdEPReq+0x8a>
 8008294:	2b03      	cmp	r3, #3
 8008296:	d015      	beq.n	80082c4 <USBD_StdEPReq+0xb4>
 8008298:	e02b      	b.n	80082f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00c      	beq.n	80082ba <USBD_StdEPReq+0xaa>
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	2b80      	cmp	r3, #128	@ 0x80
 80082a4:	d009      	beq.n	80082ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 f940 	bl	8009530 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80082b0:	2180      	movs	r1, #128	@ 0x80
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f001 f93c 	bl	8009530 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082b8:	e020      	b.n	80082fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fc1b 	bl	8008af8 <USBD_CtlError>
              break;
 80082c2:	e01b      	b.n	80082fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	885b      	ldrh	r3, [r3, #2]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10e      	bne.n	80082ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00b      	beq.n	80082ea <USBD_StdEPReq+0xda>
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	2b80      	cmp	r3, #128	@ 0x80
 80082d6:	d008      	beq.n	80082ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	88db      	ldrh	r3, [r3, #6]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d104      	bne.n	80082ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 f923 	bl	8009530 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fccc 	bl	8008c88 <USBD_CtlSendStatus>

              break;
 80082f0:	e004      	b.n	80082fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fbff 	bl	8008af8 <USBD_CtlError>
              break;
 80082fa:	bf00      	nop
          }
          break;
 80082fc:	e0e0      	b.n	80084c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008304:	2b02      	cmp	r3, #2
 8008306:	d002      	beq.n	800830e <USBD_StdEPReq+0xfe>
 8008308:	2b03      	cmp	r3, #3
 800830a:	d015      	beq.n	8008338 <USBD_StdEPReq+0x128>
 800830c:	e026      	b.n	800835c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00c      	beq.n	800832e <USBD_StdEPReq+0x11e>
 8008314:	7bbb      	ldrb	r3, [r7, #14]
 8008316:	2b80      	cmp	r3, #128	@ 0x80
 8008318:	d009      	beq.n	800832e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f001 f906 	bl	8009530 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008324:	2180      	movs	r1, #128	@ 0x80
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f001 f902 	bl	8009530 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800832c:	e01c      	b.n	8008368 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fbe1 	bl	8008af8 <USBD_CtlError>
              break;
 8008336:	e017      	b.n	8008368 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	885b      	ldrh	r3, [r3, #2]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d112      	bne.n	8008366 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008346:	2b00      	cmp	r3, #0
 8008348:	d004      	beq.n	8008354 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f001 f90d 	bl	800956e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fc97 	bl	8008c88 <USBD_CtlSendStatus>
              }
              break;
 800835a:	e004      	b.n	8008366 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fbca 	bl	8008af8 <USBD_CtlError>
              break;
 8008364:	e000      	b.n	8008368 <USBD_StdEPReq+0x158>
              break;
 8008366:	bf00      	nop
          }
          break;
 8008368:	e0aa      	b.n	80084c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008370:	2b02      	cmp	r3, #2
 8008372:	d002      	beq.n	800837a <USBD_StdEPReq+0x16a>
 8008374:	2b03      	cmp	r3, #3
 8008376:	d032      	beq.n	80083de <USBD_StdEPReq+0x1ce>
 8008378:	e097      	b.n	80084aa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d007      	beq.n	8008390 <USBD_StdEPReq+0x180>
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b80      	cmp	r3, #128	@ 0x80
 8008384:	d004      	beq.n	8008390 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fbb5 	bl	8008af8 <USBD_CtlError>
                break;
 800838e:	e091      	b.n	80084b4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008394:	2b00      	cmp	r3, #0
 8008396:	da0b      	bge.n	80083b0 <USBD_StdEPReq+0x1a0>
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	3310      	adds	r3, #16
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	4413      	add	r3, r2
 80083ac:	3304      	adds	r3, #4
 80083ae:	e00b      	b.n	80083c8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083b0:	7bbb      	ldrb	r3, [r7, #14]
 80083b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083b6:	4613      	mov	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	4413      	add	r3, r2
 80083c6:	3304      	adds	r3, #4
 80083c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2200      	movs	r2, #0
 80083ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2202      	movs	r2, #2
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fbf8 	bl	8008bcc <USBD_CtlSendData>
              break;
 80083dc:	e06a      	b.n	80084b4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	da11      	bge.n	800840a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
 80083e8:	f003 020f 	and.w	r2, r3, #15
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	4613      	mov	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	440b      	add	r3, r1
 80083f8:	3318      	adds	r3, #24
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d117      	bne.n	8008430 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fb78 	bl	8008af8 <USBD_CtlError>
                  break;
 8008408:	e054      	b.n	80084b4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800840a:	7bbb      	ldrb	r3, [r7, #14]
 800840c:	f003 020f 	and.w	r2, r3, #15
 8008410:	6879      	ldr	r1, [r7, #4]
 8008412:	4613      	mov	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	440b      	add	r3, r1
 800841c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d104      	bne.n	8008430 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fb65 	bl	8008af8 <USBD_CtlError>
                  break;
 800842e:	e041      	b.n	80084b4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008430:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008434:	2b00      	cmp	r3, #0
 8008436:	da0b      	bge.n	8008450 <USBD_StdEPReq+0x240>
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800843e:	4613      	mov	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	3310      	adds	r3, #16
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	4413      	add	r3, r2
 800844c:	3304      	adds	r3, #4
 800844e:	e00b      	b.n	8008468 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008456:	4613      	mov	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	4413      	add	r3, r2
 8008466:	3304      	adds	r3, #4
 8008468:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d002      	beq.n	8008476 <USBD_StdEPReq+0x266>
 8008470:	7bbb      	ldrb	r3, [r7, #14]
 8008472:	2b80      	cmp	r3, #128	@ 0x80
 8008474:	d103      	bne.n	800847e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	e00e      	b.n	800849c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f001 f892 	bl	80095ac <USBD_LL_IsStallEP>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2201      	movs	r2, #1
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	e002      	b.n	800849c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2202      	movs	r2, #2
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fb92 	bl	8008bcc <USBD_CtlSendData>
              break;
 80084a8:	e004      	b.n	80084b4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fb23 	bl	8008af8 <USBD_CtlError>
              break;
 80084b2:	bf00      	nop
          }
          break;
 80084b4:	e004      	b.n	80084c0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fb1d 	bl	8008af8 <USBD_CtlError>
          break;
 80084be:	bf00      	nop
      }
      break;
 80084c0:	e004      	b.n	80084cc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fb17 	bl	8008af8 <USBD_CtlError>
      break;
 80084ca:	bf00      	nop
  }

  return ret;
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084e6:	2300      	movs	r3, #0
 80084e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	885b      	ldrh	r3, [r3, #2]
 80084f2:	0a1b      	lsrs	r3, r3, #8
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	3b01      	subs	r3, #1
 80084f8:	2b06      	cmp	r3, #6
 80084fa:	f200 8128 	bhi.w	800874e <USBD_GetDescriptor+0x276>
 80084fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008504 <USBD_GetDescriptor+0x2c>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	08008521 	.word	0x08008521
 8008508:	08008539 	.word	0x08008539
 800850c:	08008579 	.word	0x08008579
 8008510:	0800874f 	.word	0x0800874f
 8008514:	0800874f 	.word	0x0800874f
 8008518:	080086ef 	.word	0x080086ef
 800851c:	0800871b 	.word	0x0800871b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	7c12      	ldrb	r2, [r2, #16]
 800852c:	f107 0108 	add.w	r1, r7, #8
 8008530:	4610      	mov	r0, r2
 8008532:	4798      	blx	r3
 8008534:	60f8      	str	r0, [r7, #12]
      break;
 8008536:	e112      	b.n	800875e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	7c1b      	ldrb	r3, [r3, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10d      	bne.n	800855c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008548:	f107 0208 	add.w	r2, r7, #8
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3301      	adds	r3, #1
 8008556:	2202      	movs	r2, #2
 8008558:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800855a:	e100      	b.n	800875e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008564:	f107 0208 	add.w	r2, r7, #8
 8008568:	4610      	mov	r0, r2
 800856a:	4798      	blx	r3
 800856c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3301      	adds	r3, #1
 8008572:	2202      	movs	r2, #2
 8008574:	701a      	strb	r2, [r3, #0]
      break;
 8008576:	e0f2      	b.n	800875e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	885b      	ldrh	r3, [r3, #2]
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b05      	cmp	r3, #5
 8008580:	f200 80ac 	bhi.w	80086dc <USBD_GetDescriptor+0x204>
 8008584:	a201      	add	r2, pc, #4	@ (adr r2, 800858c <USBD_GetDescriptor+0xb4>)
 8008586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858a:	bf00      	nop
 800858c:	080085a5 	.word	0x080085a5
 8008590:	080085d9 	.word	0x080085d9
 8008594:	0800860d 	.word	0x0800860d
 8008598:	08008641 	.word	0x08008641
 800859c:	08008675 	.word	0x08008675
 80085a0:	080086a9 	.word	0x080086a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00b      	beq.n	80085c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	7c12      	ldrb	r2, [r2, #16]
 80085bc:	f107 0108 	add.w	r1, r7, #8
 80085c0:	4610      	mov	r0, r2
 80085c2:	4798      	blx	r3
 80085c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085c6:	e091      	b.n	80086ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fa94 	bl	8008af8 <USBD_CtlError>
            err++;
 80085d0:	7afb      	ldrb	r3, [r7, #11]
 80085d2:	3301      	adds	r3, #1
 80085d4:	72fb      	strb	r3, [r7, #11]
          break;
 80085d6:	e089      	b.n	80086ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	7c12      	ldrb	r2, [r2, #16]
 80085f0:	f107 0108 	add.w	r1, r7, #8
 80085f4:	4610      	mov	r0, r2
 80085f6:	4798      	blx	r3
 80085f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085fa:	e077      	b.n	80086ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fa7a 	bl	8008af8 <USBD_CtlError>
            err++;
 8008604:	7afb      	ldrb	r3, [r7, #11]
 8008606:	3301      	adds	r3, #1
 8008608:	72fb      	strb	r3, [r7, #11]
          break;
 800860a:	e06f      	b.n	80086ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	7c12      	ldrb	r2, [r2, #16]
 8008624:	f107 0108 	add.w	r1, r7, #8
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
 800862c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800862e:	e05d      	b.n	80086ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fa60 	bl	8008af8 <USBD_CtlError>
            err++;
 8008638:	7afb      	ldrb	r3, [r7, #11]
 800863a:	3301      	adds	r3, #1
 800863c:	72fb      	strb	r3, [r7, #11]
          break;
 800863e:	e055      	b.n	80086ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	7c12      	ldrb	r2, [r2, #16]
 8008658:	f107 0108 	add.w	r1, r7, #8
 800865c:	4610      	mov	r0, r2
 800865e:	4798      	blx	r3
 8008660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008662:	e043      	b.n	80086ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa46 	bl	8008af8 <USBD_CtlError>
            err++;
 800866c:	7afb      	ldrb	r3, [r7, #11]
 800866e:	3301      	adds	r3, #1
 8008670:	72fb      	strb	r3, [r7, #11]
          break;
 8008672:	e03b      	b.n	80086ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	7c12      	ldrb	r2, [r2, #16]
 800868c:	f107 0108 	add.w	r1, r7, #8
 8008690:	4610      	mov	r0, r2
 8008692:	4798      	blx	r3
 8008694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008696:	e029      	b.n	80086ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fa2c 	bl	8008af8 <USBD_CtlError>
            err++;
 80086a0:	7afb      	ldrb	r3, [r7, #11]
 80086a2:	3301      	adds	r3, #1
 80086a4:	72fb      	strb	r3, [r7, #11]
          break;
 80086a6:	e021      	b.n	80086ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00b      	beq.n	80086cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	7c12      	ldrb	r2, [r2, #16]
 80086c0:	f107 0108 	add.w	r1, r7, #8
 80086c4:	4610      	mov	r0, r2
 80086c6:	4798      	blx	r3
 80086c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ca:	e00f      	b.n	80086ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fa12 	bl	8008af8 <USBD_CtlError>
            err++;
 80086d4:	7afb      	ldrb	r3, [r7, #11]
 80086d6:	3301      	adds	r3, #1
 80086d8:	72fb      	strb	r3, [r7, #11]
          break;
 80086da:	e007      	b.n	80086ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa0a 	bl	8008af8 <USBD_CtlError>
          err++;
 80086e4:	7afb      	ldrb	r3, [r7, #11]
 80086e6:	3301      	adds	r3, #1
 80086e8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80086ea:	e038      	b.n	800875e <USBD_GetDescriptor+0x286>
 80086ec:	e037      	b.n	800875e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	7c1b      	ldrb	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d109      	bne.n	800870a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086fe:	f107 0208 	add.w	r2, r7, #8
 8008702:	4610      	mov	r0, r2
 8008704:	4798      	blx	r3
 8008706:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008708:	e029      	b.n	800875e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f9f3 	bl	8008af8 <USBD_CtlError>
        err++;
 8008712:	7afb      	ldrb	r3, [r7, #11]
 8008714:	3301      	adds	r3, #1
 8008716:	72fb      	strb	r3, [r7, #11]
      break;
 8008718:	e021      	b.n	800875e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	7c1b      	ldrb	r3, [r3, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10d      	bne.n	800873e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800872a:	f107 0208 	add.w	r2, r7, #8
 800872e:	4610      	mov	r0, r2
 8008730:	4798      	blx	r3
 8008732:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3301      	adds	r3, #1
 8008738:	2207      	movs	r2, #7
 800873a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800873c:	e00f      	b.n	800875e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f9d9 	bl	8008af8 <USBD_CtlError>
        err++;
 8008746:	7afb      	ldrb	r3, [r7, #11]
 8008748:	3301      	adds	r3, #1
 800874a:	72fb      	strb	r3, [r7, #11]
      break;
 800874c:	e007      	b.n	800875e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f9d1 	bl	8008af8 <USBD_CtlError>
      err++;
 8008756:	7afb      	ldrb	r3, [r7, #11]
 8008758:	3301      	adds	r3, #1
 800875a:	72fb      	strb	r3, [r7, #11]
      break;
 800875c:	bf00      	nop
  }

  if (err != 0U)
 800875e:	7afb      	ldrb	r3, [r7, #11]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d11c      	bne.n	800879e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008764:	893b      	ldrh	r3, [r7, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d011      	beq.n	800878e <USBD_GetDescriptor+0x2b6>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	88db      	ldrh	r3, [r3, #6]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00d      	beq.n	800878e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	88da      	ldrh	r2, [r3, #6]
 8008776:	893b      	ldrh	r3, [r7, #8]
 8008778:	4293      	cmp	r3, r2
 800877a:	bf28      	it	cs
 800877c:	4613      	movcs	r3, r2
 800877e:	b29b      	uxth	r3, r3
 8008780:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008782:	893b      	ldrh	r3, [r7, #8]
 8008784:	461a      	mov	r2, r3
 8008786:	68f9      	ldr	r1, [r7, #12]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fa1f 	bl	8008bcc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	88db      	ldrh	r3, [r3, #6]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d104      	bne.n	80087a0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fa76 	bl	8008c88 <USBD_CtlSendStatus>
 800879c:	e000      	b.n	80087a0 <USBD_GetDescriptor+0x2c8>
    return;
 800879e:	bf00      	nop
    }
  }
}
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop

080087a8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	889b      	ldrh	r3, [r3, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d130      	bne.n	800881c <USBD_SetAddress+0x74>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	88db      	ldrh	r3, [r3, #6]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d12c      	bne.n	800881c <USBD_SetAddress+0x74>
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	885b      	ldrh	r3, [r3, #2]
 80087c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80087c8:	d828      	bhi.n	800881c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	885b      	ldrh	r3, [r3, #2]
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d104      	bne.n	80087ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f988 	bl	8008af8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e8:	e01d      	b.n	8008826 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	7bfa      	ldrb	r2, [r7, #15]
 80087ee:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 ff03 	bl	8009602 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fa43 	bl	8008c88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d004      	beq.n	8008812 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2202      	movs	r2, #2
 800880c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008810:	e009      	b.n	8008826 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800881a:	e004      	b.n	8008826 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f96a 	bl	8008af8 <USBD_CtlError>
  }
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
	...

08008830 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	885b      	ldrh	r3, [r3, #2]
 800883e:	b2da      	uxtb	r2, r3
 8008840:	4b41      	ldr	r3, [pc, #260]	@ (8008948 <USBD_SetConfig+0x118>)
 8008842:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008844:	4b40      	ldr	r3, [pc, #256]	@ (8008948 <USBD_SetConfig+0x118>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d904      	bls.n	8008856 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f952 	bl	8008af8 <USBD_CtlError>
 8008854:	e075      	b.n	8008942 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800885c:	2b02      	cmp	r3, #2
 800885e:	d002      	beq.n	8008866 <USBD_SetConfig+0x36>
 8008860:	2b03      	cmp	r3, #3
 8008862:	d023      	beq.n	80088ac <USBD_SetConfig+0x7c>
 8008864:	e062      	b.n	800892c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008866:	4b38      	ldr	r3, [pc, #224]	@ (8008948 <USBD_SetConfig+0x118>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d01a      	beq.n	80088a4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800886e:	4b36      	ldr	r3, [pc, #216]	@ (8008948 <USBD_SetConfig+0x118>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	461a      	mov	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2203      	movs	r2, #3
 800887c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008880:	4b31      	ldr	r3, [pc, #196]	@ (8008948 <USBD_SetConfig+0x118>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff f9e8 	bl	8007c5c <USBD_SetClassConfig>
 800888c:	4603      	mov	r3, r0
 800888e:	2b02      	cmp	r3, #2
 8008890:	d104      	bne.n	800889c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f92f 	bl	8008af8 <USBD_CtlError>
            return;
 800889a:	e052      	b.n	8008942 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f9f3 	bl	8008c88 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088a2:	e04e      	b.n	8008942 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f9ef 	bl	8008c88 <USBD_CtlSendStatus>
        break;
 80088aa:	e04a      	b.n	8008942 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80088ac:	4b26      	ldr	r3, [pc, #152]	@ (8008948 <USBD_SetConfig+0x118>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d112      	bne.n	80088da <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80088bc:	4b22      	ldr	r3, [pc, #136]	@ (8008948 <USBD_SetConfig+0x118>)
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	461a      	mov	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80088c6:	4b20      	ldr	r3, [pc, #128]	@ (8008948 <USBD_SetConfig+0x118>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff f9e4 	bl	8007c9a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f9d8 	bl	8008c88 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088d8:	e033      	b.n	8008942 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80088da:	4b1b      	ldr	r3, [pc, #108]	@ (8008948 <USBD_SetConfig+0x118>)
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d01d      	beq.n	8008924 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7ff f9d2 	bl	8007c9a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80088f6:	4b14      	ldr	r3, [pc, #80]	@ (8008948 <USBD_SetConfig+0x118>)
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008900:	4b11      	ldr	r3, [pc, #68]	@ (8008948 <USBD_SetConfig+0x118>)
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff f9a8 	bl	8007c5c <USBD_SetClassConfig>
 800890c:	4603      	mov	r3, r0
 800890e:	2b02      	cmp	r3, #2
 8008910:	d104      	bne.n	800891c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f8ef 	bl	8008af8 <USBD_CtlError>
            return;
 800891a:	e012      	b.n	8008942 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f9b3 	bl	8008c88 <USBD_CtlSendStatus>
        break;
 8008922:	e00e      	b.n	8008942 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f9af 	bl	8008c88 <USBD_CtlSendStatus>
        break;
 800892a:	e00a      	b.n	8008942 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f8e2 	bl	8008af8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008934:	4b04      	ldr	r3, [pc, #16]	@ (8008948 <USBD_SetConfig+0x118>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff f9ad 	bl	8007c9a <USBD_ClrClassConfig>
        break;
 8008940:	bf00      	nop
    }
  }
}
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	20000378 	.word	0x20000378

0800894c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	88db      	ldrh	r3, [r3, #6]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d004      	beq.n	8008968 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f8c9 	bl	8008af8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008966:	e022      	b.n	80089ae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800896e:	2b02      	cmp	r3, #2
 8008970:	dc02      	bgt.n	8008978 <USBD_GetConfig+0x2c>
 8008972:	2b00      	cmp	r3, #0
 8008974:	dc03      	bgt.n	800897e <USBD_GetConfig+0x32>
 8008976:	e015      	b.n	80089a4 <USBD_GetConfig+0x58>
 8008978:	2b03      	cmp	r3, #3
 800897a:	d00b      	beq.n	8008994 <USBD_GetConfig+0x48>
 800897c:	e012      	b.n	80089a4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3308      	adds	r3, #8
 8008988:	2201      	movs	r2, #1
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f91d 	bl	8008bcc <USBD_CtlSendData>
        break;
 8008992:	e00c      	b.n	80089ae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3304      	adds	r3, #4
 8008998:	2201      	movs	r2, #1
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f915 	bl	8008bcc <USBD_CtlSendData>
        break;
 80089a2:	e004      	b.n	80089ae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f8a6 	bl	8008af8 <USBD_CtlError>
        break;
 80089ac:	bf00      	nop
}
 80089ae:	bf00      	nop
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b082      	sub	sp, #8
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c6:	3b01      	subs	r3, #1
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d81e      	bhi.n	8008a0a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	88db      	ldrh	r3, [r3, #6]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d004      	beq.n	80089de <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f88e 	bl	8008af8 <USBD_CtlError>
        break;
 80089dc:	e01a      	b.n	8008a14 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	f043 0202 	orr.w	r2, r3, #2
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	330c      	adds	r3, #12
 80089fe:	2202      	movs	r2, #2
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f8e2 	bl	8008bcc <USBD_CtlSendData>
      break;
 8008a08:	e004      	b.n	8008a14 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f873 	bl	8008af8 <USBD_CtlError>
      break;
 8008a12:	bf00      	nop
  }
}
 8008a14:	bf00      	nop
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	885b      	ldrh	r3, [r3, #2]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d106      	bne.n	8008a3c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f926 	bl	8008c88 <USBD_CtlSendStatus>
  }
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a54:	3b01      	subs	r3, #1
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d80b      	bhi.n	8008a72 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	885b      	ldrh	r3, [r3, #2]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d10c      	bne.n	8008a7c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f90c 	bl	8008c88 <USBD_CtlSendStatus>
      }
      break;
 8008a70:	e004      	b.n	8008a7c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f83f 	bl	8008af8 <USBD_CtlError>
      break;
 8008a7a:	e000      	b.n	8008a7e <USBD_ClrFeature+0x3a>
      break;
 8008a7c:	bf00      	nop
  }
}
 8008a7e:	bf00      	nop
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	781a      	ldrb	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	785a      	ldrb	r2, [r3, #1]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	3302      	adds	r3, #2
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	3303      	adds	r3, #3
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	021b      	lsls	r3, r3, #8
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	4413      	add	r3, r2
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	3304      	adds	r3, #4
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	3305      	adds	r3, #5
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	021b      	lsls	r3, r3, #8
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	4413      	add	r3, r2
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	3306      	adds	r3, #6
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	3307      	adds	r3, #7
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	021b      	lsls	r3, r3, #8
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	4413      	add	r3, r2
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	80da      	strh	r2, [r3, #6]

}
 8008aee:	bf00      	nop
 8008af0:	370c      	adds	r7, #12
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bc80      	pop	{r7}
 8008af6:	4770      	bx	lr

08008af8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008b02:	2180      	movs	r1, #128	@ 0x80
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fd13 	bl	8009530 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fd0f 	bl	8009530 <USBD_LL_StallEP>
}
 8008b12:	bf00      	nop
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b086      	sub	sp, #24
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	60b9      	str	r1, [r7, #8]
 8008b24:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d032      	beq.n	8008b96 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 f834 	bl	8008b9e <USBD_GetLen>
 8008b36:	4603      	mov	r3, r0
 8008b38:	3301      	adds	r3, #1
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	1c5a      	adds	r2, r3, #1
 8008b48:	75fa      	strb	r2, [r7, #23]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4413      	add	r3, r2
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	7812      	ldrb	r2, [r2, #0]
 8008b54:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
 8008b58:	1c5a      	adds	r2, r3, #1
 8008b5a:	75fa      	strb	r2, [r7, #23]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	4413      	add	r3, r2
 8008b62:	2203      	movs	r2, #3
 8008b64:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008b66:	e012      	b.n	8008b8e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	60fa      	str	r2, [r7, #12]
 8008b6e:	7dfa      	ldrb	r2, [r7, #23]
 8008b70:	1c51      	adds	r1, r2, #1
 8008b72:	75f9      	strb	r1, [r7, #23]
 8008b74:	4611      	mov	r1, r2
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	440a      	add	r2, r1
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	1c5a      	adds	r2, r3, #1
 8008b82:	75fa      	strb	r2, [r7, #23]
 8008b84:	461a      	mov	r2, r3
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	4413      	add	r3, r2
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e8      	bne.n	8008b68 <USBD_GetString+0x4e>
    }
  }
}
 8008b96:	bf00      	nop
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b085      	sub	sp, #20
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008baa:	e005      	b.n	8008bb8 <USBD_GetLen+0x1a>
  {
    len++;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1f5      	bne.n	8008bac <USBD_GetLen+0xe>
  }

  return len;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bc80      	pop	{r7}
 8008bca:	4770      	bx	lr

08008bcc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2202      	movs	r2, #2
 8008bde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008be2:	88fa      	ldrh	r2, [r7, #6]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008be8:	88fa      	ldrh	r2, [r7, #6]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 fd23 	bl	8009640 <USBD_LL_Transmit>

  return USBD_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c12:	88fb      	ldrh	r3, [r7, #6]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	2100      	movs	r1, #0
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 fd11 	bl	8009640 <USBD_LL_Transmit>

  return USBD_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	4613      	mov	r3, r2
 8008c34:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2203      	movs	r2, #3
 8008c3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008c3e:	88fa      	ldrh	r2, [r7, #6]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008c46:	88fa      	ldrh	r2, [r7, #6]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c4e:	88fb      	ldrh	r3, [r7, #6]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	2100      	movs	r1, #0
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f000 fd16 	bl	8009686 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c72:	88fb      	ldrh	r3, [r7, #6]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	2100      	movs	r1, #0
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 fd04 	bl	8009686 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2204      	movs	r2, #4
 8008c94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c98:	2300      	movs	r3, #0
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fcce 	bl	8009640 <USBD_LL_Transmit>

  return USBD_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2205      	movs	r2, #5
 8008cba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fcde 	bl	8009686 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4912      	ldr	r1, [pc, #72]	@ (8008d24 <MX_USB_DEVICE_Init+0x50>)
 8008cdc:	4812      	ldr	r0, [pc, #72]	@ (8008d28 <MX_USB_DEVICE_Init+0x54>)
 8008cde:	f7fe ff63 	bl	8007ba8 <USBD_Init>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ce8:	f7f7 faeb 	bl	80002c2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008cec:	490f      	ldr	r1, [pc, #60]	@ (8008d2c <MX_USB_DEVICE_Init+0x58>)
 8008cee:	480e      	ldr	r0, [pc, #56]	@ (8008d28 <MX_USB_DEVICE_Init+0x54>)
 8008cf0:	f7fe ff85 	bl	8007bfe <USBD_RegisterClass>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cfa:	f7f7 fae2 	bl	80002c2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cfe:	490c      	ldr	r1, [pc, #48]	@ (8008d30 <MX_USB_DEVICE_Init+0x5c>)
 8008d00:	4809      	ldr	r0, [pc, #36]	@ (8008d28 <MX_USB_DEVICE_Init+0x54>)
 8008d02:	f7fe fee5 	bl	8007ad0 <USBD_CDC_RegisterInterface>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d0c:	f7f7 fad9 	bl	80002c2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d10:	4805      	ldr	r0, [pc, #20]	@ (8008d28 <MX_USB_DEVICE_Init+0x54>)
 8008d12:	f7fe ff8d 	bl	8007c30 <USBD_Start>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d1c:	f7f7 fad1 	bl	80002c2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d20:	bf00      	nop
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	20000140 	.word	0x20000140
 8008d28:	2000037c 	.word	0x2000037c
 8008d2c:	20000020 	.word	0x20000020
 8008d30:	20000130 	.word	0x20000130

08008d34 <cdcAvailable>:
uint8_t  rx_buf[512];
bool     rx_full =false;


uint32_t cdcAvailable(void)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8008d3a:	4b09      	ldr	r3, [pc, #36]	@ (8008d60 <cdcAvailable+0x2c>)
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	4b09      	ldr	r3, [pc, #36]	@ (8008d64 <cdcAvailable+0x30>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	4a08      	ldr	r2, [pc, #32]	@ (8008d68 <cdcAvailable+0x34>)
 8008d46:	6812      	ldr	r2, [r2, #0]
 8008d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d4c:	fb01 f202 	mul.w	r2, r1, r2
 8008d50:	1a9b      	subs	r3, r3, r2
 8008d52:	607b      	str	r3, [r7, #4]

  return ret;
 8008d54:	687b      	ldr	r3, [r7, #4]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bc80      	pop	{r7}
 8008d5e:	4770      	bx	lr
 8008d60:	20000640 	.word	0x20000640
 8008d64:	20000644 	.word	0x20000644
 8008d68:	2000012c 	.word	0x2000012c

08008d6c <cdcDataIn>:

  return ret;
}

void cdcDataIn(uint8_t rx_data)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	4603      	mov	r3, r0
 8008d74:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] =rx_data;    //오버라이트
 8008d76:	4b0e      	ldr	r3, [pc, #56]	@ (8008db0 <cdcDataIn+0x44>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	490e      	ldr	r1, [pc, #56]	@ (8008db4 <cdcDataIn+0x48>)
 8008d7c:	79fa      	ldrb	r2, [r7, #7]
 8008d7e:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in +1) % rx_len;
 8008d80:	4b0b      	ldr	r3, [pc, #44]	@ (8008db0 <cdcDataIn+0x44>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3301      	adds	r3, #1
 8008d86:	4a0c      	ldr	r2, [pc, #48]	@ (8008db8 <cdcDataIn+0x4c>)
 8008d88:	6812      	ldr	r2, [r2, #0]
 8008d8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d8e:	fb01 f202 	mul.w	r2, r1, r2
 8008d92:	1a9b      	subs	r3, r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 8008d96:	4b09      	ldr	r3, [pc, #36]	@ (8008dbc <cdcDataIn+0x50>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d002      	beq.n	8008da6 <cdcDataIn+0x3a>
  {
	  rx_in = next_rx_in;
 8008da0:	4a03      	ldr	r2, [pc, #12]	@ (8008db0 <cdcDataIn+0x44>)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6013      	str	r3, [r2, #0]
  }
}
 8008da6:	bf00      	nop
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bc80      	pop	{r7}
 8008dae:	4770      	bx	lr
 8008db0:	20000640 	.word	0x20000640
 8008db4:	20000648 	.word	0x20000648
 8008db8:	2000012c 	.word	0x2000012c
 8008dbc:	20000644 	.word	0x20000644

08008dc0 <USBD_CDC_SOF>:
{
	return LineCoding.bitrate;
}

uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 8008dc0:	b590      	push	{r4, r7, lr}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
	if(rx_full == true)
 8008dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8008dfc <USBD_CDC_SOF+0x3c>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d010      	beq.n	8008df2 <USBD_CDC_SOF+0x32>
	{
		uint32_t buf_len;

			//수신 버퍼에서 비어있는 데이터 양
			buf_len = (rx_len - cdcAvailable()) - 1;
 8008dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8008e00 <USBD_CDC_SOF+0x40>)
 8008dd2:	681c      	ldr	r4, [r3, #0]
 8008dd4:	f7ff ffae 	bl	8008d34 <cdcAvailable>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	1ae3      	subs	r3, r4, r3
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	60fb      	str	r3, [r7, #12]


			if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2b3f      	cmp	r3, #63	@ 0x3f
 8008de4:	d905      	bls.n	8008df2 <USBD_CDC_SOF+0x32>
			{
				//다음 데이터도 보내줘
				 USBD_CDC_ReceivePacket(pdev);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7fe feb4 	bl	8007b54 <USBD_CDC_ReceivePacket>
				 rx_full = false;
 8008dec:	4b03      	ldr	r3, [pc, #12]	@ (8008dfc <USBD_CDC_SOF+0x3c>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	701a      	strb	r2, [r3, #0]
			}
	}

	return 0;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd90      	pop	{r4, r7, pc}
 8008dfc:	20000848 	.word	0x20000848
 8008e00:	2000012c 	.word	0x2000012c

08008e04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4905      	ldr	r1, [pc, #20]	@ (8008e20 <CDC_Init_FS+0x1c>)
 8008e0c:	4805      	ldr	r0, [pc, #20]	@ (8008e24 <CDC_Init_FS+0x20>)
 8008e0e:	f7fe fe75 	bl	8007afc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e12:	4905      	ldr	r1, [pc, #20]	@ (8008e28 <CDC_Init_FS+0x24>)
 8008e14:	4803      	ldr	r0, [pc, #12]	@ (8008e24 <CDC_Init_FS+0x20>)
 8008e16:	f7fe fe8a 	bl	8007b2e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20000a4c 	.word	0x20000a4c
 8008e24:	2000037c 	.word	0x2000037c
 8008e28:	2000084c 	.word	0x2000084c

08008e2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bc80      	pop	{r7}
 8008e38:	4770      	bx	lr
	...

08008e3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	6039      	str	r1, [r7, #0]
 8008e46:	71fb      	strb	r3, [r7, #7]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	2b23      	cmp	r3, #35	@ 0x23
 8008e50:	f200 80a3 	bhi.w	8008f9a <CDC_Control_FS+0x15e>
 8008e54:	a201      	add	r2, pc, #4	@ (adr r2, 8008e5c <CDC_Control_FS+0x20>)
 8008e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5a:	bf00      	nop
 8008e5c:	08008f9b 	.word	0x08008f9b
 8008e60:	08008f9b 	.word	0x08008f9b
 8008e64:	08008f9b 	.word	0x08008f9b
 8008e68:	08008f9b 	.word	0x08008f9b
 8008e6c:	08008f9b 	.word	0x08008f9b
 8008e70:	08008f9b 	.word	0x08008f9b
 8008e74:	08008f9b 	.word	0x08008f9b
 8008e78:	08008f9b 	.word	0x08008f9b
 8008e7c:	08008f9b 	.word	0x08008f9b
 8008e80:	08008f9b 	.word	0x08008f9b
 8008e84:	08008f9b 	.word	0x08008f9b
 8008e88:	08008f9b 	.word	0x08008f9b
 8008e8c:	08008f9b 	.word	0x08008f9b
 8008e90:	08008f9b 	.word	0x08008f9b
 8008e94:	08008f9b 	.word	0x08008f9b
 8008e98:	08008f9b 	.word	0x08008f9b
 8008e9c:	08008f9b 	.word	0x08008f9b
 8008ea0:	08008f9b 	.word	0x08008f9b
 8008ea4:	08008f9b 	.word	0x08008f9b
 8008ea8:	08008f9b 	.word	0x08008f9b
 8008eac:	08008f9b 	.word	0x08008f9b
 8008eb0:	08008f9b 	.word	0x08008f9b
 8008eb4:	08008f9b 	.word	0x08008f9b
 8008eb8:	08008f9b 	.word	0x08008f9b
 8008ebc:	08008f9b 	.word	0x08008f9b
 8008ec0:	08008f9b 	.word	0x08008f9b
 8008ec4:	08008f9b 	.word	0x08008f9b
 8008ec8:	08008f9b 	.word	0x08008f9b
 8008ecc:	08008f9b 	.word	0x08008f9b
 8008ed0:	08008f9b 	.word	0x08008f9b
 8008ed4:	08008f9b 	.word	0x08008f9b
 8008ed8:	08008f9b 	.word	0x08008f9b
 8008edc:	08008eed 	.word	0x08008eed
 8008ee0:	08008f47 	.word	0x08008f47
 8008ee4:	08008f9b 	.word	0x08008f9b
 8008ee8:	08008f9b 	.word	0x08008f9b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008ef4:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 8008ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	3301      	adds	r3, #1
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	021b      	lsls	r3, r3, #8
 8008f02:	4313      	orrs	r3, r2
 8008f04:	4a28      	ldr	r2, [pc, #160]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f06:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 8008f08:	4b27      	ldr	r3, [pc, #156]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	3302      	adds	r3, #2
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	041b      	lsls	r3, r3, #16
 8008f14:	4313      	orrs	r3, r2
 8008f16:	4a24      	ldr	r2, [pc, #144]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f18:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 8008f1a:	4b23      	ldr	r3, [pc, #140]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	3303      	adds	r3, #3
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	061b      	lsls	r3, r3, #24
 8008f26:	4313      	orrs	r3, r2
 8008f28:	4a1f      	ldr	r2, [pc, #124]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f2a:	6013      	str	r3, [r2, #0]
    	LineCoding.format   = pbuf[4];
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	791a      	ldrb	r2, [r3, #4]
 8008f30:	4b1d      	ldr	r3, [pc, #116]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f32:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	795a      	ldrb	r2, [r3, #5]
 8008f38:	4b1b      	ldr	r3, [pc, #108]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f3a:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	799a      	ldrb	r2, [r3, #6]
 8008f40:	4b19      	ldr	r3, [pc, #100]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f42:	719a      	strb	r2, [r3, #6]
    break;
 8008f44:	e02a      	b.n	8008f9c <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008f46:	4b18      	ldr	r3, [pc, #96]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8008f50:	4b15      	ldr	r3, [pc, #84]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	0a1a      	lsrs	r2, r3, #8
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	b2d2      	uxtb	r2, r2
 8008f5c:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8008f5e:	4b12      	ldr	r3, [pc, #72]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	0c1a      	lsrs	r2, r3, #16
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	3302      	adds	r3, #2
 8008f68:	b2d2      	uxtb	r2, r2
 8008f6a:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8008f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	0e1a      	lsrs	r2, r3, #24
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	3303      	adds	r3, #3
 8008f76:	b2d2      	uxtb	r2, r2
 8008f78:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f80:	7912      	ldrb	r2, [r2, #4]
 8008f82:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	3305      	adds	r3, #5
 8008f88:	4a07      	ldr	r2, [pc, #28]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f8a:	7952      	ldrb	r2, [r2, #5]
 8008f8c:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	3306      	adds	r3, #6
 8008f92:	4a05      	ldr	r2, [pc, #20]	@ (8008fa8 <CDC_Control_FS+0x16c>)
 8008f94:	7992      	ldrb	r2, [r2, #6]
 8008f96:	701a      	strb	r2, [r3, #0]
    break;
 8008f98:	e000      	b.n	8008f9c <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f9a:	bf00      	nop
  }

  return (USBD_OK);
 8008f9c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bc80      	pop	{r7}
 8008fa6:	4770      	bx	lr
 8008fa8:	20000124 	.word	0x20000124

08008fac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fac:	b590      	push	{r4, r7, lr}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	for(int i=0;i<*Len;i++)
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	e009      	b.n	8008fd0 <CDC_Receive_FS+0x24>
	  {
		  cdcDataIn(Buf[i]);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7ff fed1 	bl	8008d6c <cdcDataIn>
	for(int i=0;i<*Len;i++)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	60fb      	str	r3, [r7, #12]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d8f0      	bhi.n	8008fbc <CDC_Receive_FS+0x10>
	  }

	uint32_t buf_len;

	//수신 버퍼에서 비어있는 데이터 양
	buf_len = (rx_len - cdcAvailable()) - 1;
 8008fda:	4b0d      	ldr	r3, [pc, #52]	@ (8009010 <CDC_Receive_FS+0x64>)
 8008fdc:	681c      	ldr	r4, [r3, #0]
 8008fde:	f7ff fea9 	bl	8008d34 <cdcAvailable>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	1ae3      	subs	r3, r4, r3
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	60bb      	str	r3, [r7, #8]


	if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2b3f      	cmp	r3, #63	@ 0x3f
 8008fee:	d907      	bls.n	8009000 <CDC_Receive_FS+0x54>
	{
		//다음 데이터도 보내줘
		 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ff0:	6879      	ldr	r1, [r7, #4]
 8008ff2:	4808      	ldr	r0, [pc, #32]	@ (8009014 <CDC_Receive_FS+0x68>)
 8008ff4:	f7fe fd9b 	bl	8007b2e <USBD_CDC_SetRxBuffer>
		 USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ff8:	4806      	ldr	r0, [pc, #24]	@ (8009014 <CDC_Receive_FS+0x68>)
 8008ffa:	f7fe fdab 	bl	8007b54 <USBD_CDC_ReceivePacket>
 8008ffe:	e002      	b.n	8009006 <CDC_Receive_FS+0x5a>
	}
	else
	{
		//버퍼 용량이 부족하니, 기다려라
		rx_full = true;
 8009000:	4b05      	ldr	r3, [pc, #20]	@ (8009018 <CDC_Receive_FS+0x6c>)
 8009002:	2201      	movs	r2, #1
 8009004:	701a      	strb	r2, [r3, #0]
	}
  return (USBD_OK);
 8009006:	2300      	movs	r3, #0




  /* USER CODE END 6 */
}
 8009008:	4618      	mov	r0, r3
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	bd90      	pop	{r4, r7, pc}
 8009010:	2000012c 	.word	0x2000012c
 8009014:	2000037c 	.word	0x2000037c
 8009018:	20000848 	.word	0x20000848

0800901c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	4603      	mov	r3, r0
 8009024:	6039      	str	r1, [r7, #0]
 8009026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	2212      	movs	r2, #18
 800902c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800902e:	4b03      	ldr	r3, [pc, #12]	@ (800903c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	bc80      	pop	{r7}
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	2000015c 	.word	0x2000015c

08009040 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	4603      	mov	r3, r0
 8009048:	6039      	str	r1, [r7, #0]
 800904a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	2204      	movs	r2, #4
 8009050:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009052:	4b03      	ldr	r3, [pc, #12]	@ (8009060 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009054:	4618      	mov	r0, r3
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	bc80      	pop	{r7}
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	20000170 	.word	0x20000170

08009064 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	6039      	str	r1, [r7, #0]
 800906e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009070:	79fb      	ldrb	r3, [r7, #7]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d105      	bne.n	8009082 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	4907      	ldr	r1, [pc, #28]	@ (8009098 <USBD_FS_ProductStrDescriptor+0x34>)
 800907a:	4808      	ldr	r0, [pc, #32]	@ (800909c <USBD_FS_ProductStrDescriptor+0x38>)
 800907c:	f7ff fd4d 	bl	8008b1a <USBD_GetString>
 8009080:	e004      	b.n	800908c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	4904      	ldr	r1, [pc, #16]	@ (8009098 <USBD_FS_ProductStrDescriptor+0x34>)
 8009086:	4805      	ldr	r0, [pc, #20]	@ (800909c <USBD_FS_ProductStrDescriptor+0x38>)
 8009088:	f7ff fd47 	bl	8008b1a <USBD_GetString>
  }
  return USBD_StrDesc;
 800908c:	4b02      	ldr	r3, [pc, #8]	@ (8009098 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20000c4c 	.word	0x20000c4c
 800909c:	08009814 	.word	0x08009814

080090a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	6039      	str	r1, [r7, #0]
 80090aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	4904      	ldr	r1, [pc, #16]	@ (80090c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090b0:	4804      	ldr	r0, [pc, #16]	@ (80090c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090b2:	f7ff fd32 	bl	8008b1a <USBD_GetString>
  return USBD_StrDesc;
 80090b6:	4b02      	ldr	r3, [pc, #8]	@ (80090c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20000c4c 	.word	0x20000c4c
 80090c4:	0800982c 	.word	0x0800982c

080090c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	4603      	mov	r3, r0
 80090d0:	6039      	str	r1, [r7, #0]
 80090d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	221a      	movs	r2, #26
 80090d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090da:	f000 f843 	bl	8009164 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090de:	4b02      	ldr	r3, [pc, #8]	@ (80090e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20000174 	.word	0x20000174

080090ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	4603      	mov	r3, r0
 80090f4:	6039      	str	r1, [r7, #0]
 80090f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090f8:	79fb      	ldrb	r3, [r7, #7]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d105      	bne.n	800910a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	4907      	ldr	r1, [pc, #28]	@ (8009120 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009102:	4808      	ldr	r0, [pc, #32]	@ (8009124 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009104:	f7ff fd09 	bl	8008b1a <USBD_GetString>
 8009108:	e004      	b.n	8009114 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	4904      	ldr	r1, [pc, #16]	@ (8009120 <USBD_FS_ConfigStrDescriptor+0x34>)
 800910e:	4805      	ldr	r0, [pc, #20]	@ (8009124 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009110:	f7ff fd03 	bl	8008b1a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009114:	4b02      	ldr	r3, [pc, #8]	@ (8009120 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000c4c 	.word	0x20000c4c
 8009124:	08009840 	.word	0x08009840

08009128 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	6039      	str	r1, [r7, #0]
 8009132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d105      	bne.n	8009146 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	4907      	ldr	r1, [pc, #28]	@ (800915c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800913e:	4808      	ldr	r0, [pc, #32]	@ (8009160 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009140:	f7ff fceb 	bl	8008b1a <USBD_GetString>
 8009144:	e004      	b.n	8009150 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	4904      	ldr	r1, [pc, #16]	@ (800915c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800914a:	4805      	ldr	r0, [pc, #20]	@ (8009160 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800914c:	f7ff fce5 	bl	8008b1a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009150:	4b02      	ldr	r3, [pc, #8]	@ (800915c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	20000c4c 	.word	0x20000c4c
 8009160:	0800984c 	.word	0x0800984c

08009164 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800916a:	4b0f      	ldr	r3, [pc, #60]	@ (80091a8 <Get_SerialNum+0x44>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009170:	4b0e      	ldr	r3, [pc, #56]	@ (80091ac <Get_SerialNum+0x48>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009176:	4b0e      	ldr	r3, [pc, #56]	@ (80091b0 <Get_SerialNum+0x4c>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4413      	add	r3, r2
 8009182:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d009      	beq.n	800919e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800918a:	2208      	movs	r2, #8
 800918c:	4909      	ldr	r1, [pc, #36]	@ (80091b4 <Get_SerialNum+0x50>)
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f000 f814 	bl	80091bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009194:	2204      	movs	r2, #4
 8009196:	4908      	ldr	r1, [pc, #32]	@ (80091b8 <Get_SerialNum+0x54>)
 8009198:	68b8      	ldr	r0, [r7, #8]
 800919a:	f000 f80f 	bl	80091bc <IntToUnicode>
  }
}
 800919e:	bf00      	nop
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	1ffff7e8 	.word	0x1ffff7e8
 80091ac:	1ffff7ec 	.word	0x1ffff7ec
 80091b0:	1ffff7f0 	.word	0x1ffff7f0
 80091b4:	20000176 	.word	0x20000176
 80091b8:	20000186 	.word	0x20000186

080091bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	4613      	mov	r3, r2
 80091c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091ce:	2300      	movs	r3, #0
 80091d0:	75fb      	strb	r3, [r7, #23]
 80091d2:	e027      	b.n	8009224 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	0f1b      	lsrs	r3, r3, #28
 80091d8:	2b09      	cmp	r3, #9
 80091da:	d80b      	bhi.n	80091f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	0f1b      	lsrs	r3, r3, #28
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	4619      	mov	r1, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	440b      	add	r3, r1
 80091ec:	3230      	adds	r2, #48	@ 0x30
 80091ee:	b2d2      	uxtb	r2, r2
 80091f0:	701a      	strb	r2, [r3, #0]
 80091f2:	e00a      	b.n	800920a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	0f1b      	lsrs	r3, r3, #28
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	4619      	mov	r1, r3
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	440b      	add	r3, r1
 8009204:	3237      	adds	r2, #55	@ 0x37
 8009206:	b2d2      	uxtb	r2, r2
 8009208:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	011b      	lsls	r3, r3, #4
 800920e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	3301      	adds	r3, #1
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	4413      	add	r3, r2
 800921a:	2200      	movs	r2, #0
 800921c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	3301      	adds	r3, #1
 8009222:	75fb      	strb	r3, [r7, #23]
 8009224:	7dfa      	ldrb	r2, [r7, #23]
 8009226:	79fb      	ldrb	r3, [r7, #7]
 8009228:	429a      	cmp	r2, r3
 800922a:	d3d3      	bcc.n	80091d4 <IntToUnicode+0x18>
  }
}
 800922c:	bf00      	nop
 800922e:	bf00      	nop
 8009230:	371c      	adds	r7, #28
 8009232:	46bd      	mov	sp, r7
 8009234:	bc80      	pop	{r7}
 8009236:	4770      	bx	lr

08009238 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a0d      	ldr	r2, [pc, #52]	@ (800927c <HAL_PCD_MspInit+0x44>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d113      	bne.n	8009272 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800924a:	4b0d      	ldr	r3, [pc, #52]	@ (8009280 <HAL_PCD_MspInit+0x48>)
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	4a0c      	ldr	r2, [pc, #48]	@ (8009280 <HAL_PCD_MspInit+0x48>)
 8009250:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009254:	61d3      	str	r3, [r2, #28]
 8009256:	4b0a      	ldr	r3, [pc, #40]	@ (8009280 <HAL_PCD_MspInit+0x48>)
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009262:	2200      	movs	r2, #0
 8009264:	2100      	movs	r1, #0
 8009266:	2014      	movs	r0, #20
 8009268:	f7f7 fd45 	bl	8000cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800926c:	2014      	movs	r0, #20
 800926e:	f7f7 fd5e 	bl	8000d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009272:	bf00      	nop
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	40005c00 	.word	0x40005c00
 8009280:	40021000 	.word	0x40021000

08009284 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009298:	4619      	mov	r1, r3
 800929a:	4610      	mov	r0, r2
 800929c:	f7fe fd10 	bl	8007cc0 <USBD_LL_SetupStage>
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	460b      	mov	r3, r1
 80092b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80092ba:	78fa      	ldrb	r2, [r7, #3]
 80092bc:	6879      	ldr	r1, [r7, #4]
 80092be:	4613      	mov	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4413      	add	r3, r2
 80092c4:	00db      	lsls	r3, r3, #3
 80092c6:	440b      	add	r3, r1
 80092c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	78fb      	ldrb	r3, [r7, #3]
 80092d0:	4619      	mov	r1, r3
 80092d2:	f7fe fd42 	bl	8007d5a <USBD_LL_DataOutStage>
}
 80092d6:	bf00      	nop
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b082      	sub	sp, #8
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	460b      	mov	r3, r1
 80092e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80092f0:	78fa      	ldrb	r2, [r7, #3]
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	4613      	mov	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	440b      	add	r3, r1
 80092fe:	3324      	adds	r3, #36	@ 0x24
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	78fb      	ldrb	r3, [r7, #3]
 8009304:	4619      	mov	r1, r3
 8009306:	f7fe fd99 	bl	8007e3c <USBD_LL_DataInStage>
}
 800930a:	bf00      	nop
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009320:	4618      	mov	r0, r3
 8009322:	f7fe fea9 	bl	8008078 <USBD_LL_SOF>
}
 8009326:	bf00      	nop
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009336:	2301      	movs	r3, #1
 8009338:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	799b      	ldrb	r3, [r3, #6]
 800933e:	2b02      	cmp	r3, #2
 8009340:	d001      	beq.n	8009346 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009342:	f7f6 ffbe 	bl	80002c2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800934c:	7bfa      	ldrb	r2, [r7, #15]
 800934e:	4611      	mov	r1, r2
 8009350:	4618      	mov	r0, r3
 8009352:	f7fe fe59 	bl	8008008 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800935c:	4618      	mov	r0, r3
 800935e:	f7fe fe12 	bl	8007f86 <USBD_LL_Reset>
}
 8009362:	bf00      	nop
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
	...

0800936c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe fe53 	bl	8008026 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	7a9b      	ldrb	r3, [r3, #10]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009388:	4b04      	ldr	r3, [pc, #16]	@ (800939c <HAL_PCD_SuspendCallback+0x30>)
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	4a03      	ldr	r2, [pc, #12]	@ (800939c <HAL_PCD_SuspendCallback+0x30>)
 800938e:	f043 0306 	orr.w	r3, r3, #6
 8009392:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009394:	bf00      	nop
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	e000ed00 	.word	0xe000ed00

080093a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe fe4d 	bl	800804e <USBD_LL_Resume>
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80093c4:	4a28      	ldr	r2, [pc, #160]	@ (8009468 <USBD_LL_Init+0xac>)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a26      	ldr	r2, [pc, #152]	@ (8009468 <USBD_LL_Init+0xac>)
 80093d0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80093d4:	4b24      	ldr	r3, [pc, #144]	@ (8009468 <USBD_LL_Init+0xac>)
 80093d6:	4a25      	ldr	r2, [pc, #148]	@ (800946c <USBD_LL_Init+0xb0>)
 80093d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80093da:	4b23      	ldr	r3, [pc, #140]	@ (8009468 <USBD_LL_Init+0xac>)
 80093dc:	2208      	movs	r2, #8
 80093de:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80093e0:	4b21      	ldr	r3, [pc, #132]	@ (8009468 <USBD_LL_Init+0xac>)
 80093e2:	2202      	movs	r2, #2
 80093e4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80093e6:	4b20      	ldr	r3, [pc, #128]	@ (8009468 <USBD_LL_Init+0xac>)
 80093e8:	2200      	movs	r2, #0
 80093ea:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80093ec:	4b1e      	ldr	r3, [pc, #120]	@ (8009468 <USBD_LL_Init+0xac>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80093f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009468 <USBD_LL_Init+0xac>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80093f8:	481b      	ldr	r0, [pc, #108]	@ (8009468 <USBD_LL_Init+0xac>)
 80093fa:	f7f8 fa30 	bl	800185e <HAL_PCD_Init>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009404:	f7f6 ff5d 	bl	80002c2 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800940e:	2318      	movs	r3, #24
 8009410:	2200      	movs	r2, #0
 8009412:	2100      	movs	r1, #0
 8009414:	f7f9 ff41 	bl	800329a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800941e:	2358      	movs	r3, #88	@ 0x58
 8009420:	2200      	movs	r2, #0
 8009422:	2180      	movs	r1, #128	@ 0x80
 8009424:	f7f9 ff39 	bl	800329a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800942e:	23c0      	movs	r3, #192	@ 0xc0
 8009430:	2200      	movs	r2, #0
 8009432:	2181      	movs	r1, #129	@ 0x81
 8009434:	f7f9 ff31 	bl	800329a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800943e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009442:	2200      	movs	r2, #0
 8009444:	2101      	movs	r1, #1
 8009446:	f7f9 ff28 	bl	800329a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009450:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009454:	2200      	movs	r2, #0
 8009456:	2182      	movs	r1, #130	@ 0x82
 8009458:	f7f9 ff1f 	bl	800329a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	20000e4c 	.word	0x20000e4c
 800946c:	40005c00 	.word	0x40005c00

08009470 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009486:	4618      	mov	r0, r3
 8009488:	f7f8 fadf 	bl	8001a4a <HAL_PCD_Start>
 800948c:	4603      	mov	r3, r0
 800948e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 f94e 	bl	8009734 <USBD_Get_USB_Status>
 8009498:	4603      	mov	r3, r0
 800949a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800949c:	7bbb      	ldrb	r3, [r7, #14]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	4608      	mov	r0, r1
 80094b0:	4611      	mov	r1, r2
 80094b2:	461a      	mov	r2, r3
 80094b4:	4603      	mov	r3, r0
 80094b6:	70fb      	strb	r3, [r7, #3]
 80094b8:	460b      	mov	r3, r1
 80094ba:	70bb      	strb	r3, [r7, #2]
 80094bc:	4613      	mov	r3, r2
 80094be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80094ce:	78bb      	ldrb	r3, [r7, #2]
 80094d0:	883a      	ldrh	r2, [r7, #0]
 80094d2:	78f9      	ldrb	r1, [r7, #3]
 80094d4:	f7f8 fc33 	bl	8001d3e <HAL_PCD_EP_Open>
 80094d8:	4603      	mov	r3, r0
 80094da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 f928 	bl	8009734 <USBD_Get_USB_Status>
 80094e4:	4603      	mov	r3, r0
 80094e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b084      	sub	sp, #16
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	460b      	mov	r3, r1
 80094fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800950c:	78fa      	ldrb	r2, [r7, #3]
 800950e:	4611      	mov	r1, r2
 8009510:	4618      	mov	r0, r3
 8009512:	f7f8 fc71 	bl	8001df8 <HAL_PCD_EP_Close>
 8009516:	4603      	mov	r3, r0
 8009518:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	4618      	mov	r0, r3
 800951e:	f000 f909 	bl	8009734 <USBD_Get_USB_Status>
 8009522:	4603      	mov	r3, r0
 8009524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009526:	7bbb      	ldrb	r3, [r7, #14]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800954a:	78fa      	ldrb	r2, [r7, #3]
 800954c:	4611      	mov	r1, r2
 800954e:	4618      	mov	r0, r3
 8009550:	f7f8 fd19 	bl	8001f86 <HAL_PCD_EP_SetStall>
 8009554:	4603      	mov	r3, r0
 8009556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	4618      	mov	r0, r3
 800955c:	f000 f8ea 	bl	8009734 <USBD_Get_USB_Status>
 8009560:	4603      	mov	r3, r0
 8009562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009564:	7bbb      	ldrb	r3, [r7, #14]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	460b      	mov	r3, r1
 8009578:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009588:	78fa      	ldrb	r2, [r7, #3]
 800958a:	4611      	mov	r1, r2
 800958c:	4618      	mov	r0, r3
 800958e:	f7f8 fd5a 	bl	8002046 <HAL_PCD_EP_ClrStall>
 8009592:	4603      	mov	r3, r0
 8009594:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	4618      	mov	r0, r3
 800959a:	f000 f8cb 	bl	8009734 <USBD_Get_USB_Status>
 800959e:	4603      	mov	r3, r0
 80095a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80095be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	da0b      	bge.n	80095e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095c8:	78fb      	ldrb	r3, [r7, #3]
 80095ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095ce:	68f9      	ldr	r1, [r7, #12]
 80095d0:	4613      	mov	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4413      	add	r3, r2
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	440b      	add	r3, r1
 80095da:	3312      	adds	r3, #18
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	e00b      	b.n	80095f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095e6:	68f9      	ldr	r1, [r7, #12]
 80095e8:	4613      	mov	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	440b      	add	r3, r1
 80095f2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80095f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3714      	adds	r7, #20
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bc80      	pop	{r7}
 8009600:	4770      	bx	lr

08009602 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b084      	sub	sp, #16
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	460b      	mov	r3, r1
 800960c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800961c:	78fa      	ldrb	r2, [r7, #3]
 800961e:	4611      	mov	r1, r2
 8009620:	4618      	mov	r0, r3
 8009622:	f7f8 fb68 	bl	8001cf6 <HAL_PCD_SetAddress>
 8009626:	4603      	mov	r3, r0
 8009628:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	4618      	mov	r0, r3
 800962e:	f000 f881 	bl	8009734 <USBD_Get_USB_Status>
 8009632:	4603      	mov	r3, r0
 8009634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009636:	7bbb      	ldrb	r3, [r7, #14]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	607a      	str	r2, [r7, #4]
 800964a:	461a      	mov	r2, r3
 800964c:	460b      	mov	r3, r1
 800964e:	72fb      	strb	r3, [r7, #11]
 8009650:	4613      	mov	r3, r2
 8009652:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009662:	893b      	ldrh	r3, [r7, #8]
 8009664:	7af9      	ldrb	r1, [r7, #11]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	f7f8 fc56 	bl	8001f18 <HAL_PCD_EP_Transmit>
 800966c:	4603      	mov	r3, r0
 800966e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	4618      	mov	r0, r3
 8009674:	f000 f85e 	bl	8009734 <USBD_Get_USB_Status>
 8009678:	4603      	mov	r3, r0
 800967a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800967c:	7dbb      	ldrb	r3, [r7, #22]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b086      	sub	sp, #24
 800968a:	af00      	add	r7, sp, #0
 800968c:	60f8      	str	r0, [r7, #12]
 800968e:	607a      	str	r2, [r7, #4]
 8009690:	461a      	mov	r2, r3
 8009692:	460b      	mov	r3, r1
 8009694:	72fb      	strb	r3, [r7, #11]
 8009696:	4613      	mov	r3, r2
 8009698:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80096a8:	893b      	ldrh	r3, [r7, #8]
 80096aa:	7af9      	ldrb	r1, [r7, #11]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	f7f8 fbeb 	bl	8001e88 <HAL_PCD_EP_Receive>
 80096b2:	4603      	mov	r3, r0
 80096b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 f83b 	bl	8009734 <USBD_Get_USB_Status>
 80096be:	4603      	mov	r3, r0
 80096c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3718      	adds	r7, #24
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80096de:	78fa      	ldrb	r2, [r7, #3]
 80096e0:	4611      	mov	r1, r2
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7f8 fc01 	bl	8001eea <HAL_PCD_EP_GetRxCount>
 80096e8:	4603      	mov	r3, r0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096fc:	4b02      	ldr	r3, [pc, #8]	@ (8009708 <USBD_static_malloc+0x14>)
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	bc80      	pop	{r7}
 8009706:	4770      	bx	lr
 8009708:	20001124 	.word	0x20001124

0800970c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]

}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	bc80      	pop	{r7}
 800971c:	4770      	bx	lr

0800971e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800971e:	b480      	push	{r7}
 8009720:	b083      	sub	sp, #12
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	460b      	mov	r3, r1
 8009728:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800972a:	bf00      	nop
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	bc80      	pop	{r7}
 8009732:	4770      	bx	lr

08009734 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009742:	79fb      	ldrb	r3, [r7, #7]
 8009744:	2b03      	cmp	r3, #3
 8009746:	d817      	bhi.n	8009778 <USBD_Get_USB_Status+0x44>
 8009748:	a201      	add	r2, pc, #4	@ (adr r2, 8009750 <USBD_Get_USB_Status+0x1c>)
 800974a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974e:	bf00      	nop
 8009750:	08009761 	.word	0x08009761
 8009754:	08009767 	.word	0x08009767
 8009758:	0800976d 	.word	0x0800976d
 800975c:	08009773 	.word	0x08009773
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	73fb      	strb	r3, [r7, #15]
    break;
 8009764:	e00b      	b.n	800977e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009766:	2302      	movs	r3, #2
 8009768:	73fb      	strb	r3, [r7, #15]
    break;
 800976a:	e008      	b.n	800977e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800976c:	2301      	movs	r3, #1
 800976e:	73fb      	strb	r3, [r7, #15]
    break;
 8009770:	e005      	b.n	800977e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009772:	2302      	movs	r3, #2
 8009774:	73fb      	strb	r3, [r7, #15]
    break;
 8009776:	e002      	b.n	800977e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009778:	2302      	movs	r3, #2
 800977a:	73fb      	strb	r3, [r7, #15]
    break;
 800977c:	bf00      	nop
  }
  return usb_status;
 800977e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	bc80      	pop	{r7}
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop

0800978c <main>:




int main(void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	af00      	add	r7, sp, #0
	hwInit();
 8009790:	f7f7 f920 	bl	80009d4 <hwInit>
	apInit();
 8009794:	f7f6 fcda 	bl	800014c <apInit>

	apMain();
 8009798:	f7f6 fce6 	bl	8000168 <apMain>

	return 0;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <memset>:
 80097a2:	4603      	mov	r3, r0
 80097a4:	4402      	add	r2, r0
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d100      	bne.n	80097ac <memset+0xa>
 80097aa:	4770      	bx	lr
 80097ac:	f803 1b01 	strb.w	r1, [r3], #1
 80097b0:	e7f9      	b.n	80097a6 <memset+0x4>
	...

080097b4 <__libc_init_array>:
 80097b4:	b570      	push	{r4, r5, r6, lr}
 80097b6:	2600      	movs	r6, #0
 80097b8:	4d0c      	ldr	r5, [pc, #48]	@ (80097ec <__libc_init_array+0x38>)
 80097ba:	4c0d      	ldr	r4, [pc, #52]	@ (80097f0 <__libc_init_array+0x3c>)
 80097bc:	1b64      	subs	r4, r4, r5
 80097be:	10a4      	asrs	r4, r4, #2
 80097c0:	42a6      	cmp	r6, r4
 80097c2:	d109      	bne.n	80097d8 <__libc_init_array+0x24>
 80097c4:	f000 f81a 	bl	80097fc <_init>
 80097c8:	2600      	movs	r6, #0
 80097ca:	4d0a      	ldr	r5, [pc, #40]	@ (80097f4 <__libc_init_array+0x40>)
 80097cc:	4c0a      	ldr	r4, [pc, #40]	@ (80097f8 <__libc_init_array+0x44>)
 80097ce:	1b64      	subs	r4, r4, r5
 80097d0:	10a4      	asrs	r4, r4, #2
 80097d2:	42a6      	cmp	r6, r4
 80097d4:	d105      	bne.n	80097e2 <__libc_init_array+0x2e>
 80097d6:	bd70      	pop	{r4, r5, r6, pc}
 80097d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80097dc:	4798      	blx	r3
 80097de:	3601      	adds	r6, #1
 80097e0:	e7ee      	b.n	80097c0 <__libc_init_array+0xc>
 80097e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e6:	4798      	blx	r3
 80097e8:	3601      	adds	r6, #1
 80097ea:	e7f2      	b.n	80097d2 <__libc_init_array+0x1e>
 80097ec:	0800989c 	.word	0x0800989c
 80097f0:	0800989c 	.word	0x0800989c
 80097f4:	0800989c 	.word	0x0800989c
 80097f8:	080098a0 	.word	0x080098a0

080097fc <_init>:
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fe:	bf00      	nop
 8009800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009802:	bc08      	pop	{r3}
 8009804:	469e      	mov	lr, r3
 8009806:	4770      	bx	lr

08009808 <_fini>:
 8009808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980a:	bf00      	nop
 800980c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980e:	bc08      	pop	{r3}
 8009810:	469e      	mov	lr, r3
 8009812:	4770      	bx	lr
