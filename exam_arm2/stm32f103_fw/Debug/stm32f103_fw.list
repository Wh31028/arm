
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008424  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08008530  08008530  00009530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085f8  080085f8  0000a1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080085f8  080085f8  0000a1e0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080085f8  080085f8  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085f8  080085f8  000095f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085fc  080085fc  000095fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08008600  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001138  200001e0  080087e0  0000a1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001318  080087e0  0000a318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca36  00000000  00000000  0000a209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f8e  00000000  00000000  00016c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  00019bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000086d  00000000  00000000  0001a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a777  00000000  00000000  0001afed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143bb  00000000  00000000  00035764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008512e  00000000  00000000  00049b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cec4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003094  00000000  00000000  000cec90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000d1d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008518 	.word	0x08008518

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08008518 	.word	0x08008518

0800014c <apInit>:
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);



void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 57600);
 8000150:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fa73 	bl	8000640 <uartOpen>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
	...

08000160 <apMain>:

void apMain(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	uint32_t pre_baud;


	pre_baud = uartGetBaud(_DEF_LED1);
 8000166:	2000      	movs	r0, #0
 8000168:	f000 fafb 	bl	8000762 <uartGetBaud>
 800016c:	60b8      	str	r0, [r7, #8]
	pre_time = millis();
 800016e:	f000 f89a 	bl	80002a6 <millis>
 8000172:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if(millis() - pre_time >= 500)
 8000174:	f000 f897 	bl	80002a6 <millis>
 8000178:	4602      	mov	r2, r0
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	1ad3      	subs	r3, r2, r3
 800017e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000182:	d305      	bcc.n	8000190 <apMain+0x30>
		{
			pre_time = millis();
 8000184:	f000 f88f 	bl	80002a6 <millis>
 8000188:	60f8      	str	r0, [r7, #12]
			ledToggle(_DEF_LED1);
 800018a:	2000      	movs	r0, #0
 800018c:	f000 fa22 	bl	80005d4 <ledToggle>
		}
	   if(uartAvailable(_DEF_UART1) > 0)
 8000190:	2000      	movs	r0, #0
 8000192:	f000 fa6f 	bl	8000674 <uartAvailable>
 8000196:	4603      	mov	r3, r0
 8000198:	2b00      	cmp	r3, #0
 800019a:	d00a      	beq.n	80001b2 <apMain+0x52>
	   {
		 uint8_t rx_data;

		 rx_data = uartRead(_DEF_UART1);
 800019c:	2000      	movs	r0, #0
 800019e:	f000 fa7c 	bl	800069a <uartRead>
 80001a2:	4603      	mov	r3, r0
 80001a4:	71fb      	strb	r3, [r7, #7]

		 uartPrintf(_DEF_UART1,"RxData : %c 0x%X\n",rx_data, rx_data);
 80001a6:	79fa      	ldrb	r2, [r7, #7]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	490c      	ldr	r1, [pc, #48]	@ (80001dc <apMain+0x7c>)
 80001ac:	2000      	movs	r0, #0
 80001ae:	f000 faa0 	bl	80006f2 <uartPrintf>
	   }
	   if(uartGetBaud(_DEF_LED1) != pre_baud)
 80001b2:	2000      	movs	r0, #0
 80001b4:	f000 fad5 	bl	8000762 <uartGetBaud>
 80001b8:	4602      	mov	r2, r0
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	4293      	cmp	r3, r2
 80001be:	d0d9      	beq.n	8000174 <apMain+0x14>
	   {
		   pre_baud = uartGetBaud(_DEF_LED1);
 80001c0:	2000      	movs	r0, #0
 80001c2:	f000 face 	bl	8000762 <uartGetBaud>
 80001c6:	60b8      	str	r0, [r7, #8]
		   uartPrintf(_DEF_UART1,"ChangedBaud : %d\n",uartGetBaud(_DEF_LED1));
 80001c8:	2000      	movs	r0, #0
 80001ca:	f000 faca 	bl	8000762 <uartGetBaud>
 80001ce:	4603      	mov	r3, r0
 80001d0:	461a      	mov	r2, r3
 80001d2:	4903      	ldr	r1, [pc, #12]	@ (80001e0 <apMain+0x80>)
 80001d4:	2000      	movs	r0, #0
 80001d6:	f000 fa8c 	bl	80006f2 <uartPrintf>
		if(millis() - pre_time >= 500)
 80001da:	e7cb      	b.n	8000174 <apMain+0x14>
 80001dc:	08008530 	.word	0x08008530
 80001e0:	08008544 	.word	0x08008544

080001e4 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af00      	add	r7, sp, #0
	 HAL_Init();
 80001ea:	f000 fad7 	bl	800079c <HAL_Init>
	 SystemClock_Config();
 80001ee:	f000 f861 	bl	80002b4 <SystemClock_Config>

	 __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f2:	4b25      	ldr	r3, [pc, #148]	@ (8000288 <bspInit+0xa4>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	4a24      	ldr	r2, [pc, #144]	@ (8000288 <bspInit+0xa4>)
 80001f8:	f043 0320 	orr.w	r3, r3, #32
 80001fc:	6193      	str	r3, [r2, #24]
 80001fe:	4b22      	ldr	r3, [pc, #136]	@ (8000288 <bspInit+0xa4>)
 8000200:	699b      	ldr	r3, [r3, #24]
 8000202:	f003 0320 	and.w	r3, r3, #32
 8000206:	607b      	str	r3, [r7, #4]
 8000208:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800020a:	4b1f      	ldr	r3, [pc, #124]	@ (8000288 <bspInit+0xa4>)
 800020c:	699b      	ldr	r3, [r3, #24]
 800020e:	4a1e      	ldr	r2, [pc, #120]	@ (8000288 <bspInit+0xa4>)
 8000210:	f043 0304 	orr.w	r3, r3, #4
 8000214:	6193      	str	r3, [r2, #24]
 8000216:	4b1c      	ldr	r3, [pc, #112]	@ (8000288 <bspInit+0xa4>)
 8000218:	699b      	ldr	r3, [r3, #24]
 800021a:	f003 0304 	and.w	r3, r3, #4
 800021e:	603b      	str	r3, [r7, #0]
 8000220:	683b      	ldr	r3, [r7, #0]


	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000222:	f107 0308 	add.w	r3, r7, #8
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]

	 GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000234:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  //open drain
 8000236:	2311      	movs	r3, #17
 8000238:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800023e:	2302      	movs	r3, #2
 8000240:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000242:	f107 0308 	add.w	r3, r7, #8
 8000246:	4619      	mov	r1, r3
 8000248:	4810      	ldr	r0, [pc, #64]	@ (800028c <bspInit+0xa8>)
 800024a:	f000 fc3b 	bl	8000ac4 <HAL_GPIO_Init>

	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET); //회로에 풀업이
 800024e:	2200      	movs	r2, #0
 8000250:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000254:	480d      	ldr	r0, [pc, #52]	@ (800028c <bspInit+0xa8>)
 8000256:	f000 fdb9 	bl	8000dcc <HAL_GPIO_WritePin>
	 delay(100);
 800025a:	2064      	movs	r0, #100	@ 0x64
 800025c:	f000 f818 	bl	8000290 <delay>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_SET);
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000266:	4809      	ldr	r0, [pc, #36]	@ (800028c <bspInit+0xa8>)
 8000268:	f000 fdb0 	bl	8000dcc <HAL_GPIO_WritePin>

	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000270:	f107 0308 	add.w	r3, r7, #8
 8000274:	4619      	mov	r1, r3
 8000276:	4805      	ldr	r0, [pc, #20]	@ (800028c <bspInit+0xa8>)
 8000278:	f000 fc24 	bl	8000ac4 <HAL_GPIO_Init>


	 MX_USB_DEVICE_Init();
 800027c:	f006 fece 	bl	800701c <MX_USB_DEVICE_Init>
}
 8000280:	bf00      	nop
 8000282:	3718      	adds	r7, #24
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40021000 	.word	0x40021000
 800028c:	40010800 	.word	0x40010800

08000290 <delay>:

void delay(uint32_t ms)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f000 fae1 	bl	8000860 <HAL_Delay>
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <millis>:

uint32_t millis(void)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80002aa:	f000 facf 	bl	800084c <HAL_GetTick>
 80002ae:	4603      	mov	r3, r0
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <SystemClock_Config>:



void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b094      	sub	sp, #80	@ 0x50
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002be:	2228      	movs	r2, #40	@ 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f007 fc9a 	bl	8007bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e4:	2301      	movs	r3, #1
 80002e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f6:	2302      	movs	r3, #2
 80002f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000300:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800030a:	4618      	mov	r0, r3
 800030c:	f002 faf0 	bl	80028f0 <HAL_RCC_OscConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000316:	f000 f827 	bl	8000368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031a:	230f      	movs	r3, #15
 800031c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031e:	2302      	movs	r3, #2
 8000320:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000326:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800032a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000330:	f107 0314 	add.w	r3, r7, #20
 8000334:	2102      	movs	r1, #2
 8000336:	4618      	mov	r0, r3
 8000338:	f002 fd5c 	bl	8002df4 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000342:	f000 f811 	bl	8000368 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000346:	2310      	movs	r3, #16
 8000348:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	4618      	mov	r0, r3
 8000352:	f002 feab 	bl	80030ac <HAL_RCCEx_PeriphCLKConfig>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800035c:	f000 f804 	bl	8000368 <Error_Handler>
  }
}
 8000360:	bf00      	nop
 8000362:	3750      	adds	r7, #80	@ 0x50
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800036c:	b672      	cpsid	i
}
 800036e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <Error_Handler+0x8>

08000374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	4b15      	ldr	r3, [pc, #84]	@ (80003d0 <HAL_MspInit+0x5c>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	4a14      	ldr	r2, [pc, #80]	@ (80003d0 <HAL_MspInit+0x5c>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6193      	str	r3, [r2, #24]
 8000386:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <HAL_MspInit+0x5c>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000392:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <HAL_MspInit+0x5c>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	4a0e      	ldr	r2, [pc, #56]	@ (80003d0 <HAL_MspInit+0x5c>)
 8000398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800039c:	61d3      	str	r3, [r2, #28]
 800039e:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <HAL_MspInit+0x5c>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003aa:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <HAL_MspInit+0x60>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	4a04      	ldr	r2, [pc, #16]	@ (80003d4 <HAL_MspInit+0x60>)
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	40021000 	.word	0x40021000
 80003d4:	40010000 	.word	0x40010000

080003d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <NMI_Handler+0x4>

080003e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <HardFault_Handler+0x4>

080003e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <MemManage_Handler+0x4>

080003f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f4:	bf00      	nop
 80003f6:	e7fd      	b.n	80003f4 <BusFault_Handler+0x4>

080003f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003fc:	bf00      	nop
 80003fe:	e7fd      	b.n	80003fc <UsageFault_Handler+0x4>

08000400 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr

0800040c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr

08000418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000428:	f000 f9fe 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}

08000430 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000434:	4802      	ldr	r0, [pc, #8]	@ (8000440 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000436:	f000 fe16 	bl	8001066 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000cd8 	.word	0x20000cd8

08000444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800044c:	4a14      	ldr	r2, [pc, #80]	@ (80004a0 <_sbrk+0x5c>)
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <_sbrk+0x60>)
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d102      	bne.n	8000466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000460:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <_sbrk+0x64>)
 8000462:	4a12      	ldr	r2, [pc, #72]	@ (80004ac <_sbrk+0x68>)
 8000464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000466:	4b10      	ldr	r3, [pc, #64]	@ (80004a8 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	693a      	ldr	r2, [r7, #16]
 8000470:	429a      	cmp	r2, r3
 8000472:	d207      	bcs.n	8000484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000474:	f007 fbca 	bl	8007c0c <__errno>
 8000478:	4603      	mov	r3, r0
 800047a:	220c      	movs	r2, #12
 800047c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
 8000482:	e009      	b.n	8000498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000484:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800048a:	4b07      	ldr	r3, [pc, #28]	@ (80004a8 <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	4a05      	ldr	r2, [pc, #20]	@ (80004a8 <_sbrk+0x64>)
 8000494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20005000 	.word	0x20005000
 80004a4:	00000400 	.word	0x00000400
 80004a8:	200001fc 	.word	0x200001fc
 80004ac:	20001318 	.word	0x20001318

080004b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004bc:	f7ff fff8 	bl	80004b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c0:	480b      	ldr	r0, [pc, #44]	@ (80004f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004c2:	490c      	ldr	r1, [pc, #48]	@ (80004f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004c4:	4a0c      	ldr	r2, [pc, #48]	@ (80004f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c8:	e002      	b.n	80004d0 <LoopCopyDataInit>

080004ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ce:	3304      	adds	r3, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d4:	d3f9      	bcc.n	80004ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d6:	4a09      	ldr	r2, [pc, #36]	@ (80004fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004d8:	4c09      	ldr	r4, [pc, #36]	@ (8000500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004dc:	e001      	b.n	80004e2 <LoopFillZerobss>

080004de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e0:	3204      	adds	r2, #4

080004e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e4:	d3fb      	bcc.n	80004de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004e6:	f007 fb97 	bl	8007c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ea:	f007 fb3f 	bl	8007b6c <main>
  bx lr
 80004ee:	4770      	bx	lr
  ldr r0, =_sdata
 80004f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80004f8:	08008600 	.word	0x08008600
  ldr r2, =_sbss
 80004fc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000500:	20001318 	.word	0x20001318

08000504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC1_2_IRQHandler>
	...

08000508 <ledInit>:
};



bool ledInit(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
	bool ret = true;
 800050e:	2301      	movs	r3, #1
 8000510:	76fb      	strb	r3, [r7, #27]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]

	 /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000520:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <ledInit+0x84>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a19      	ldr	r2, [pc, #100]	@ (800058c <ledInit+0x84>)
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b17      	ldr	r3, [pc, #92]	@ (800058c <ledInit+0x84>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0308 	and.w	r3, r3, #8
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]

	 /*Configure GPIO pin : PB12 */

	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	2301      	movs	r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	613b      	str	r3, [r7, #16]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	2302      	movs	r3, #2
 8000542:	617b      	str	r3, [r7, #20]

	 for(int i=0;i<LED_MAX_CH;i++)
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
 8000548:	e017      	b.n	800057a <ledInit+0x72>
	 {
		 GPIO_InitStruct.Pin = led_tbl[i].pin;
 800054a:	4a11      	ldr	r2, [pc, #68]	@ (8000590 <ledInit+0x88>)
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	4413      	add	r3, r2
 8000552:	889b      	ldrh	r3, [r3, #4]
 8000554:	60bb      	str	r3, [r7, #8]
		 HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000556:	4a0e      	ldr	r2, [pc, #56]	@ (8000590 <ledInit+0x88>)
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800055e:	f107 0208 	add.w	r2, r7, #8
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f000 faad 	bl	8000ac4 <HAL_GPIO_Init>
		 ledOff(i);
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	4618      	mov	r0, r3
 8000570:	f000 f810 	bl	8000594 <ledOff>
	 for(int i=0;i<LED_MAX_CH;i++)
 8000574:	69fb      	ldr	r3, [r7, #28]
 8000576:	3301      	adds	r3, #1
 8000578:	61fb      	str	r3, [r7, #28]
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	2b00      	cmp	r3, #0
 800057e:	dde4      	ble.n	800054a <ledInit+0x42>
	 }

	return ret;
 8000580:	7efb      	ldrb	r3, [r7, #27]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3720      	adds	r7, #32
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000
 8000590:	20000004 	.word	0x20000004

08000594 <ledOff>:
{
	if(ch >=LED_MAX_CH) return;
	 HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state); // Reset이 0
}
void ledOff(uint8_t ch)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	if(ch >=LED_MAX_CH) return;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d111      	bne.n	80005c8 <ledOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	4a0a      	ldr	r2, [pc, #40]	@ (80005d0 <ledOff+0x3c>)
 80005a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4a08      	ldr	r2, [pc, #32]	@ (80005d0 <ledOff+0x3c>)
 80005b0:	00db      	lsls	r3, r3, #3
 80005b2:	4413      	add	r3, r2
 80005b4:	8899      	ldrh	r1, [r3, #4]
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	4a05      	ldr	r2, [pc, #20]	@ (80005d0 <ledOff+0x3c>)
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	4413      	add	r3, r2
 80005be:	79db      	ldrb	r3, [r3, #7]
 80005c0:	461a      	mov	r2, r3
 80005c2:	f000 fc03 	bl	8000dcc <HAL_GPIO_WritePin>
 80005c6:	e000      	b.n	80005ca <ledOff+0x36>
	if(ch >=LED_MAX_CH) return;
 80005c8:	bf00      	nop

}
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000004 	.word	0x20000004

080005d4 <ledToggle>:
void ledToggle(uint8_t ch)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	if(ch >=LED_MAX_CH) return;
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10d      	bne.n	8000600 <ledToggle+0x2c>
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	4a08      	ldr	r2, [pc, #32]	@ (8000608 <ledToggle+0x34>)
 80005e8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	4906      	ldr	r1, [pc, #24]	@ (8000608 <ledToggle+0x34>)
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	440b      	add	r3, r1
 80005f4:	889b      	ldrh	r3, [r3, #4]
 80005f6:	4619      	mov	r1, r3
 80005f8:	4610      	mov	r0, r2
 80005fa:	f000 fbff 	bl	8000dfc <HAL_GPIO_TogglePin>
 80005fe:	e000      	b.n	8000602 <ledToggle+0x2e>
	if(ch >=LED_MAX_CH) return;
 8000600:	bf00      	nop
}
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000004 	.word	0x20000004

0800060c <uartInit>:
extern void     cdcDataIn(uint8_t rx_data);
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);
extern uint32_t cdcGetBaud(void);

bool  uartInit(void)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
	for (int i=0; i<UART_MAX_CH;i++)
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	e007      	b.n	8000628 <uartInit+0x1c>
	{
		is_open[i] = false;
 8000618:	4a08      	ldr	r2, [pc, #32]	@ (800063c <uartInit+0x30>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<UART_MAX_CH;i++)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3301      	adds	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b00      	cmp	r3, #0
 800062c:	ddf4      	ble.n	8000618 <uartInit+0xc>
	}

	return true;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000200 	.word	0x20000200

08000640 <uartOpen>:

bool     uartOpen(uint8_t ch, uint32_t baud)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 800064c:	2300      	movs	r3, #0
 800064e:	73fb      	strb	r3, [r7, #15]


	switch(ch)
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d106      	bne.n	8000664 <uartOpen+0x24>
	{
	case _DEF_UART1:
		is_open[ch] = true;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4a05      	ldr	r2, [pc, #20]	@ (8000670 <uartOpen+0x30>)
 800065a:	2101      	movs	r1, #1
 800065c:	54d1      	strb	r1, [r2, r3]
		ret = true;
 800065e:	2301      	movs	r3, #1
 8000660:	73fb      	strb	r3, [r7, #15]
		break;
 8000662:	bf00      	nop
	}


	return ret;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	20000200 	.word	0x20000200

08000674 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]

	switch(ch)
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d103      	bne.n	8000690 <uartAvailable+0x1c>
	{
		case _DEF_UART1:
			ret = cdcAvailable();
 8000688:	f006 fcf8 	bl	800707c <cdcAvailable>
 800068c:	60f8      	str	r0, [r7, #12]
			break;
 800068e:	bf00      	nop
	}

	return ret;
 8000690:	68fb      	ldr	r3, [r7, #12]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <uartRead>:

uint8_t  uartRead(uint8_t ch)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b084      	sub	sp, #16
 800069e:	af00      	add	r7, sp, #0
 80006a0:	4603      	mov	r3, r0
 80006a2:	71fb      	strb	r3, [r7, #7]
	uint8_t ret=0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d104      	bne.n	80006b8 <uartRead+0x1e>
	{
	case _DEF_UART1:
		ret = cdcRead();
 80006ae:	f006 fd01 	bl	80070b4 <cdcRead>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
		break;
 80006b6:	bf00      	nop
	}


	return ret;
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data,uint32_t length)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b086      	sub	sp, #24
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	4603      	mov	r3, r0
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	73fb      	strb	r3, [r7, #15]
	uint8_t ret=0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	75fb      	strb	r3, [r7, #23]

	switch(ch)
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d106      	bne.n	80006e8 <uartWrite+0x26>
	{
	case _DEF_UART1:
		ret = cdcWrite(p_data,length);
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	68b8      	ldr	r0, [r7, #8]
 80006de:	f006 fd3b 	bl	8007158 <cdcWrite>
 80006e2:	4603      	mov	r3, r0
 80006e4:	75fb      	strb	r3, [r7, #23]
		break;
 80006e6:	bf00      	nop
	}

	return ret;
 80006e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80006f2:	b40e      	push	{r1, r2, r3}
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b0c7      	sub	sp, #284	@ 0x11c
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4602      	mov	r2, r0
 80006fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000700:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000704:	701a      	strb	r2, [r3, #0]
	char buf[256];
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
 8000706:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800070a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800070e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000712:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf,256,fmt,args);
 8000714:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000718:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800071c:	f107 0010 	add.w	r0, r7, #16
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000726:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072a:	f007 fa59 	bl	8007be0 <vsniprintf>
 800072e:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

	ret = uartWrite(ch,(uint8_t *)buf,len);
 8000732:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000736:	f107 0110 	add.w	r1, r7, #16
 800073a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800073e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ffbc 	bl	80006c2 <uartWrite>
 800074a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

	va_end(args);


	return ret;
 800074e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000752:	4618      	mov	r0, r3
 8000754:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000758:	46bd      	mov	sp, r7
 800075a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800075e:	b003      	add	sp, #12
 8000760:	4770      	bx	lr

08000762 <uartGetBaud>:

uint32_t uartGetBaud(uint8_t ch)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b084      	sub	sp, #16
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]

	switch(ch)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d103      	bne.n	800077e <uartGetBaud+0x1c>
		{
		case _DEF_UART1:
			ret = cdcGetBaud();
 8000776:	f006 fd17 	bl	80071a8 <cdcGetBaud>
 800077a:	60f8      	str	r0, [r7, #12]
			break;
 800077c:	bf00      	nop
		}


	return ret;
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <hwInit>:




void hwInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	bspInit();
 800078c:	f7ff fd2a 	bl	80001e4 <bspInit>

	ledInit();
 8000790:	f7ff feba 	bl	8000508 <ledInit>
	uartInit();
 8000794:	f7ff ff3a 	bl	800060c <uartInit>

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HAL_Init+0x28>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	@ (80007c4 <HAL_Init+0x28>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f947 	bl	8000a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	200f      	movs	r0, #15
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff fddc 	bl	8000374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f95f 	bl	8000aaa <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f000 f927 	bl	8000a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	@ (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000010 	.word	0x20000010
 8000824:	2000000c 	.word	0x2000000c

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <HAL_IncTick+0x1c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <HAL_IncTick+0x20>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a03      	ldr	r2, [pc, #12]	@ (8000848 <HAL_IncTick+0x20>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000010 	.word	0x20000010
 8000848:	20000204 	.word	0x20000204

0800084c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b02      	ldr	r3, [pc, #8]	@ (800085c <HAL_GetTick+0x10>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	20000204 	.word	0x20000204

08000860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000868:	f7ff fff0 	bl	800084c <HAL_GetTick>
 800086c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000878:	d005      	beq.n	8000886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800087a:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <HAL_Delay+0x44>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4413      	add	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000886:	bf00      	nop
 8000888:	f7ff ffe0 	bl	800084c <HAL_GetTick>
 800088c:	4602      	mov	r2, r0
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	429a      	cmp	r2, r3
 8000896:	d8f7      	bhi.n	8000888 <HAL_Delay+0x28>
  {
  }
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000010 	.word	0x20000010

080008a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	@ (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	@ (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4906      	ldr	r1, [pc, #24]	@ (8000940 <__NVIC_EnableIRQ+0x34>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100

08000944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	db0a      	blt.n	800096e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	490c      	ldr	r1, [pc, #48]	@ (8000990 <__NVIC_SetPriority+0x4c>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	440b      	add	r3, r1
 8000968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800096c:	e00a      	b.n	8000984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4908      	ldr	r1, [pc, #32]	@ (8000994 <__NVIC_SetPriority+0x50>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	3b04      	subs	r3, #4
 800097c:	0112      	lsls	r2, r2, #4
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	440b      	add	r3, r1
 8000982:	761a      	strb	r2, [r3, #24]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000e100 	.word	0xe000e100
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000998:	b480      	push	{r7}
 800099a:	b089      	sub	sp, #36	@ 0x24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f1c3 0307 	rsb	r3, r3, #7
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	bf28      	it	cs
 80009b6:	2304      	movcs	r3, #4
 80009b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3304      	adds	r3, #4
 80009be:	2b06      	cmp	r3, #6
 80009c0:	d902      	bls.n	80009c8 <NVIC_EncodePriority+0x30>
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3b03      	subs	r3, #3
 80009c6:	e000      	b.n	80009ca <NVIC_EncodePriority+0x32>
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43da      	mvns	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	401a      	ands	r2, r3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e0:	f04f 31ff 	mov.w	r1, #4294967295
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43d9      	mvns	r1, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	4313      	orrs	r3, r2
         );
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3724      	adds	r7, #36	@ 0x24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a0c:	d301      	bcc.n	8000a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00f      	b.n	8000a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a12:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <SysTick_Config+0x40>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f7ff ff90 	bl	8000944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a24:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <SysTick_Config+0x40>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <SysTick_Config+0x40>)
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	e000e010 	.word	0xe000e010

08000a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff2d 	bl	80008a8 <__NVIC_SetPriorityGrouping>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a68:	f7ff ff42 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff ff90 	bl	8000998 <NVIC_EncodePriority>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff5f 	bl	8000944 <__NVIC_SetPriority>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff35 	bl	800090c <__NVIC_EnableIRQ>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffa2 	bl	80009fc <SysTick_Config>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b08b      	sub	sp, #44	@ 0x2c
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad6:	e169      	b.n	8000dac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	69fa      	ldr	r2, [r7, #28]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	f040 8158 	bne.w	8000da6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	4a9a      	ldr	r2, [pc, #616]	@ (8000d64 <HAL_GPIO_Init+0x2a0>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d05e      	beq.n	8000bbe <HAL_GPIO_Init+0xfa>
 8000b00:	4a98      	ldr	r2, [pc, #608]	@ (8000d64 <HAL_GPIO_Init+0x2a0>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d875      	bhi.n	8000bf2 <HAL_GPIO_Init+0x12e>
 8000b06:	4a98      	ldr	r2, [pc, #608]	@ (8000d68 <HAL_GPIO_Init+0x2a4>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d058      	beq.n	8000bbe <HAL_GPIO_Init+0xfa>
 8000b0c:	4a96      	ldr	r2, [pc, #600]	@ (8000d68 <HAL_GPIO_Init+0x2a4>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d86f      	bhi.n	8000bf2 <HAL_GPIO_Init+0x12e>
 8000b12:	4a96      	ldr	r2, [pc, #600]	@ (8000d6c <HAL_GPIO_Init+0x2a8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d052      	beq.n	8000bbe <HAL_GPIO_Init+0xfa>
 8000b18:	4a94      	ldr	r2, [pc, #592]	@ (8000d6c <HAL_GPIO_Init+0x2a8>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d869      	bhi.n	8000bf2 <HAL_GPIO_Init+0x12e>
 8000b1e:	4a94      	ldr	r2, [pc, #592]	@ (8000d70 <HAL_GPIO_Init+0x2ac>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d04c      	beq.n	8000bbe <HAL_GPIO_Init+0xfa>
 8000b24:	4a92      	ldr	r2, [pc, #584]	@ (8000d70 <HAL_GPIO_Init+0x2ac>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d863      	bhi.n	8000bf2 <HAL_GPIO_Init+0x12e>
 8000b2a:	4a92      	ldr	r2, [pc, #584]	@ (8000d74 <HAL_GPIO_Init+0x2b0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d046      	beq.n	8000bbe <HAL_GPIO_Init+0xfa>
 8000b30:	4a90      	ldr	r2, [pc, #576]	@ (8000d74 <HAL_GPIO_Init+0x2b0>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d85d      	bhi.n	8000bf2 <HAL_GPIO_Init+0x12e>
 8000b36:	2b12      	cmp	r3, #18
 8000b38:	d82a      	bhi.n	8000b90 <HAL_GPIO_Init+0xcc>
 8000b3a:	2b12      	cmp	r3, #18
 8000b3c:	d859      	bhi.n	8000bf2 <HAL_GPIO_Init+0x12e>
 8000b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b44 <HAL_GPIO_Init+0x80>)
 8000b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b44:	08000bbf 	.word	0x08000bbf
 8000b48:	08000b99 	.word	0x08000b99
 8000b4c:	08000bab 	.word	0x08000bab
 8000b50:	08000bed 	.word	0x08000bed
 8000b54:	08000bf3 	.word	0x08000bf3
 8000b58:	08000bf3 	.word	0x08000bf3
 8000b5c:	08000bf3 	.word	0x08000bf3
 8000b60:	08000bf3 	.word	0x08000bf3
 8000b64:	08000bf3 	.word	0x08000bf3
 8000b68:	08000bf3 	.word	0x08000bf3
 8000b6c:	08000bf3 	.word	0x08000bf3
 8000b70:	08000bf3 	.word	0x08000bf3
 8000b74:	08000bf3 	.word	0x08000bf3
 8000b78:	08000bf3 	.word	0x08000bf3
 8000b7c:	08000bf3 	.word	0x08000bf3
 8000b80:	08000bf3 	.word	0x08000bf3
 8000b84:	08000bf3 	.word	0x08000bf3
 8000b88:	08000ba1 	.word	0x08000ba1
 8000b8c:	08000bb5 	.word	0x08000bb5
 8000b90:	4a79      	ldr	r2, [pc, #484]	@ (8000d78 <HAL_GPIO_Init+0x2b4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d013      	beq.n	8000bbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b96:	e02c      	b.n	8000bf2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	623b      	str	r3, [r7, #32]
          break;
 8000b9e:	e029      	b.n	8000bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	623b      	str	r3, [r7, #32]
          break;
 8000ba8:	e024      	b.n	8000bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	3308      	adds	r3, #8
 8000bb0:	623b      	str	r3, [r7, #32]
          break;
 8000bb2:	e01f      	b.n	8000bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	330c      	adds	r3, #12
 8000bba:	623b      	str	r3, [r7, #32]
          break;
 8000bbc:	e01a      	b.n	8000bf4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	623b      	str	r3, [r7, #32]
          break;
 8000bca:	e013      	b.n	8000bf4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d105      	bne.n	8000be0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	611a      	str	r2, [r3, #16]
          break;
 8000bde:	e009      	b.n	8000bf4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000be0:	2308      	movs	r3, #8
 8000be2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	69fa      	ldr	r2, [r7, #28]
 8000be8:	615a      	str	r2, [r3, #20]
          break;
 8000bea:	e003      	b.n	8000bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
          break;
 8000bf0:	e000      	b.n	8000bf4 <HAL_GPIO_Init+0x130>
          break;
 8000bf2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	2bff      	cmp	r3, #255	@ 0xff
 8000bf8:	d801      	bhi.n	8000bfe <HAL_GPIO_Init+0x13a>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	e001      	b.n	8000c02 <HAL_GPIO_Init+0x13e>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3304      	adds	r3, #4
 8000c02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	2bff      	cmp	r3, #255	@ 0xff
 8000c08:	d802      	bhi.n	8000c10 <HAL_GPIO_Init+0x14c>
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	e002      	b.n	8000c16 <HAL_GPIO_Init+0x152>
 8000c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c12:	3b08      	subs	r3, #8
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	210f      	movs	r1, #15
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	fa01 f303 	lsl.w	r3, r1, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	401a      	ands	r2, r3
 8000c28:	6a39      	ldr	r1, [r7, #32]
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c30:	431a      	orrs	r2, r3
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 80b1 	beq.w	8000da6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c44:	4b4d      	ldr	r3, [pc, #308]	@ (8000d7c <HAL_GPIO_Init+0x2b8>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a4c      	ldr	r2, [pc, #304]	@ (8000d7c <HAL_GPIO_Init+0x2b8>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b4a      	ldr	r3, [pc, #296]	@ (8000d7c <HAL_GPIO_Init+0x2b8>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c5c:	4a48      	ldr	r2, [pc, #288]	@ (8000d80 <HAL_GPIO_Init+0x2bc>)
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	3302      	adds	r3, #2
 8000c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	220f      	movs	r2, #15
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a40      	ldr	r2, [pc, #256]	@ (8000d84 <HAL_GPIO_Init+0x2c0>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d013      	beq.n	8000cb0 <HAL_GPIO_Init+0x1ec>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d88 <HAL_GPIO_Init+0x2c4>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d00d      	beq.n	8000cac <HAL_GPIO_Init+0x1e8>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a3e      	ldr	r2, [pc, #248]	@ (8000d8c <HAL_GPIO_Init+0x2c8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d007      	beq.n	8000ca8 <HAL_GPIO_Init+0x1e4>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d101      	bne.n	8000ca4 <HAL_GPIO_Init+0x1e0>
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e006      	b.n	8000cb2 <HAL_GPIO_Init+0x1ee>
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	e004      	b.n	8000cb2 <HAL_GPIO_Init+0x1ee>
 8000ca8:	2302      	movs	r3, #2
 8000caa:	e002      	b.n	8000cb2 <HAL_GPIO_Init+0x1ee>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <HAL_GPIO_Init+0x1ee>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cb4:	f002 0203 	and.w	r2, r2, #3
 8000cb8:	0092      	lsls	r2, r2, #2
 8000cba:	4093      	lsls	r3, r2
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cc2:	492f      	ldr	r1, [pc, #188]	@ (8000d80 <HAL_GPIO_Init+0x2bc>)
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc6:	089b      	lsrs	r3, r3, #2
 8000cc8:	3302      	adds	r3, #2
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d006      	beq.n	8000cea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	492c      	ldr	r1, [pc, #176]	@ (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	608b      	str	r3, [r1, #8]
 8000ce8:	e006      	b.n	8000cf8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cea:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	4928      	ldr	r1, [pc, #160]	@ (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d006      	beq.n	8000d12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d04:	4b23      	ldr	r3, [pc, #140]	@ (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000d06:	68da      	ldr	r2, [r3, #12]
 8000d08:	4922      	ldr	r1, [pc, #136]	@ (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	60cb      	str	r3, [r1, #12]
 8000d10:	e006      	b.n	8000d20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d12:	4b20      	ldr	r3, [pc, #128]	@ (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	491e      	ldr	r1, [pc, #120]	@ (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d006      	beq.n	8000d3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d2c:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	4918      	ldr	r1, [pc, #96]	@ (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	604b      	str	r3, [r1, #4]
 8000d38:	e006      	b.n	8000d48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d3a:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	4914      	ldr	r1, [pc, #80]	@ (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d021      	beq.n	8000d98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	490e      	ldr	r1, [pc, #56]	@ (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	600b      	str	r3, [r1, #0]
 8000d60:	e021      	b.n	8000da6 <HAL_GPIO_Init+0x2e2>
 8000d62:	bf00      	nop
 8000d64:	10320000 	.word	0x10320000
 8000d68:	10310000 	.word	0x10310000
 8000d6c:	10220000 	.word	0x10220000
 8000d70:	10210000 	.word	0x10210000
 8000d74:	10120000 	.word	0x10120000
 8000d78:	10110000 	.word	0x10110000
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010000 	.word	0x40010000
 8000d84:	40010800 	.word	0x40010800
 8000d88:	40010c00 	.word	0x40010c00
 8000d8c:	40011000 	.word	0x40011000
 8000d90:	40011400 	.word	0x40011400
 8000d94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d98:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <HAL_GPIO_Init+0x304>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	4909      	ldr	r1, [pc, #36]	@ (8000dc8 <HAL_GPIO_Init+0x304>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da8:	3301      	adds	r3, #1
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db2:	fa22 f303 	lsr.w	r3, r2, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f47f ae8e 	bne.w	8000ad8 <HAL_GPIO_Init+0x14>
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	372c      	adds	r7, #44	@ 0x2c
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	40010400 	.word	0x40010400

08000dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	807b      	strh	r3, [r7, #2]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ddc:	787b      	ldrb	r3, [r7, #1]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000de2:	887a      	ldrh	r2, [r7, #2]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000de8:	e003      	b.n	8000df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dea:	887b      	ldrh	r3, [r7, #2]
 8000dec:	041a      	lsls	r2, r3, #16
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	611a      	str	r2, [r3, #16]
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e0e:	887a      	ldrh	r2, [r7, #2]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4013      	ands	r3, r2
 8000e14:	041a      	lsls	r2, r3, #16
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	43d9      	mvns	r1, r3
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	611a      	str	r2, [r3, #16]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e0e8      	b.n	8001012 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d106      	bne.n	8000e5a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f006 fbdf 	bl	8007618 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 f9f6 	bl	800325e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6818      	ldr	r0, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e7c:	f002 f9cc 	bl	8003218 <USB_CoreInit>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d005      	beq.n	8000e92 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2202      	movs	r2, #2
 8000e8a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e0bf      	b.n	8001012 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f002 f9fa 	bl	8003292 <USB_SetCurrentMode>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d005      	beq.n	8000eb0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e0b0      	b.n	8001012 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
 8000eb4:	e03e      	b.n	8000f34 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3311      	adds	r3, #17
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3310      	adds	r3, #16
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ede:	7bfa      	ldrb	r2, [r7, #15]
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	3313      	adds	r3, #19
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	3320      	adds	r3, #32
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	3324      	adds	r3, #36	@ 0x24
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	3301      	adds	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	791b      	ldrb	r3, [r3, #4]
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d3bb      	bcc.n	8000eb6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	e044      	b.n	8000fce <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	440b      	add	r3, r1
 8000f52:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	440b      	add	r3, r1
 8000faa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	791b      	ldrb	r3, [r3, #4]
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d3b5      	bcc.n	8000f44 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3304      	adds	r3, #4
 8000fe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fe2:	f002 f962 	bl	80032aa <USB_DevInit>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2202      	movs	r2, #2
 8000ff0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e00c      	b.n	8001012 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f004 fbe1 	bl	80057d2 <USB_DevDisconnect>

  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001028:	2b01      	cmp	r3, #1
 800102a:	d101      	bne.n	8001030 <HAL_PCD_Start+0x16>
 800102c:	2302      	movs	r3, #2
 800102e:	e016      	b.n	800105e <HAL_PCD_Start+0x44>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f002 f8f8 	bl	8003232 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001042:	2101      	movs	r1, #1
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f006 fd5a 	bl	8007afe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f004 fbb5 	bl	80057be <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b088      	sub	sp, #32
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f004 fbb7 	bl	80057e6 <USB_ReadInterrupts>
 8001078:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 fb1a 	bl	80016be <PCD_EP_ISR_Handler>

    return;
 800108a:	e119      	b.n	80012c0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001092:	2b00      	cmp	r3, #0
 8001094:	d013      	beq.n	80010be <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010a8:	b292      	uxth	r2, r2
 80010aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f006 fb2d 	bl	800770e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80010b4:	2100      	movs	r1, #0
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f905 	bl	80012c6 <HAL_PCD_SetAddress>

    return;
 80010bc:	e100      	b.n	80012c0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00c      	beq.n	80010e2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80010da:	b292      	uxth	r2, r2
 80010dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010e0:	e0ee      	b.n	80012c0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00c      	beq.n	8001106 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80010fe:	b292      	uxth	r2, r2
 8001100:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001104:	e0dc      	b.n	80012c0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d027      	beq.n	8001160 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001118:	b29a      	uxth	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0204 	bic.w	r2, r2, #4
 8001122:	b292      	uxth	r2, r2
 8001124:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001130:	b29a      	uxth	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0208 	bic.w	r2, r2, #8
 800113a:	b292      	uxth	r2, r2
 800113c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f006 fb1d 	bl	8007780 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800114e:	b29a      	uxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001158:	b292      	uxth	r2, r2
 800115a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800115e:	e0af      	b.n	80012c0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8083 	beq.w	8001272 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800116c:	2300      	movs	r3, #0
 800116e:	77fb      	strb	r3, [r7, #31]
 8001170:	e010      	b.n	8001194 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	7ffb      	ldrb	r3, [r7, #31]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	441a      	add	r2, r3
 800117e:	7ffb      	ldrb	r3, [r7, #31]
 8001180:	8812      	ldrh	r2, [r2, #0]
 8001182:	b292      	uxth	r2, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	3320      	adds	r3, #32
 8001188:	443b      	add	r3, r7
 800118a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800118e:	7ffb      	ldrb	r3, [r7, #31]
 8001190:	3301      	adds	r3, #1
 8001192:	77fb      	strb	r3, [r7, #31]
 8001194:	7ffb      	ldrb	r3, [r7, #31]
 8001196:	2b07      	cmp	r3, #7
 8001198:	d9eb      	bls.n	8001172 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0201 	orr.w	r2, r2, #1
 80011ac:	b292      	uxth	r2, r2
 80011ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 0201 	bic.w	r2, r2, #1
 80011c4:	b292      	uxth	r2, r2
 80011c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80011ca:	bf00      	nop
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f6      	beq.n	80011cc <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011f0:	b292      	uxth	r2, r2
 80011f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	77fb      	strb	r3, [r7, #31]
 80011fa:	e00f      	b.n	800121c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80011fc:	7ffb      	ldrb	r3, [r7, #31]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	4611      	mov	r1, r2
 8001204:	7ffa      	ldrb	r2, [r7, #31]
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	440a      	add	r2, r1
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	3320      	adds	r3, #32
 800120e:	443b      	add	r3, r7
 8001210:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001214:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001216:	7ffb      	ldrb	r3, [r7, #31]
 8001218:	3301      	adds	r3, #1
 800121a:	77fb      	strb	r3, [r7, #31]
 800121c:	7ffb      	ldrb	r3, [r7, #31]
 800121e:	2b07      	cmp	r3, #7
 8001220:	d9ec      	bls.n	80011fc <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0208 	orr.w	r2, r2, #8
 8001234:	b292      	uxth	r2, r2
 8001236:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001242:	b29a      	uxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800124c:	b292      	uxth	r2, r2
 800124e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800125a:	b29a      	uxth	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0204 	orr.w	r2, r2, #4
 8001264:	b292      	uxth	r2, r2
 8001266:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f006 fa6e 	bl	800774c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001270:	e026      	b.n	80012c0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00f      	beq.n	800129c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001284:	b29a      	uxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800128e:	b292      	uxth	r2, r2
 8001290:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f006 fa2c 	bl	80076f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800129a:	e011      	b.n	80012c0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00c      	beq.n	80012c0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012b8:	b292      	uxth	r2, r2
 80012ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80012be:	bf00      	nop
  }
}
 80012c0:	3720      	adds	r7, #32
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_PCD_SetAddress+0x1a>
 80012dc:	2302      	movs	r3, #2
 80012de:	e012      	b.n	8001306 <HAL_PCD_SetAddress+0x40>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	78fa      	ldrb	r2, [r7, #3]
 80012ec:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	78fa      	ldrb	r2, [r7, #3]
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fa4e 	bl	8005798 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	4608      	mov	r0, r1
 8001318:	4611      	mov	r1, r2
 800131a:	461a      	mov	r2, r3
 800131c:	4603      	mov	r3, r0
 800131e:	70fb      	strb	r3, [r7, #3]
 8001320:	460b      	mov	r3, r1
 8001322:	803b      	strh	r3, [r7, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800132c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001330:	2b00      	cmp	r3, #0
 8001332:	da0e      	bge.n	8001352 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	f003 0207 	and.w	r2, r3, #7
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	3310      	adds	r3, #16
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2201      	movs	r2, #1
 800134e:	705a      	strb	r2, [r3, #1]
 8001350:	e00e      	b.n	8001370 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	f003 0207 	and.w	r2, r3, #7
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	b2da      	uxtb	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800137c:	883a      	ldrh	r2, [r7, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	78ba      	ldrb	r2, [r7, #2]
 8001386:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001388:	78bb      	ldrb	r3, [r7, #2]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d102      	bne.n	8001394 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_PCD_EP_Open+0x94>
 800139e:	2302      	movs	r3, #2
 80013a0:	e00e      	b.n	80013c0 <HAL_PCD_EP_Open+0xb2>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68f9      	ldr	r1, [r7, #12]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f001 ff97 	bl	80032e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80013be:	7afb      	ldrb	r3, [r7, #11]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da0e      	bge.n	80013fa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	f003 0207 	and.w	r2, r3, #7
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	3310      	adds	r3, #16
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2201      	movs	r2, #1
 80013f6:	705a      	strb	r2, [r3, #1]
 80013f8:	e00e      	b.n	8001418 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	f003 0207 	and.w	r2, r3, #7
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	b2da      	uxtb	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <HAL_PCD_EP_Close+0x6a>
 800142e:	2302      	movs	r3, #2
 8001430:	e00e      	b.n	8001450 <HAL_PCD_EP_Close+0x88>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68f9      	ldr	r1, [r7, #12]
 8001440:	4618      	mov	r0, r3
 8001442:	f002 fb0f 	bl	8003a64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	460b      	mov	r3, r1
 8001466:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	f003 0207 	and.w	r2, r3, #7
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	4413      	add	r3, r2
 800147e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2200      	movs	r2, #0
 8001496:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001498:	7afb      	ldrb	r3, [r7, #11]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6979      	ldr	r1, [r7, #20]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 fcc6 	bl	8003e3c <USB_EPStartXfer>

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	f003 0207 	and.w	r2, r3, #7
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80014dc:	681b      	ldr	r3, [r3, #0]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	460b      	mov	r3, r1
 80014f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014f8:	7afb      	ldrb	r3, [r7, #11]
 80014fa:	f003 0207 	and.w	r2, r3, #7
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	3310      	adds	r3, #16
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2201      	movs	r2, #1
 8001532:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001534:	7afb      	ldrb	r3, [r7, #11]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	b2da      	uxtb	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6979      	ldr	r1, [r7, #20]
 8001546:	4618      	mov	r0, r3
 8001548:	f002 fc78 	bl	8003e3c <USB_EPStartXfer>

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	460b      	mov	r3, r1
 8001560:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	7912      	ldrb	r2, [r2, #4]
 800156c:	4293      	cmp	r3, r2
 800156e:	d901      	bls.n	8001574 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e04c      	b.n	800160e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001574:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001578:	2b00      	cmp	r3, #0
 800157a:	da0e      	bge.n	800159a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	f003 0207 	and.w	r2, r3, #7
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	3310      	adds	r3, #16
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2201      	movs	r2, #1
 8001596:	705a      	strb	r2, [r3, #1]
 8001598:	e00c      	b.n	80015b4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800159a:	78fa      	ldrb	r2, [r7, #3]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2201      	movs	r2, #1
 80015b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_PCD_EP_SetStall+0x7e>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e01c      	b.n	800160e <HAL_PCD_EP_SetStall+0xb8>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68f9      	ldr	r1, [r7, #12]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 ffdb 	bl	800559e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d108      	bne.n	8001604 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f004 f900 	bl	8005804 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	7912      	ldrb	r2, [r2, #4]
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e040      	b.n	80016b6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001638:	2b00      	cmp	r3, #0
 800163a:	da0e      	bge.n	800165a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	f003 0207 	and.w	r2, r3, #7
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	3310      	adds	r3, #16
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	705a      	strb	r2, [r3, #1]
 8001658:	e00e      	b.n	8001678 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	f003 0207 	and.w	r2, r3, #7
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	b2da      	uxtb	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_PCD_EP_ClrStall+0x82>
 8001694:	2302      	movs	r3, #2
 8001696:	e00e      	b.n	80016b6 <HAL_PCD_EP_ClrStall+0xa0>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68f9      	ldr	r1, [r7, #12]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 ffc9 	bl	800563e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b096      	sub	sp, #88	@ 0x58
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016c6:	e3bb      	b.n	8001e40 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016d0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80016d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80016e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 8175 	bne.w	80019d6 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d14e      	bne.n	8001796 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001708:	81fb      	strh	r3, [r7, #14]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	89fb      	ldrh	r3, [r7, #14]
 8001710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001718:	b29b      	uxth	r3, r3
 800171a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3310      	adds	r3, #16
 8001720:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800172a:	b29b      	uxth	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4413      	add	r3, r2
 8001736:	3302      	adds	r3, #2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	4413      	add	r3, r2
 8001740:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800174a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800174c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800174e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	441a      	add	r2, r3
 8001758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800175a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800175c:	2100      	movs	r1, #0
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f005 ffad 	bl	80076be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7b5b      	ldrb	r3, [r3, #13]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8368 	beq.w	8001e40 <PCD_EP_ISR_Handler+0x782>
 8001770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b00      	cmp	r3, #0
 8001776:	f040 8363 	bne.w	8001e40 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7b5b      	ldrb	r3, [r3, #13]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	735a      	strb	r2, [r3, #13]
 8001794:	e354      	b.n	8001e40 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800179c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80017a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80017ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d034      	beq.n	800181e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017bc:	b29b      	uxth	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4413      	add	r3, r2
 80017c8:	3306      	adds	r3, #6
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017de:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80017ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80017ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	f004 f857 	bl	80058a6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001804:	4013      	ands	r3, r2
 8001806:	823b      	strh	r3, [r7, #16]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	8a3a      	ldrh	r2, [r7, #16]
 800180e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001812:	b292      	uxth	r2, r2
 8001814:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f005 ff24 	bl	8007664 <HAL_PCD_SetupStageCallback>
 800181c:	e310      	b.n	8001e40 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800181e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001822:	2b00      	cmp	r3, #0
 8001824:	f280 830c 	bge.w	8001e40 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	b29a      	uxth	r2, r3
 8001830:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001834:	4013      	ands	r3, r2
 8001836:	83fb      	strh	r3, [r7, #30]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	8bfa      	ldrh	r2, [r7, #30]
 800183e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001842:	b292      	uxth	r2, r2
 8001844:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800184e:	b29b      	uxth	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4413      	add	r3, r2
 800185a:	3306      	adds	r3, #6
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	4413      	add	r3, r2
 8001864:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800186e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001870:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d019      	beq.n	80018ae <PCD_EP_ISR_Handler+0x1f0>
 800187a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d015      	beq.n	80018ae <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001888:	6959      	ldr	r1, [r3, #20]
 800188a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800188c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800188e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001890:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001892:	b29b      	uxth	r3, r3
 8001894:	f004 f807 	bl	80058a6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	441a      	add	r2, r3
 80018a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018a4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018a6:	2100      	movs	r1, #0
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f005 feed 	bl	8007688 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80018b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80018bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 82bd 	bne.w	8001e40 <PCD_EP_ISR_Handler+0x782>
 80018c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80018ca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80018ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80018d2:	f000 82b5 	beq.w	8001e40 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	4413      	add	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001900:	b29a      	uxth	r2, r3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	801a      	strh	r2, [r3, #0]
 8001906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b3e      	cmp	r3, #62	@ 0x3e
 800190c:	d91d      	bls.n	800194a <PCD_EP_ISR_Handler+0x28c>
 800190e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	647b      	str	r3, [r7, #68]	@ 0x44
 8001916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <PCD_EP_ISR_Handler+0x26a>
 8001922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001924:	3b01      	subs	r3, #1
 8001926:	647b      	str	r3, [r7, #68]	@ 0x44
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	b29a      	uxth	r2, r3
 800192e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001930:	b29b      	uxth	r3, r3
 8001932:	029b      	lsls	r3, r3, #10
 8001934:	b29b      	uxth	r3, r3
 8001936:	4313      	orrs	r3, r2
 8001938:	b29b      	uxth	r3, r3
 800193a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800193e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001942:	b29a      	uxth	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	801a      	strh	r2, [r3, #0]
 8001948:	e026      	b.n	8001998 <PCD_EP_ISR_Handler+0x2da>
 800194a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10a      	bne.n	8001968 <PCD_EP_ISR_Handler+0x2aa>
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	b29b      	uxth	r3, r3
 8001958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800195c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001960:	b29a      	uxth	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	801a      	strh	r2, [r3, #0]
 8001966:	e017      	b.n	8001998 <PCD_EP_ISR_Handler+0x2da>
 8001968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	085b      	lsrs	r3, r3, #1
 800196e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <PCD_EP_ISR_Handler+0x2c4>
 800197c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800197e:	3301      	adds	r3, #1
 8001980:	647b      	str	r3, [r7, #68]	@ 0x44
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	b29a      	uxth	r2, r3
 8001988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800198a:	b29b      	uxth	r3, r3
 800198c:	029b      	lsls	r3, r3, #10
 800198e:	b29b      	uxth	r3, r3
 8001990:	4313      	orrs	r3, r2
 8001992:	b29a      	uxth	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019a8:	827b      	strh	r3, [r7, #18]
 80019aa:	8a7b      	ldrh	r3, [r7, #18]
 80019ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80019b0:	827b      	strh	r3, [r7, #18]
 80019b2:	8a7b      	ldrh	r3, [r7, #18]
 80019b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80019b8:	827b      	strh	r3, [r7, #18]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	8a7b      	ldrh	r3, [r7, #18]
 80019c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80019c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80019c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	8013      	strh	r3, [r2, #0]
 80019d4:	e234      	b.n	8001e40 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019ea:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f280 80fc 	bge.w	8001bec <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001a22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a26:	b292      	uxth	r2, r2
 8001a28:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a2a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a42:	7b1b      	ldrb	r3, [r3, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d125      	bne.n	8001a94 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3306      	adds	r3, #6
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a70:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001a74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 8092 	beq.w	8001ba2 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a84:	6959      	ldr	r1, [r3, #20]
 8001a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a88:	88da      	ldrh	r2, [r3, #6]
 8001a8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a8e:	f003 ff0a 	bl	80058a6 <USB_ReadPMA>
 8001a92:	e086      	b.n	8001ba2 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a96:	78db      	ldrb	r3, [r3, #3]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d10a      	bne.n	8001ab2 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f9d9 	bl	8001e5c <HAL_PCD_EP_DB_Receive>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001ab0:	e077      	b.n	8001ba2 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001acc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	441a      	add	r2, r3
 8001ade:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d024      	beq.n	8001b5a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	3302      	adds	r3, #2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b38:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001b3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d02e      	beq.n	8001ba2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b4a:	6959      	ldr	r1, [r3, #20]
 8001b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b4e:	891a      	ldrh	r2, [r3, #8]
 8001b50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b54:	f003 fea7 	bl	80058a6 <USB_ReadPMA>
 8001b58:	e023      	b.n	8001ba2 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3306      	adds	r3, #6
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b82:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001b86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d009      	beq.n	8001ba2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6818      	ldr	r0, [r3, #0]
 8001b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b94:	6959      	ldr	r1, [r3, #20]
 8001b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b98:	895a      	ldrh	r2, [r3, #10]
 8001b9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b9e:	f003 fe82 	bl	80058a6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001baa:	441a      	add	r2, r3
 8001bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001bb8:	441a      	add	r2, r3
 8001bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bbc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <PCD_EP_ISR_Handler+0x514>
 8001bc6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d206      	bcs.n	8001be0 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f005 fd55 	bl	8007688 <HAL_PCD_DataOutStageCallback>
 8001bde:	e005      	b.n	8001bec <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 f928 	bl	8003e3c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001bec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 8123 	beq.w	8001e40 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001bfa:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	3310      	adds	r3, #16
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c28:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	441a      	add	r2, r3
 8001c3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4c:	78db      	ldrb	r3, [r3, #3]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	f040 80a2 	bne.w	8001d98 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c5c:	7b1b      	ldrb	r3, [r3, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8093 	beq.w	8001d8a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d046      	beq.n	8001cfe <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c72:	785b      	ldrb	r3, [r3, #1]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d126      	bne.n	8001cc6 <PCD_EP_ISR_Handler+0x608>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	4413      	add	r3, r2
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	011a      	lsls	r2, r3, #4
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	4413      	add	r3, r2
 8001c9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	801a      	strh	r2, [r3, #0]
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	801a      	strh	r2, [r3, #0]
 8001cc4:	e061      	b.n	8001d8a <PCD_EP_ISR_Handler+0x6cc>
 8001cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc8:	785b      	ldrb	r3, [r3, #1]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d15d      	bne.n	8001d8a <PCD_EP_ISR_Handler+0x6cc>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce2:	4413      	add	r3, r2
 8001ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	011a      	lsls	r2, r3, #4
 8001cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cee:	4413      	add	r3, r2
 8001cf0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	801a      	strh	r2, [r3, #0]
 8001cfc:	e045      	b.n	8001d8a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d06:	785b      	ldrb	r3, [r3, #1]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d126      	bne.n	8001d5a <PCD_EP_ISR_Handler+0x69c>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d20:	4413      	add	r3, r2
 8001d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	011a      	lsls	r2, r3, #4
 8001d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001d32:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d42:	801a      	strh	r2, [r3, #0]
 8001d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d56:	801a      	strh	r2, [r3, #0]
 8001d58:	e017      	b.n	8001d8a <PCD_EP_ISR_Handler+0x6cc>
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5c:	785b      	ldrb	r3, [r3, #1]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d113      	bne.n	8001d8a <PCD_EP_ISR_Handler+0x6cc>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d70:	4413      	add	r3, r2
 8001d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	011a      	lsls	r2, r3, #4
 8001d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d86:	2200      	movs	r2, #0
 8001d88:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f005 fc94 	bl	80076be <HAL_PCD_DataInStageCallback>
 8001d96:	e053      	b.n	8001e40 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d146      	bne.n	8001e32 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	3302      	adds	r3, #2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dcc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d907      	bls.n	8001dec <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dde:	699a      	ldr	r2, [r3, #24]
 8001de0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001de4:	1ad2      	subs	r2, r2, r3
 8001de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de8:	619a      	str	r2, [r3, #24]
 8001dea:	e002      	b.n	8001df2 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f005 fc5c 	bl	80076be <HAL_PCD_DataInStageCallback>
 8001e06:	e01b      	b.n	8001e40 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e10:	441a      	add	r2, r3
 8001e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e14:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e1e:	441a      	add	r2, r3
 8001e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e22:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f002 f806 	bl	8003e3c <USB_EPStartXfer>
 8001e30:	e006      	b.n	8001e40 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e36:	461a      	mov	r2, r3
 8001e38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f91b 	bl	8002076 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	b21b      	sxth	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f6ff ac3b 	blt.w	80016c8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3758      	adds	r7, #88	@ 0x58
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	4613      	mov	r3, r2
 8001e68:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d07e      	beq.n	8001f72 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	3302      	adds	r3, #2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e9c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	8b7b      	ldrh	r3, [r7, #26]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d306      	bcc.n	8001eb6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	699a      	ldr	r2, [r3, #24]
 8001eac:	8b7b      	ldrh	r3, [r7, #26]
 8001eae:	1ad2      	subs	r2, r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	619a      	str	r2, [r3, #24]
 8001eb4:	e002      	b.n	8001ebc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d123      	bne.n	8001f0c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ede:	833b      	strh	r3, [r7, #24]
 8001ee0:	8b3b      	ldrh	r3, [r7, #24]
 8001ee2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001ee6:	833b      	strh	r3, [r7, #24]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	441a      	add	r2, r3
 8001ef6:	8b3b      	ldrh	r3, [r7, #24]
 8001ef8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001efc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d01f      	beq.n	8001f56 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f30:	82fb      	strh	r3, [r7, #22]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	441a      	add	r2, r3
 8001f40:	8afb      	ldrh	r3, [r7, #22]
 8001f42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f56:	8b7b      	ldrh	r3, [r7, #26]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8087 	beq.w	800206c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	6959      	ldr	r1, [r3, #20]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	891a      	ldrh	r2, [r3, #8]
 8001f6a:	8b7b      	ldrh	r3, [r7, #26]
 8001f6c:	f003 fc9b 	bl	80058a6 <USB_ReadPMA>
 8001f70:	e07c      	b.n	800206c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	3306      	adds	r3, #6
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f9a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	8b7b      	ldrh	r3, [r7, #26]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d306      	bcc.n	8001fb4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	8b7b      	ldrh	r3, [r7, #26]
 8001fac:	1ad2      	subs	r2, r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	619a      	str	r2, [r3, #24]
 8001fb2:	e002      	b.n	8001fba <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d123      	bne.n	800200a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fdc:	83fb      	strh	r3, [r7, #30]
 8001fde:	8bfb      	ldrh	r3, [r7, #30]
 8001fe0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001fe4:	83fb      	strh	r3, [r7, #30]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	441a      	add	r2, r3
 8001ff4:	8bfb      	ldrh	r3, [r7, #30]
 8001ff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ffa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002006:	b29b      	uxth	r3, r3
 8002008:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002010:	2b00      	cmp	r3, #0
 8002012:	d11f      	bne.n	8002054 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800202a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800202e:	83bb      	strh	r3, [r7, #28]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	441a      	add	r2, r3
 800203e:	8bbb      	ldrh	r3, [r7, #28]
 8002040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800204c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002050:	b29b      	uxth	r3, r3
 8002052:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002054:	8b7b      	ldrh	r3, [r7, #26]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	6959      	ldr	r1, [r3, #20]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	895a      	ldrh	r2, [r3, #10]
 8002066:	8b7b      	ldrh	r3, [r7, #26]
 8002068:	f003 fc1d 	bl	80058a6 <USB_ReadPMA>
    }
  }

  return count;
 800206c:	8b7b      	ldrh	r3, [r7, #26]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b0a4      	sub	sp, #144	@ 0x90
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	4613      	mov	r3, r2
 8002082:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 81dd 	beq.w	800244a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002098:	b29b      	uxth	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	3302      	adds	r3, #2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	699a      	ldr	r2, [r3, #24]
 80020c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d907      	bls.n	80020d8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	699a      	ldr	r2, [r3, #24]
 80020cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80020d0:	1ad2      	subs	r2, r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	619a      	str	r2, [r3, #24]
 80020d6:	e002      	b.n	80020de <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f040 80b9 	bne.w	800225a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	785b      	ldrb	r3, [r3, #1]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d126      	bne.n	800213e <HAL_PCD_EP_DB_Transmit+0xc8>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020fe:	b29b      	uxth	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002104:	4413      	add	r3, r2
 8002106:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	011a      	lsls	r2, r3, #4
 800210e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002110:	4413      	add	r3, r2
 8002112:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002116:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002122:	b29a      	uxth	r2, r3
 8002124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002126:	801a      	strh	r2, [r3, #0]
 8002128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b29b      	uxth	r3, r3
 800212e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002136:	b29a      	uxth	r2, r3
 8002138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213a:	801a      	strh	r2, [r3, #0]
 800213c:	e01a      	b.n	8002174 <HAL_PCD_EP_DB_Transmit+0xfe>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	785b      	ldrb	r3, [r3, #1]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d116      	bne.n	8002174 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	637b      	str	r3, [r7, #52]	@ 0x34
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002154:	b29b      	uxth	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800215a:	4413      	add	r3, r2
 800215c:	637b      	str	r3, [r7, #52]	@ 0x34
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	011a      	lsls	r2, r3, #4
 8002164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002166:	4413      	add	r3, r2
 8002168:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800216c:	633b      	str	r3, [r7, #48]	@ 0x30
 800216e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002170:	2200      	movs	r2, #0
 8002172:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	785b      	ldrb	r3, [r3, #1]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d126      	bne.n	80021d0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002190:	b29b      	uxth	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	4413      	add	r3, r2
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	011a      	lsls	r2, r3, #4
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	4413      	add	r3, r2
 80021a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	801a      	strh	r2, [r3, #0]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	801a      	strh	r2, [r3, #0]
 80021ce:	e017      	b.n	8002200 <HAL_PCD_EP_DB_Transmit+0x18a>
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d113      	bne.n	8002200 <HAL_PCD_EP_DB_Transmit+0x18a>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	4413      	add	r3, r2
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	011a      	lsls	r2, r3, #4
 80021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f2:	4413      	add	r3, r2
 80021f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	2200      	movs	r2, #0
 80021fe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f005 fa59 	bl	80076be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 82fc 	beq.w	8002810 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800222e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002232:	82fb      	strh	r3, [r7, #22]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	441a      	add	r2, r3
 8002242:	8afb      	ldrh	r3, [r7, #22]
 8002244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800224c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002254:	b29b      	uxth	r3, r3
 8002256:	8013      	strh	r3, [r2, #0]
 8002258:	e2da      	b.n	8002810 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d021      	beq.n	80022a8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800227a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800227e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	441a      	add	r2, r3
 8002290:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002294:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002298:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800229c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	f040 82ae 	bne.w	8002810 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022bc:	441a      	add	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022ca:	441a      	add	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	6a1a      	ldr	r2, [r3, #32]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d30b      	bcc.n	80022f4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	6a1a      	ldr	r2, [r3, #32]
 80022e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ec:	1ad2      	subs	r2, r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	621a      	str	r2, [r3, #32]
 80022f2:	e017      	b.n	8002324 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d108      	bne.n	800230e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80022fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002300:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800230c:	e00a      	b.n	8002324 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2200      	movs	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	785b      	ldrb	r3, [r3, #1]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d165      	bne.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x382>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800233a:	b29b      	uxth	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002340:	4413      	add	r3, r2
 8002342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	011a      	lsls	r2, r3, #4
 800234a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800234c:	4413      	add	r3, r2
 800234e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002352:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	b29b      	uxth	r3, r3
 800235a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800235e:	b29a      	uxth	r2, r3
 8002360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002362:	801a      	strh	r2, [r3, #0]
 8002364:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002368:	2b3e      	cmp	r3, #62	@ 0x3e
 800236a:	d91d      	bls.n	80023a8 <HAL_PCD_EP_DB_Transmit+0x332>
 800236c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002370:	095b      	lsrs	r3, r3, #5
 8002372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002374:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <HAL_PCD_EP_DB_Transmit+0x310>
 8002380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002382:	3b01      	subs	r3, #1
 8002384:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	b29a      	uxth	r2, r3
 800238c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800238e:	b29b      	uxth	r3, r3
 8002390:	029b      	lsls	r3, r3, #10
 8002392:	b29b      	uxth	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b29b      	uxth	r3, r3
 8002398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800239c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a4:	801a      	strh	r2, [r3, #0]
 80023a6:	e044      	b.n	8002432 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <HAL_PCD_EP_DB_Transmit+0x350>
 80023b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023be:	b29a      	uxth	r2, r3
 80023c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c2:	801a      	strh	r2, [r3, #0]
 80023c4:	e035      	b.n	8002432 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023ca:	085b      	lsrs	r3, r3, #1
 80023cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_PCD_EP_DB_Transmit+0x36a>
 80023da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023dc:	3301      	adds	r3, #1
 80023de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	029b      	lsls	r3, r3, #10
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	4313      	orrs	r3, r2
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f4:	801a      	strh	r2, [r3, #0]
 80023f6:	e01c      	b.n	8002432 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	785b      	ldrb	r3, [r3, #1]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d118      	bne.n	8002432 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	647b      	str	r3, [r7, #68]	@ 0x44
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800240e:	b29b      	uxth	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002414:	4413      	add	r3, r2
 8002416:	647b      	str	r3, [r7, #68]	@ 0x44
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	011a      	lsls	r2, r3, #4
 800241e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002420:	4413      	add	r3, r2
 8002422:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002426:	643b      	str	r3, [r7, #64]	@ 0x40
 8002428:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800242c:	b29a      	uxth	r2, r3
 800242e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002430:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	6959      	ldr	r1, [r3, #20]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	891a      	ldrh	r2, [r3, #8]
 800243e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002442:	b29b      	uxth	r3, r3
 8002444:	f003 f9e9 	bl	800581a <USB_WritePMA>
 8002448:	e1e2      	b.n	8002810 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002452:	b29b      	uxth	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	3306      	adds	r3, #6
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002472:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800247e:	429a      	cmp	r2, r3
 8002480:	d307      	bcc.n	8002492 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800248a:	1ad2      	subs	r2, r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	619a      	str	r2, [r3, #24]
 8002490:	e002      	b.n	8002498 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f040 80c0 	bne.w	8002622 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	785b      	ldrb	r3, [r3, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d126      	bne.n	80024f8 <HAL_PCD_EP_DB_Transmit+0x482>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024be:	4413      	add	r3, r2
 80024c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	011a      	lsls	r2, r3, #4
 80024c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024ca:	4413      	add	r3, r2
 80024cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024dc:	b29a      	uxth	r2, r3
 80024de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024e0:	801a      	strh	r2, [r3, #0]
 80024e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024f4:	801a      	strh	r2, [r3, #0]
 80024f6:	e01a      	b.n	800252e <HAL_PCD_EP_DB_Transmit+0x4b8>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	785b      	ldrb	r3, [r3, #1]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d116      	bne.n	800252e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	667b      	str	r3, [r7, #100]	@ 0x64
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002514:	4413      	add	r3, r2
 8002516:	667b      	str	r3, [r7, #100]	@ 0x64
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	011a      	lsls	r2, r3, #4
 800251e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002520:	4413      	add	r3, r2
 8002522:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002526:	663b      	str	r3, [r7, #96]	@ 0x60
 8002528:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	677b      	str	r3, [r7, #116]	@ 0x74
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	785b      	ldrb	r3, [r3, #1]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d12b      	bne.n	8002594 <HAL_PCD_EP_DB_Transmit+0x51e>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800254a:	b29b      	uxth	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002550:	4413      	add	r3, r2
 8002552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	011a      	lsls	r2, r3, #4
 800255a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800255c:	4413      	add	r3, r2
 800255e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002562:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002566:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002572:	b29a      	uxth	r2, r3
 8002574:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800258a:	b29a      	uxth	r2, r3
 800258c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	e017      	b.n	80025c4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d113      	bne.n	80025c4 <HAL_PCD_EP_DB_Transmit+0x54e>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025aa:	4413      	add	r3, r2
 80025ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	011a      	lsls	r2, r3, #4
 80025b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025b6:	4413      	add	r3, r2
 80025b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80025bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80025be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025c0:	2200      	movs	r2, #0
 80025c2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f005 f877 	bl	80076be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 811a 	bne.w	8002810 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025f6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	441a      	add	r2, r3
 8002608:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800260c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002610:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002614:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800261c:	b29b      	uxth	r3, r3
 800261e:	8013      	strh	r3, [r2, #0]
 8002620:	e0f6      	b.n	8002810 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d121      	bne.n	8002670 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002646:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	441a      	add	r2, r3
 8002658:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800265c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002660:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002664:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800266c:	b29b      	uxth	r3, r3
 800266e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002676:	2b01      	cmp	r3, #1
 8002678:	f040 80ca 	bne.w	8002810 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002684:	441a      	add	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002692:	441a      	add	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6a1a      	ldr	r2, [r3, #32]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d30b      	bcc.n	80026bc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	6a1a      	ldr	r2, [r3, #32]
 80026b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026b4:	1ad2      	subs	r2, r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	621a      	str	r2, [r3, #32]
 80026ba:	e017      	b.n	80026ec <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d108      	bne.n	80026d6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80026c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80026d4:	e00a      	b.n	80026ec <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	785b      	ldrb	r3, [r3, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d165      	bne.n	80027c6 <HAL_PCD_EP_DB_Transmit+0x750>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002708:	b29b      	uxth	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800270e:	4413      	add	r3, r2
 8002710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	011a      	lsls	r2, r3, #4
 8002718:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800271a:	4413      	add	r3, r2
 800271c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002720:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002722:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800272c:	b29a      	uxth	r2, r3
 800272e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002730:	801a      	strh	r2, [r3, #0]
 8002732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002736:	2b3e      	cmp	r3, #62	@ 0x3e
 8002738:	d91d      	bls.n	8002776 <HAL_PCD_EP_DB_Transmit+0x700>
 800273a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2b00      	cmp	r3, #0
 800274c:	d102      	bne.n	8002754 <HAL_PCD_EP_DB_Transmit+0x6de>
 800274e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002750:	3b01      	subs	r3, #1
 8002752:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002754:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29a      	uxth	r2, r3
 800275a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800275c:	b29b      	uxth	r3, r3
 800275e:	029b      	lsls	r3, r3, #10
 8002760:	b29b      	uxth	r3, r3
 8002762:	4313      	orrs	r3, r2
 8002764:	b29b      	uxth	r3, r3
 8002766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800276a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800276e:	b29a      	uxth	r2, r3
 8002770:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002772:	801a      	strh	r2, [r3, #0]
 8002774:	e041      	b.n	80027fa <HAL_PCD_EP_DB_Transmit+0x784>
 8002776:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10a      	bne.n	8002794 <HAL_PCD_EP_DB_Transmit+0x71e>
 800277e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278c:	b29a      	uxth	r2, r3
 800278e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002790:	801a      	strh	r2, [r3, #0]
 8002792:	e032      	b.n	80027fa <HAL_PCD_EP_DB_Transmit+0x784>
 8002794:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800279c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_PCD_EP_DB_Transmit+0x738>
 80027a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027aa:	3301      	adds	r3, #1
 80027ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	029b      	lsls	r3, r3, #10
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4313      	orrs	r3, r2
 80027be:	b29a      	uxth	r2, r3
 80027c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027c2:	801a      	strh	r2, [r3, #0]
 80027c4:	e019      	b.n	80027fa <HAL_PCD_EP_DB_Transmit+0x784>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	785b      	ldrb	r3, [r3, #1]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d115      	bne.n	80027fa <HAL_PCD_EP_DB_Transmit+0x784>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027dc:	4413      	add	r3, r2
 80027de:	657b      	str	r3, [r7, #84]	@ 0x54
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	011a      	lsls	r2, r3, #4
 80027e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e8:	4413      	add	r3, r2
 80027ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80027f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027f8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	6959      	ldr	r1, [r3, #20]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	895a      	ldrh	r2, [r3, #10]
 8002806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800280a:	b29b      	uxth	r3, r3
 800280c:	f003 f805 	bl	800581a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002826:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800282a:	82bb      	strh	r3, [r7, #20]
 800282c:	8abb      	ldrh	r3, [r7, #20]
 800282e:	f083 0310 	eor.w	r3, r3, #16
 8002832:	82bb      	strh	r3, [r7, #20]
 8002834:	8abb      	ldrh	r3, [r7, #20]
 8002836:	f083 0320 	eor.w	r3, r3, #32
 800283a:	82bb      	strh	r3, [r7, #20]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	441a      	add	r2, r3
 800284a:	8abb      	ldrh	r3, [r7, #20]
 800284c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800285c:	b29b      	uxth	r3, r3
 800285e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3790      	adds	r7, #144	@ 0x90
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800286a:	b480      	push	{r7}
 800286c:	b087      	sub	sp, #28
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	817b      	strh	r3, [r7, #10]
 8002878:	4613      	mov	r3, r2
 800287a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800287c:	897b      	ldrh	r3, [r7, #10]
 800287e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002888:	897b      	ldrh	r3, [r7, #10]
 800288a:	f003 0207 	and.w	r2, r3, #7
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	3310      	adds	r3, #16
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4413      	add	r3, r2
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	e009      	b.n	80028b4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028a0:	897a      	ldrh	r2, [r7, #10]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4413      	add	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028b4:	893b      	ldrh	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d107      	bne.n	80028ca <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2200      	movs	r2, #0
 80028be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	80da      	strh	r2, [r3, #6]
 80028c8:	e00b      	b.n	80028e2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2201      	movs	r2, #1
 80028ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	0c1b      	lsrs	r3, r3, #16
 80028dc:	b29a      	uxth	r2, r3
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e272      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8087 	beq.w	8002a1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002910:	4b92      	ldr	r3, [pc, #584]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	2b04      	cmp	r3, #4
 800291a:	d00c      	beq.n	8002936 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800291c:	4b8f      	ldr	r3, [pc, #572]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	2b08      	cmp	r3, #8
 8002926:	d112      	bne.n	800294e <HAL_RCC_OscConfig+0x5e>
 8002928:	4b8c      	ldr	r3, [pc, #560]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002934:	d10b      	bne.n	800294e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002936:	4b89      	ldr	r3, [pc, #548]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d06c      	beq.n	8002a1c <HAL_RCC_OscConfig+0x12c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d168      	bne.n	8002a1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e24c      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x76>
 8002958:	4b80      	ldr	r3, [pc, #512]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a7f      	ldr	r2, [pc, #508]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800295e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	e02e      	b.n	80029c4 <HAL_RCC_OscConfig+0xd4>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x98>
 800296e:	4b7b      	ldr	r3, [pc, #492]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a7a      	ldr	r2, [pc, #488]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002974:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b78      	ldr	r3, [pc, #480]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a77      	ldr	r2, [pc, #476]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002980:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e01d      	b.n	80029c4 <HAL_RCC_OscConfig+0xd4>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0xbc>
 8002992:	4b72      	ldr	r3, [pc, #456]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a71      	ldr	r2, [pc, #452]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b6f      	ldr	r3, [pc, #444]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a6e      	ldr	r2, [pc, #440]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_OscConfig+0xd4>
 80029ac:	4b6b      	ldr	r3, [pc, #428]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a6a      	ldr	r2, [pc, #424]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b68      	ldr	r3, [pc, #416]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a67      	ldr	r2, [pc, #412]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d013      	beq.n	80029f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fd ff3e 	bl	800084c <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d4:	f7fd ff3a 	bl	800084c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	@ 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e200      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0xe4>
 80029f2:	e014      	b.n	8002a1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fd ff2a 	bl	800084c <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fd ff26 	bl	800084c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	@ 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1ec      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0e:	4b53      	ldr	r3, [pc, #332]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x10c>
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d063      	beq.n	8002af2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a2a:	4b4c      	ldr	r3, [pc, #304]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a36:	4b49      	ldr	r3, [pc, #292]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d11c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x18c>
 8002a42:	4b46      	ldr	r3, [pc, #280]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d116      	bne.n	8002a7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	4b43      	ldr	r3, [pc, #268]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_RCC_OscConfig+0x176>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d001      	beq.n	8002a66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e1c0      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a66:	4b3d      	ldr	r3, [pc, #244]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4939      	ldr	r1, [pc, #228]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	e03a      	b.n	8002af2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a84:	4b36      	ldr	r3, [pc, #216]	@ (8002b60 <HAL_RCC_OscConfig+0x270>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fd fedf 	bl	800084c <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fd fedb 	bl	800084c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e1a1      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4927      	ldr	r1, [pc, #156]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]
 8002ac4:	e015      	b.n	8002af2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac6:	4b26      	ldr	r3, [pc, #152]	@ (8002b60 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fd febe 	bl	800084c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad4:	f7fd feba 	bl	800084c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e180      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d03a      	beq.n	8002b74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d019      	beq.n	8002b3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b06:	4b17      	ldr	r3, [pc, #92]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0c:	f7fd fe9e 	bl	800084c <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b14:	f7fd fe9a 	bl	800084c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e160      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b26:	4b0d      	ldr	r3, [pc, #52]	@ (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b32:	2001      	movs	r0, #1
 8002b34:	f000 fa9c 	bl	8003070 <RCC_Delay>
 8002b38:	e01c      	b.n	8002b74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b40:	f7fd fe84 	bl	800084c <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b46:	e00f      	b.n	8002b68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b48:	f7fd fe80 	bl	800084c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d908      	bls.n	8002b68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e146      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	42420000 	.word	0x42420000
 8002b64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b68:	4b92      	ldr	r3, [pc, #584]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e9      	bne.n	8002b48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80a6 	beq.w	8002cce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b86:	4b8b      	ldr	r3, [pc, #556]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	4b88      	ldr	r3, [pc, #544]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4a87      	ldr	r2, [pc, #540]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b9c:	61d3      	str	r3, [r2, #28]
 8002b9e:	4b85      	ldr	r3, [pc, #532]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bae:	4b82      	ldr	r3, [pc, #520]	@ (8002db8 <HAL_RCC_OscConfig+0x4c8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d118      	bne.n	8002bec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bba:	4b7f      	ldr	r3, [pc, #508]	@ (8002db8 <HAL_RCC_OscConfig+0x4c8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7e      	ldr	r2, [pc, #504]	@ (8002db8 <HAL_RCC_OscConfig+0x4c8>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc6:	f7fd fe41 	bl	800084c <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bce:	f7fd fe3d 	bl	800084c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b64      	cmp	r3, #100	@ 0x64
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e103      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be0:	4b75      	ldr	r3, [pc, #468]	@ (8002db8 <HAL_RCC_OscConfig+0x4c8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x312>
 8002bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4a6e      	ldr	r2, [pc, #440]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6213      	str	r3, [r2, #32]
 8002c00:	e02d      	b.n	8002c5e <HAL_RCC_OscConfig+0x36e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x334>
 8002c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	4a69      	ldr	r2, [pc, #420]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	6213      	str	r3, [r2, #32]
 8002c16:	4b67      	ldr	r3, [pc, #412]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4a66      	ldr	r2, [pc, #408]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	f023 0304 	bic.w	r3, r3, #4
 8002c20:	6213      	str	r3, [r2, #32]
 8002c22:	e01c      	b.n	8002c5e <HAL_RCC_OscConfig+0x36e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x356>
 8002c2c:	4b61      	ldr	r3, [pc, #388]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4a60      	ldr	r2, [pc, #384]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	6213      	str	r3, [r2, #32]
 8002c38:	4b5e      	ldr	r3, [pc, #376]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4a5d      	ldr	r2, [pc, #372]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6213      	str	r3, [r2, #32]
 8002c44:	e00b      	b.n	8002c5e <HAL_RCC_OscConfig+0x36e>
 8002c46:	4b5b      	ldr	r3, [pc, #364]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a5a      	ldr	r2, [pc, #360]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	6213      	str	r3, [r2, #32]
 8002c52:	4b58      	ldr	r3, [pc, #352]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a57      	ldr	r2, [pc, #348]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d015      	beq.n	8002c92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c66:	f7fd fdf1 	bl	800084c <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fd fded 	bl	800084c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e0b1      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	4b4b      	ldr	r3, [pc, #300]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ee      	beq.n	8002c6e <HAL_RCC_OscConfig+0x37e>
 8002c90:	e014      	b.n	8002cbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c92:	f7fd fddb 	bl	800084c <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fd fdd7 	bl	800084c <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e09b      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb0:	4b40      	ldr	r3, [pc, #256]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ee      	bne.n	8002c9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d105      	bne.n	8002cce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4a3b      	ldr	r2, [pc, #236]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ccc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 8087 	beq.w	8002de6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd8:	4b36      	ldr	r3, [pc, #216]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 030c 	and.w	r3, r3, #12
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d061      	beq.n	8002da8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d146      	bne.n	8002d7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cec:	4b33      	ldr	r3, [pc, #204]	@ (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7fd fdab 	bl	800084c <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7fd fda7 	bl	800084c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e06d      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0c:	4b29      	ldr	r3, [pc, #164]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d20:	d108      	bne.n	8002d34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d22:	4b24      	ldr	r3, [pc, #144]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	4921      	ldr	r1, [pc, #132]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d34:	4b1f      	ldr	r3, [pc, #124]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a19      	ldr	r1, [r3, #32]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	430b      	orrs	r3, r1
 8002d46:	491b      	ldr	r1, [pc, #108]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7fd fd7b 	bl	800084c <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fd fd77 	bl	800084c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e03d      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d6c:	4b11      	ldr	r3, [pc, #68]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x46a>
 8002d78:	e035      	b.n	8002de6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7a:	4b10      	ldr	r3, [pc, #64]	@ (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fd fd64 	bl	800084c <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fd fd60 	bl	800084c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e026      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9a:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x498>
 8002da6:	e01e      	b.n	8002de6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e019      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_RCC_OscConfig+0x500>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d106      	bne.n	8002de2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000

08002df4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0d0      	b.n	8002faa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e08:	4b6a      	ldr	r3, [pc, #424]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d910      	bls.n	8002e38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e16:	4b67      	ldr	r3, [pc, #412]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 0207 	bic.w	r2, r3, #7
 8002e1e:	4965      	ldr	r1, [pc, #404]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b63      	ldr	r3, [pc, #396]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0b8      	b.n	8002faa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d020      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e50:	4b59      	ldr	r3, [pc, #356]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a58      	ldr	r2, [pc, #352]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e68:	4b53      	ldr	r3, [pc, #332]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4a52      	ldr	r2, [pc, #328]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e74:	4b50      	ldr	r3, [pc, #320]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	494d      	ldr	r1, [pc, #308]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d040      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d107      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	4b47      	ldr	r3, [pc, #284]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d115      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e07f      	b.n	8002faa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d107      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb2:	4b41      	ldr	r3, [pc, #260]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e073      	b.n	8002faa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e06b      	b.n	8002faa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ed2:	4b39      	ldr	r3, [pc, #228]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f023 0203 	bic.w	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4936      	ldr	r1, [pc, #216]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee4:	f7fd fcb2 	bl	800084c <HAL_GetTick>
 8002ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	e00a      	b.n	8002f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eec:	f7fd fcae 	bl	800084c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e053      	b.n	8002faa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f02:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 020c 	and.w	r2, r3, #12
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d1eb      	bne.n	8002eec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f14:	4b27      	ldr	r3, [pc, #156]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d210      	bcs.n	8002f44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f22:	4b24      	ldr	r3, [pc, #144]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 0207 	bic.w	r2, r3, #7
 8002f2a:	4922      	ldr	r1, [pc, #136]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e032      	b.n	8002faa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f50:	4b19      	ldr	r3, [pc, #100]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4916      	ldr	r1, [pc, #88]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f6e:	4b12      	ldr	r3, [pc, #72]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	490e      	ldr	r1, [pc, #56]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f82:	f000 f821 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002f86:	4602      	mov	r2, r0
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	490a      	ldr	r1, [pc, #40]	@ (8002fbc <HAL_RCC_ClockConfig+0x1c8>)
 8002f94:	5ccb      	ldrb	r3, [r1, r3]
 8002f96:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9a:	4a09      	ldr	r2, [pc, #36]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1cc>)
 8002f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f9e:	4b09      	ldr	r3, [pc, #36]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1d0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fd fc10 	bl	80007c8 <HAL_InitTick>

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40022000 	.word	0x40022000
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	080085a0 	.word	0x080085a0
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	2000000c 	.word	0x2000000c

08002fc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800305c <HAL_RCC_GetSysClockFreq+0x94>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d002      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x36>
 8002ff6:	e027      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ff8:	4b19      	ldr	r3, [pc, #100]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ffa:	613b      	str	r3, [r7, #16]
      break;
 8002ffc:	e027      	b.n	800304e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	0c9b      	lsrs	r3, r3, #18
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	4a17      	ldr	r2, [pc, #92]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003008:	5cd3      	ldrb	r3, [r2, r3]
 800300a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d010      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003016:	4b11      	ldr	r3, [pc, #68]	@ (800305c <HAL_RCC_GetSysClockFreq+0x94>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	0c5b      	lsrs	r3, r3, #17
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	4a11      	ldr	r2, [pc, #68]	@ (8003068 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a0d      	ldr	r2, [pc, #52]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x98>)
 800302a:	fb03 f202 	mul.w	r2, r3, r2
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	fbb2 f3f3 	udiv	r3, r2, r3
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	e004      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a0c      	ldr	r2, [pc, #48]	@ (800306c <HAL_RCC_GetSysClockFreq+0xa4>)
 800303c:	fb02 f303 	mul.w	r3, r2, r3
 8003040:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	613b      	str	r3, [r7, #16]
      break;
 8003046:	e002      	b.n	800304e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003048:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x98>)
 800304a:	613b      	str	r3, [r7, #16]
      break;
 800304c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800304e:	693b      	ldr	r3, [r7, #16]
}
 8003050:	4618      	mov	r0, r3
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40021000 	.word	0x40021000
 8003060:	007a1200 	.word	0x007a1200
 8003064:	080085b0 	.word	0x080085b0
 8003068:	080085c0 	.word	0x080085c0
 800306c:	003d0900 	.word	0x003d0900

08003070 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003078:	4b0a      	ldr	r3, [pc, #40]	@ (80030a4 <RCC_Delay+0x34>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0a      	ldr	r2, [pc, #40]	@ (80030a8 <RCC_Delay+0x38>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	0a5b      	lsrs	r3, r3, #9
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800308c:	bf00      	nop
  }
  while (Delay --);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1e5a      	subs	r2, r3, #1
 8003092:	60fa      	str	r2, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f9      	bne.n	800308c <RCC_Delay+0x1c>
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr
 80030a4:	20000000 	.word	0x20000000
 80030a8:	10624dd3 	.word	0x10624dd3

080030ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d07d      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030c8:	2300      	movs	r3, #0
 80030ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030cc:	4b4f      	ldr	r3, [pc, #316]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10d      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d8:	4b4c      	ldr	r3, [pc, #304]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	4a4b      	ldr	r2, [pc, #300]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	61d3      	str	r3, [r2, #28]
 80030e4:	4b49      	ldr	r3, [pc, #292]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f0:	2301      	movs	r3, #1
 80030f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f4:	4b46      	ldr	r3, [pc, #280]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d118      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003100:	4b43      	ldr	r3, [pc, #268]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a42      	ldr	r2, [pc, #264]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800310a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310c:	f7fd fb9e 	bl	800084c <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003112:	e008      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003114:	f7fd fb9a 	bl	800084c <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	@ 0x64
 8003120:	d901      	bls.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e06d      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003126:	4b3a      	ldr	r3, [pc, #232]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003132:	4b36      	ldr	r3, [pc, #216]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800313a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d02e      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	429a      	cmp	r2, r3
 800314e:	d027      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003150:	4b2e      	ldr	r3, [pc, #184]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003158:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800315a:	4b2e      	ldr	r3, [pc, #184]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800315c:	2201      	movs	r2, #1
 800315e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003160:	4b2c      	ldr	r3, [pc, #176]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003166:	4a29      	ldr	r2, [pc, #164]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d014      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7fd fb69 	bl	800084c <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	e00a      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fd fb65 	bl	800084c <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e036      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003194:	4b1d      	ldr	r3, [pc, #116]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ee      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031a0:	4b1a      	ldr	r3, [pc, #104]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4917      	ldr	r1, [pc, #92]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d105      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b8:	4b14      	ldr	r3, [pc, #80]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	4a13      	ldr	r2, [pc, #76]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031d0:	4b0e      	ldr	r3, [pc, #56]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	490b      	ldr	r1, [pc, #44]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ee:	4b07      	ldr	r3, [pc, #28]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	4904      	ldr	r1, [pc, #16]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	40007000 	.word	0x40007000
 8003214:	42420440 	.word	0x42420440

08003218 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	4638      	mov	r0, r7
 8003222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003242:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003246:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	b29a      	uxth	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003266:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800326a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	b29b      	uxth	r3, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	b29b      	uxth	r3, r3
 800327c:	4013      	ands	r3, r2
 800327e:	b29a      	uxth	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b085      	sub	sp, #20
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	4638      	mov	r0, r7
 80032b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b09d      	sub	sp, #116	@ 0x74
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	b29b      	uxth	r3, r3
 8003302:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800330a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	78db      	ldrb	r3, [r3, #3]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d81f      	bhi.n	8003356 <USB_ActivateEndpoint+0x72>
 8003316:	a201      	add	r2, pc, #4	@ (adr r2, 800331c <USB_ActivateEndpoint+0x38>)
 8003318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331c:	0800332d 	.word	0x0800332d
 8003320:	08003349 	.word	0x08003349
 8003324:	0800335f 	.word	0x0800335f
 8003328:	0800333b 	.word	0x0800333b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800332c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003330:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003334:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003338:	e012      	b.n	8003360 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800333a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800333e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003342:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003346:	e00b      	b.n	8003360 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003348:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800334c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003350:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003354:	e004      	b.n	8003360 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800335c:	e000      	b.n	8003360 <USB_ActivateEndpoint+0x7c>
      break;
 800335e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	441a      	add	r2, r3
 800336a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800336e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800337a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800337e:	b29b      	uxth	r3, r3
 8003380:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003394:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003398:	b29b      	uxth	r3, r3
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	7812      	ldrb	r2, [r2, #0]
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	441a      	add	r2, r3
 80033ae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80033b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	7b1b      	ldrb	r3, [r3, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f040 8178 	bne.w	80036c0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	785b      	ldrb	r3, [r3, #1]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8084 	beq.w	80034e2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	4413      	add	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	011a      	lsls	r2, r3, #4
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	88db      	ldrh	r3, [r3, #6]
 8003402:	085b      	lsrs	r3, r3, #1
 8003404:	b29b      	uxth	r3, r3
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	827b      	strh	r3, [r7, #18]
 800341c:	8a7b      	ldrh	r3, [r7, #18]
 800341e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01b      	beq.n	800345e <USB_ActivateEndpoint+0x17a>
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800343c:	823b      	strh	r3, [r7, #16]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	441a      	add	r2, r3
 8003448:	8a3b      	ldrh	r3, [r7, #16]
 800344a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800344e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003456:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800345a:	b29b      	uxth	r3, r3
 800345c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	78db      	ldrb	r3, [r3, #3]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d020      	beq.n	80034a8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800347c:	81bb      	strh	r3, [r7, #12]
 800347e:	89bb      	ldrh	r3, [r7, #12]
 8003480:	f083 0320 	eor.w	r3, r3, #32
 8003484:	81bb      	strh	r3, [r7, #12]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	441a      	add	r2, r3
 8003490:	89bb      	ldrh	r3, [r7, #12]
 8003492:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003496:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800349a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800349e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	8013      	strh	r3, [r2, #0]
 80034a6:	e2d5      	b.n	8003a54 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034be:	81fb      	strh	r3, [r7, #14]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	441a      	add	r2, r3
 80034ca:	89fb      	ldrh	r3, [r7, #14]
 80034cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034dc:	b29b      	uxth	r3, r3
 80034de:	8013      	strh	r3, [r2, #0]
 80034e0:	e2b8      	b.n	8003a54 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f2:	4413      	add	r3, r2
 80034f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	011a      	lsls	r2, r3, #4
 80034fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	88db      	ldrh	r3, [r3, #6]
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	b29b      	uxth	r3, r3
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003514:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003520:	b29b      	uxth	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003526:	4413      	add	r3, r2
 8003528:	62bb      	str	r3, [r7, #40]	@ 0x28
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	011a      	lsls	r2, r3, #4
 8003530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003532:	4413      	add	r3, r2
 8003534:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003538:	627b      	str	r3, [r7, #36]	@ 0x24
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003544:	b29a      	uxth	r2, r3
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	801a      	strh	r2, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003550:	d91d      	bls.n	800358e <USB_ActivateEndpoint+0x2aa>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <USB_ActivateEndpoint+0x288>
 8003566:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003568:	3b01      	subs	r3, #1
 800356a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	b29a      	uxth	r2, r3
 8003572:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003574:	b29b      	uxth	r3, r3
 8003576:	029b      	lsls	r3, r3, #10
 8003578:	b29b      	uxth	r3, r3
 800357a:	4313      	orrs	r3, r2
 800357c:	b29b      	uxth	r3, r3
 800357e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003586:	b29a      	uxth	r2, r3
 8003588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358a:	801a      	strh	r2, [r3, #0]
 800358c:	e026      	b.n	80035dc <USB_ActivateEndpoint+0x2f8>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <USB_ActivateEndpoint+0x2c8>
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	b29b      	uxth	r3, r3
 800359c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	801a      	strh	r2, [r3, #0]
 80035aa:	e017      	b.n	80035dc <USB_ActivateEndpoint+0x2f8>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <USB_ActivateEndpoint+0x2e2>
 80035c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035c2:	3301      	adds	r3, #1
 80035c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	029b      	lsls	r3, r3, #10
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	4313      	orrs	r3, r2
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80035ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80035ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <USB_ActivateEndpoint+0x348>
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800360a:	843b      	strh	r3, [r7, #32]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	8c3b      	ldrh	r3, [r7, #32]
 8003618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800361c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003620:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003628:	b29b      	uxth	r3, r3
 800362a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d124      	bne.n	800367e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364a:	83bb      	strh	r3, [r7, #28]
 800364c:	8bbb      	ldrh	r3, [r7, #28]
 800364e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003652:	83bb      	strh	r3, [r7, #28]
 8003654:	8bbb      	ldrh	r3, [r7, #28]
 8003656:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800365a:	83bb      	strh	r3, [r7, #28]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	441a      	add	r2, r3
 8003666:	8bbb      	ldrh	r3, [r7, #28]
 8003668:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800366c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003678:	b29b      	uxth	r3, r3
 800367a:	8013      	strh	r3, [r2, #0]
 800367c:	e1ea      	b.n	8003a54 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
 800368c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003694:	83fb      	strh	r3, [r7, #30]
 8003696:	8bfb      	ldrh	r3, [r7, #30]
 8003698:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800369c:	83fb      	strh	r3, [r7, #30]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	441a      	add	r2, r3
 80036a8:	8bfb      	ldrh	r3, [r7, #30]
 80036aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	8013      	strh	r3, [r2, #0]
 80036be:	e1c9      	b.n	8003a54 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	78db      	ldrb	r3, [r3, #3]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d11e      	bne.n	8003706 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036de:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	441a      	add	r2, r3
 80036ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80036f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036f8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80036fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003700:	b29b      	uxth	r3, r3
 8003702:	8013      	strh	r3, [r2, #0]
 8003704:	e01d      	b.n	8003742 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	b29b      	uxth	r3, r3
 8003714:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800371c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	441a      	add	r2, r3
 800372a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800372e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003732:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800373a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800373e:	b29b      	uxth	r3, r3
 8003740:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800374c:	b29b      	uxth	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003752:	4413      	add	r3, r2
 8003754:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	011a      	lsls	r2, r3, #4
 800375c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800375e:	4413      	add	r3, r2
 8003760:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003764:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	891b      	ldrh	r3, [r3, #8]
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	b29b      	uxth	r3, r3
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003774:	801a      	strh	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	657b      	str	r3, [r7, #84]	@ 0x54
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003780:	b29b      	uxth	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003786:	4413      	add	r3, r2
 8003788:	657b      	str	r3, [r7, #84]	@ 0x54
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	011a      	lsls	r2, r3, #4
 8003790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003792:	4413      	add	r3, r2
 8003794:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003798:	653b      	str	r3, [r7, #80]	@ 0x50
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	895b      	ldrh	r3, [r3, #10]
 800379e:	085b      	lsrs	r3, r3, #1
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037a8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	785b      	ldrb	r3, [r3, #1]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f040 8093 	bne.w	80038da <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80037c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80037c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d01b      	beq.n	8003808 <USB_ActivateEndpoint+0x524>
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80037f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003804:	b29b      	uxth	r3, r3
 8003806:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003816:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01b      	beq.n	8003858 <USB_ActivateEndpoint+0x574>
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003836:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	441a      	add	r2, r3
 8003842:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800384c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003850:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003854:	b29b      	uxth	r3, r3
 8003856:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800386a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800386e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003870:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003872:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003876:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003878:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800387a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800387e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	441a      	add	r2, r3
 800388a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800388c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003890:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800389c:	b29b      	uxth	r3, r3
 800389e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	441a      	add	r2, r3
 80038c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80038c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	8013      	strh	r3, [r2, #0]
 80038d8:	e0bc      	b.n	8003a54 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80038ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80038ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d01d      	beq.n	8003932 <USB_ActivateEndpoint+0x64e>
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b29b      	uxth	r3, r3
 8003904:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800390c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	441a      	add	r2, r3
 800391a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800391e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003922:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003926:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800392a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800392e:	b29b      	uxth	r3, r3
 8003930:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003942:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d01d      	beq.n	800398a <USB_ActivateEndpoint+0x6a6>
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	b29b      	uxth	r3, r3
 800395c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003964:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	441a      	add	r2, r3
 8003972:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800397a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800397e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003982:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003986:	b29b      	uxth	r3, r3
 8003988:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	78db      	ldrb	r3, [r3, #3]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d024      	beq.n	80039dc <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039a8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80039ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80039b0:	f083 0320 	eor.w	r3, r3, #32
 80039b4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	441a      	add	r2, r3
 80039c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80039c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	8013      	strh	r3, [r2, #0]
 80039da:	e01d      	b.n	8003a18 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	441a      	add	r2, r3
 8003a00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	441a      	add	r2, r3
 8003a3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003a40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003a54:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3774      	adds	r7, #116	@ 0x74
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop

08003a64 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b08d      	sub	sp, #52	@ 0x34
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	7b1b      	ldrb	r3, [r3, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f040 808e 	bne.w	8003b94 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	785b      	ldrb	r3, [r3, #1]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d044      	beq.n	8003b0a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	81bb      	strh	r3, [r7, #12]
 8003a8e:	89bb      	ldrh	r3, [r7, #12]
 8003a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01b      	beq.n	8003ad0 <USB_DeactivateEndpoint+0x6c>
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aae:	817b      	strh	r3, [r7, #10]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	441a      	add	r2, r3
 8003aba:	897b      	ldrh	r3, [r7, #10]
 8003abc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ac0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ac8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ae2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ae6:	813b      	strh	r3, [r7, #8]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	441a      	add	r2, r3
 8003af2:	893b      	ldrh	r3, [r7, #8]
 8003af4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003af8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003afc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	8013      	strh	r3, [r2, #0]
 8003b08:	e192      	b.n	8003e30 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	827b      	strh	r3, [r7, #18]
 8003b18:	8a7b      	ldrh	r3, [r7, #18]
 8003b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01b      	beq.n	8003b5a <USB_DeactivateEndpoint+0xf6>
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b38:	823b      	strh	r3, [r7, #16]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	441a      	add	r2, r3
 8003b44:	8a3b      	ldrh	r3, [r7, #16]
 8003b46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b70:	81fb      	strh	r3, [r7, #14]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	441a      	add	r2, r3
 8003b7c:	89fb      	ldrh	r3, [r7, #14]
 8003b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	8013      	strh	r3, [r2, #0]
 8003b92:	e14d      	b.n	8003e30 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	785b      	ldrb	r3, [r3, #1]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f040 80a5 	bne.w	8003ce8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	843b      	strh	r3, [r7, #32]
 8003bac:	8c3b      	ldrh	r3, [r7, #32]
 8003bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d01b      	beq.n	8003bee <USB_DeactivateEndpoint+0x18a>
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bcc:	83fb      	strh	r3, [r7, #30]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	8bfb      	ldrh	r3, [r7, #30]
 8003bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003be2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	83bb      	strh	r3, [r7, #28]
 8003bfc:	8bbb      	ldrh	r3, [r7, #28]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d01b      	beq.n	8003c3e <USB_DeactivateEndpoint+0x1da>
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c1c:	837b      	strh	r3, [r7, #26]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	441a      	add	r2, r3
 8003c28:	8b7b      	ldrh	r3, [r7, #26]
 8003c2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c36:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c54:	833b      	strh	r3, [r7, #24]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	441a      	add	r2, r3
 8003c60:	8b3b      	ldrh	r3, [r7, #24]
 8003c62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c8c:	82fb      	strh	r3, [r7, #22]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	441a      	add	r2, r3
 8003c98:	8afb      	ldrh	r3, [r7, #22]
 8003c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cc4:	82bb      	strh	r3, [r7, #20]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	441a      	add	r2, r3
 8003cd0:	8abb      	ldrh	r3, [r7, #20]
 8003cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	8013      	strh	r3, [r2, #0]
 8003ce6:	e0a3      	b.n	8003e30 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003cf6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01b      	beq.n	8003d38 <USB_DeactivateEndpoint+0x2d4>
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d16:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003d46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01b      	beq.n	8003d88 <USB_DeactivateEndpoint+0x324>
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d66:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	441a      	add	r2, r3
 8003d72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003d74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d80:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d9e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	441a      	add	r2, r3
 8003daa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003dac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003db0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003db4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dd6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	441a      	add	r2, r3
 8003de2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003de4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003de8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	441a      	add	r2, r3
 8003e1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3734      	adds	r7, #52	@ 0x34
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b0c2      	sub	sp, #264	@ 0x108
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e4a:	6018      	str	r0, [r3, #0]
 8003e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e54:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	785b      	ldrb	r3, [r3, #1]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	f040 86b7 	bne.w	8004bd6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d908      	bls.n	8003e96 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e94:	e007      	b.n	8003ea6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	7b1b      	ldrb	r3, [r3, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d13a      	bne.n	8003f2c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6959      	ldr	r1, [r3, #20]
 8003ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	88da      	ldrh	r2, [r3, #6]
 8003ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003ed8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003edc:	6800      	ldr	r0, [r0, #0]
 8003ede:	f001 fc9c 	bl	800581a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ee6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	011a      	lsls	r2, r3, #4
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4413      	add	r3, r2
 8003f18:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	f000 be1f 	b.w	8004b6a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	78db      	ldrb	r3, [r3, #3]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	f040 8462 	bne.w	8004802 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	f240 83df 	bls.w	800471a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f82:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	441a      	add	r2, r3
 8003fa0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003fa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fac:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6a1a      	ldr	r2, [r3, #32]
 8003fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc8:	1ad2      	subs	r2, r2, r3
 8003fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 81c7 	beq.w	800438c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004002:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	633b      	str	r3, [r7, #48]	@ 0x30
 800400a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800400e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	785b      	ldrb	r3, [r3, #1]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d177      	bne.n	800410a <USB_EPStartXfer+0x2ce>
 800401a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800401e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800402a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004034:	b29b      	uxth	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403a:	4413      	add	r3, r2
 800403c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800403e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	011a      	lsls	r2, r3, #4
 800404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404e:	4413      	add	r3, r2
 8004050:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b29b      	uxth	r3, r3
 800405c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004060:	b29a      	uxth	r2, r3
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	801a      	strh	r2, [r3, #0]
 8004066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800406a:	2b3e      	cmp	r3, #62	@ 0x3e
 800406c:	d921      	bls.n	80040b2 <USB_EPStartXfer+0x276>
 800406e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <USB_EPStartXfer+0x252>
 8004084:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004088:	3b01      	subs	r3, #1
 800408a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	b29a      	uxth	r2, r3
 8004094:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004098:	b29b      	uxth	r3, r3
 800409a:	029b      	lsls	r3, r3, #10
 800409c:	b29b      	uxth	r3, r3
 800409e:	4313      	orrs	r3, r2
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	e050      	b.n	8004154 <USB_EPStartXfer+0x318>
 80040b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <USB_EPStartXfer+0x294>
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	801a      	strh	r2, [r3, #0]
 80040ce:	e041      	b.n	8004154 <USB_EPStartXfer+0x318>
 80040d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d4:	085b      	lsrs	r3, r3, #1
 80040d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80040da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <USB_EPStartXfer+0x2b4>
 80040e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80040ea:	3301      	adds	r3, #1
 80040ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80040f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	029b      	lsls	r3, r3, #10
 80040fe:	b29b      	uxth	r3, r3
 8004100:	4313      	orrs	r3, r2
 8004102:	b29a      	uxth	r2, r3
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	801a      	strh	r2, [r3, #0]
 8004108:	e024      	b.n	8004154 <USB_EPStartXfer+0x318>
 800410a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800410e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	785b      	ldrb	r3, [r3, #1]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d11c      	bne.n	8004154 <USB_EPStartXfer+0x318>
 800411a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800411e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004128:	b29b      	uxth	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412e:	4413      	add	r3, r2
 8004130:	633b      	str	r3, [r7, #48]	@ 0x30
 8004132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	011a      	lsls	r2, r3, #4
 8004140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004142:	4413      	add	r3, r2
 8004144:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800414a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800414e:	b29a      	uxth	r2, r3
 8004150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004152:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	895b      	ldrh	r3, [r3, #10]
 8004160:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6959      	ldr	r1, [r3, #20]
 8004170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004174:	b29b      	uxth	r3, r3
 8004176:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800417a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800417e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004182:	6800      	ldr	r0, [r0, #0]
 8004184:	f001 fb49 	bl	800581a <USB_WritePMA>
            ep->xfer_buff += len;
 8004188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800418c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004198:	441a      	add	r2, r3
 800419a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800419e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80041a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6a1a      	ldr	r2, [r3, #32]
 80041b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d90f      	bls.n	80041e2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80041c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6a1a      	ldr	r2, [r3, #32]
 80041ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d2:	1ad2      	subs	r2, r2, r3
 80041d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	621a      	str	r2, [r3, #32]
 80041e0:	e00e      	b.n	8004200 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80041e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80041f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2200      	movs	r2, #0
 80041fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	785b      	ldrb	r3, [r3, #1]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d177      	bne.n	8004300 <USB_EPStartXfer+0x4c4>
 8004210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800422a:	b29b      	uxth	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	4413      	add	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	011a      	lsls	r2, r3, #4
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	4413      	add	r3, r2
 8004246:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004256:	b29a      	uxth	r2, r3
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	801a      	strh	r2, [r3, #0]
 800425c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004260:	2b3e      	cmp	r3, #62	@ 0x3e
 8004262:	d921      	bls.n	80042a8 <USB_EPStartXfer+0x46c>
 8004264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800426e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <USB_EPStartXfer+0x448>
 800427a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800427e:	3b01      	subs	r3, #1
 8004280:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	b29a      	uxth	r2, r3
 800428a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800428e:	b29b      	uxth	r3, r3
 8004290:	029b      	lsls	r3, r3, #10
 8004292:	b29b      	uxth	r3, r3
 8004294:	4313      	orrs	r3, r2
 8004296:	b29b      	uxth	r3, r3
 8004298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800429c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	801a      	strh	r2, [r3, #0]
 80042a6:	e056      	b.n	8004356 <USB_EPStartXfer+0x51a>
 80042a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <USB_EPStartXfer+0x48a>
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042be:	b29a      	uxth	r2, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	801a      	strh	r2, [r3, #0]
 80042c4:	e047      	b.n	8004356 <USB_EPStartXfer+0x51a>
 80042c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80042d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d004      	beq.n	80042e6 <USB_EPStartXfer+0x4aa>
 80042dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e0:	3301      	adds	r3, #1
 80042e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	029b      	lsls	r3, r3, #10
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	4313      	orrs	r3, r2
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	e02a      	b.n	8004356 <USB_EPStartXfer+0x51a>
 8004300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	785b      	ldrb	r3, [r3, #1]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d122      	bne.n	8004356 <USB_EPStartXfer+0x51a>
 8004310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	623b      	str	r3, [r7, #32]
 800431c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004320:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800432a:	b29b      	uxth	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	4413      	add	r3, r2
 8004332:	623b      	str	r3, [r7, #32]
 8004334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	011a      	lsls	r2, r3, #4
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	4413      	add	r3, r2
 8004346:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004350:	b29a      	uxth	r2, r3
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800435a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	891b      	ldrh	r3, [r3, #8]
 8004362:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800436a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6959      	ldr	r1, [r3, #20]
 8004372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004376:	b29b      	uxth	r3, r3
 8004378:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800437c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004380:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004384:	6800      	ldr	r0, [r0, #0]
 8004386:	f001 fa48 	bl	800581a <USB_WritePMA>
 800438a:	e3ee      	b.n	8004b6a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800438c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	785b      	ldrb	r3, [r3, #1]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d177      	bne.n	800448c <USB_EPStartXfer+0x650>
 800439c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043bc:	4413      	add	r3, r2
 80043be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	011a      	lsls	r2, r3, #4
 80043ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043d0:	4413      	add	r3, r2
 80043d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80043d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80043ee:	d921      	bls.n	8004434 <USB_EPStartXfer+0x5f8>
 80043f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80043fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2b00      	cmp	r3, #0
 8004404:	d104      	bne.n	8004410 <USB_EPStartXfer+0x5d4>
 8004406:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800440a:	3b01      	subs	r3, #1
 800440c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	b29a      	uxth	r2, r3
 8004416:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800441a:	b29b      	uxth	r3, r3
 800441c:	029b      	lsls	r3, r3, #10
 800441e:	b29b      	uxth	r3, r3
 8004420:	4313      	orrs	r3, r2
 8004422:	b29b      	uxth	r3, r3
 8004424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800442c:	b29a      	uxth	r2, r3
 800442e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	e056      	b.n	80044e2 <USB_EPStartXfer+0x6a6>
 8004434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10a      	bne.n	8004452 <USB_EPStartXfer+0x616>
 800443c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	b29b      	uxth	r3, r3
 8004442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800444a:	b29a      	uxth	r2, r3
 800444c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800444e:	801a      	strh	r2, [r3, #0]
 8004450:	e047      	b.n	80044e2 <USB_EPStartXfer+0x6a6>
 8004452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800445c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d004      	beq.n	8004472 <USB_EPStartXfer+0x636>
 8004468:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800446c:	3301      	adds	r3, #1
 800446e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29a      	uxth	r2, r3
 8004478:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800447c:	b29b      	uxth	r3, r3
 800447e:	029b      	lsls	r3, r3, #10
 8004480:	b29b      	uxth	r3, r3
 8004482:	4313      	orrs	r3, r2
 8004484:	b29a      	uxth	r2, r3
 8004486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004488:	801a      	strh	r2, [r3, #0]
 800448a:	e02a      	b.n	80044e2 <USB_EPStartXfer+0x6a6>
 800448c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	785b      	ldrb	r3, [r3, #1]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d122      	bne.n	80044e2 <USB_EPStartXfer+0x6a6>
 800449c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044bc:	4413      	add	r3, r2
 80044be:	653b      	str	r3, [r7, #80]	@ 0x50
 80044c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	011a      	lsls	r2, r3, #4
 80044ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044d0:	4413      	add	r3, r2
 80044d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80044d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044dc:	b29a      	uxth	r2, r3
 80044de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80044e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	891b      	ldrh	r3, [r3, #8]
 80044ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6959      	ldr	r1, [r3, #20]
 80044fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004502:	b29b      	uxth	r3, r3
 8004504:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004508:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800450c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004510:	6800      	ldr	r0, [r0, #0]
 8004512:	f001 f982 	bl	800581a <USB_WritePMA>
            ep->xfer_buff += len;
 8004516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800451a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004526:	441a      	add	r2, r3
 8004528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800452c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a1a      	ldr	r2, [r3, #32]
 8004540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	429a      	cmp	r2, r3
 800454e:	d90f      	bls.n	8004570 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6a1a      	ldr	r2, [r3, #32]
 800455c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004560:	1ad2      	subs	r2, r2, r3
 8004562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	621a      	str	r2, [r3, #32]
 800456e:	e00e      	b.n	800458e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2200      	movs	r2, #0
 800458c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800458e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004592:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	643b      	str	r3, [r7, #64]	@ 0x40
 800459a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800459e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d177      	bne.n	800469a <USB_EPStartXfer+0x85e>
 80045aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ca:	4413      	add	r3, r2
 80045cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	011a      	lsls	r2, r3, #4
 80045dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045de:	4413      	add	r3, r2
 80045e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f4:	801a      	strh	r2, [r3, #0]
 80045f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80045fc:	d921      	bls.n	8004642 <USB_EPStartXfer+0x806>
 80045fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2b00      	cmp	r3, #0
 8004612:	d104      	bne.n	800461e <USB_EPStartXfer+0x7e2>
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004618:	3b01      	subs	r3, #1
 800461a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800461e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29a      	uxth	r2, r3
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	b29b      	uxth	r3, r3
 800462a:	029b      	lsls	r3, r3, #10
 800462c:	b29b      	uxth	r3, r3
 800462e:	4313      	orrs	r3, r2
 8004630:	b29b      	uxth	r3, r3
 8004632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800463a:	b29a      	uxth	r2, r3
 800463c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463e:	801a      	strh	r2, [r3, #0]
 8004640:	e050      	b.n	80046e4 <USB_EPStartXfer+0x8a8>
 8004642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <USB_EPStartXfer+0x824>
 800464a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004658:	b29a      	uxth	r2, r3
 800465a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800465c:	801a      	strh	r2, [r3, #0]
 800465e:	e041      	b.n	80046e4 <USB_EPStartXfer+0x8a8>
 8004660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004664:	085b      	lsrs	r3, r3, #1
 8004666:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800466a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d004      	beq.n	8004680 <USB_EPStartXfer+0x844>
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467a:	3301      	adds	r3, #1
 800467c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b29a      	uxth	r2, r3
 8004686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468a:	b29b      	uxth	r3, r3
 800468c:	029b      	lsls	r3, r3, #10
 800468e:	b29b      	uxth	r3, r3
 8004690:	4313      	orrs	r3, r2
 8004692:	b29a      	uxth	r2, r3
 8004694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004696:	801a      	strh	r2, [r3, #0]
 8004698:	e024      	b.n	80046e4 <USB_EPStartXfer+0x8a8>
 800469a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800469e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d11c      	bne.n	80046e4 <USB_EPStartXfer+0x8a8>
 80046aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046be:	4413      	add	r3, r2
 80046c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80046c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	011a      	lsls	r2, r3, #4
 80046d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046d2:	4413      	add	r3, r2
 80046d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046de:	b29a      	uxth	r2, r3
 80046e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	895b      	ldrh	r3, [r3, #10]
 80046f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6959      	ldr	r1, [r3, #20]
 8004700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004704:	b29b      	uxth	r3, r3
 8004706:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800470a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800470e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004712:	6800      	ldr	r0, [r0, #0]
 8004714:	f001 f881 	bl	800581a <USB_WritePMA>
 8004718:	e227      	b.n	8004b6a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800471a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800471e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800472a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800472e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800474c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004750:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	441a      	add	r2, r3
 800476e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800477e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800478a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004796:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047a6:	4413      	add	r3, r2
 80047a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	011a      	lsls	r2, r3, #4
 80047b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047ba:	4413      	add	r3, r2
 80047bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80047cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	891b      	ldrh	r3, [r3, #8]
 80047d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6959      	ldr	r1, [r3, #20]
 80047e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80047f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80047f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80047fa:	6800      	ldr	r0, [r0, #0]
 80047fc:	f001 f80d 	bl	800581a <USB_WritePMA>
 8004800:	e1b3      	b.n	8004b6a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6a1a      	ldr	r2, [r3, #32]
 800480e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004812:	1ad2      	subs	r2, r2, r3
 8004814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004824:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800482e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 80c6 	beq.w	80049d4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800484c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	673b      	str	r3, [r7, #112]	@ 0x70
 8004854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	785b      	ldrb	r3, [r3, #1]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d177      	bne.n	8004954 <USB_EPStartXfer+0xb18>
 8004864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800487e:	b29b      	uxth	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004884:	4413      	add	r3, r2
 8004886:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800488c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	011a      	lsls	r2, r3, #4
 8004896:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004898:	4413      	add	r3, r2
 800489a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800489e:	667b      	str	r3, [r7, #100]	@ 0x64
 80048a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048ae:	801a      	strh	r2, [r3, #0]
 80048b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80048b6:	d921      	bls.n	80048fc <USB_EPStartXfer+0xac0>
 80048b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80048c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d104      	bne.n	80048d8 <USB_EPStartXfer+0xa9c>
 80048ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80048d2:	3b01      	subs	r3, #1
 80048d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80048d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29a      	uxth	r2, r3
 80048de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	029b      	lsls	r3, r3, #10
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	4313      	orrs	r3, r2
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	e050      	b.n	800499e <USB_EPStartXfer+0xb62>
 80048fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <USB_EPStartXfer+0xade>
 8004904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800490e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004912:	b29a      	uxth	r2, r3
 8004914:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004916:	801a      	strh	r2, [r3, #0]
 8004918:	e041      	b.n	800499e <USB_EPStartXfer+0xb62>
 800491a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d004      	beq.n	800493a <USB_EPStartXfer+0xafe>
 8004930:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004934:	3301      	adds	r3, #1
 8004936:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800493a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	b29a      	uxth	r2, r3
 8004940:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004944:	b29b      	uxth	r3, r3
 8004946:	029b      	lsls	r3, r3, #10
 8004948:	b29b      	uxth	r3, r3
 800494a:	4313      	orrs	r3, r2
 800494c:	b29a      	uxth	r2, r3
 800494e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	e024      	b.n	800499e <USB_EPStartXfer+0xb62>
 8004954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d11c      	bne.n	800499e <USB_EPStartXfer+0xb62>
 8004964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004978:	4413      	add	r3, r2
 800497a:	673b      	str	r3, [r7, #112]	@ 0x70
 800497c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	011a      	lsls	r2, r3, #4
 800498a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800498c:	4413      	add	r3, r2
 800498e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004992:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004998:	b29a      	uxth	r2, r3
 800499a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800499c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800499e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	895b      	ldrh	r3, [r3, #10]
 80049aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6959      	ldr	r1, [r3, #20]
 80049ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80049c4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80049c8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80049cc:	6800      	ldr	r0, [r0, #0]
 80049ce:	f000 ff24 	bl	800581a <USB_WritePMA>
 80049d2:	e0ca      	b.n	8004b6a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d177      	bne.n	8004ad4 <USB_EPStartXfer+0xc98>
 80049e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	461a      	mov	r2, r3
 8004a02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a04:	4413      	add	r3, r2
 8004a06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	011a      	lsls	r2, r3, #4
 8004a16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a18:	4413      	add	r3, r2
 8004a1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a2e:	801a      	strh	r2, [r3, #0]
 8004a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a34:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a36:	d921      	bls.n	8004a7c <USB_EPStartXfer+0xc40>
 8004a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d104      	bne.n	8004a58 <USB_EPStartXfer+0xc1c>
 8004a4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004a52:	3b01      	subs	r3, #1
 8004a54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004a58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	029b      	lsls	r3, r3, #10
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a78:	801a      	strh	r2, [r3, #0]
 8004a7a:	e05c      	b.n	8004b36 <USB_EPStartXfer+0xcfa>
 8004a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <USB_EPStartXfer+0xc5e>
 8004a84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a96:	801a      	strh	r2, [r3, #0]
 8004a98:	e04d      	b.n	8004b36 <USB_EPStartXfer+0xcfa>
 8004a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d004      	beq.n	8004aba <USB_EPStartXfer+0xc7e>
 8004ab0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004aba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	029b      	lsls	r3, r3, #10
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	4313      	orrs	r3, r2
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ad0:	801a      	strh	r2, [r3, #0]
 8004ad2:	e030      	b.n	8004b36 <USB_EPStartXfer+0xcfa>
 8004ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	785b      	ldrb	r3, [r3, #1]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d128      	bne.n	8004b36 <USB_EPStartXfer+0xcfa>
 8004ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ae8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004af6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b08:	4413      	add	r3, r2
 8004b0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	011a      	lsls	r2, r3, #4
 8004b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b20:	4413      	add	r3, r2
 8004b22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	891b      	ldrh	r3, [r3, #8]
 8004b42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6959      	ldr	r1, [r3, #20]
 8004b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004b5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004b60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004b64:	6800      	ldr	r0, [r0, #0]
 8004b66:	f000 fe58 	bl	800581a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b90:	817b      	strh	r3, [r7, #10]
 8004b92:	897b      	ldrh	r3, [r7, #10]
 8004b94:	f083 0310 	eor.w	r3, r3, #16
 8004b98:	817b      	strh	r3, [r7, #10]
 8004b9a:	897b      	ldrh	r3, [r7, #10]
 8004b9c:	f083 0320 	eor.w	r3, r3, #32
 8004ba0:	817b      	strh	r3, [r7, #10]
 8004ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ba6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	897b      	ldrh	r3, [r7, #10]
 8004bbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	8013      	strh	r3, [r2, #0]
 8004bd2:	f000 bcde 	b.w	8005592 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	7b1b      	ldrb	r3, [r3, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f040 80bb 	bne.w	8004d5e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699a      	ldr	r2, [r3, #24]
 8004bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d917      	bls.n	8004c34 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8004c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699a      	ldr	r2, [r3, #24]
 8004c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c24:	1ad2      	subs	r2, r2, r3
 8004c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	619a      	str	r2, [r3, #24]
 8004c32:	e00e      	b.n	8004c52 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8004c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004c76:	4413      	add	r3, r2
 8004c78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	011a      	lsls	r2, r3, #4
 8004c8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004c8e:	4413      	add	r3, r2
 8004c90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb0:	2b3e      	cmp	r3, #62	@ 0x3e
 8004cb2:	d924      	bls.n	8004cfe <USB_EPStartXfer+0xec2>
 8004cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc2:	f003 031f 	and.w	r3, r3, #31
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d104      	bne.n	8004cd4 <USB_EPStartXfer+0xe98>
 8004cca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	029b      	lsls	r3, r3, #10
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cf8:	801a      	strh	r2, [r3, #0]
 8004cfa:	f000 bc10 	b.w	800551e <USB_EPStartXfer+0x16e2>
 8004cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10c      	bne.n	8004d20 <USB_EPStartXfer+0xee4>
 8004d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d1c:	801a      	strh	r2, [r3, #0]
 8004d1e:	e3fe      	b.n	800551e <USB_EPStartXfer+0x16e2>
 8004d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d004      	beq.n	8004d40 <USB_EPStartXfer+0xf04>
 8004d36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	029b      	lsls	r3, r3, #10
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	4313      	orrs	r3, r2
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	e3df      	b.n	800551e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	78db      	ldrb	r3, [r3, #3]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	f040 8218 	bne.w	80051a0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 809d 	bne.w	8004ebc <USB_EPStartXfer+0x1080>
 8004d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004da6:	4413      	add	r3, r2
 8004da8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	011a      	lsls	r2, r3, #4
 8004dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004dda:	801a      	strh	r2, [r3, #0]
 8004ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004dea:	d92b      	bls.n	8004e44 <USB_EPStartXfer+0x1008>
 8004dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d104      	bne.n	8004e1c <USB_EPStartXfer+0xfe0>
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e16:	3b01      	subs	r3, #1
 8004e18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	029b      	lsls	r3, r3, #10
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e40:	801a      	strh	r2, [r3, #0]
 8004e42:	e070      	b.n	8004f26 <USB_EPStartXfer+0x10ea>
 8004e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10c      	bne.n	8004e6e <USB_EPStartXfer+0x1032>
 8004e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e6a:	801a      	strh	r2, [r3, #0]
 8004e6c:	e05b      	b.n	8004f26 <USB_EPStartXfer+0x10ea>
 8004e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <USB_EPStartXfer+0x1062>
 8004e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e98:	3301      	adds	r3, #1
 8004e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	029b      	lsls	r3, r3, #10
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004eb8:	801a      	strh	r2, [r3, #0]
 8004eba:	e034      	b.n	8004f26 <USB_EPStartXfer+0x10ea>
 8004ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d12c      	bne.n	8004f26 <USB_EPStartXfer+0x10ea>
 8004ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	011a      	lsls	r2, r3, #4
 8004f04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f08:	4413      	add	r3, r2
 8004f0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004f24:	801a      	strh	r2, [r3, #0]
 8004f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f040 809d 	bne.w	8005080 <USB_EPStartXfer+0x1244>
 8004f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	011a      	lsls	r2, r3, #4
 8004f7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f82:	4413      	add	r3, r2
 8004f84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fae:	d92b      	bls.n	8005008 <USB_EPStartXfer+0x11cc>
 8004fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	095b      	lsrs	r3, r3, #5
 8004fbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d104      	bne.n	8004fe0 <USB_EPStartXfer+0x11a4>
 8004fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	029b      	lsls	r3, r3, #10
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	e069      	b.n	80050dc <USB_EPStartXfer+0x12a0>
 8005008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800500c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10c      	bne.n	8005032 <USB_EPStartXfer+0x11f6>
 8005018:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005028:	b29a      	uxth	r2, r3
 800502a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	e054      	b.n	80050dc <USB_EPStartXfer+0x12a0>
 8005032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d004      	beq.n	8005062 <USB_EPStartXfer+0x1226>
 8005058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800505c:	3301      	adds	r3, #1
 800505e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005062:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29a      	uxth	r2, r3
 800506a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800506e:	b29b      	uxth	r3, r3
 8005070:	029b      	lsls	r3, r3, #10
 8005072:	b29b      	uxth	r3, r3
 8005074:	4313      	orrs	r3, r2
 8005076:	b29a      	uxth	r2, r3
 8005078:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800507c:	801a      	strh	r2, [r3, #0]
 800507e:	e02d      	b.n	80050dc <USB_EPStartXfer+0x12a0>
 8005080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	785b      	ldrb	r3, [r3, #1]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d125      	bne.n	80050dc <USB_EPStartXfer+0x12a0>
 8005090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005094:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800509e:	b29b      	uxth	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80050a6:	4413      	add	r3, r2
 80050a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80050ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	011a      	lsls	r2, r3, #4
 80050ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80050be:	4413      	add	r3, r2
 80050c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050da:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80050dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 8218 	beq.w	800551e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80050ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800510e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <USB_EPStartXfer+0x12ea>
 800511a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800511e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10d      	bne.n	8005142 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005126:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800512a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800512e:	2b00      	cmp	r3, #0
 8005130:	f040 81f5 	bne.w	800551e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005134:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	f040 81ee 	bne.w	800551e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29b      	uxth	r3, r3
 8005160:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005168:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800516c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005170:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800517a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	441a      	add	r2, r3
 8005186:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800518a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800518e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005196:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800519a:	b29b      	uxth	r3, r3
 800519c:	8013      	strh	r3, [r2, #0]
 800519e:	e1be      	b.n	800551e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80051a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	78db      	ldrb	r3, [r3, #3]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f040 81b4 	bne.w	800551a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80051b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d917      	bls.n	80051fe <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80051ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80051de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ee:	1ad2      	subs	r2, r2, r3
 80051f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	619a      	str	r2, [r3, #24]
 80051fc:	e00e      	b.n	800521c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80051fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800520e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2200      	movs	r2, #0
 800521a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800521c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f040 8085 	bne.w	8005338 <USB_EPStartXfer+0x14fc>
 800522e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800523c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005240:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800524a:	b29b      	uxth	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005252:	4413      	add	r3, r2
 8005254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	011a      	lsls	r2, r3, #4
 8005266:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800526a:	4413      	add	r3, r2
 800526c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005270:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005274:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005280:	b29a      	uxth	r2, r3
 8005282:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005286:	801a      	strh	r2, [r3, #0]
 8005288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800528c:	2b3e      	cmp	r3, #62	@ 0x3e
 800528e:	d923      	bls.n	80052d8 <USB_EPStartXfer+0x149c>
 8005290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800529a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d104      	bne.n	80052b0 <USB_EPStartXfer+0x1474>
 80052a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052aa:	3b01      	subs	r3, #1
 80052ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80052b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052bc:	b29b      	uxth	r3, r3
 80052be:	029b      	lsls	r3, r3, #10
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	4313      	orrs	r3, r2
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052d4:	801a      	strh	r2, [r3, #0]
 80052d6:	e060      	b.n	800539a <USB_EPStartXfer+0x155e>
 80052d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10c      	bne.n	80052fa <USB_EPStartXfer+0x14be>
 80052e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052f6:	801a      	strh	r2, [r3, #0]
 80052f8:	e04f      	b.n	800539a <USB_EPStartXfer+0x155e>
 80052fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d004      	beq.n	800531a <USB_EPStartXfer+0x14de>
 8005310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005314:	3301      	adds	r3, #1
 8005316:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800531a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29a      	uxth	r2, r3
 8005322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005326:	b29b      	uxth	r3, r3
 8005328:	029b      	lsls	r3, r3, #10
 800532a:	b29b      	uxth	r3, r3
 800532c:	4313      	orrs	r3, r2
 800532e:	b29a      	uxth	r2, r3
 8005330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	e030      	b.n	800539a <USB_EPStartXfer+0x155e>
 8005338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800533c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d128      	bne.n	800539a <USB_EPStartXfer+0x155e>
 8005348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005364:	b29b      	uxth	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800536c:	4413      	add	r3, r2
 800536e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	011a      	lsls	r2, r3, #4
 8005380:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005384:	4413      	add	r3, r2
 8005386:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800538a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800538e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005392:	b29a      	uxth	r2, r3
 8005394:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005398:	801a      	strh	r2, [r3, #0]
 800539a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	785b      	ldrb	r3, [r3, #1]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f040 8085 	bne.w	80054c4 <USB_EPStartXfer+0x1688>
 80053ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80053c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	461a      	mov	r2, r3
 80053da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80053de:	4413      	add	r3, r2
 80053e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80053e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	011a      	lsls	r2, r3, #4
 80053f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80053f6:	4413      	add	r3, r2
 80053f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800540c:	b29a      	uxth	r2, r3
 800540e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005412:	801a      	strh	r2, [r3, #0]
 8005414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005418:	2b3e      	cmp	r3, #62	@ 0x3e
 800541a:	d923      	bls.n	8005464 <USB_EPStartXfer+0x1628>
 800541c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <USB_EPStartXfer+0x1600>
 8005432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005436:	3b01      	subs	r3, #1
 8005438:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800543c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29a      	uxth	r2, r3
 8005444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005448:	b29b      	uxth	r3, r3
 800544a:	029b      	lsls	r3, r3, #10
 800544c:	b29b      	uxth	r3, r3
 800544e:	4313      	orrs	r3, r2
 8005450:	b29b      	uxth	r3, r3
 8005452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545a:	b29a      	uxth	r2, r3
 800545c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	e05c      	b.n	800551e <USB_EPStartXfer+0x16e2>
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10c      	bne.n	8005486 <USB_EPStartXfer+0x164a>
 800546c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800547c:	b29a      	uxth	r2, r3
 800547e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005482:	801a      	strh	r2, [r3, #0]
 8005484:	e04b      	b.n	800551e <USB_EPStartXfer+0x16e2>
 8005486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800548a:	085b      	lsrs	r3, r3, #1
 800548c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <USB_EPStartXfer+0x166a>
 800549c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054a0:	3301      	adds	r3, #1
 80054a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	029b      	lsls	r3, r3, #10
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	4313      	orrs	r3, r2
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80054c0:	801a      	strh	r2, [r3, #0]
 80054c2:	e02c      	b.n	800551e <USB_EPStartXfer+0x16e2>
 80054c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d124      	bne.n	800551e <USB_EPStartXfer+0x16e2>
 80054d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054ea:	4413      	add	r3, r2
 80054ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	011a      	lsls	r2, r3, #4
 80054fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005502:	4413      	add	r3, r2
 8005504:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005508:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800550c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005510:	b29a      	uxth	r2, r3
 8005512:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	e001      	b.n	800551e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e03a      	b.n	8005594 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800551e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005522:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005544:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005548:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800554c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005550:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005554:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005558:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800555c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005564:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	441a      	add	r2, r3
 800557a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800557e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800558a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800558e:	b29b      	uxth	r3, r3
 8005590:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	785b      	ldrb	r3, [r3, #1]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d020      	beq.n	80055f2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055c6:	81bb      	strh	r3, [r7, #12]
 80055c8:	89bb      	ldrh	r3, [r7, #12]
 80055ca:	f083 0310 	eor.w	r3, r3, #16
 80055ce:	81bb      	strh	r3, [r7, #12]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	441a      	add	r2, r3
 80055da:	89bb      	ldrh	r3, [r7, #12]
 80055dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	8013      	strh	r3, [r2, #0]
 80055f0:	e01f      	b.n	8005632 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005608:	81fb      	strh	r3, [r7, #14]
 800560a:	89fb      	ldrh	r3, [r7, #14]
 800560c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005610:	81fb      	strh	r3, [r7, #14]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	441a      	add	r2, r3
 800561c:	89fb      	ldrh	r3, [r7, #14]
 800561e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005622:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800562a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800562e:	b29b      	uxth	r3, r3
 8005630:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800563e:	b480      	push	{r7}
 8005640:	b087      	sub	sp, #28
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	7b1b      	ldrb	r3, [r3, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f040 809d 	bne.w	800578c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	785b      	ldrb	r3, [r3, #1]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d04c      	beq.n	80056f4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	823b      	strh	r3, [r7, #16]
 8005668:	8a3b      	ldrh	r3, [r7, #16]
 800566a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01b      	beq.n	80056aa <USB_EPClearStall+0x6c>
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005688:	81fb      	strh	r3, [r7, #14]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	441a      	add	r2, r3
 8005694:	89fb      	ldrh	r3, [r7, #14]
 8005696:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800569a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800569e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	78db      	ldrb	r3, [r3, #3]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d06c      	beq.n	800578c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056c8:	81bb      	strh	r3, [r7, #12]
 80056ca:	89bb      	ldrh	r3, [r7, #12]
 80056cc:	f083 0320 	eor.w	r3, r3, #32
 80056d0:	81bb      	strh	r3, [r7, #12]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	441a      	add	r2, r3
 80056dc:	89bb      	ldrh	r3, [r7, #12]
 80056de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	8013      	strh	r3, [r2, #0]
 80056f2:	e04b      	b.n	800578c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	82fb      	strh	r3, [r7, #22]
 8005702:	8afb      	ldrh	r3, [r7, #22]
 8005704:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d01b      	beq.n	8005744 <USB_EPClearStall+0x106>
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800571e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005722:	82bb      	strh	r3, [r7, #20]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	441a      	add	r2, r3
 800572e:	8abb      	ldrh	r3, [r7, #20]
 8005730:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005734:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005738:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800573c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005740:	b29b      	uxth	r3, r3
 8005742:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575a:	827b      	strh	r3, [r7, #18]
 800575c:	8a7b      	ldrh	r3, [r7, #18]
 800575e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005762:	827b      	strh	r3, [r7, #18]
 8005764:	8a7b      	ldrh	r3, [r7, #18]
 8005766:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800576a:	827b      	strh	r3, [r7, #18]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	441a      	add	r2, r3
 8005776:	8a7b      	ldrh	r3, [r7, #18]
 8005778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800577c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005788:	b29b      	uxth	r3, r3
 800578a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr

08005798 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2280      	movs	r2, #128	@ 0x80
 80057ae:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bc80      	pop	{r7}
 80057bc:	4770      	bx	lr

080057be <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr

080057e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80057f8:	68fb      	ldr	r3, [r7, #12]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr

08005804 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr

0800581a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800581a:	b480      	push	{r7}
 800581c:	b08b      	sub	sp, #44	@ 0x2c
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	4611      	mov	r1, r2
 8005826:	461a      	mov	r2, r3
 8005828:	460b      	mov	r3, r1
 800582a:	80fb      	strh	r3, [r7, #6]
 800582c:	4613      	mov	r3, r2
 800582e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005830:	88bb      	ldrh	r3, [r7, #4]
 8005832:	3301      	adds	r3, #1
 8005834:	085b      	lsrs	r3, r3, #1
 8005836:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005840:	88fb      	ldrh	r3, [r7, #6]
 8005842:	005a      	lsls	r2, r3, #1
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800584c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
 8005852:	e01f      	b.n	8005894 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	3301      	adds	r3, #1
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	b21b      	sxth	r3, r3
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	b21a      	sxth	r2, r3
 8005866:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800586a:	4313      	orrs	r3, r2
 800586c:	b21b      	sxth	r3, r3
 800586e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	8a7a      	ldrh	r2, [r7, #18]
 8005874:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	3302      	adds	r3, #2
 800587a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	3302      	adds	r3, #2
 8005880:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	3301      	adds	r3, #1
 8005886:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	3301      	adds	r3, #1
 800588c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	3b01      	subs	r3, #1
 8005892:	627b      	str	r3, [r7, #36]	@ 0x24
 8005894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1dc      	bne.n	8005854 <USB_WritePMA+0x3a>
  }
}
 800589a:	bf00      	nop
 800589c:	bf00      	nop
 800589e:	372c      	adds	r7, #44	@ 0x2c
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr

080058a6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b08b      	sub	sp, #44	@ 0x2c
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	4611      	mov	r1, r2
 80058b2:	461a      	mov	r2, r3
 80058b4:	460b      	mov	r3, r1
 80058b6:	80fb      	strh	r3, [r7, #6]
 80058b8:	4613      	mov	r3, r2
 80058ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80058bc:	88bb      	ldrh	r3, [r7, #4]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	005a      	lsls	r2, r3, #1
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058d8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80058de:	e01b      	b.n	8005918 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	3302      	adds	r3, #2
 80058ec:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	3301      	adds	r3, #1
 80058fa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	0a1b      	lsrs	r3, r3, #8
 8005900:	b2da      	uxtb	r2, r3
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	3301      	adds	r3, #1
 800590a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	3302      	adds	r3, #2
 8005910:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	3b01      	subs	r3, #1
 8005916:	627b      	str	r3, [r7, #36]	@ 0x24
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e0      	bne.n	80058e0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800591e:	88bb      	ldrh	r3, [r7, #4]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	b2da      	uxtb	r2, r3
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	701a      	strb	r2, [r3, #0]
  }
}
 800593a:	bf00      	nop
 800593c:	372c      	adds	r7, #44	@ 0x2c
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr

08005944 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	7c1b      	ldrb	r3, [r3, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d115      	bne.n	8005988 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800595c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005960:	2202      	movs	r2, #2
 8005962:	2181      	movs	r1, #129	@ 0x81
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 ff8e 	bl	8007886 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005970:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005974:	2202      	movs	r2, #2
 8005976:	2101      	movs	r1, #1
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f001 ff84 	bl	8007886 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8005986:	e012      	b.n	80059ae <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005988:	2340      	movs	r3, #64	@ 0x40
 800598a:	2202      	movs	r2, #2
 800598c:	2181      	movs	r1, #129	@ 0x81
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f001 ff79 	bl	8007886 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800599a:	2340      	movs	r3, #64	@ 0x40
 800599c:	2202      	movs	r2, #2
 800599e:	2101      	movs	r1, #1
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f001 ff70 	bl	8007886 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059ae:	2308      	movs	r3, #8
 80059b0:	2203      	movs	r2, #3
 80059b2:	2182      	movs	r1, #130	@ 0x82
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 ff66 	bl	8007886 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80059c0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80059c4:	f002 f886 	bl	8007ad4 <USBD_static_malloc>
 80059c8:	4602      	mov	r2, r0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d102      	bne.n	80059e0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80059da:	2301      	movs	r3, #1
 80059dc:	73fb      	strb	r3, [r7, #15]
 80059de:	e026      	b.n	8005a2e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059e6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	7c1b      	ldrb	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a14:	2101      	movs	r1, #1
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f002 f825 	bl	8007a66 <USBD_LL_PrepareReceive>
 8005a1c:	e007      	b.n	8005a2e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a24:	2340      	movs	r3, #64	@ 0x40
 8005a26:	2101      	movs	r1, #1
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f002 f81c 	bl	8007a66 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a48:	2181      	movs	r1, #129	@ 0x81
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f001 ff41 	bl	80078d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a56:	2101      	movs	r1, #1
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 ff3a 	bl	80078d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005a66:	2182      	movs	r1, #130	@ 0x82
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f001 ff32 	bl	80078d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00e      	beq.n	8005a9c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f002 f82c 	bl	8007aec <USBD_static_free>
    pdev->pClassData = NULL;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b086      	sub	sp, #24
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ab6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d039      	beq.n	8005b44 <USBD_CDC_Setup+0x9e>
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d17f      	bne.n	8005bd4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	88db      	ldrh	r3, [r3, #6]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d029      	beq.n	8005b30 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	b25b      	sxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	da11      	bge.n	8005b0a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005af2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	88d2      	ldrh	r2, [r2, #6]
 8005af8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005afa:	6939      	ldr	r1, [r7, #16]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	88db      	ldrh	r3, [r3, #6]
 8005b00:	461a      	mov	r2, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f001 fa06 	bl	8006f14 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005b08:	e06b      	b.n	8005be2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	785a      	ldrb	r2, [r3, #1]
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	88db      	ldrh	r3, [r3, #6]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b20:	6939      	ldr	r1, [r7, #16]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	88db      	ldrh	r3, [r3, #6]
 8005b26:	461a      	mov	r2, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f001 fa21 	bl	8006f70 <USBD_CtlPrepareRx>
      break;
 8005b2e:	e058      	b.n	8005be2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	7850      	ldrb	r0, [r2, #1]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	4798      	blx	r3
      break;
 8005b42:	e04e      	b.n	8005be2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	2b0b      	cmp	r3, #11
 8005b4a:	d02e      	beq.n	8005baa <USBD_CDC_Setup+0x104>
 8005b4c:	2b0b      	cmp	r3, #11
 8005b4e:	dc38      	bgt.n	8005bc2 <USBD_CDC_Setup+0x11c>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <USBD_CDC_Setup+0xb4>
 8005b54:	2b0a      	cmp	r3, #10
 8005b56:	d014      	beq.n	8005b82 <USBD_CDC_Setup+0xdc>
 8005b58:	e033      	b.n	8005bc2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d107      	bne.n	8005b74 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005b64:	f107 030c 	add.w	r3, r7, #12
 8005b68:	2202      	movs	r2, #2
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f001 f9d1 	bl	8006f14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b72:	e02e      	b.n	8005bd2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 f962 	bl	8006e40 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	75fb      	strb	r3, [r7, #23]
          break;
 8005b80:	e027      	b.n	8005bd2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d107      	bne.n	8005b9c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b8c:	f107 030f 	add.w	r3, r7, #15
 8005b90:	2201      	movs	r2, #1
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f001 f9bd 	bl	8006f14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b9a:	e01a      	b.n	8005bd2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 f94e 	bl	8006e40 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	75fb      	strb	r3, [r7, #23]
          break;
 8005ba8:	e013      	b.n	8005bd2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d00d      	beq.n	8005bd0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005bb4:	6839      	ldr	r1, [r7, #0]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f001 f942 	bl	8006e40 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005bc0:	e006      	b.n	8005bd0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f001 f93b 	bl	8006e40 <USBD_CtlError>
          ret = USBD_FAIL;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	75fb      	strb	r3, [r7, #23]
          break;
 8005bce:	e000      	b.n	8005bd2 <USBD_CDC_Setup+0x12c>
          break;
 8005bd0:	bf00      	nop
      }
      break;
 8005bd2:	e006      	b.n	8005be2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005bd4:	6839      	ldr	r1, [r7, #0]
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f001 f932 	bl	8006e40 <USBD_CtlError>
      ret = USBD_FAIL;
 8005bdc:	2302      	movs	r3, #2
 8005bde:	75fb      	strb	r3, [r7, #23]
      break;
 8005be0:	bf00      	nop
  }

  return ret;
 8005be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bfe:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005c06:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d03a      	beq.n	8005c88 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c12:	78fa      	ldrb	r2, [r7, #3]
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	331c      	adds	r3, #28
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d029      	beq.n	8005c7c <USBD_CDC_DataIn+0x90>
 8005c28:	78fa      	ldrb	r2, [r7, #3]
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	331c      	adds	r3, #28
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	78f9      	ldrb	r1, [r7, #3]
 8005c3c:	68b8      	ldr	r0, [r7, #8]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	4403      	add	r3, r0
 8005c48:	3320      	adds	r3, #32
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c50:	fb01 f303 	mul.w	r3, r1, r3
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d110      	bne.n	8005c7c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005c5a:	78fa      	ldrb	r2, [r7, #3]
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	331c      	adds	r3, #28
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c6e:	78f9      	ldrb	r1, [r7, #3]
 8005c70:	2300      	movs	r3, #0
 8005c72:	2200      	movs	r2, #0
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 fed3 	bl	8007a20 <USBD_LL_Transmit>
 8005c7a:	e003      	b.n	8005c84 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e000      	b.n	8005c8a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005c88:	2302      	movs	r3, #2
  }
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b084      	sub	sp, #16
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ca4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 fefe 	bl	8007aac <USBD_LL_GetRxDataSize>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00d      	beq.n	8005cde <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4798      	blx	r3

    return USBD_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e000      	b.n	8005ce0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005cde:	2302      	movs	r3, #2
  }
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cf6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d014      	beq.n	8005d2c <USBD_CDC_EP0_RxReady+0x44>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005d08:	2bff      	cmp	r3, #255	@ 0xff
 8005d0a:	d00f      	beq.n	8005d2c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005d1a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d22:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	22ff      	movs	r2, #255	@ 0xff
 8005d28:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2243      	movs	r2, #67	@ 0x43
 8005d44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005d46:	4b03      	ldr	r3, [pc, #12]	@ (8005d54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	2000009c 	.word	0x2000009c

08005d58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2243      	movs	r2, #67	@ 0x43
 8005d64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005d66:	4b03      	ldr	r3, [pc, #12]	@ (8005d74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	20000058 	.word	0x20000058

08005d78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2243      	movs	r2, #67	@ 0x43
 8005d84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005d86:	4b03      	ldr	r3, [pc, #12]	@ (8005d94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	200000e0 	.word	0x200000e0

08005d98 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	220a      	movs	r2, #10
 8005da4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005da6:	4b03      	ldr	r3, [pc, #12]	@ (8005db4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20000014 	.word	0x20000014

08005db8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr

08005de4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	4613      	mov	r3, r2
 8005df0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005df8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005e02:	88fa      	ldrh	r2, [r7, #6]
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bc80      	pop	{r7}
 8005e14:	4770      	bx	lr

08005e16 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e26:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr

08005e3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d01c      	beq.n	8005e90 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d115      	bne.n	8005e8c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	2181      	movs	r1, #129	@ 0x81
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 fdcc 	bl	8007a20 <USBD_LL_Transmit>

      return USBD_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e002      	b.n	8005e92 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005e90:	2302      	movs	r3, #2
  }
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d017      	beq.n	8005ee4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	7c1b      	ldrb	r3, [r3, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d109      	bne.n	8005ed0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ec2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f001 fdcc 	bl	8007a66 <USBD_LL_PrepareReceive>
 8005ece:	e007      	b.n	8005ee0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ed6:	2340      	movs	r3, #64	@ 0x40
 8005ed8:	2101      	movs	r1, #1
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f001 fdc3 	bl	8007a66 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f02:	2302      	movs	r3, #2
 8005f04:	e01a      	b.n	8005f3c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	79fa      	ldrb	r2, [r7, #7]
 8005f32:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f001 fc31 	bl	800779c <USBD_LL_Init>

  return USBD_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d006      	beq.n	8005f66 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	73fb      	strb	r3, [r7, #15]
 8005f64:	e001      	b.n	8005f6a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005f66:	2302      	movs	r3, #2
 8005f68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f001 fc66 	bl	8007850 <USBD_LL_Start>

  return USBD_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr

08005fa2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	460b      	mov	r3, r1
 8005fac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005fae:	2302      	movs	r3, #2
 8005fb0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00c      	beq.n	8005fd6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	78fa      	ldrb	r2, [r7, #3]
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	78fa      	ldrb	r2, [r7, #3]
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	4798      	blx	r3

  return USBD_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b082      	sub	sp, #8
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f000 fed8 	bl	8006dce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800602c:	461a      	mov	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800603a:	f003 031f 	and.w	r3, r3, #31
 800603e:	2b02      	cmp	r3, #2
 8006040:	d016      	beq.n	8006070 <USBD_LL_SetupStage+0x6a>
 8006042:	2b02      	cmp	r3, #2
 8006044:	d81c      	bhi.n	8006080 <USBD_LL_SetupStage+0x7a>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <USBD_LL_SetupStage+0x4a>
 800604a:	2b01      	cmp	r3, #1
 800604c:	d008      	beq.n	8006060 <USBD_LL_SetupStage+0x5a>
 800604e:	e017      	b.n	8006080 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f9cb 	bl	80063f4 <USBD_StdDevReq>
      break;
 800605e:	e01a      	b.n	8006096 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fa2d 	bl	80064c8 <USBD_StdItfReq>
      break;
 800606e:	e012      	b.n	8006096 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fa6d 	bl	8006558 <USBD_StdEPReq>
      break;
 800607e:	e00a      	b.n	8006096 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006086:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800608a:	b2db      	uxtb	r3, r3
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 fc3e 	bl	8007910 <USBD_LL_StallEP>
      break;
 8006094:	bf00      	nop
  }

  return USBD_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	460b      	mov	r3, r1
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80060ae:	7afb      	ldrb	r3, [r7, #11]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d14b      	bne.n	800614c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80060ba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	d134      	bne.n	8006130 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d919      	bls.n	8006106 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	1ad2      	subs	r2, r2, r3
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d203      	bcs.n	80060f4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	e002      	b.n	80060fa <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 ff54 	bl	8006fac <USBD_CtlContinueRx>
 8006104:	e038      	b.n	8006178 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006118:	2b03      	cmp	r3, #3
 800611a:	d105      	bne.n	8006128 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 ff51 	bl	8006fd0 <USBD_CtlSendStatus>
 800612e:	e023      	b.n	8006178 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006136:	2b05      	cmp	r3, #5
 8006138:	d11e      	bne.n	8006178 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006142:	2100      	movs	r1, #0
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f001 fbe3 	bl	8007910 <USBD_LL_StallEP>
 800614a:	e015      	b.n	8006178 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00d      	beq.n	8006174 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800615e:	2b03      	cmp	r3, #3
 8006160:	d108      	bne.n	8006174 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	7afa      	ldrb	r2, [r7, #11]
 800616c:	4611      	mov	r1, r2
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	4798      	blx	r3
 8006172:	e001      	b.n	8006178 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006174:	2302      	movs	r3, #2
 8006176:	e000      	b.n	800617a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b086      	sub	sp, #24
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	460b      	mov	r3, r1
 800618c:	607a      	str	r2, [r7, #4]
 800618e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006190:	7afb      	ldrb	r3, [r7, #11]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d17f      	bne.n	8006296 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3314      	adds	r3, #20
 800619a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d15c      	bne.n	8006260 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d915      	bls.n	80061de <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	1ad2      	subs	r2, r2, r3
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	461a      	mov	r2, r3
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 febe 	bl	8006f4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061d0:	2300      	movs	r3, #0
 80061d2:	2200      	movs	r2, #0
 80061d4:	2100      	movs	r1, #0
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f001 fc45 	bl	8007a66 <USBD_LL_PrepareReceive>
 80061dc:	e04e      	b.n	800627c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	6912      	ldr	r2, [r2, #16]
 80061e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80061ea:	fb01 f202 	mul.w	r2, r1, r2
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d11c      	bne.n	800622e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d316      	bcc.n	800622e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800620a:	429a      	cmp	r2, r3
 800620c:	d20f      	bcs.n	800622e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800620e:	2200      	movs	r2, #0
 8006210:	2100      	movs	r1, #0
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fe9a 	bl	8006f4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006220:	2300      	movs	r3, #0
 8006222:	2200      	movs	r2, #0
 8006224:	2100      	movs	r1, #0
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f001 fc1d 	bl	8007a66 <USBD_LL_PrepareReceive>
 800622c:	e026      	b.n	800627c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006240:	2b03      	cmp	r3, #3
 8006242:	d105      	bne.n	8006250 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006250:	2180      	movs	r1, #128	@ 0x80
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f001 fb5c 	bl	8007910 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 fecc 	bl	8006ff6 <USBD_CtlReceiveStatus>
 800625e:	e00d      	b.n	800627c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006266:	2b04      	cmp	r3, #4
 8006268:	d004      	beq.n	8006274 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006270:	2b00      	cmp	r3, #0
 8006272:	d103      	bne.n	800627c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006274:	2180      	movs	r1, #128	@ 0x80
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f001 fb4a 	bl	8007910 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006282:	2b01      	cmp	r3, #1
 8006284:	d11d      	bne.n	80062c2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7ff fe81 	bl	8005f8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006294:	e015      	b.n	80062c2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00d      	beq.n	80062be <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d108      	bne.n	80062be <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	7afa      	ldrb	r2, [r7, #11]
 80062b6:	4611      	mov	r1, r2
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	4798      	blx	r3
 80062bc:	e001      	b.n	80062c2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80062be:	2302      	movs	r3, #2
 80062c0:	e000      	b.n	80062c4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062d4:	2340      	movs	r3, #64	@ 0x40
 80062d6:	2200      	movs	r2, #0
 80062d8:	2100      	movs	r1, #0
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f001 fad3 	bl	8007886 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2240      	movs	r2, #64	@ 0x40
 80062ec:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062f0:	2340      	movs	r3, #64	@ 0x40
 80062f2:	2200      	movs	r2, #0
 80062f4:	2180      	movs	r1, #128	@ 0x80
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f001 fac5 	bl	8007886 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2240      	movs	r2, #64	@ 0x40
 8006306:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800632c:	2b00      	cmp	r3, #0
 800632e:	d009      	beq.n	8006344 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6852      	ldr	r2, [r2, #4]
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	4611      	mov	r1, r2
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	4798      	blx	r3
  }

  return USBD_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	460b      	mov	r3, r1
 8006358:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	78fa      	ldrb	r2, [r7, #3]
 800635e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	bc80      	pop	{r7}
 800636a:	4770      	bx	lr

0800636c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2204      	movs	r2, #4
 8006384:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr

08006394 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d105      	bne.n	80063b2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bc80      	pop	{r7}
 80063bc:	4770      	bx	lr

080063be <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d10b      	bne.n	80063e8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800640a:	2b40      	cmp	r3, #64	@ 0x40
 800640c:	d005      	beq.n	800641a <USBD_StdDevReq+0x26>
 800640e:	2b40      	cmp	r3, #64	@ 0x40
 8006410:	d84f      	bhi.n	80064b2 <USBD_StdDevReq+0xbe>
 8006412:	2b00      	cmp	r3, #0
 8006414:	d009      	beq.n	800642a <USBD_StdDevReq+0x36>
 8006416:	2b20      	cmp	r3, #32
 8006418:	d14b      	bne.n	80064b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	6839      	ldr	r1, [r7, #0]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	4798      	blx	r3
      break;
 8006428:	e048      	b.n	80064bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	2b09      	cmp	r3, #9
 8006430:	d839      	bhi.n	80064a6 <USBD_StdDevReq+0xb2>
 8006432:	a201      	add	r2, pc, #4	@ (adr r2, 8006438 <USBD_StdDevReq+0x44>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	08006489 	.word	0x08006489
 800643c:	0800649d 	.word	0x0800649d
 8006440:	080064a7 	.word	0x080064a7
 8006444:	08006493 	.word	0x08006493
 8006448:	080064a7 	.word	0x080064a7
 800644c:	0800646b 	.word	0x0800646b
 8006450:	08006461 	.word	0x08006461
 8006454:	080064a7 	.word	0x080064a7
 8006458:	0800647f 	.word	0x0800647f
 800645c:	08006475 	.word	0x08006475
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f9dc 	bl	8006820 <USBD_GetDescriptor>
          break;
 8006468:	e022      	b.n	80064b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fb3f 	bl	8006af0 <USBD_SetAddress>
          break;
 8006472:	e01d      	b.n	80064b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fb7e 	bl	8006b78 <USBD_SetConfig>
          break;
 800647c:	e018      	b.n	80064b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fc07 	bl	8006c94 <USBD_GetConfig>
          break;
 8006486:	e013      	b.n	80064b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fc37 	bl	8006cfe <USBD_GetStatus>
          break;
 8006490:	e00e      	b.n	80064b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fc65 	bl	8006d64 <USBD_SetFeature>
          break;
 800649a:	e009      	b.n	80064b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fc74 	bl	8006d8c <USBD_ClrFeature>
          break;
 80064a4:	e004      	b.n	80064b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fcc9 	bl	8006e40 <USBD_CtlError>
          break;
 80064ae:	bf00      	nop
      }
      break;
 80064b0:	e004      	b.n	80064bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fcc3 	bl	8006e40 <USBD_CtlError>
      break;
 80064ba:	bf00      	nop
  }

  return ret;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop

080064c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064de:	2b40      	cmp	r3, #64	@ 0x40
 80064e0:	d005      	beq.n	80064ee <USBD_StdItfReq+0x26>
 80064e2:	2b40      	cmp	r3, #64	@ 0x40
 80064e4:	d82e      	bhi.n	8006544 <USBD_StdItfReq+0x7c>
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <USBD_StdItfReq+0x26>
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d12a      	bne.n	8006544 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064f4:	3b01      	subs	r3, #1
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d81d      	bhi.n	8006536 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	889b      	ldrh	r3, [r3, #4]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	d813      	bhi.n	800652c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	4798      	blx	r3
 8006512:	4603      	mov	r3, r0
 8006514:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	88db      	ldrh	r3, [r3, #6]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d110      	bne.n	8006540 <USBD_StdItfReq+0x78>
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10d      	bne.n	8006540 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fd53 	bl	8006fd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800652a:	e009      	b.n	8006540 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fc86 	bl	8006e40 <USBD_CtlError>
          break;
 8006534:	e004      	b.n	8006540 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fc81 	bl	8006e40 <USBD_CtlError>
          break;
 800653e:	e000      	b.n	8006542 <USBD_StdItfReq+0x7a>
          break;
 8006540:	bf00      	nop
      }
      break;
 8006542:	e004      	b.n	800654e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fc7a 	bl	8006e40 <USBD_CtlError>
      break;
 800654c:	bf00      	nop
  }

  return USBD_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	889b      	ldrh	r3, [r3, #4]
 800656a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006574:	2b40      	cmp	r3, #64	@ 0x40
 8006576:	d007      	beq.n	8006588 <USBD_StdEPReq+0x30>
 8006578:	2b40      	cmp	r3, #64	@ 0x40
 800657a:	f200 8146 	bhi.w	800680a <USBD_StdEPReq+0x2b2>
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <USBD_StdEPReq+0x40>
 8006582:	2b20      	cmp	r3, #32
 8006584:	f040 8141 	bne.w	800680a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
      break;
 8006596:	e13d      	b.n	8006814 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d10a      	bne.n	80065ba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
 80065b8:	e12d      	b.n	8006816 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	785b      	ldrb	r3, [r3, #1]
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d007      	beq.n	80065d2 <USBD_StdEPReq+0x7a>
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	f300 811b 	bgt.w	80067fe <USBD_StdEPReq+0x2a6>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d072      	beq.n	80066b2 <USBD_StdEPReq+0x15a>
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d03a      	beq.n	8006646 <USBD_StdEPReq+0xee>
 80065d0:	e115      	b.n	80067fe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d002      	beq.n	80065e2 <USBD_StdEPReq+0x8a>
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d015      	beq.n	800660c <USBD_StdEPReq+0xb4>
 80065e0:	e02b      	b.n	800663a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065e2:	7bbb      	ldrb	r3, [r7, #14]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00c      	beq.n	8006602 <USBD_StdEPReq+0xaa>
 80065e8:	7bbb      	ldrb	r3, [r7, #14]
 80065ea:	2b80      	cmp	r3, #128	@ 0x80
 80065ec:	d009      	beq.n	8006602 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80065ee:	7bbb      	ldrb	r3, [r7, #14]
 80065f0:	4619      	mov	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f001 f98c 	bl	8007910 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80065f8:	2180      	movs	r1, #128	@ 0x80
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 f988 	bl	8007910 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006600:	e020      	b.n	8006644 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fc1b 	bl	8006e40 <USBD_CtlError>
              break;
 800660a:	e01b      	b.n	8006644 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	885b      	ldrh	r3, [r3, #2]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10e      	bne.n	8006632 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00b      	beq.n	8006632 <USBD_StdEPReq+0xda>
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	2b80      	cmp	r3, #128	@ 0x80
 800661e:	d008      	beq.n	8006632 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	88db      	ldrh	r3, [r3, #6]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006628:	7bbb      	ldrb	r3, [r7, #14]
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f001 f96f 	bl	8007910 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fccc 	bl	8006fd0 <USBD_CtlSendStatus>

              break;
 8006638:	e004      	b.n	8006644 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fbff 	bl	8006e40 <USBD_CtlError>
              break;
 8006642:	bf00      	nop
          }
          break;
 8006644:	e0e0      	b.n	8006808 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800664c:	2b02      	cmp	r3, #2
 800664e:	d002      	beq.n	8006656 <USBD_StdEPReq+0xfe>
 8006650:	2b03      	cmp	r3, #3
 8006652:	d015      	beq.n	8006680 <USBD_StdEPReq+0x128>
 8006654:	e026      	b.n	80066a4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006656:	7bbb      	ldrb	r3, [r7, #14]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00c      	beq.n	8006676 <USBD_StdEPReq+0x11e>
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	2b80      	cmp	r3, #128	@ 0x80
 8006660:	d009      	beq.n	8006676 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 f952 	bl	8007910 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800666c:	2180      	movs	r1, #128	@ 0x80
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f001 f94e 	bl	8007910 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006674:	e01c      	b.n	80066b0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fbe1 	bl	8006e40 <USBD_CtlError>
              break;
 800667e:	e017      	b.n	80066b0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	885b      	ldrh	r3, [r3, #2]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d112      	bne.n	80066ae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800668e:	2b00      	cmp	r3, #0
 8006690:	d004      	beq.n	800669c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006692:	7bbb      	ldrb	r3, [r7, #14]
 8006694:	4619      	mov	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 f959 	bl	800794e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fc97 	bl	8006fd0 <USBD_CtlSendStatus>
              }
              break;
 80066a2:	e004      	b.n	80066ae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fbca 	bl	8006e40 <USBD_CtlError>
              break;
 80066ac:	e000      	b.n	80066b0 <USBD_StdEPReq+0x158>
              break;
 80066ae:	bf00      	nop
          }
          break;
 80066b0:	e0aa      	b.n	8006808 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d002      	beq.n	80066c2 <USBD_StdEPReq+0x16a>
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d032      	beq.n	8006726 <USBD_StdEPReq+0x1ce>
 80066c0:	e097      	b.n	80067f2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d007      	beq.n	80066d8 <USBD_StdEPReq+0x180>
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
 80066ca:	2b80      	cmp	r3, #128	@ 0x80
 80066cc:	d004      	beq.n	80066d8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fbb5 	bl	8006e40 <USBD_CtlError>
                break;
 80066d6:	e091      	b.n	80067fc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	da0b      	bge.n	80066f8 <USBD_StdEPReq+0x1a0>
 80066e0:	7bbb      	ldrb	r3, [r7, #14]
 80066e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	3310      	adds	r3, #16
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	4413      	add	r3, r2
 80066f4:	3304      	adds	r3, #4
 80066f6:	e00b      	b.n	8006710 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	3304      	adds	r3, #4
 8006710:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2202      	movs	r2, #2
 800671c:	4619      	mov	r1, r3
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fbf8 	bl	8006f14 <USBD_CtlSendData>
              break;
 8006724:	e06a      	b.n	80067fc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006726:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800672a:	2b00      	cmp	r3, #0
 800672c:	da11      	bge.n	8006752 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	f003 020f 	and.w	r2, r3, #15
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	440b      	add	r3, r1
 8006740:	3318      	adds	r3, #24
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d117      	bne.n	8006778 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fb78 	bl	8006e40 <USBD_CtlError>
                  break;
 8006750:	e054      	b.n	80067fc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006752:	7bbb      	ldrb	r3, [r7, #14]
 8006754:	f003 020f 	and.w	r2, r3, #15
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d104      	bne.n	8006778 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fb65 	bl	8006e40 <USBD_CtlError>
                  break;
 8006776:	e041      	b.n	80067fc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800677c:	2b00      	cmp	r3, #0
 800677e:	da0b      	bge.n	8006798 <USBD_StdEPReq+0x240>
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006786:	4613      	mov	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	3310      	adds	r3, #16
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	4413      	add	r3, r2
 8006794:	3304      	adds	r3, #4
 8006796:	e00b      	b.n	80067b0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006798:	7bbb      	ldrb	r3, [r7, #14]
 800679a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	4413      	add	r3, r2
 80067ae:	3304      	adds	r3, #4
 80067b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <USBD_StdEPReq+0x266>
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	2b80      	cmp	r3, #128	@ 0x80
 80067bc:	d103      	bne.n	80067c6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	e00e      	b.n	80067e4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 f8de 	bl	800798c <USBD_LL_IsStallEP>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2201      	movs	r2, #1
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	e002      	b.n	80067e4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2202      	movs	r2, #2
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fb92 	bl	8006f14 <USBD_CtlSendData>
              break;
 80067f0:	e004      	b.n	80067fc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fb23 	bl	8006e40 <USBD_CtlError>
              break;
 80067fa:	bf00      	nop
          }
          break;
 80067fc:	e004      	b.n	8006808 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fb1d 	bl	8006e40 <USBD_CtlError>
          break;
 8006806:	bf00      	nop
      }
      break;
 8006808:	e004      	b.n	8006814 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fb17 	bl	8006e40 <USBD_CtlError>
      break;
 8006812:	bf00      	nop
  }

  return ret;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	885b      	ldrh	r3, [r3, #2]
 800683a:	0a1b      	lsrs	r3, r3, #8
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	2b06      	cmp	r3, #6
 8006842:	f200 8128 	bhi.w	8006a96 <USBD_GetDescriptor+0x276>
 8006846:	a201      	add	r2, pc, #4	@ (adr r2, 800684c <USBD_GetDescriptor+0x2c>)
 8006848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684c:	08006869 	.word	0x08006869
 8006850:	08006881 	.word	0x08006881
 8006854:	080068c1 	.word	0x080068c1
 8006858:	08006a97 	.word	0x08006a97
 800685c:	08006a97 	.word	0x08006a97
 8006860:	08006a37 	.word	0x08006a37
 8006864:	08006a63 	.word	0x08006a63
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	7c12      	ldrb	r2, [r2, #16]
 8006874:	f107 0108 	add.w	r1, r7, #8
 8006878:	4610      	mov	r0, r2
 800687a:	4798      	blx	r3
 800687c:	60f8      	str	r0, [r7, #12]
      break;
 800687e:	e112      	b.n	8006aa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7c1b      	ldrb	r3, [r3, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10d      	bne.n	80068a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800688e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006890:	f107 0208 	add.w	r2, r7, #8
 8006894:	4610      	mov	r0, r2
 8006896:	4798      	blx	r3
 8006898:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3301      	adds	r3, #1
 800689e:	2202      	movs	r2, #2
 80068a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068a2:	e100      	b.n	8006aa6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ac:	f107 0208 	add.w	r2, r7, #8
 80068b0:	4610      	mov	r0, r2
 80068b2:	4798      	blx	r3
 80068b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3301      	adds	r3, #1
 80068ba:	2202      	movs	r2, #2
 80068bc:	701a      	strb	r2, [r3, #0]
      break;
 80068be:	e0f2      	b.n	8006aa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	885b      	ldrh	r3, [r3, #2]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b05      	cmp	r3, #5
 80068c8:	f200 80ac 	bhi.w	8006a24 <USBD_GetDescriptor+0x204>
 80068cc:	a201      	add	r2, pc, #4	@ (adr r2, 80068d4 <USBD_GetDescriptor+0xb4>)
 80068ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d2:	bf00      	nop
 80068d4:	080068ed 	.word	0x080068ed
 80068d8:	08006921 	.word	0x08006921
 80068dc:	08006955 	.word	0x08006955
 80068e0:	08006989 	.word	0x08006989
 80068e4:	080069bd 	.word	0x080069bd
 80068e8:	080069f1 	.word	0x080069f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00b      	beq.n	8006910 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	7c12      	ldrb	r2, [r2, #16]
 8006904:	f107 0108 	add.w	r1, r7, #8
 8006908:	4610      	mov	r0, r2
 800690a:	4798      	blx	r3
 800690c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800690e:	e091      	b.n	8006a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fa94 	bl	8006e40 <USBD_CtlError>
            err++;
 8006918:	7afb      	ldrb	r3, [r7, #11]
 800691a:	3301      	adds	r3, #1
 800691c:	72fb      	strb	r3, [r7, #11]
          break;
 800691e:	e089      	b.n	8006a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	7c12      	ldrb	r2, [r2, #16]
 8006938:	f107 0108 	add.w	r1, r7, #8
 800693c:	4610      	mov	r0, r2
 800693e:	4798      	blx	r3
 8006940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006942:	e077      	b.n	8006a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa7a 	bl	8006e40 <USBD_CtlError>
            err++;
 800694c:	7afb      	ldrb	r3, [r7, #11]
 800694e:	3301      	adds	r3, #1
 8006950:	72fb      	strb	r3, [r7, #11]
          break;
 8006952:	e06f      	b.n	8006a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	7c12      	ldrb	r2, [r2, #16]
 800696c:	f107 0108 	add.w	r1, r7, #8
 8006970:	4610      	mov	r0, r2
 8006972:	4798      	blx	r3
 8006974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006976:	e05d      	b.n	8006a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa60 	bl	8006e40 <USBD_CtlError>
            err++;
 8006980:	7afb      	ldrb	r3, [r7, #11]
 8006982:	3301      	adds	r3, #1
 8006984:	72fb      	strb	r3, [r7, #11]
          break;
 8006986:	e055      	b.n	8006a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00b      	beq.n	80069ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	7c12      	ldrb	r2, [r2, #16]
 80069a0:	f107 0108 	add.w	r1, r7, #8
 80069a4:	4610      	mov	r0, r2
 80069a6:	4798      	blx	r3
 80069a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069aa:	e043      	b.n	8006a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa46 	bl	8006e40 <USBD_CtlError>
            err++;
 80069b4:	7afb      	ldrb	r3, [r7, #11]
 80069b6:	3301      	adds	r3, #1
 80069b8:	72fb      	strb	r3, [r7, #11]
          break;
 80069ba:	e03b      	b.n	8006a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00b      	beq.n	80069e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	7c12      	ldrb	r2, [r2, #16]
 80069d4:	f107 0108 	add.w	r1, r7, #8
 80069d8:	4610      	mov	r0, r2
 80069da:	4798      	blx	r3
 80069dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069de:	e029      	b.n	8006a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fa2c 	bl	8006e40 <USBD_CtlError>
            err++;
 80069e8:	7afb      	ldrb	r3, [r7, #11]
 80069ea:	3301      	adds	r3, #1
 80069ec:	72fb      	strb	r3, [r7, #11]
          break;
 80069ee:	e021      	b.n	8006a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00b      	beq.n	8006a14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	7c12      	ldrb	r2, [r2, #16]
 8006a08:	f107 0108 	add.w	r1, r7, #8
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4798      	blx	r3
 8006a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a12:	e00f      	b.n	8006a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa12 	bl	8006e40 <USBD_CtlError>
            err++;
 8006a1c:	7afb      	ldrb	r3, [r7, #11]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	72fb      	strb	r3, [r7, #11]
          break;
 8006a22:	e007      	b.n	8006a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fa0a 	bl	8006e40 <USBD_CtlError>
          err++;
 8006a2c:	7afb      	ldrb	r3, [r7, #11]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006a32:	e038      	b.n	8006aa6 <USBD_GetDescriptor+0x286>
 8006a34:	e037      	b.n	8006aa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	7c1b      	ldrb	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d109      	bne.n	8006a52 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a46:	f107 0208 	add.w	r2, r7, #8
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	4798      	blx	r3
 8006a4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a50:	e029      	b.n	8006aa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f9f3 	bl	8006e40 <USBD_CtlError>
        err++;
 8006a5a:	7afb      	ldrb	r3, [r7, #11]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a60:	e021      	b.n	8006aa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	7c1b      	ldrb	r3, [r3, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10d      	bne.n	8006a86 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a72:	f107 0208 	add.w	r2, r7, #8
 8006a76:	4610      	mov	r0, r2
 8006a78:	4798      	blx	r3
 8006a7a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	2207      	movs	r2, #7
 8006a82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a84:	e00f      	b.n	8006aa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f9d9 	bl	8006e40 <USBD_CtlError>
        err++;
 8006a8e:	7afb      	ldrb	r3, [r7, #11]
 8006a90:	3301      	adds	r3, #1
 8006a92:	72fb      	strb	r3, [r7, #11]
      break;
 8006a94:	e007      	b.n	8006aa6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f9d1 	bl	8006e40 <USBD_CtlError>
      err++;
 8006a9e:	7afb      	ldrb	r3, [r7, #11]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	72fb      	strb	r3, [r7, #11]
      break;
 8006aa4:	bf00      	nop
  }

  if (err != 0U)
 8006aa6:	7afb      	ldrb	r3, [r7, #11]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d11c      	bne.n	8006ae6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006aac:	893b      	ldrh	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d011      	beq.n	8006ad6 <USBD_GetDescriptor+0x2b6>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	88db      	ldrh	r3, [r3, #6]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00d      	beq.n	8006ad6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	88da      	ldrh	r2, [r3, #6]
 8006abe:	893b      	ldrh	r3, [r7, #8]
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	bf28      	it	cs
 8006ac4:	4613      	movcs	r3, r2
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006aca:	893b      	ldrh	r3, [r7, #8]
 8006acc:	461a      	mov	r2, r3
 8006ace:	68f9      	ldr	r1, [r7, #12]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fa1f 	bl	8006f14 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	88db      	ldrh	r3, [r3, #6]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d104      	bne.n	8006ae8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fa76 	bl	8006fd0 <USBD_CtlSendStatus>
 8006ae4:	e000      	b.n	8006ae8 <USBD_GetDescriptor+0x2c8>
    return;
 8006ae6:	bf00      	nop
    }
  }
}
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop

08006af0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	889b      	ldrh	r3, [r3, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d130      	bne.n	8006b64 <USBD_SetAddress+0x74>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	88db      	ldrh	r3, [r3, #6]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d12c      	bne.n	8006b64 <USBD_SetAddress+0x74>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	885b      	ldrh	r3, [r3, #2]
 8006b0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b10:	d828      	bhi.n	8006b64 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	885b      	ldrh	r3, [r3, #2]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d104      	bne.n	8006b32 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f988 	bl	8006e40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b30:	e01d      	b.n	8006b6e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	7bfa      	ldrb	r2, [r7, #15]
 8006b36:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 ff4f 	bl	80079e2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fa43 	bl	8006fd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d004      	beq.n	8006b5a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b58:	e009      	b.n	8006b6e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b62:	e004      	b.n	8006b6e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f96a 	bl	8006e40 <USBD_CtlError>
  }
}
 8006b6c:	bf00      	nop
 8006b6e:	bf00      	nop
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	885b      	ldrh	r3, [r3, #2]
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	4b41      	ldr	r3, [pc, #260]	@ (8006c90 <USBD_SetConfig+0x118>)
 8006b8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b8c:	4b40      	ldr	r3, [pc, #256]	@ (8006c90 <USBD_SetConfig+0x118>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d904      	bls.n	8006b9e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f952 	bl	8006e40 <USBD_CtlError>
 8006b9c:	e075      	b.n	8006c8a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d002      	beq.n	8006bae <USBD_SetConfig+0x36>
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d023      	beq.n	8006bf4 <USBD_SetConfig+0x7c>
 8006bac:	e062      	b.n	8006c74 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006bae:	4b38      	ldr	r3, [pc, #224]	@ (8006c90 <USBD_SetConfig+0x118>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01a      	beq.n	8006bec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006bb6:	4b36      	ldr	r3, [pc, #216]	@ (8006c90 <USBD_SetConfig+0x118>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2203      	movs	r2, #3
 8006bc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006bc8:	4b31      	ldr	r3, [pc, #196]	@ (8006c90 <USBD_SetConfig+0x118>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7ff f9e7 	bl	8005fa2 <USBD_SetClassConfig>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d104      	bne.n	8006be4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f92f 	bl	8006e40 <USBD_CtlError>
            return;
 8006be2:	e052      	b.n	8006c8a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f9f3 	bl	8006fd0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006bea:	e04e      	b.n	8006c8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f9ef 	bl	8006fd0 <USBD_CtlSendStatus>
        break;
 8006bf2:	e04a      	b.n	8006c8a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006bf4:	4b26      	ldr	r3, [pc, #152]	@ (8006c90 <USBD_SetConfig+0x118>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d112      	bne.n	8006c22 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8006c04:	4b22      	ldr	r3, [pc, #136]	@ (8006c90 <USBD_SetConfig+0x118>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c0e:	4b20      	ldr	r3, [pc, #128]	@ (8006c90 <USBD_SetConfig+0x118>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff f9e3 	bl	8005fe0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f9d8 	bl	8006fd0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c20:	e033      	b.n	8006c8a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006c22:	4b1b      	ldr	r3, [pc, #108]	@ (8006c90 <USBD_SetConfig+0x118>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d01d      	beq.n	8006c6c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff f9d1 	bl	8005fe0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006c3e:	4b14      	ldr	r3, [pc, #80]	@ (8006c90 <USBD_SetConfig+0x118>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c48:	4b11      	ldr	r3, [pc, #68]	@ (8006c90 <USBD_SetConfig+0x118>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff f9a7 	bl	8005fa2 <USBD_SetClassConfig>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d104      	bne.n	8006c64 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f8ef 	bl	8006e40 <USBD_CtlError>
            return;
 8006c62:	e012      	b.n	8006c8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f9b3 	bl	8006fd0 <USBD_CtlSendStatus>
        break;
 8006c6a:	e00e      	b.n	8006c8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f9af 	bl	8006fd0 <USBD_CtlSendStatus>
        break;
 8006c72:	e00a      	b.n	8006c8a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f8e2 	bl	8006e40 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006c7c:	4b04      	ldr	r3, [pc, #16]	@ (8006c90 <USBD_SetConfig+0x118>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	4619      	mov	r1, r3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff f9ac 	bl	8005fe0 <USBD_ClrClassConfig>
        break;
 8006c88:	bf00      	nop
    }
  }
}
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20000208 	.word	0x20000208

08006c94 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	88db      	ldrh	r3, [r3, #6]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d004      	beq.n	8006cb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f8c9 	bl	8006e40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006cae:	e022      	b.n	8006cf6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	dc02      	bgt.n	8006cc0 <USBD_GetConfig+0x2c>
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dc03      	bgt.n	8006cc6 <USBD_GetConfig+0x32>
 8006cbe:	e015      	b.n	8006cec <USBD_GetConfig+0x58>
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d00b      	beq.n	8006cdc <USBD_GetConfig+0x48>
 8006cc4:	e012      	b.n	8006cec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3308      	adds	r3, #8
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f91d 	bl	8006f14 <USBD_CtlSendData>
        break;
 8006cda:	e00c      	b.n	8006cf6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f915 	bl	8006f14 <USBD_CtlSendData>
        break;
 8006cea:	e004      	b.n	8006cf6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f8a6 	bl	8006e40 <USBD_CtlError>
        break;
 8006cf4:	bf00      	nop
}
 8006cf6:	bf00      	nop
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b082      	sub	sp, #8
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d81e      	bhi.n	8006d52 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	88db      	ldrh	r3, [r3, #6]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d004      	beq.n	8006d26 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f88e 	bl	8006e40 <USBD_CtlError>
        break;
 8006d24:	e01a      	b.n	8006d5c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d005      	beq.n	8006d42 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f043 0202 	orr.w	r2, r3, #2
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	330c      	adds	r3, #12
 8006d46:	2202      	movs	r2, #2
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f8e2 	bl	8006f14 <USBD_CtlSendData>
      break;
 8006d50:	e004      	b.n	8006d5c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f873 	bl	8006e40 <USBD_CtlError>
      break;
 8006d5a:	bf00      	nop
  }
}
 8006d5c:	bf00      	nop
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	885b      	ldrh	r3, [r3, #2]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d106      	bne.n	8006d84 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f926 	bl	8006fd0 <USBD_CtlSendStatus>
  }
}
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d80b      	bhi.n	8006dba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	885b      	ldrh	r3, [r3, #2]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d10c      	bne.n	8006dc4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f90c 	bl	8006fd0 <USBD_CtlSendStatus>
      }
      break;
 8006db8:	e004      	b.n	8006dc4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f83f 	bl	8006e40 <USBD_CtlError>
      break;
 8006dc2:	e000      	b.n	8006dc6 <USBD_ClrFeature+0x3a>
      break;
 8006dc4:	bf00      	nop
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781a      	ldrb	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	785a      	ldrb	r2, [r3, #1]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	3302      	adds	r3, #2
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	3303      	adds	r3, #3
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	021b      	lsls	r3, r3, #8
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	4413      	add	r3, r2
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	3304      	adds	r3, #4
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	3305      	adds	r3, #5
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	021b      	lsls	r3, r3, #8
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	4413      	add	r3, r2
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	3306      	adds	r3, #6
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	3307      	adds	r3, #7
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	021b      	lsls	r3, r3, #8
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	4413      	add	r3, r2
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	80da      	strh	r2, [r3, #6]

}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bc80      	pop	{r7}
 8006e3e:	4770      	bx	lr

08006e40 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006e4a:	2180      	movs	r1, #128	@ 0x80
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fd5f 	bl	8007910 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006e52:	2100      	movs	r1, #0
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fd5b 	bl	8007910 <USBD_LL_StallEP>
}
 8006e5a:	bf00      	nop
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b086      	sub	sp, #24
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	60f8      	str	r0, [r7, #12]
 8006e6a:	60b9      	str	r1, [r7, #8]
 8006e6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d032      	beq.n	8006ede <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 f834 	bl	8006ee6 <USBD_GetLen>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	3301      	adds	r3, #1
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	75fa      	strb	r2, [r7, #23]
 8006e92:	461a      	mov	r2, r3
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4413      	add	r3, r2
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	7812      	ldrb	r2, [r2, #0]
 8006e9c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	75fa      	strb	r2, [r7, #23]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	2203      	movs	r2, #3
 8006eac:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006eae:	e012      	b.n	8006ed6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	60fa      	str	r2, [r7, #12]
 8006eb6:	7dfa      	ldrb	r2, [r7, #23]
 8006eb8:	1c51      	adds	r1, r2, #1
 8006eba:	75f9      	strb	r1, [r7, #23]
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	440a      	add	r2, r1
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	75fa      	strb	r2, [r7, #23]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e8      	bne.n	8006eb0 <USBD_GetString+0x4e>
    }
  }
}
 8006ede:	bf00      	nop
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b085      	sub	sp, #20
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006ef2:	e005      	b.n	8006f00 <USBD_GetLen+0x1a>
  {
    len++;
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3301      	adds	r3, #1
 8006efe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1f5      	bne.n	8006ef4 <USBD_GetLen+0xe>
  }

  return len;
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr

08006f14 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2202      	movs	r2, #2
 8006f26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006f2a:	88fa      	ldrh	r2, [r7, #6]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006f30:	88fa      	ldrh	r2, [r7, #6]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f36:	88fb      	ldrh	r3, [r7, #6]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 fd6f 	bl	8007a20 <USBD_LL_Transmit>

  return USBD_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	4613      	mov	r3, r2
 8006f58:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	2100      	movs	r1, #0
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 fd5d 	bl	8007a20 <USBD_LL_Transmit>

  return USBD_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2203      	movs	r2, #3
 8006f82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006f86:	88fa      	ldrh	r2, [r7, #6]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006f8e:	88fa      	ldrh	r2, [r7, #6]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 fd62 	bl	8007a66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 fd50 	bl	8007a66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2204      	movs	r2, #4
 8006fdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fd1a 	bl	8007a20 <USBD_LL_Transmit>

  return USBD_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2205      	movs	r2, #5
 8007002:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007006:	2300      	movs	r3, #0
 8007008:	2200      	movs	r2, #0
 800700a:	2100      	movs	r1, #0
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fd2a 	bl	8007a66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007020:	2200      	movs	r2, #0
 8007022:	4912      	ldr	r1, [pc, #72]	@ (800706c <MX_USB_DEVICE_Init+0x50>)
 8007024:	4812      	ldr	r0, [pc, #72]	@ (8007070 <MX_USB_DEVICE_Init+0x54>)
 8007026:	f7fe ff62 	bl	8005eee <USBD_Init>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007030:	f7f9 f99a 	bl	8000368 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007034:	490f      	ldr	r1, [pc, #60]	@ (8007074 <MX_USB_DEVICE_Init+0x58>)
 8007036:	480e      	ldr	r0, [pc, #56]	@ (8007070 <MX_USB_DEVICE_Init+0x54>)
 8007038:	f7fe ff84 	bl	8005f44 <USBD_RegisterClass>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007042:	f7f9 f991 	bl	8000368 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007046:	490c      	ldr	r1, [pc, #48]	@ (8007078 <MX_USB_DEVICE_Init+0x5c>)
 8007048:	4809      	ldr	r0, [pc, #36]	@ (8007070 <MX_USB_DEVICE_Init+0x54>)
 800704a:	f7fe feb5 	bl	8005db8 <USBD_CDC_RegisterInterface>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007054:	f7f9 f988 	bl	8000368 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007058:	4805      	ldr	r0, [pc, #20]	@ (8007070 <MX_USB_DEVICE_Init+0x54>)
 800705a:	f7fe ff8c 	bl	8005f76 <USBD_Start>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007064:	f7f9 f980 	bl	8000368 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007068:	bf00      	nop
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20000140 	.word	0x20000140
 8007070:	2000020c 	.word	0x2000020c
 8007074:	20000020 	.word	0x20000020
 8007078:	20000130 	.word	0x20000130

0800707c <cdcAvailable>:
uint32_t rx_len = 512;
uint8_t rx_buf[512];


uint32_t cdcAvailable(void)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8007082:	4b09      	ldr	r3, [pc, #36]	@ (80070a8 <cdcAvailable+0x2c>)
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b09      	ldr	r3, [pc, #36]	@ (80070ac <cdcAvailable+0x30>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	4a08      	ldr	r2, [pc, #32]	@ (80070b0 <cdcAvailable+0x34>)
 800708e:	6812      	ldr	r2, [r2, #0]
 8007090:	fbb3 f1f2 	udiv	r1, r3, r2
 8007094:	fb01 f202 	mul.w	r2, r1, r2
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	607b      	str	r3, [r7, #4]

  return ret;
 800709c:	687b      	ldr	r3, [r7, #4]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bc80      	pop	{r7}
 80070a6:	4770      	bx	lr
 80070a8:	200004d0 	.word	0x200004d0
 80070ac:	200004d4 	.word	0x200004d4
 80070b0:	2000012c 	.word	0x2000012c

080070b4 <cdcRead>:


uint8_t cdcRead(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 80070ba:	4b0e      	ldr	r3, [pc, #56]	@ (80070f4 <cdcRead+0x40>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a0e      	ldr	r2, [pc, #56]	@ (80070f8 <cdcRead+0x44>)
 80070c0:	5cd3      	ldrb	r3, [r2, r3]
 80070c2:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 80070c4:	4b0b      	ldr	r3, [pc, #44]	@ (80070f4 <cdcRead+0x40>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <cdcRead+0x48>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d00b      	beq.n	80070e8 <cdcRead+0x34>
  {
	  rx_out = (rx_out + 1) % rx_len;
 80070d0:	4b08      	ldr	r3, [pc, #32]	@ (80070f4 <cdcRead+0x40>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3301      	adds	r3, #1
 80070d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007100 <cdcRead+0x4c>)
 80070d8:	6812      	ldr	r2, [r2, #0]
 80070da:	fbb3 f1f2 	udiv	r1, r3, r2
 80070de:	fb01 f202 	mul.w	r2, r1, r2
 80070e2:	1a9b      	subs	r3, r3, r2
 80070e4:	4a03      	ldr	r2, [pc, #12]	@ (80070f4 <cdcRead+0x40>)
 80070e6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80070e8:	79fb      	ldrb	r3, [r7, #7]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr
 80070f4:	200004d4 	.word	0x200004d4
 80070f8:	200004d8 	.word	0x200004d8
 80070fc:	200004d0 	.word	0x200004d0
 8007100:	2000012c 	.word	0x2000012c

08007104 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] =rx_data;    //오버라이트
 800710e:	4b0e      	ldr	r3, [pc, #56]	@ (8007148 <cdcDataIn+0x44>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	490e      	ldr	r1, [pc, #56]	@ (800714c <cdcDataIn+0x48>)
 8007114:	79fa      	ldrb	r2, [r7, #7]
 8007116:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in +1) % rx_len;
 8007118:	4b0b      	ldr	r3, [pc, #44]	@ (8007148 <cdcDataIn+0x44>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3301      	adds	r3, #1
 800711e:	4a0c      	ldr	r2, [pc, #48]	@ (8007150 <cdcDataIn+0x4c>)
 8007120:	6812      	ldr	r2, [r2, #0]
 8007122:	fbb3 f1f2 	udiv	r1, r3, r2
 8007126:	fb01 f202 	mul.w	r2, r1, r2
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 800712e:	4b09      	ldr	r3, [pc, #36]	@ (8007154 <cdcDataIn+0x50>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	429a      	cmp	r2, r3
 8007136:	d002      	beq.n	800713e <cdcDataIn+0x3a>
  {
	  rx_in = next_rx_in;
 8007138:	4a03      	ldr	r2, [pc, #12]	@ (8007148 <cdcDataIn+0x44>)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6013      	str	r3, [r2, #0]
  }
}
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	bc80      	pop	{r7}
 8007146:	4770      	bx	lr
 8007148:	200004d0 	.word	0x200004d0
 800714c:	200004d8 	.word	0x200004d8
 8007150:	2000012c 	.word	0x2000012c
 8007154:	200004d4 	.word	0x200004d4

08007158 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 8007162:	f7f9 f8a0 	bl	80002a6 <millis>
 8007166:	60f8      	str	r0, [r7, #12]
  while(1)
  {
	  ret = CDC_Transmit_FS(p_data,length);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	b29b      	uxth	r3, r3
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f91e 	bl	80073b0 <CDC_Transmit_FS>
 8007174:	4603      	mov	r3, r0
 8007176:	72fb      	strb	r3, [r7, #11]
    if(ret == USBD_OK)
 8007178:	7afb      	ldrb	r3, [r7, #11]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <cdcWrite+0x2a>
    {
    	return length;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	e00e      	b.n	80071a0 <cdcWrite+0x48>
    }
    else if(ret ==USBD_FAIL)
 8007182:	7afb      	ldrb	r3, [r7, #11]
 8007184:	2b02      	cmp	r3, #2
 8007186:	d101      	bne.n	800718c <cdcWrite+0x34>
    {
    	return 0;
 8007188:	2300      	movs	r3, #0
 800718a:	e009      	b.n	80071a0 <cdcWrite+0x48>
    }
    //busy 인 경우 while문을 돈다.
    if(millis()-pre_time >= 100)
 800718c:	f7f9 f88b 	bl	80002a6 <millis>
 8007190:	4602      	mov	r2, r0
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b63      	cmp	r3, #99	@ 0x63
 8007198:	d800      	bhi.n	800719c <cdcWrite+0x44>
	  ret = CDC_Transmit_FS(p_data,length);
 800719a:	e7e5      	b.n	8007168 <cdcWrite+0x10>
    {
    	break;
 800719c:	bf00      	nop
    }
  }

  return 0;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <cdcGetBaud>:

uint32_t cdcGetBaud(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
	return LineCoding.bitrate;
 80071ac:	4b02      	ldr	r3, [pc, #8]	@ (80071b8 <cdcGetBaud+0x10>)
 80071ae:	681b      	ldr	r3, [r3, #0]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bc80      	pop	{r7}
 80071b6:	4770      	bx	lr
 80071b8:	20000124 	.word	0x20000124

080071bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80071c0:	2200      	movs	r2, #0
 80071c2:	4905      	ldr	r1, [pc, #20]	@ (80071d8 <CDC_Init_FS+0x1c>)
 80071c4:	4805      	ldr	r0, [pc, #20]	@ (80071dc <CDC_Init_FS+0x20>)
 80071c6:	f7fe fe0d 	bl	8005de4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80071ca:	4905      	ldr	r1, [pc, #20]	@ (80071e0 <CDC_Init_FS+0x24>)
 80071cc:	4803      	ldr	r0, [pc, #12]	@ (80071dc <CDC_Init_FS+0x20>)
 80071ce:	f7fe fe22 	bl	8005e16 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80071d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	200008d8 	.word	0x200008d8
 80071dc:	2000020c 	.word	0x2000020c
 80071e0:	200006d8 	.word	0x200006d8

080071e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bc80      	pop	{r7}
 80071f0:	4770      	bx	lr
	...

080071f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	6039      	str	r1, [r7, #0]
 80071fe:	71fb      	strb	r3, [r7, #7]
 8007200:	4613      	mov	r3, r2
 8007202:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	2b23      	cmp	r3, #35	@ 0x23
 8007208:	f200 80a3 	bhi.w	8007352 <CDC_Control_FS+0x15e>
 800720c:	a201      	add	r2, pc, #4	@ (adr r2, 8007214 <CDC_Control_FS+0x20>)
 800720e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007212:	bf00      	nop
 8007214:	08007353 	.word	0x08007353
 8007218:	08007353 	.word	0x08007353
 800721c:	08007353 	.word	0x08007353
 8007220:	08007353 	.word	0x08007353
 8007224:	08007353 	.word	0x08007353
 8007228:	08007353 	.word	0x08007353
 800722c:	08007353 	.word	0x08007353
 8007230:	08007353 	.word	0x08007353
 8007234:	08007353 	.word	0x08007353
 8007238:	08007353 	.word	0x08007353
 800723c:	08007353 	.word	0x08007353
 8007240:	08007353 	.word	0x08007353
 8007244:	08007353 	.word	0x08007353
 8007248:	08007353 	.word	0x08007353
 800724c:	08007353 	.word	0x08007353
 8007250:	08007353 	.word	0x08007353
 8007254:	08007353 	.word	0x08007353
 8007258:	08007353 	.word	0x08007353
 800725c:	08007353 	.word	0x08007353
 8007260:	08007353 	.word	0x08007353
 8007264:	08007353 	.word	0x08007353
 8007268:	08007353 	.word	0x08007353
 800726c:	08007353 	.word	0x08007353
 8007270:	08007353 	.word	0x08007353
 8007274:	08007353 	.word	0x08007353
 8007278:	08007353 	.word	0x08007353
 800727c:	08007353 	.word	0x08007353
 8007280:	08007353 	.word	0x08007353
 8007284:	08007353 	.word	0x08007353
 8007288:	08007353 	.word	0x08007353
 800728c:	08007353 	.word	0x08007353
 8007290:	08007353 	.word	0x08007353
 8007294:	080072a5 	.word	0x080072a5
 8007298:	080072ff 	.word	0x080072ff
 800729c:	08007353 	.word	0x08007353
 80072a0:	08007353 	.word	0x08007353
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	461a      	mov	r2, r3
 80072aa:	4b2d      	ldr	r3, [pc, #180]	@ (8007360 <CDC_Control_FS+0x16c>)
 80072ac:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 80072ae:	4b2c      	ldr	r3, [pc, #176]	@ (8007360 <CDC_Control_FS+0x16c>)
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	3301      	adds	r3, #1
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	021b      	lsls	r3, r3, #8
 80072ba:	4313      	orrs	r3, r2
 80072bc:	4a28      	ldr	r2, [pc, #160]	@ (8007360 <CDC_Control_FS+0x16c>)
 80072be:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 80072c0:	4b27      	ldr	r3, [pc, #156]	@ (8007360 <CDC_Control_FS+0x16c>)
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	3302      	adds	r3, #2
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	041b      	lsls	r3, r3, #16
 80072cc:	4313      	orrs	r3, r2
 80072ce:	4a24      	ldr	r2, [pc, #144]	@ (8007360 <CDC_Control_FS+0x16c>)
 80072d0:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 80072d2:	4b23      	ldr	r3, [pc, #140]	@ (8007360 <CDC_Control_FS+0x16c>)
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	3303      	adds	r3, #3
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	061b      	lsls	r3, r3, #24
 80072de:	4313      	orrs	r3, r2
 80072e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007360 <CDC_Control_FS+0x16c>)
 80072e2:	6013      	str	r3, [r2, #0]
    	LineCoding.format   = pbuf[4];
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	791a      	ldrb	r2, [r3, #4]
 80072e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007360 <CDC_Control_FS+0x16c>)
 80072ea:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	795a      	ldrb	r2, [r3, #5]
 80072f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007360 <CDC_Control_FS+0x16c>)
 80072f2:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	799a      	ldrb	r2, [r3, #6]
 80072f8:	4b19      	ldr	r3, [pc, #100]	@ (8007360 <CDC_Control_FS+0x16c>)
 80072fa:	719a      	strb	r2, [r3, #6]
    break;
 80072fc:	e02a      	b.n	8007354 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80072fe:	4b18      	ldr	r3, [pc, #96]	@ (8007360 <CDC_Control_FS+0x16c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	b2da      	uxtb	r2, r3
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8007308:	4b15      	ldr	r3, [pc, #84]	@ (8007360 <CDC_Control_FS+0x16c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	0a1a      	lsrs	r2, r3, #8
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	3301      	adds	r3, #1
 8007312:	b2d2      	uxtb	r2, r2
 8007314:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8007316:	4b12      	ldr	r3, [pc, #72]	@ (8007360 <CDC_Control_FS+0x16c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	0c1a      	lsrs	r2, r3, #16
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	3302      	adds	r3, #2
 8007320:	b2d2      	uxtb	r2, r2
 8007322:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8007324:	4b0e      	ldr	r3, [pc, #56]	@ (8007360 <CDC_Control_FS+0x16c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	0e1a      	lsrs	r2, r3, #24
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	3303      	adds	r3, #3
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	3304      	adds	r3, #4
 8007336:	4a0a      	ldr	r2, [pc, #40]	@ (8007360 <CDC_Control_FS+0x16c>)
 8007338:	7912      	ldrb	r2, [r2, #4]
 800733a:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	3305      	adds	r3, #5
 8007340:	4a07      	ldr	r2, [pc, #28]	@ (8007360 <CDC_Control_FS+0x16c>)
 8007342:	7952      	ldrb	r2, [r2, #5]
 8007344:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	3306      	adds	r3, #6
 800734a:	4a05      	ldr	r2, [pc, #20]	@ (8007360 <CDC_Control_FS+0x16c>)
 800734c:	7992      	ldrb	r2, [r2, #6]
 800734e:	701a      	strb	r2, [r3, #0]
    break;
 8007350:	e000      	b.n	8007354 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007352:	bf00      	nop
  }

  return (USBD_OK);
 8007354:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007356:	4618      	mov	r0, r3
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	bc80      	pop	{r7}
 800735e:	4770      	bx	lr
 8007360:	20000124 	.word	0x20000124

08007364 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	480e      	ldr	r0, [pc, #56]	@ (80073ac <CDC_Receive_FS+0x48>)
 8007372:	f7fe fd50 	bl	8005e16 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007376:	480d      	ldr	r0, [pc, #52]	@ (80073ac <CDC_Receive_FS+0x48>)
 8007378:	f7fe fd8f 	bl	8005e9a <USBD_CDC_ReceivePacket>


  for(int i=0;i<*Len;i++)
 800737c:	2300      	movs	r3, #0
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	e009      	b.n	8007396 <CDC_Receive_FS+0x32>
  {
	  cdcDataIn(Buf[i]);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	4413      	add	r3, r2
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff feba 	bl	8007104 <cdcDataIn>
  for(int i=0;i<*Len;i++)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3301      	adds	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	429a      	cmp	r2, r3
 800739e:	d8f0      	bhi.n	8007382 <CDC_Receive_FS+0x1e>
  }


  return (USBD_OK);
 80073a0:	2300      	movs	r3, #0




  /* USER CODE END 6 */
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	2000020c 	.word	0x2000020c

080073b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80073c0:	4b0d      	ldr	r3, [pc, #52]	@ (80073f8 <CDC_Transmit_FS+0x48>)
 80073c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e00b      	b.n	80073ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80073d6:	887b      	ldrh	r3, [r7, #2]
 80073d8:	461a      	mov	r2, r3
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	4806      	ldr	r0, [pc, #24]	@ (80073f8 <CDC_Transmit_FS+0x48>)
 80073de:	f7fe fd01 	bl	8005de4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80073e2:	4805      	ldr	r0, [pc, #20]	@ (80073f8 <CDC_Transmit_FS+0x48>)
 80073e4:	f7fe fd2a 	bl	8005e3c <USBD_CDC_TransmitPacket>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	2000020c 	.word	0x2000020c

080073fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	6039      	str	r1, [r7, #0]
 8007406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2212      	movs	r2, #18
 800740c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800740e:	4b03      	ldr	r3, [pc, #12]	@ (800741c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	bc80      	pop	{r7}
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	2000015c 	.word	0x2000015c

08007420 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	6039      	str	r1, [r7, #0]
 800742a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2204      	movs	r2, #4
 8007430:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007432:	4b03      	ldr	r3, [pc, #12]	@ (8007440 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	20000170 	.word	0x20000170

08007444 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d105      	bne.n	8007462 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	4907      	ldr	r1, [pc, #28]	@ (8007478 <USBD_FS_ProductStrDescriptor+0x34>)
 800745a:	4808      	ldr	r0, [pc, #32]	@ (800747c <USBD_FS_ProductStrDescriptor+0x38>)
 800745c:	f7ff fd01 	bl	8006e62 <USBD_GetString>
 8007460:	e004      	b.n	800746c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	4904      	ldr	r1, [pc, #16]	@ (8007478 <USBD_FS_ProductStrDescriptor+0x34>)
 8007466:	4805      	ldr	r0, [pc, #20]	@ (800747c <USBD_FS_ProductStrDescriptor+0x38>)
 8007468:	f7ff fcfb 	bl	8006e62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800746c:	4b02      	ldr	r3, [pc, #8]	@ (8007478 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20000ad8 	.word	0x20000ad8
 800747c:	08008558 	.word	0x08008558

08007480 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	6039      	str	r1, [r7, #0]
 800748a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	4904      	ldr	r1, [pc, #16]	@ (80074a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007490:	4804      	ldr	r0, [pc, #16]	@ (80074a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007492:	f7ff fce6 	bl	8006e62 <USBD_GetString>
  return USBD_StrDesc;
 8007496:	4b02      	ldr	r3, [pc, #8]	@ (80074a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20000ad8 	.word	0x20000ad8
 80074a4:	08008570 	.word	0x08008570

080074a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	6039      	str	r1, [r7, #0]
 80074b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	221a      	movs	r2, #26
 80074b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80074ba:	f000 f843 	bl	8007544 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80074be:	4b02      	ldr	r3, [pc, #8]	@ (80074c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	20000174 	.word	0x20000174

080074cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	6039      	str	r1, [r7, #0]
 80074d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d105      	bne.n	80074ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	4907      	ldr	r1, [pc, #28]	@ (8007500 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074e2:	4808      	ldr	r0, [pc, #32]	@ (8007504 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074e4:	f7ff fcbd 	bl	8006e62 <USBD_GetString>
 80074e8:	e004      	b.n	80074f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	4904      	ldr	r1, [pc, #16]	@ (8007500 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074ee:	4805      	ldr	r0, [pc, #20]	@ (8007504 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074f0:	f7ff fcb7 	bl	8006e62 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074f4:	4b02      	ldr	r3, [pc, #8]	@ (8007500 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20000ad8 	.word	0x20000ad8
 8007504:	08008584 	.word	0x08008584

08007508 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	6039      	str	r1, [r7, #0]
 8007512:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d105      	bne.n	8007526 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	4907      	ldr	r1, [pc, #28]	@ (800753c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800751e:	4808      	ldr	r0, [pc, #32]	@ (8007540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007520:	f7ff fc9f 	bl	8006e62 <USBD_GetString>
 8007524:	e004      	b.n	8007530 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	4904      	ldr	r1, [pc, #16]	@ (800753c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800752a:	4805      	ldr	r0, [pc, #20]	@ (8007540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800752c:	f7ff fc99 	bl	8006e62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007530:	4b02      	ldr	r3, [pc, #8]	@ (800753c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20000ad8 	.word	0x20000ad8
 8007540:	08008590 	.word	0x08008590

08007544 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800754a:	4b0f      	ldr	r3, [pc, #60]	@ (8007588 <Get_SerialNum+0x44>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007550:	4b0e      	ldr	r3, [pc, #56]	@ (800758c <Get_SerialNum+0x48>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007556:	4b0e      	ldr	r3, [pc, #56]	@ (8007590 <Get_SerialNum+0x4c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4413      	add	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d009      	beq.n	800757e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800756a:	2208      	movs	r2, #8
 800756c:	4909      	ldr	r1, [pc, #36]	@ (8007594 <Get_SerialNum+0x50>)
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 f814 	bl	800759c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007574:	2204      	movs	r2, #4
 8007576:	4908      	ldr	r1, [pc, #32]	@ (8007598 <Get_SerialNum+0x54>)
 8007578:	68b8      	ldr	r0, [r7, #8]
 800757a:	f000 f80f 	bl	800759c <IntToUnicode>
  }
}
 800757e:	bf00      	nop
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	1ffff7e8 	.word	0x1ffff7e8
 800758c:	1ffff7ec 	.word	0x1ffff7ec
 8007590:	1ffff7f0 	.word	0x1ffff7f0
 8007594:	20000176 	.word	0x20000176
 8007598:	20000186 	.word	0x20000186

0800759c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	4613      	mov	r3, r2
 80075a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80075ae:	2300      	movs	r3, #0
 80075b0:	75fb      	strb	r3, [r7, #23]
 80075b2:	e027      	b.n	8007604 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	0f1b      	lsrs	r3, r3, #28
 80075b8:	2b09      	cmp	r3, #9
 80075ba:	d80b      	bhi.n	80075d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	0f1b      	lsrs	r3, r3, #28
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	4619      	mov	r1, r3
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	440b      	add	r3, r1
 80075cc:	3230      	adds	r2, #48	@ 0x30
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	e00a      	b.n	80075ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	0f1b      	lsrs	r3, r3, #28
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	4619      	mov	r1, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	440b      	add	r3, r1
 80075e4:	3237      	adds	r2, #55	@ 0x37
 80075e6:	b2d2      	uxtb	r2, r2
 80075e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	005b      	lsls	r3, r3, #1
 80075f4:	3301      	adds	r3, #1
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	4413      	add	r3, r2
 80075fa:	2200      	movs	r2, #0
 80075fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	3301      	adds	r3, #1
 8007602:	75fb      	strb	r3, [r7, #23]
 8007604:	7dfa      	ldrb	r2, [r7, #23]
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	429a      	cmp	r2, r3
 800760a:	d3d3      	bcc.n	80075b4 <IntToUnicode+0x18>
  }
}
 800760c:	bf00      	nop
 800760e:	bf00      	nop
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr

08007618 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a0d      	ldr	r2, [pc, #52]	@ (800765c <HAL_PCD_MspInit+0x44>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d113      	bne.n	8007652 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800762a:	4b0d      	ldr	r3, [pc, #52]	@ (8007660 <HAL_PCD_MspInit+0x48>)
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	4a0c      	ldr	r2, [pc, #48]	@ (8007660 <HAL_PCD_MspInit+0x48>)
 8007630:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007634:	61d3      	str	r3, [r2, #28]
 8007636:	4b0a      	ldr	r3, [pc, #40]	@ (8007660 <HAL_PCD_MspInit+0x48>)
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007642:	2200      	movs	r2, #0
 8007644:	2100      	movs	r1, #0
 8007646:	2014      	movs	r0, #20
 8007648:	f7f9 fa05 	bl	8000a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800764c:	2014      	movs	r0, #20
 800764e:	f7f9 fa1e 	bl	8000a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007652:	bf00      	nop
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	40005c00 	.word	0x40005c00
 8007660:	40021000 	.word	0x40021000

08007664 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007678:	4619      	mov	r1, r3
 800767a:	4610      	mov	r0, r2
 800767c:	f7fe fcc3 	bl	8006006 <USBD_LL_SetupStage>
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800769a:	78fa      	ldrb	r2, [r7, #3]
 800769c:	6879      	ldr	r1, [r7, #4]
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	440b      	add	r3, r1
 80076a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	4619      	mov	r1, r3
 80076b2:	f7fe fcf5 	bl	80060a0 <USBD_LL_DataOutStage>
}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	460b      	mov	r3, r1
 80076c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80076d0:	78fa      	ldrb	r2, [r7, #3]
 80076d2:	6879      	ldr	r1, [r7, #4]
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	440b      	add	r3, r1
 80076de:	3324      	adds	r3, #36	@ 0x24
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	4619      	mov	r1, r3
 80076e6:	f7fe fd4c 	bl	8006182 <USBD_LL_DataInStage>
}
 80076ea:	bf00      	nop
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007700:	4618      	mov	r0, r3
 8007702:	f7fe fe5c 	bl	80063be <USBD_LL_SOF>
}
 8007706:	bf00      	nop
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007716:	2301      	movs	r3, #1
 8007718:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	799b      	ldrb	r3, [r3, #6]
 800771e:	2b02      	cmp	r3, #2
 8007720:	d001      	beq.n	8007726 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007722:	f7f8 fe21 	bl	8000368 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800772c:	7bfa      	ldrb	r2, [r7, #15]
 800772e:	4611      	mov	r1, r2
 8007730:	4618      	mov	r0, r3
 8007732:	f7fe fe0c 	bl	800634e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fdc5 	bl	80062cc <USBD_LL_Reset>
}
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe fe06 	bl	800636c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	7a9b      	ldrb	r3, [r3, #10]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007768:	4b04      	ldr	r3, [pc, #16]	@ (800777c <HAL_PCD_SuspendCallback+0x30>)
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	4a03      	ldr	r2, [pc, #12]	@ (800777c <HAL_PCD_SuspendCallback+0x30>)
 800776e:	f043 0306 	orr.w	r3, r3, #6
 8007772:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	e000ed00 	.word	0xe000ed00

08007780 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fe00 	bl	8006394 <USBD_LL_Resume>
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80077a4:	4a28      	ldr	r2, [pc, #160]	@ (8007848 <USBD_LL_Init+0xac>)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a26      	ldr	r2, [pc, #152]	@ (8007848 <USBD_LL_Init+0xac>)
 80077b0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80077b4:	4b24      	ldr	r3, [pc, #144]	@ (8007848 <USBD_LL_Init+0xac>)
 80077b6:	4a25      	ldr	r2, [pc, #148]	@ (800784c <USBD_LL_Init+0xb0>)
 80077b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80077ba:	4b23      	ldr	r3, [pc, #140]	@ (8007848 <USBD_LL_Init+0xac>)
 80077bc:	2208      	movs	r2, #8
 80077be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80077c0:	4b21      	ldr	r3, [pc, #132]	@ (8007848 <USBD_LL_Init+0xac>)
 80077c2:	2202      	movs	r2, #2
 80077c4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80077c6:	4b20      	ldr	r3, [pc, #128]	@ (8007848 <USBD_LL_Init+0xac>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80077cc:	4b1e      	ldr	r3, [pc, #120]	@ (8007848 <USBD_LL_Init+0xac>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80077d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007848 <USBD_LL_Init+0xac>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80077d8:	481b      	ldr	r0, [pc, #108]	@ (8007848 <USBD_LL_Init+0xac>)
 80077da:	f7f9 fb28 	bl	8000e2e <HAL_PCD_Init>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80077e4:	f7f8 fdc0 	bl	8000368 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80077ee:	2318      	movs	r3, #24
 80077f0:	2200      	movs	r2, #0
 80077f2:	2100      	movs	r1, #0
 80077f4:	f7fb f839 	bl	800286a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80077fe:	2358      	movs	r3, #88	@ 0x58
 8007800:	2200      	movs	r2, #0
 8007802:	2180      	movs	r1, #128	@ 0x80
 8007804:	f7fb f831 	bl	800286a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800780e:	23c0      	movs	r3, #192	@ 0xc0
 8007810:	2200      	movs	r2, #0
 8007812:	2181      	movs	r1, #129	@ 0x81
 8007814:	f7fb f829 	bl	800286a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800781e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007822:	2200      	movs	r2, #0
 8007824:	2101      	movs	r1, #1
 8007826:	f7fb f820 	bl	800286a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007834:	2200      	movs	r2, #0
 8007836:	2182      	movs	r1, #130	@ 0x82
 8007838:	f7fb f817 	bl	800286a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20000cd8 	.word	0x20000cd8
 800784c:	40005c00 	.word	0x40005c00

08007850 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007866:	4618      	mov	r0, r3
 8007868:	f7f9 fbd7 	bl	800101a <HAL_PCD_Start>
 800786c:	4603      	mov	r3, r0
 800786e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	4618      	mov	r0, r3
 8007874:	f000 f94e 	bl	8007b14 <USBD_Get_USB_Status>
 8007878:	4603      	mov	r3, r0
 800787a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800787c:	7bbb      	ldrb	r3, [r7, #14]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	4608      	mov	r0, r1
 8007890:	4611      	mov	r1, r2
 8007892:	461a      	mov	r2, r3
 8007894:	4603      	mov	r3, r0
 8007896:	70fb      	strb	r3, [r7, #3]
 8007898:	460b      	mov	r3, r1
 800789a:	70bb      	strb	r3, [r7, #2]
 800789c:	4613      	mov	r3, r2
 800789e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80078ae:	78bb      	ldrb	r3, [r7, #2]
 80078b0:	883a      	ldrh	r2, [r7, #0]
 80078b2:	78f9      	ldrb	r1, [r7, #3]
 80078b4:	f7f9 fd2b 	bl	800130e <HAL_PCD_EP_Open>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 f928 	bl	8007b14 <USBD_Get_USB_Status>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80078ec:	78fa      	ldrb	r2, [r7, #3]
 80078ee:	4611      	mov	r1, r2
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7f9 fd69 	bl	80013c8 <HAL_PCD_EP_Close>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 f909 	bl	8007b14 <USBD_Get_USB_Status>
 8007902:	4603      	mov	r3, r0
 8007904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007906:	7bbb      	ldrb	r3, [r7, #14]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	460b      	mov	r3, r1
 800791a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800792a:	78fa      	ldrb	r2, [r7, #3]
 800792c:	4611      	mov	r1, r2
 800792e:	4618      	mov	r0, r3
 8007930:	f7f9 fe11 	bl	8001556 <HAL_PCD_EP_SetStall>
 8007934:	4603      	mov	r3, r0
 8007936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007938:	7bfb      	ldrb	r3, [r7, #15]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 f8ea 	bl	8007b14 <USBD_Get_USB_Status>
 8007940:	4603      	mov	r3, r0
 8007942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007944:	7bbb      	ldrb	r3, [r7, #14]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007968:	78fa      	ldrb	r2, [r7, #3]
 800796a:	4611      	mov	r1, r2
 800796c:	4618      	mov	r0, r3
 800796e:	f7f9 fe52 	bl	8001616 <HAL_PCD_EP_ClrStall>
 8007972:	4603      	mov	r3, r0
 8007974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	4618      	mov	r0, r3
 800797a:	f000 f8cb 	bl	8007b14 <USBD_Get_USB_Status>
 800797e:	4603      	mov	r3, r0
 8007980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007982:	7bbb      	ldrb	r3, [r7, #14]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800799e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80079a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	da0b      	bge.n	80079c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079a8:	78fb      	ldrb	r3, [r7, #3]
 80079aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079ae:	68f9      	ldr	r1, [r7, #12]
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	440b      	add	r3, r1
 80079ba:	3312      	adds	r3, #18
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	e00b      	b.n	80079d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079c6:	68f9      	ldr	r1, [r7, #12]
 80079c8:	4613      	mov	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	440b      	add	r3, r1
 80079d2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80079d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	bc80      	pop	{r7}
 80079e0:	4770      	bx	lr

080079e2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80079fc:	78fa      	ldrb	r2, [r7, #3]
 80079fe:	4611      	mov	r1, r2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7f9 fc60 	bl	80012c6 <HAL_PCD_SetAddress>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f881 	bl	8007b14 <USBD_Get_USB_Status>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	607a      	str	r2, [r7, #4]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	72fb      	strb	r3, [r7, #11]
 8007a30:	4613      	mov	r3, r2
 8007a32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007a42:	893b      	ldrh	r3, [r7, #8]
 8007a44:	7af9      	ldrb	r1, [r7, #11]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	f7f9 fd4e 	bl	80014e8 <HAL_PCD_EP_Transmit>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f85e 	bl	8007b14 <USBD_Get_USB_Status>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b086      	sub	sp, #24
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	461a      	mov	r2, r3
 8007a72:	460b      	mov	r3, r1
 8007a74:	72fb      	strb	r3, [r7, #11]
 8007a76:	4613      	mov	r3, r2
 8007a78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007a88:	893b      	ldrh	r3, [r7, #8]
 8007a8a:	7af9      	ldrb	r1, [r7, #11]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	f7f9 fce3 	bl	8001458 <HAL_PCD_EP_Receive>
 8007a92:	4603      	mov	r3, r0
 8007a94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f000 f83b 	bl	8007b14 <USBD_Get_USB_Status>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007aa2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007abe:	78fa      	ldrb	r2, [r7, #3]
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7f9 fcf9 	bl	80014ba <HAL_PCD_EP_GetRxCount>
 8007ac8:	4603      	mov	r3, r0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007adc:	4b02      	ldr	r3, [pc, #8]	@ (8007ae8 <USBD_static_malloc+0x14>)
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bc80      	pop	{r7}
 8007ae6:	4770      	bx	lr
 8007ae8:	20000fb0 	.word	0x20000fb0

08007aec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]

}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bc80      	pop	{r7}
 8007afc:	4770      	bx	lr

08007afe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	460b      	mov	r3, r1
 8007b08:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bc80      	pop	{r7}
 8007b12:	4770      	bx	lr

08007b14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d817      	bhi.n	8007b58 <USBD_Get_USB_Status+0x44>
 8007b28:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <USBD_Get_USB_Status+0x1c>)
 8007b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2e:	bf00      	nop
 8007b30:	08007b41 	.word	0x08007b41
 8007b34:	08007b47 	.word	0x08007b47
 8007b38:	08007b4d 	.word	0x08007b4d
 8007b3c:	08007b53 	.word	0x08007b53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	73fb      	strb	r3, [r7, #15]
    break;
 8007b44:	e00b      	b.n	8007b5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b46:	2302      	movs	r3, #2
 8007b48:	73fb      	strb	r3, [r7, #15]
    break;
 8007b4a:	e008      	b.n	8007b5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b50:	e005      	b.n	8007b5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b52:	2302      	movs	r3, #2
 8007b54:	73fb      	strb	r3, [r7, #15]
    break;
 8007b56:	e002      	b.n	8007b5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b5c:	bf00      	nop
  }
  return usb_status;
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bc80      	pop	{r7}
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop

08007b6c <main>:




int main(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
	hwInit();
 8007b70:	f7f8 fe0a 	bl	8000788 <hwInit>
	apInit();
 8007b74:	f7f8 faea 	bl	800014c <apInit>

	apMain();
 8007b78:	f7f8 faf2 	bl	8000160 <apMain>

	return 0;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <_vsniprintf_r>:
 8007b82:	b530      	push	{r4, r5, lr}
 8007b84:	4614      	mov	r4, r2
 8007b86:	2c00      	cmp	r4, #0
 8007b88:	4605      	mov	r5, r0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	b09b      	sub	sp, #108	@ 0x6c
 8007b8e:	da05      	bge.n	8007b9c <_vsniprintf_r+0x1a>
 8007b90:	238b      	movs	r3, #139	@ 0x8b
 8007b92:	6003      	str	r3, [r0, #0]
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295
 8007b98:	b01b      	add	sp, #108	@ 0x6c
 8007b9a:	bd30      	pop	{r4, r5, pc}
 8007b9c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007ba0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007ba4:	f04f 0300 	mov.w	r3, #0
 8007ba8:	9319      	str	r3, [sp, #100]	@ 0x64
 8007baa:	bf0c      	ite	eq
 8007bac:	4623      	moveq	r3, r4
 8007bae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007bb2:	9302      	str	r3, [sp, #8]
 8007bb4:	9305      	str	r3, [sp, #20]
 8007bb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007bba:	9100      	str	r1, [sp, #0]
 8007bbc:	9104      	str	r1, [sp, #16]
 8007bbe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007bc2:	4669      	mov	r1, sp
 8007bc4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007bc6:	f000 f99f 	bl	8007f08 <_svfiprintf_r>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	bfbc      	itt	lt
 8007bce:	238b      	movlt	r3, #139	@ 0x8b
 8007bd0:	602b      	strlt	r3, [r5, #0]
 8007bd2:	2c00      	cmp	r4, #0
 8007bd4:	d0e0      	beq.n	8007b98 <_vsniprintf_r+0x16>
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	9b00      	ldr	r3, [sp, #0]
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	e7dc      	b.n	8007b98 <_vsniprintf_r+0x16>
	...

08007be0 <vsniprintf>:
 8007be0:	b507      	push	{r0, r1, r2, lr}
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	4613      	mov	r3, r2
 8007be6:	460a      	mov	r2, r1
 8007be8:	4601      	mov	r1, r0
 8007bea:	4803      	ldr	r0, [pc, #12]	@ (8007bf8 <vsniprintf+0x18>)
 8007bec:	6800      	ldr	r0, [r0, #0]
 8007bee:	f7ff ffc8 	bl	8007b82 <_vsniprintf_r>
 8007bf2:	b003      	add	sp, #12
 8007bf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bf8:	20000190 	.word	0x20000190

08007bfc <memset>:
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	4402      	add	r2, r0
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d100      	bne.n	8007c06 <memset+0xa>
 8007c04:	4770      	bx	lr
 8007c06:	f803 1b01 	strb.w	r1, [r3], #1
 8007c0a:	e7f9      	b.n	8007c00 <memset+0x4>

08007c0c <__errno>:
 8007c0c:	4b01      	ldr	r3, [pc, #4]	@ (8007c14 <__errno+0x8>)
 8007c0e:	6818      	ldr	r0, [r3, #0]
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	20000190 	.word	0x20000190

08007c18 <__libc_init_array>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	2600      	movs	r6, #0
 8007c1c:	4d0c      	ldr	r5, [pc, #48]	@ (8007c50 <__libc_init_array+0x38>)
 8007c1e:	4c0d      	ldr	r4, [pc, #52]	@ (8007c54 <__libc_init_array+0x3c>)
 8007c20:	1b64      	subs	r4, r4, r5
 8007c22:	10a4      	asrs	r4, r4, #2
 8007c24:	42a6      	cmp	r6, r4
 8007c26:	d109      	bne.n	8007c3c <__libc_init_array+0x24>
 8007c28:	f000 fc76 	bl	8008518 <_init>
 8007c2c:	2600      	movs	r6, #0
 8007c2e:	4d0a      	ldr	r5, [pc, #40]	@ (8007c58 <__libc_init_array+0x40>)
 8007c30:	4c0a      	ldr	r4, [pc, #40]	@ (8007c5c <__libc_init_array+0x44>)
 8007c32:	1b64      	subs	r4, r4, r5
 8007c34:	10a4      	asrs	r4, r4, #2
 8007c36:	42a6      	cmp	r6, r4
 8007c38:	d105      	bne.n	8007c46 <__libc_init_array+0x2e>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c40:	4798      	blx	r3
 8007c42:	3601      	adds	r6, #1
 8007c44:	e7ee      	b.n	8007c24 <__libc_init_array+0xc>
 8007c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c4a:	4798      	blx	r3
 8007c4c:	3601      	adds	r6, #1
 8007c4e:	e7f2      	b.n	8007c36 <__libc_init_array+0x1e>
 8007c50:	080085f8 	.word	0x080085f8
 8007c54:	080085f8 	.word	0x080085f8
 8007c58:	080085f8 	.word	0x080085f8
 8007c5c:	080085fc 	.word	0x080085fc

08007c60 <__retarget_lock_acquire_recursive>:
 8007c60:	4770      	bx	lr

08007c62 <__retarget_lock_release_recursive>:
 8007c62:	4770      	bx	lr

08007c64 <_free_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4605      	mov	r5, r0
 8007c68:	2900      	cmp	r1, #0
 8007c6a:	d040      	beq.n	8007cee <_free_r+0x8a>
 8007c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c70:	1f0c      	subs	r4, r1, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	bfb8      	it	lt
 8007c76:	18e4      	addlt	r4, r4, r3
 8007c78:	f000 f8de 	bl	8007e38 <__malloc_lock>
 8007c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8007cf0 <_free_r+0x8c>)
 8007c7e:	6813      	ldr	r3, [r2, #0]
 8007c80:	b933      	cbnz	r3, 8007c90 <_free_r+0x2c>
 8007c82:	6063      	str	r3, [r4, #4]
 8007c84:	6014      	str	r4, [r2, #0]
 8007c86:	4628      	mov	r0, r5
 8007c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c8c:	f000 b8da 	b.w	8007e44 <__malloc_unlock>
 8007c90:	42a3      	cmp	r3, r4
 8007c92:	d908      	bls.n	8007ca6 <_free_r+0x42>
 8007c94:	6820      	ldr	r0, [r4, #0]
 8007c96:	1821      	adds	r1, r4, r0
 8007c98:	428b      	cmp	r3, r1
 8007c9a:	bf01      	itttt	eq
 8007c9c:	6819      	ldreq	r1, [r3, #0]
 8007c9e:	685b      	ldreq	r3, [r3, #4]
 8007ca0:	1809      	addeq	r1, r1, r0
 8007ca2:	6021      	streq	r1, [r4, #0]
 8007ca4:	e7ed      	b.n	8007c82 <_free_r+0x1e>
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	b10b      	cbz	r3, 8007cb0 <_free_r+0x4c>
 8007cac:	42a3      	cmp	r3, r4
 8007cae:	d9fa      	bls.n	8007ca6 <_free_r+0x42>
 8007cb0:	6811      	ldr	r1, [r2, #0]
 8007cb2:	1850      	adds	r0, r2, r1
 8007cb4:	42a0      	cmp	r0, r4
 8007cb6:	d10b      	bne.n	8007cd0 <_free_r+0x6c>
 8007cb8:	6820      	ldr	r0, [r4, #0]
 8007cba:	4401      	add	r1, r0
 8007cbc:	1850      	adds	r0, r2, r1
 8007cbe:	4283      	cmp	r3, r0
 8007cc0:	6011      	str	r1, [r2, #0]
 8007cc2:	d1e0      	bne.n	8007c86 <_free_r+0x22>
 8007cc4:	6818      	ldr	r0, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	4408      	add	r0, r1
 8007cca:	6010      	str	r0, [r2, #0]
 8007ccc:	6053      	str	r3, [r2, #4]
 8007cce:	e7da      	b.n	8007c86 <_free_r+0x22>
 8007cd0:	d902      	bls.n	8007cd8 <_free_r+0x74>
 8007cd2:	230c      	movs	r3, #12
 8007cd4:	602b      	str	r3, [r5, #0]
 8007cd6:	e7d6      	b.n	8007c86 <_free_r+0x22>
 8007cd8:	6820      	ldr	r0, [r4, #0]
 8007cda:	1821      	adds	r1, r4, r0
 8007cdc:	428b      	cmp	r3, r1
 8007cde:	bf01      	itttt	eq
 8007ce0:	6819      	ldreq	r1, [r3, #0]
 8007ce2:	685b      	ldreq	r3, [r3, #4]
 8007ce4:	1809      	addeq	r1, r1, r0
 8007ce6:	6021      	streq	r1, [r4, #0]
 8007ce8:	6063      	str	r3, [r4, #4]
 8007cea:	6054      	str	r4, [r2, #4]
 8007cec:	e7cb      	b.n	8007c86 <_free_r+0x22>
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	20001314 	.word	0x20001314

08007cf4 <sbrk_aligned>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	4e0f      	ldr	r6, [pc, #60]	@ (8007d34 <sbrk_aligned+0x40>)
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	6831      	ldr	r1, [r6, #0]
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	b911      	cbnz	r1, 8007d06 <sbrk_aligned+0x12>
 8007d00:	f000 fba8 	bl	8008454 <_sbrk_r>
 8007d04:	6030      	str	r0, [r6, #0]
 8007d06:	4621      	mov	r1, r4
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f000 fba3 	bl	8008454 <_sbrk_r>
 8007d0e:	1c43      	adds	r3, r0, #1
 8007d10:	d103      	bne.n	8007d1a <sbrk_aligned+0x26>
 8007d12:	f04f 34ff 	mov.w	r4, #4294967295
 8007d16:	4620      	mov	r0, r4
 8007d18:	bd70      	pop	{r4, r5, r6, pc}
 8007d1a:	1cc4      	adds	r4, r0, #3
 8007d1c:	f024 0403 	bic.w	r4, r4, #3
 8007d20:	42a0      	cmp	r0, r4
 8007d22:	d0f8      	beq.n	8007d16 <sbrk_aligned+0x22>
 8007d24:	1a21      	subs	r1, r4, r0
 8007d26:	4628      	mov	r0, r5
 8007d28:	f000 fb94 	bl	8008454 <_sbrk_r>
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d1f2      	bne.n	8007d16 <sbrk_aligned+0x22>
 8007d30:	e7ef      	b.n	8007d12 <sbrk_aligned+0x1e>
 8007d32:	bf00      	nop
 8007d34:	20001310 	.word	0x20001310

08007d38 <_malloc_r>:
 8007d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	1ccd      	adds	r5, r1, #3
 8007d3e:	f025 0503 	bic.w	r5, r5, #3
 8007d42:	3508      	adds	r5, #8
 8007d44:	2d0c      	cmp	r5, #12
 8007d46:	bf38      	it	cc
 8007d48:	250c      	movcc	r5, #12
 8007d4a:	2d00      	cmp	r5, #0
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	db01      	blt.n	8007d54 <_malloc_r+0x1c>
 8007d50:	42a9      	cmp	r1, r5
 8007d52:	d904      	bls.n	8007d5e <_malloc_r+0x26>
 8007d54:	230c      	movs	r3, #12
 8007d56:	6033      	str	r3, [r6, #0]
 8007d58:	2000      	movs	r0, #0
 8007d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e34 <_malloc_r+0xfc>
 8007d62:	f000 f869 	bl	8007e38 <__malloc_lock>
 8007d66:	f8d8 3000 	ldr.w	r3, [r8]
 8007d6a:	461c      	mov	r4, r3
 8007d6c:	bb44      	cbnz	r4, 8007dc0 <_malloc_r+0x88>
 8007d6e:	4629      	mov	r1, r5
 8007d70:	4630      	mov	r0, r6
 8007d72:	f7ff ffbf 	bl	8007cf4 <sbrk_aligned>
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	4604      	mov	r4, r0
 8007d7a:	d158      	bne.n	8007e2e <_malloc_r+0xf6>
 8007d7c:	f8d8 4000 	ldr.w	r4, [r8]
 8007d80:	4627      	mov	r7, r4
 8007d82:	2f00      	cmp	r7, #0
 8007d84:	d143      	bne.n	8007e0e <_malloc_r+0xd6>
 8007d86:	2c00      	cmp	r4, #0
 8007d88:	d04b      	beq.n	8007e22 <_malloc_r+0xea>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	4630      	mov	r0, r6
 8007d90:	eb04 0903 	add.w	r9, r4, r3
 8007d94:	f000 fb5e 	bl	8008454 <_sbrk_r>
 8007d98:	4581      	cmp	r9, r0
 8007d9a:	d142      	bne.n	8007e22 <_malloc_r+0xea>
 8007d9c:	6821      	ldr	r1, [r4, #0]
 8007d9e:	4630      	mov	r0, r6
 8007da0:	1a6d      	subs	r5, r5, r1
 8007da2:	4629      	mov	r1, r5
 8007da4:	f7ff ffa6 	bl	8007cf4 <sbrk_aligned>
 8007da8:	3001      	adds	r0, #1
 8007daa:	d03a      	beq.n	8007e22 <_malloc_r+0xea>
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	442b      	add	r3, r5
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	f8d8 3000 	ldr.w	r3, [r8]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	bb62      	cbnz	r2, 8007e14 <_malloc_r+0xdc>
 8007dba:	f8c8 7000 	str.w	r7, [r8]
 8007dbe:	e00f      	b.n	8007de0 <_malloc_r+0xa8>
 8007dc0:	6822      	ldr	r2, [r4, #0]
 8007dc2:	1b52      	subs	r2, r2, r5
 8007dc4:	d420      	bmi.n	8007e08 <_malloc_r+0xd0>
 8007dc6:	2a0b      	cmp	r2, #11
 8007dc8:	d917      	bls.n	8007dfa <_malloc_r+0xc2>
 8007dca:	1961      	adds	r1, r4, r5
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	6025      	str	r5, [r4, #0]
 8007dd0:	bf18      	it	ne
 8007dd2:	6059      	strne	r1, [r3, #4]
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	bf08      	it	eq
 8007dd8:	f8c8 1000 	streq.w	r1, [r8]
 8007ddc:	5162      	str	r2, [r4, r5]
 8007dde:	604b      	str	r3, [r1, #4]
 8007de0:	4630      	mov	r0, r6
 8007de2:	f000 f82f 	bl	8007e44 <__malloc_unlock>
 8007de6:	f104 000b 	add.w	r0, r4, #11
 8007dea:	1d23      	adds	r3, r4, #4
 8007dec:	f020 0007 	bic.w	r0, r0, #7
 8007df0:	1ac2      	subs	r2, r0, r3
 8007df2:	bf1c      	itt	ne
 8007df4:	1a1b      	subne	r3, r3, r0
 8007df6:	50a3      	strne	r3, [r4, r2]
 8007df8:	e7af      	b.n	8007d5a <_malloc_r+0x22>
 8007dfa:	6862      	ldr	r2, [r4, #4]
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	bf0c      	ite	eq
 8007e00:	f8c8 2000 	streq.w	r2, [r8]
 8007e04:	605a      	strne	r2, [r3, #4]
 8007e06:	e7eb      	b.n	8007de0 <_malloc_r+0xa8>
 8007e08:	4623      	mov	r3, r4
 8007e0a:	6864      	ldr	r4, [r4, #4]
 8007e0c:	e7ae      	b.n	8007d6c <_malloc_r+0x34>
 8007e0e:	463c      	mov	r4, r7
 8007e10:	687f      	ldr	r7, [r7, #4]
 8007e12:	e7b6      	b.n	8007d82 <_malloc_r+0x4a>
 8007e14:	461a      	mov	r2, r3
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	42a3      	cmp	r3, r4
 8007e1a:	d1fb      	bne.n	8007e14 <_malloc_r+0xdc>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	6053      	str	r3, [r2, #4]
 8007e20:	e7de      	b.n	8007de0 <_malloc_r+0xa8>
 8007e22:	230c      	movs	r3, #12
 8007e24:	4630      	mov	r0, r6
 8007e26:	6033      	str	r3, [r6, #0]
 8007e28:	f000 f80c 	bl	8007e44 <__malloc_unlock>
 8007e2c:	e794      	b.n	8007d58 <_malloc_r+0x20>
 8007e2e:	6005      	str	r5, [r0, #0]
 8007e30:	e7d6      	b.n	8007de0 <_malloc_r+0xa8>
 8007e32:	bf00      	nop
 8007e34:	20001314 	.word	0x20001314

08007e38 <__malloc_lock>:
 8007e38:	4801      	ldr	r0, [pc, #4]	@ (8007e40 <__malloc_lock+0x8>)
 8007e3a:	f7ff bf11 	b.w	8007c60 <__retarget_lock_acquire_recursive>
 8007e3e:	bf00      	nop
 8007e40:	2000130c 	.word	0x2000130c

08007e44 <__malloc_unlock>:
 8007e44:	4801      	ldr	r0, [pc, #4]	@ (8007e4c <__malloc_unlock+0x8>)
 8007e46:	f7ff bf0c 	b.w	8007c62 <__retarget_lock_release_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	2000130c 	.word	0x2000130c

08007e50 <__ssputs_r>:
 8007e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	461f      	mov	r7, r3
 8007e56:	688e      	ldr	r6, [r1, #8]
 8007e58:	4682      	mov	sl, r0
 8007e5a:	42be      	cmp	r6, r7
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	4690      	mov	r8, r2
 8007e60:	680b      	ldr	r3, [r1, #0]
 8007e62:	d82d      	bhi.n	8007ec0 <__ssputs_r+0x70>
 8007e64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007e6c:	d026      	beq.n	8007ebc <__ssputs_r+0x6c>
 8007e6e:	6965      	ldr	r5, [r4, #20]
 8007e70:	6909      	ldr	r1, [r1, #16]
 8007e72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e76:	eba3 0901 	sub.w	r9, r3, r1
 8007e7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e7e:	1c7b      	adds	r3, r7, #1
 8007e80:	444b      	add	r3, r9
 8007e82:	106d      	asrs	r5, r5, #1
 8007e84:	429d      	cmp	r5, r3
 8007e86:	bf38      	it	cc
 8007e88:	461d      	movcc	r5, r3
 8007e8a:	0553      	lsls	r3, r2, #21
 8007e8c:	d527      	bpl.n	8007ede <__ssputs_r+0x8e>
 8007e8e:	4629      	mov	r1, r5
 8007e90:	f7ff ff52 	bl	8007d38 <_malloc_r>
 8007e94:	4606      	mov	r6, r0
 8007e96:	b360      	cbz	r0, 8007ef2 <__ssputs_r+0xa2>
 8007e98:	464a      	mov	r2, r9
 8007e9a:	6921      	ldr	r1, [r4, #16]
 8007e9c:	f000 faf8 	bl	8008490 <memcpy>
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eaa:	81a3      	strh	r3, [r4, #12]
 8007eac:	6126      	str	r6, [r4, #16]
 8007eae:	444e      	add	r6, r9
 8007eb0:	6026      	str	r6, [r4, #0]
 8007eb2:	463e      	mov	r6, r7
 8007eb4:	6165      	str	r5, [r4, #20]
 8007eb6:	eba5 0509 	sub.w	r5, r5, r9
 8007eba:	60a5      	str	r5, [r4, #8]
 8007ebc:	42be      	cmp	r6, r7
 8007ebe:	d900      	bls.n	8007ec2 <__ssputs_r+0x72>
 8007ec0:	463e      	mov	r6, r7
 8007ec2:	4632      	mov	r2, r6
 8007ec4:	4641      	mov	r1, r8
 8007ec6:	6820      	ldr	r0, [r4, #0]
 8007ec8:	f000 faaa 	bl	8008420 <memmove>
 8007ecc:	2000      	movs	r0, #0
 8007ece:	68a3      	ldr	r3, [r4, #8]
 8007ed0:	1b9b      	subs	r3, r3, r6
 8007ed2:	60a3      	str	r3, [r4, #8]
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	4433      	add	r3, r6
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ede:	462a      	mov	r2, r5
 8007ee0:	f000 fae4 	bl	80084ac <_realloc_r>
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d1e0      	bne.n	8007eac <__ssputs_r+0x5c>
 8007eea:	4650      	mov	r0, sl
 8007eec:	6921      	ldr	r1, [r4, #16]
 8007eee:	f7ff feb9 	bl	8007c64 <_free_r>
 8007ef2:	230c      	movs	r3, #12
 8007ef4:	f8ca 3000 	str.w	r3, [sl]
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	f04f 30ff 	mov.w	r0, #4294967295
 8007efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f02:	81a3      	strh	r3, [r4, #12]
 8007f04:	e7e9      	b.n	8007eda <__ssputs_r+0x8a>
	...

08007f08 <_svfiprintf_r>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	4698      	mov	r8, r3
 8007f0e:	898b      	ldrh	r3, [r1, #12]
 8007f10:	4607      	mov	r7, r0
 8007f12:	061b      	lsls	r3, r3, #24
 8007f14:	460d      	mov	r5, r1
 8007f16:	4614      	mov	r4, r2
 8007f18:	b09d      	sub	sp, #116	@ 0x74
 8007f1a:	d510      	bpl.n	8007f3e <_svfiprintf_r+0x36>
 8007f1c:	690b      	ldr	r3, [r1, #16]
 8007f1e:	b973      	cbnz	r3, 8007f3e <_svfiprintf_r+0x36>
 8007f20:	2140      	movs	r1, #64	@ 0x40
 8007f22:	f7ff ff09 	bl	8007d38 <_malloc_r>
 8007f26:	6028      	str	r0, [r5, #0]
 8007f28:	6128      	str	r0, [r5, #16]
 8007f2a:	b930      	cbnz	r0, 8007f3a <_svfiprintf_r+0x32>
 8007f2c:	230c      	movs	r3, #12
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295
 8007f34:	b01d      	add	sp, #116	@ 0x74
 8007f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3a:	2340      	movs	r3, #64	@ 0x40
 8007f3c:	616b      	str	r3, [r5, #20]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f42:	2320      	movs	r3, #32
 8007f44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f48:	2330      	movs	r3, #48	@ 0x30
 8007f4a:	f04f 0901 	mov.w	r9, #1
 8007f4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f52:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80080ec <_svfiprintf_r+0x1e4>
 8007f56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f5a:	4623      	mov	r3, r4
 8007f5c:	469a      	mov	sl, r3
 8007f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f62:	b10a      	cbz	r2, 8007f68 <_svfiprintf_r+0x60>
 8007f64:	2a25      	cmp	r2, #37	@ 0x25
 8007f66:	d1f9      	bne.n	8007f5c <_svfiprintf_r+0x54>
 8007f68:	ebba 0b04 	subs.w	fp, sl, r4
 8007f6c:	d00b      	beq.n	8007f86 <_svfiprintf_r+0x7e>
 8007f6e:	465b      	mov	r3, fp
 8007f70:	4622      	mov	r2, r4
 8007f72:	4629      	mov	r1, r5
 8007f74:	4638      	mov	r0, r7
 8007f76:	f7ff ff6b 	bl	8007e50 <__ssputs_r>
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	f000 80a7 	beq.w	80080ce <_svfiprintf_r+0x1c6>
 8007f80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f82:	445a      	add	r2, fp
 8007f84:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f86:	f89a 3000 	ldrb.w	r3, [sl]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 809f 	beq.w	80080ce <_svfiprintf_r+0x1c6>
 8007f90:	2300      	movs	r3, #0
 8007f92:	f04f 32ff 	mov.w	r2, #4294967295
 8007f96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f9a:	f10a 0a01 	add.w	sl, sl, #1
 8007f9e:	9304      	str	r3, [sp, #16]
 8007fa0:	9307      	str	r3, [sp, #28]
 8007fa2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007fa6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fa8:	4654      	mov	r4, sl
 8007faa:	2205      	movs	r2, #5
 8007fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb0:	484e      	ldr	r0, [pc, #312]	@ (80080ec <_svfiprintf_r+0x1e4>)
 8007fb2:	f000 fa5f 	bl	8008474 <memchr>
 8007fb6:	9a04      	ldr	r2, [sp, #16]
 8007fb8:	b9d8      	cbnz	r0, 8007ff2 <_svfiprintf_r+0xea>
 8007fba:	06d0      	lsls	r0, r2, #27
 8007fbc:	bf44      	itt	mi
 8007fbe:	2320      	movmi	r3, #32
 8007fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fc4:	0711      	lsls	r1, r2, #28
 8007fc6:	bf44      	itt	mi
 8007fc8:	232b      	movmi	r3, #43	@ 0x2b
 8007fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fce:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fd4:	d015      	beq.n	8008002 <_svfiprintf_r+0xfa>
 8007fd6:	4654      	mov	r4, sl
 8007fd8:	2000      	movs	r0, #0
 8007fda:	f04f 0c0a 	mov.w	ip, #10
 8007fde:	9a07      	ldr	r2, [sp, #28]
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fe6:	3b30      	subs	r3, #48	@ 0x30
 8007fe8:	2b09      	cmp	r3, #9
 8007fea:	d94b      	bls.n	8008084 <_svfiprintf_r+0x17c>
 8007fec:	b1b0      	cbz	r0, 800801c <_svfiprintf_r+0x114>
 8007fee:	9207      	str	r2, [sp, #28]
 8007ff0:	e014      	b.n	800801c <_svfiprintf_r+0x114>
 8007ff2:	eba0 0308 	sub.w	r3, r0, r8
 8007ff6:	fa09 f303 	lsl.w	r3, r9, r3
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	46a2      	mov	sl, r4
 8007ffe:	9304      	str	r3, [sp, #16]
 8008000:	e7d2      	b.n	8007fa8 <_svfiprintf_r+0xa0>
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	1d19      	adds	r1, r3, #4
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	9103      	str	r1, [sp, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	bfbb      	ittet	lt
 800800e:	425b      	neglt	r3, r3
 8008010:	f042 0202 	orrlt.w	r2, r2, #2
 8008014:	9307      	strge	r3, [sp, #28]
 8008016:	9307      	strlt	r3, [sp, #28]
 8008018:	bfb8      	it	lt
 800801a:	9204      	strlt	r2, [sp, #16]
 800801c:	7823      	ldrb	r3, [r4, #0]
 800801e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008020:	d10a      	bne.n	8008038 <_svfiprintf_r+0x130>
 8008022:	7863      	ldrb	r3, [r4, #1]
 8008024:	2b2a      	cmp	r3, #42	@ 0x2a
 8008026:	d132      	bne.n	800808e <_svfiprintf_r+0x186>
 8008028:	9b03      	ldr	r3, [sp, #12]
 800802a:	3402      	adds	r4, #2
 800802c:	1d1a      	adds	r2, r3, #4
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	9203      	str	r2, [sp, #12]
 8008032:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008036:	9305      	str	r3, [sp, #20]
 8008038:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80080f0 <_svfiprintf_r+0x1e8>
 800803c:	2203      	movs	r2, #3
 800803e:	4650      	mov	r0, sl
 8008040:	7821      	ldrb	r1, [r4, #0]
 8008042:	f000 fa17 	bl	8008474 <memchr>
 8008046:	b138      	cbz	r0, 8008058 <_svfiprintf_r+0x150>
 8008048:	2240      	movs	r2, #64	@ 0x40
 800804a:	9b04      	ldr	r3, [sp, #16]
 800804c:	eba0 000a 	sub.w	r0, r0, sl
 8008050:	4082      	lsls	r2, r0
 8008052:	4313      	orrs	r3, r2
 8008054:	3401      	adds	r4, #1
 8008056:	9304      	str	r3, [sp, #16]
 8008058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800805c:	2206      	movs	r2, #6
 800805e:	4825      	ldr	r0, [pc, #148]	@ (80080f4 <_svfiprintf_r+0x1ec>)
 8008060:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008064:	f000 fa06 	bl	8008474 <memchr>
 8008068:	2800      	cmp	r0, #0
 800806a:	d036      	beq.n	80080da <_svfiprintf_r+0x1d2>
 800806c:	4b22      	ldr	r3, [pc, #136]	@ (80080f8 <_svfiprintf_r+0x1f0>)
 800806e:	bb1b      	cbnz	r3, 80080b8 <_svfiprintf_r+0x1b0>
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	3307      	adds	r3, #7
 8008074:	f023 0307 	bic.w	r3, r3, #7
 8008078:	3308      	adds	r3, #8
 800807a:	9303      	str	r3, [sp, #12]
 800807c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800807e:	4433      	add	r3, r6
 8008080:	9309      	str	r3, [sp, #36]	@ 0x24
 8008082:	e76a      	b.n	8007f5a <_svfiprintf_r+0x52>
 8008084:	460c      	mov	r4, r1
 8008086:	2001      	movs	r0, #1
 8008088:	fb0c 3202 	mla	r2, ip, r2, r3
 800808c:	e7a8      	b.n	8007fe0 <_svfiprintf_r+0xd8>
 800808e:	2300      	movs	r3, #0
 8008090:	f04f 0c0a 	mov.w	ip, #10
 8008094:	4619      	mov	r1, r3
 8008096:	3401      	adds	r4, #1
 8008098:	9305      	str	r3, [sp, #20]
 800809a:	4620      	mov	r0, r4
 800809c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080a0:	3a30      	subs	r2, #48	@ 0x30
 80080a2:	2a09      	cmp	r2, #9
 80080a4:	d903      	bls.n	80080ae <_svfiprintf_r+0x1a6>
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0c6      	beq.n	8008038 <_svfiprintf_r+0x130>
 80080aa:	9105      	str	r1, [sp, #20]
 80080ac:	e7c4      	b.n	8008038 <_svfiprintf_r+0x130>
 80080ae:	4604      	mov	r4, r0
 80080b0:	2301      	movs	r3, #1
 80080b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80080b6:	e7f0      	b.n	800809a <_svfiprintf_r+0x192>
 80080b8:	ab03      	add	r3, sp, #12
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	462a      	mov	r2, r5
 80080be:	4638      	mov	r0, r7
 80080c0:	4b0e      	ldr	r3, [pc, #56]	@ (80080fc <_svfiprintf_r+0x1f4>)
 80080c2:	a904      	add	r1, sp, #16
 80080c4:	f3af 8000 	nop.w
 80080c8:	1c42      	adds	r2, r0, #1
 80080ca:	4606      	mov	r6, r0
 80080cc:	d1d6      	bne.n	800807c <_svfiprintf_r+0x174>
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	065b      	lsls	r3, r3, #25
 80080d2:	f53f af2d 	bmi.w	8007f30 <_svfiprintf_r+0x28>
 80080d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080d8:	e72c      	b.n	8007f34 <_svfiprintf_r+0x2c>
 80080da:	ab03      	add	r3, sp, #12
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	462a      	mov	r2, r5
 80080e0:	4638      	mov	r0, r7
 80080e2:	4b06      	ldr	r3, [pc, #24]	@ (80080fc <_svfiprintf_r+0x1f4>)
 80080e4:	a904      	add	r1, sp, #16
 80080e6:	f000 f87d 	bl	80081e4 <_printf_i>
 80080ea:	e7ed      	b.n	80080c8 <_svfiprintf_r+0x1c0>
 80080ec:	080085c2 	.word	0x080085c2
 80080f0:	080085c8 	.word	0x080085c8
 80080f4:	080085cc 	.word	0x080085cc
 80080f8:	00000000 	.word	0x00000000
 80080fc:	08007e51 	.word	0x08007e51

08008100 <_printf_common>:
 8008100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008104:	4616      	mov	r6, r2
 8008106:	4698      	mov	r8, r3
 8008108:	688a      	ldr	r2, [r1, #8]
 800810a:	690b      	ldr	r3, [r1, #16]
 800810c:	4607      	mov	r7, r0
 800810e:	4293      	cmp	r3, r2
 8008110:	bfb8      	it	lt
 8008112:	4613      	movlt	r3, r2
 8008114:	6033      	str	r3, [r6, #0]
 8008116:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800811a:	460c      	mov	r4, r1
 800811c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008120:	b10a      	cbz	r2, 8008126 <_printf_common+0x26>
 8008122:	3301      	adds	r3, #1
 8008124:	6033      	str	r3, [r6, #0]
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	0699      	lsls	r1, r3, #26
 800812a:	bf42      	ittt	mi
 800812c:	6833      	ldrmi	r3, [r6, #0]
 800812e:	3302      	addmi	r3, #2
 8008130:	6033      	strmi	r3, [r6, #0]
 8008132:	6825      	ldr	r5, [r4, #0]
 8008134:	f015 0506 	ands.w	r5, r5, #6
 8008138:	d106      	bne.n	8008148 <_printf_common+0x48>
 800813a:	f104 0a19 	add.w	sl, r4, #25
 800813e:	68e3      	ldr	r3, [r4, #12]
 8008140:	6832      	ldr	r2, [r6, #0]
 8008142:	1a9b      	subs	r3, r3, r2
 8008144:	42ab      	cmp	r3, r5
 8008146:	dc2b      	bgt.n	80081a0 <_printf_common+0xa0>
 8008148:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800814c:	6822      	ldr	r2, [r4, #0]
 800814e:	3b00      	subs	r3, #0
 8008150:	bf18      	it	ne
 8008152:	2301      	movne	r3, #1
 8008154:	0692      	lsls	r2, r2, #26
 8008156:	d430      	bmi.n	80081ba <_printf_common+0xba>
 8008158:	4641      	mov	r1, r8
 800815a:	4638      	mov	r0, r7
 800815c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008160:	47c8      	blx	r9
 8008162:	3001      	adds	r0, #1
 8008164:	d023      	beq.n	80081ae <_printf_common+0xae>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	6922      	ldr	r2, [r4, #16]
 800816a:	f003 0306 	and.w	r3, r3, #6
 800816e:	2b04      	cmp	r3, #4
 8008170:	bf14      	ite	ne
 8008172:	2500      	movne	r5, #0
 8008174:	6833      	ldreq	r3, [r6, #0]
 8008176:	f04f 0600 	mov.w	r6, #0
 800817a:	bf08      	it	eq
 800817c:	68e5      	ldreq	r5, [r4, #12]
 800817e:	f104 041a 	add.w	r4, r4, #26
 8008182:	bf08      	it	eq
 8008184:	1aed      	subeq	r5, r5, r3
 8008186:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800818a:	bf08      	it	eq
 800818c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008190:	4293      	cmp	r3, r2
 8008192:	bfc4      	itt	gt
 8008194:	1a9b      	subgt	r3, r3, r2
 8008196:	18ed      	addgt	r5, r5, r3
 8008198:	42b5      	cmp	r5, r6
 800819a:	d11a      	bne.n	80081d2 <_printf_common+0xd2>
 800819c:	2000      	movs	r0, #0
 800819e:	e008      	b.n	80081b2 <_printf_common+0xb2>
 80081a0:	2301      	movs	r3, #1
 80081a2:	4652      	mov	r2, sl
 80081a4:	4641      	mov	r1, r8
 80081a6:	4638      	mov	r0, r7
 80081a8:	47c8      	blx	r9
 80081aa:	3001      	adds	r0, #1
 80081ac:	d103      	bne.n	80081b6 <_printf_common+0xb6>
 80081ae:	f04f 30ff 	mov.w	r0, #4294967295
 80081b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b6:	3501      	adds	r5, #1
 80081b8:	e7c1      	b.n	800813e <_printf_common+0x3e>
 80081ba:	2030      	movs	r0, #48	@ 0x30
 80081bc:	18e1      	adds	r1, r4, r3
 80081be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80081c8:	4422      	add	r2, r4
 80081ca:	3302      	adds	r3, #2
 80081cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80081d0:	e7c2      	b.n	8008158 <_printf_common+0x58>
 80081d2:	2301      	movs	r3, #1
 80081d4:	4622      	mov	r2, r4
 80081d6:	4641      	mov	r1, r8
 80081d8:	4638      	mov	r0, r7
 80081da:	47c8      	blx	r9
 80081dc:	3001      	adds	r0, #1
 80081de:	d0e6      	beq.n	80081ae <_printf_common+0xae>
 80081e0:	3601      	adds	r6, #1
 80081e2:	e7d9      	b.n	8008198 <_printf_common+0x98>

080081e4 <_printf_i>:
 80081e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081e8:	7e0f      	ldrb	r7, [r1, #24]
 80081ea:	4691      	mov	r9, r2
 80081ec:	2f78      	cmp	r7, #120	@ 0x78
 80081ee:	4680      	mov	r8, r0
 80081f0:	460c      	mov	r4, r1
 80081f2:	469a      	mov	sl, r3
 80081f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80081f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80081fa:	d807      	bhi.n	800820c <_printf_i+0x28>
 80081fc:	2f62      	cmp	r7, #98	@ 0x62
 80081fe:	d80a      	bhi.n	8008216 <_printf_i+0x32>
 8008200:	2f00      	cmp	r7, #0
 8008202:	f000 80d1 	beq.w	80083a8 <_printf_i+0x1c4>
 8008206:	2f58      	cmp	r7, #88	@ 0x58
 8008208:	f000 80b8 	beq.w	800837c <_printf_i+0x198>
 800820c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008210:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008214:	e03a      	b.n	800828c <_printf_i+0xa8>
 8008216:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800821a:	2b15      	cmp	r3, #21
 800821c:	d8f6      	bhi.n	800820c <_printf_i+0x28>
 800821e:	a101      	add	r1, pc, #4	@ (adr r1, 8008224 <_printf_i+0x40>)
 8008220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008224:	0800827d 	.word	0x0800827d
 8008228:	08008291 	.word	0x08008291
 800822c:	0800820d 	.word	0x0800820d
 8008230:	0800820d 	.word	0x0800820d
 8008234:	0800820d 	.word	0x0800820d
 8008238:	0800820d 	.word	0x0800820d
 800823c:	08008291 	.word	0x08008291
 8008240:	0800820d 	.word	0x0800820d
 8008244:	0800820d 	.word	0x0800820d
 8008248:	0800820d 	.word	0x0800820d
 800824c:	0800820d 	.word	0x0800820d
 8008250:	0800838f 	.word	0x0800838f
 8008254:	080082bb 	.word	0x080082bb
 8008258:	08008349 	.word	0x08008349
 800825c:	0800820d 	.word	0x0800820d
 8008260:	0800820d 	.word	0x0800820d
 8008264:	080083b1 	.word	0x080083b1
 8008268:	0800820d 	.word	0x0800820d
 800826c:	080082bb 	.word	0x080082bb
 8008270:	0800820d 	.word	0x0800820d
 8008274:	0800820d 	.word	0x0800820d
 8008278:	08008351 	.word	0x08008351
 800827c:	6833      	ldr	r3, [r6, #0]
 800827e:	1d1a      	adds	r2, r3, #4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6032      	str	r2, [r6, #0]
 8008284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008288:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800828c:	2301      	movs	r3, #1
 800828e:	e09c      	b.n	80083ca <_printf_i+0x1e6>
 8008290:	6833      	ldr	r3, [r6, #0]
 8008292:	6820      	ldr	r0, [r4, #0]
 8008294:	1d19      	adds	r1, r3, #4
 8008296:	6031      	str	r1, [r6, #0]
 8008298:	0606      	lsls	r6, r0, #24
 800829a:	d501      	bpl.n	80082a0 <_printf_i+0xbc>
 800829c:	681d      	ldr	r5, [r3, #0]
 800829e:	e003      	b.n	80082a8 <_printf_i+0xc4>
 80082a0:	0645      	lsls	r5, r0, #25
 80082a2:	d5fb      	bpl.n	800829c <_printf_i+0xb8>
 80082a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	da03      	bge.n	80082b4 <_printf_i+0xd0>
 80082ac:	232d      	movs	r3, #45	@ 0x2d
 80082ae:	426d      	negs	r5, r5
 80082b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082b4:	230a      	movs	r3, #10
 80082b6:	4858      	ldr	r0, [pc, #352]	@ (8008418 <_printf_i+0x234>)
 80082b8:	e011      	b.n	80082de <_printf_i+0xfa>
 80082ba:	6821      	ldr	r1, [r4, #0]
 80082bc:	6833      	ldr	r3, [r6, #0]
 80082be:	0608      	lsls	r0, r1, #24
 80082c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80082c4:	d402      	bmi.n	80082cc <_printf_i+0xe8>
 80082c6:	0649      	lsls	r1, r1, #25
 80082c8:	bf48      	it	mi
 80082ca:	b2ad      	uxthmi	r5, r5
 80082cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80082ce:	6033      	str	r3, [r6, #0]
 80082d0:	bf14      	ite	ne
 80082d2:	230a      	movne	r3, #10
 80082d4:	2308      	moveq	r3, #8
 80082d6:	4850      	ldr	r0, [pc, #320]	@ (8008418 <_printf_i+0x234>)
 80082d8:	2100      	movs	r1, #0
 80082da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80082de:	6866      	ldr	r6, [r4, #4]
 80082e0:	2e00      	cmp	r6, #0
 80082e2:	60a6      	str	r6, [r4, #8]
 80082e4:	db05      	blt.n	80082f2 <_printf_i+0x10e>
 80082e6:	6821      	ldr	r1, [r4, #0]
 80082e8:	432e      	orrs	r6, r5
 80082ea:	f021 0104 	bic.w	r1, r1, #4
 80082ee:	6021      	str	r1, [r4, #0]
 80082f0:	d04b      	beq.n	800838a <_printf_i+0x1a6>
 80082f2:	4616      	mov	r6, r2
 80082f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80082f8:	fb03 5711 	mls	r7, r3, r1, r5
 80082fc:	5dc7      	ldrb	r7, [r0, r7]
 80082fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008302:	462f      	mov	r7, r5
 8008304:	42bb      	cmp	r3, r7
 8008306:	460d      	mov	r5, r1
 8008308:	d9f4      	bls.n	80082f4 <_printf_i+0x110>
 800830a:	2b08      	cmp	r3, #8
 800830c:	d10b      	bne.n	8008326 <_printf_i+0x142>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	07df      	lsls	r7, r3, #31
 8008312:	d508      	bpl.n	8008326 <_printf_i+0x142>
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	6861      	ldr	r1, [r4, #4]
 8008318:	4299      	cmp	r1, r3
 800831a:	bfde      	ittt	le
 800831c:	2330      	movle	r3, #48	@ 0x30
 800831e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008322:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008326:	1b92      	subs	r2, r2, r6
 8008328:	6122      	str	r2, [r4, #16]
 800832a:	464b      	mov	r3, r9
 800832c:	4621      	mov	r1, r4
 800832e:	4640      	mov	r0, r8
 8008330:	f8cd a000 	str.w	sl, [sp]
 8008334:	aa03      	add	r2, sp, #12
 8008336:	f7ff fee3 	bl	8008100 <_printf_common>
 800833a:	3001      	adds	r0, #1
 800833c:	d14a      	bne.n	80083d4 <_printf_i+0x1f0>
 800833e:	f04f 30ff 	mov.w	r0, #4294967295
 8008342:	b004      	add	sp, #16
 8008344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	f043 0320 	orr.w	r3, r3, #32
 800834e:	6023      	str	r3, [r4, #0]
 8008350:	2778      	movs	r7, #120	@ 0x78
 8008352:	4832      	ldr	r0, [pc, #200]	@ (800841c <_printf_i+0x238>)
 8008354:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	6831      	ldr	r1, [r6, #0]
 800835c:	061f      	lsls	r7, r3, #24
 800835e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008362:	d402      	bmi.n	800836a <_printf_i+0x186>
 8008364:	065f      	lsls	r7, r3, #25
 8008366:	bf48      	it	mi
 8008368:	b2ad      	uxthmi	r5, r5
 800836a:	6031      	str	r1, [r6, #0]
 800836c:	07d9      	lsls	r1, r3, #31
 800836e:	bf44      	itt	mi
 8008370:	f043 0320 	orrmi.w	r3, r3, #32
 8008374:	6023      	strmi	r3, [r4, #0]
 8008376:	b11d      	cbz	r5, 8008380 <_printf_i+0x19c>
 8008378:	2310      	movs	r3, #16
 800837a:	e7ad      	b.n	80082d8 <_printf_i+0xf4>
 800837c:	4826      	ldr	r0, [pc, #152]	@ (8008418 <_printf_i+0x234>)
 800837e:	e7e9      	b.n	8008354 <_printf_i+0x170>
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	f023 0320 	bic.w	r3, r3, #32
 8008386:	6023      	str	r3, [r4, #0]
 8008388:	e7f6      	b.n	8008378 <_printf_i+0x194>
 800838a:	4616      	mov	r6, r2
 800838c:	e7bd      	b.n	800830a <_printf_i+0x126>
 800838e:	6833      	ldr	r3, [r6, #0]
 8008390:	6825      	ldr	r5, [r4, #0]
 8008392:	1d18      	adds	r0, r3, #4
 8008394:	6961      	ldr	r1, [r4, #20]
 8008396:	6030      	str	r0, [r6, #0]
 8008398:	062e      	lsls	r6, r5, #24
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	d501      	bpl.n	80083a2 <_printf_i+0x1be>
 800839e:	6019      	str	r1, [r3, #0]
 80083a0:	e002      	b.n	80083a8 <_printf_i+0x1c4>
 80083a2:	0668      	lsls	r0, r5, #25
 80083a4:	d5fb      	bpl.n	800839e <_printf_i+0x1ba>
 80083a6:	8019      	strh	r1, [r3, #0]
 80083a8:	2300      	movs	r3, #0
 80083aa:	4616      	mov	r6, r2
 80083ac:	6123      	str	r3, [r4, #16]
 80083ae:	e7bc      	b.n	800832a <_printf_i+0x146>
 80083b0:	6833      	ldr	r3, [r6, #0]
 80083b2:	2100      	movs	r1, #0
 80083b4:	1d1a      	adds	r2, r3, #4
 80083b6:	6032      	str	r2, [r6, #0]
 80083b8:	681e      	ldr	r6, [r3, #0]
 80083ba:	6862      	ldr	r2, [r4, #4]
 80083bc:	4630      	mov	r0, r6
 80083be:	f000 f859 	bl	8008474 <memchr>
 80083c2:	b108      	cbz	r0, 80083c8 <_printf_i+0x1e4>
 80083c4:	1b80      	subs	r0, r0, r6
 80083c6:	6060      	str	r0, [r4, #4]
 80083c8:	6863      	ldr	r3, [r4, #4]
 80083ca:	6123      	str	r3, [r4, #16]
 80083cc:	2300      	movs	r3, #0
 80083ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083d2:	e7aa      	b.n	800832a <_printf_i+0x146>
 80083d4:	4632      	mov	r2, r6
 80083d6:	4649      	mov	r1, r9
 80083d8:	4640      	mov	r0, r8
 80083da:	6923      	ldr	r3, [r4, #16]
 80083dc:	47d0      	blx	sl
 80083de:	3001      	adds	r0, #1
 80083e0:	d0ad      	beq.n	800833e <_printf_i+0x15a>
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	079b      	lsls	r3, r3, #30
 80083e6:	d413      	bmi.n	8008410 <_printf_i+0x22c>
 80083e8:	68e0      	ldr	r0, [r4, #12]
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	4298      	cmp	r0, r3
 80083ee:	bfb8      	it	lt
 80083f0:	4618      	movlt	r0, r3
 80083f2:	e7a6      	b.n	8008342 <_printf_i+0x15e>
 80083f4:	2301      	movs	r3, #1
 80083f6:	4632      	mov	r2, r6
 80083f8:	4649      	mov	r1, r9
 80083fa:	4640      	mov	r0, r8
 80083fc:	47d0      	blx	sl
 80083fe:	3001      	adds	r0, #1
 8008400:	d09d      	beq.n	800833e <_printf_i+0x15a>
 8008402:	3501      	adds	r5, #1
 8008404:	68e3      	ldr	r3, [r4, #12]
 8008406:	9903      	ldr	r1, [sp, #12]
 8008408:	1a5b      	subs	r3, r3, r1
 800840a:	42ab      	cmp	r3, r5
 800840c:	dcf2      	bgt.n	80083f4 <_printf_i+0x210>
 800840e:	e7eb      	b.n	80083e8 <_printf_i+0x204>
 8008410:	2500      	movs	r5, #0
 8008412:	f104 0619 	add.w	r6, r4, #25
 8008416:	e7f5      	b.n	8008404 <_printf_i+0x220>
 8008418:	080085d3 	.word	0x080085d3
 800841c:	080085e4 	.word	0x080085e4

08008420 <memmove>:
 8008420:	4288      	cmp	r0, r1
 8008422:	b510      	push	{r4, lr}
 8008424:	eb01 0402 	add.w	r4, r1, r2
 8008428:	d902      	bls.n	8008430 <memmove+0x10>
 800842a:	4284      	cmp	r4, r0
 800842c:	4623      	mov	r3, r4
 800842e:	d807      	bhi.n	8008440 <memmove+0x20>
 8008430:	1e43      	subs	r3, r0, #1
 8008432:	42a1      	cmp	r1, r4
 8008434:	d008      	beq.n	8008448 <memmove+0x28>
 8008436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800843a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800843e:	e7f8      	b.n	8008432 <memmove+0x12>
 8008440:	4601      	mov	r1, r0
 8008442:	4402      	add	r2, r0
 8008444:	428a      	cmp	r2, r1
 8008446:	d100      	bne.n	800844a <memmove+0x2a>
 8008448:	bd10      	pop	{r4, pc}
 800844a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800844e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008452:	e7f7      	b.n	8008444 <memmove+0x24>

08008454 <_sbrk_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	2300      	movs	r3, #0
 8008458:	4d05      	ldr	r5, [pc, #20]	@ (8008470 <_sbrk_r+0x1c>)
 800845a:	4604      	mov	r4, r0
 800845c:	4608      	mov	r0, r1
 800845e:	602b      	str	r3, [r5, #0]
 8008460:	f7f7 fff0 	bl	8000444 <_sbrk>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_sbrk_r+0x1a>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_sbrk_r+0x1a>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	20001308 	.word	0x20001308

08008474 <memchr>:
 8008474:	4603      	mov	r3, r0
 8008476:	b510      	push	{r4, lr}
 8008478:	b2c9      	uxtb	r1, r1
 800847a:	4402      	add	r2, r0
 800847c:	4293      	cmp	r3, r2
 800847e:	4618      	mov	r0, r3
 8008480:	d101      	bne.n	8008486 <memchr+0x12>
 8008482:	2000      	movs	r0, #0
 8008484:	e003      	b.n	800848e <memchr+0x1a>
 8008486:	7804      	ldrb	r4, [r0, #0]
 8008488:	3301      	adds	r3, #1
 800848a:	428c      	cmp	r4, r1
 800848c:	d1f6      	bne.n	800847c <memchr+0x8>
 800848e:	bd10      	pop	{r4, pc}

08008490 <memcpy>:
 8008490:	440a      	add	r2, r1
 8008492:	4291      	cmp	r1, r2
 8008494:	f100 33ff 	add.w	r3, r0, #4294967295
 8008498:	d100      	bne.n	800849c <memcpy+0xc>
 800849a:	4770      	bx	lr
 800849c:	b510      	push	{r4, lr}
 800849e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084a2:	4291      	cmp	r1, r2
 80084a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084a8:	d1f9      	bne.n	800849e <memcpy+0xe>
 80084aa:	bd10      	pop	{r4, pc}

080084ac <_realloc_r>:
 80084ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b0:	4607      	mov	r7, r0
 80084b2:	4614      	mov	r4, r2
 80084b4:	460d      	mov	r5, r1
 80084b6:	b921      	cbnz	r1, 80084c2 <_realloc_r+0x16>
 80084b8:	4611      	mov	r1, r2
 80084ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084be:	f7ff bc3b 	b.w	8007d38 <_malloc_r>
 80084c2:	b92a      	cbnz	r2, 80084d0 <_realloc_r+0x24>
 80084c4:	f7ff fbce 	bl	8007c64 <_free_r>
 80084c8:	4625      	mov	r5, r4
 80084ca:	4628      	mov	r0, r5
 80084cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d0:	f000 f81a 	bl	8008508 <_malloc_usable_size_r>
 80084d4:	4284      	cmp	r4, r0
 80084d6:	4606      	mov	r6, r0
 80084d8:	d802      	bhi.n	80084e0 <_realloc_r+0x34>
 80084da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084de:	d8f4      	bhi.n	80084ca <_realloc_r+0x1e>
 80084e0:	4621      	mov	r1, r4
 80084e2:	4638      	mov	r0, r7
 80084e4:	f7ff fc28 	bl	8007d38 <_malloc_r>
 80084e8:	4680      	mov	r8, r0
 80084ea:	b908      	cbnz	r0, 80084f0 <_realloc_r+0x44>
 80084ec:	4645      	mov	r5, r8
 80084ee:	e7ec      	b.n	80084ca <_realloc_r+0x1e>
 80084f0:	42b4      	cmp	r4, r6
 80084f2:	4622      	mov	r2, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	bf28      	it	cs
 80084f8:	4632      	movcs	r2, r6
 80084fa:	f7ff ffc9 	bl	8008490 <memcpy>
 80084fe:	4629      	mov	r1, r5
 8008500:	4638      	mov	r0, r7
 8008502:	f7ff fbaf 	bl	8007c64 <_free_r>
 8008506:	e7f1      	b.n	80084ec <_realloc_r+0x40>

08008508 <_malloc_usable_size_r>:
 8008508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800850c:	1f18      	subs	r0, r3, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	bfbc      	itt	lt
 8008512:	580b      	ldrlt	r3, [r1, r0]
 8008514:	18c0      	addlt	r0, r0, r3
 8008516:	4770      	bx	lr

08008518 <_init>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	bf00      	nop
 800851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851e:	bc08      	pop	{r3}
 8008520:	469e      	mov	lr, r3
 8008522:	4770      	bx	lr

08008524 <_fini>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr
