
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b360  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800b46c  0800b46c  0000c46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b588  0800b588  0000d1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800b588  0800b588  0000d1ec  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800b588  0800b588  0000d1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b588  0800b588  0000c588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b58c  0800b58c  0000c58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800b590  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001528  200001f0  0800b77c  0000d1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001718  0800b77c  0000d718  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b5a  00000000  00000000  0000d215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049b3  00000000  00000000  00021d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00026728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e64  00000000  00000000  00027aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d889  00000000  00000000  00028904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fffa  00000000  00000000  0004618d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c445  00000000  00000000  00066187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f25cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ac  00000000  00000000  000f2610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000f78bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b454 	.word	0x0800b454

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	0800b454 	.word	0x0800b454

0800014c <apInit>:

#include "ap.h"


void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 57600);     //USB      (통신속도가 바뀌어서 통신이 안되지는 않음)
 8000150:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fd71 	bl	8000c3c <uartOpen>
	uartOpen(_DEF_UART2, 57600);     //UART			(통신속도가 바뀌면 그에 맞춰서 데이터를 보내줘야함)
 800015a:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800015e:	2001      	movs	r0, #1
 8000160:	f000 fd6c 	bl	8000c3c <uartOpen>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <apMain>:

void apMain(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b08c      	sub	sp, #48	@ 0x30
 800016c:	af00      	add	r7, sp, #0
	uint32_t pre_time;

	pre_time = millis();
 800016e:	f000 f8be 	bl	80002ee <millis>
 8000172:	62f8      	str	r0, [r7, #44]	@ 0x2c
	while(1)
	{
		if(millis() - pre_time >= 500)
 8000174:	f000 f8bb 	bl	80002ee <millis>
 8000178:	4602      	mov	r2, r0
 800017a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800017c:	1ad3      	subs	r3, r2, r3
 800017e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000182:	d305      	bcc.n	8000190 <apMain+0x28>
		{
			pre_time = millis();
 8000184:	f000 f8b3 	bl	80002ee <millis>
 8000188:	62f8      	str	r0, [r7, #44]	@ 0x2c
			ledToggle(_DEF_LED1);
 800018a:	2000      	movs	r0, #0
 800018c:	f000 fc80 	bl	8000a90 <ledToggle>

		}

		if(uartAvailable(_DEF_UART1) > 0)
 8000190:	2000      	movs	r0, #0
 8000192:	f000 fde9 	bl	8000d68 <uartAvailable>
 8000196:	4603      	mov	r3, r0
 8000198:	2b00      	cmp	r3, #0
 800019a:	d0eb      	beq.n	8000174 <apMain+0xc>
		{
			uint8_t rx_data;

			rx_data = uartRead(_DEF_UART1);
 800019c:	2000      	movs	r0, #0
 800019e:	f000 fe15 	bl	8000dcc <uartRead>
 80001a2:	4603      	mov	r3, r0
 80001a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

			if(rx_data == '1')
 80001a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80001ac:	2b31      	cmp	r3, #49	@ 0x31
 80001ae:	d11e      	bne.n	80001ee <apMain+0x86>
			{
				uint8_t buf[32];

				logPrintf("Read...\n");
 80001b0:	482d      	ldr	r0, [pc, #180]	@ (8000268 <apMain+0x100>)
 80001b2:	f00a fae3 	bl	800a77c <puts>

				flashRead(0x8000000 + (60*1024), buf, 32);      //안쓰는 영역을 위해 (60*1024)
 80001b6:	463b      	mov	r3, r7
 80001b8:	2220      	movs	r2, #32
 80001ba:	4619      	mov	r1, r3
 80001bc:	482b      	ldr	r0, [pc, #172]	@ (800026c <apMain+0x104>)
 80001be:	f000 fb87 	bl	80008d0 <flashRead>

				for(int i=0;i<32;i++)
 80001c2:	2300      	movs	r3, #0
 80001c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80001c6:	e00f      	b.n	80001e8 <apMain+0x80>
				{
					logPrintf("0x%X : 0x%X\n",0x8000000 + (60*1024)+i,buf[i]);
 80001c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80001ca:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80001ce:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 80001d2:	4639      	mov	r1, r7
 80001d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80001d6:	440a      	add	r2, r1
 80001d8:	7812      	ldrb	r2, [r2, #0]
 80001da:	4619      	mov	r1, r3
 80001dc:	4824      	ldr	r0, [pc, #144]	@ (8000270 <apMain+0x108>)
 80001de:	f00a fa65 	bl	800a6ac <iprintf>
				for(int i=0;i<32;i++)
 80001e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80001e4:	3301      	adds	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80001e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80001ea:	2b1f      	cmp	r3, #31
 80001ec:	ddec      	ble.n	80001c8 <apMain+0x60>
				}
			}

			if(rx_data == '2')
 80001ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80001f2:	2b32      	cmp	r3, #50	@ 0x32
 80001f4:	d110      	bne.n	8000218 <apMain+0xb0>
			{
				logPrintf("Erase...\n");
 80001f6:	481f      	ldr	r0, [pc, #124]	@ (8000274 <apMain+0x10c>)
 80001f8:	f00a fac0 	bl	800a77c <puts>

				if(flashErase(0x8000000 + (60*1024),32) == true)
 80001fc:	2120      	movs	r1, #32
 80001fe:	481b      	ldr	r0, [pc, #108]	@ (800026c <apMain+0x104>)
 8000200:	f000 fac8 	bl	8000794 <flashErase>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d003      	beq.n	8000212 <apMain+0xaa>
				{
					logPrintf("Erase OK\n");
 800020a:	481b      	ldr	r0, [pc, #108]	@ (8000278 <apMain+0x110>)
 800020c:	f00a fab6 	bl	800a77c <puts>
 8000210:	e002      	b.n	8000218 <apMain+0xb0>
				}
				else
				{
					logPrintf("Erase Fail\n");
 8000212:	481a      	ldr	r0, [pc, #104]	@ (800027c <apMain+0x114>)
 8000214:	f00a fab2 	bl	800a77c <puts>
				}
			}

			if(rx_data =='3')
 8000218:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800021c:	2b33      	cmp	r3, #51	@ 0x33
 800021e:	d1a9      	bne.n	8000174 <apMain+0xc>
			{
				uint8_t buf[32];

				for(int i=0;i<32;i++)
 8000220:	2300      	movs	r3, #0
 8000222:	627b      	str	r3, [r7, #36]	@ 0x24
 8000224:	e009      	b.n	800023a <apMain+0xd2>
				{
					buf[i] = i;
 8000226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000228:	b2d9      	uxtb	r1, r3
 800022a:	463a      	mov	r2, r7
 800022c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800022e:	4413      	add	r3, r2
 8000230:	460a      	mov	r2, r1
 8000232:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<32;i++)
 8000234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000236:	3301      	adds	r3, #1
 8000238:	627b      	str	r3, [r7, #36]	@ 0x24
 800023a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800023c:	2b1f      	cmp	r3, #31
 800023e:	ddf2      	ble.n	8000226 <apMain+0xbe>
				}
				logPrintf("Write...\n");
 8000240:	480f      	ldr	r0, [pc, #60]	@ (8000280 <apMain+0x118>)
 8000242:	f00a fa9b 	bl	800a77c <puts>

				if(flashWrite(0x8000000 + (60*1024),buf,32) == true)
 8000246:	463b      	mov	r3, r7
 8000248:	2220      	movs	r2, #32
 800024a:	4619      	mov	r1, r3
 800024c:	4807      	ldr	r0, [pc, #28]	@ (800026c <apMain+0x104>)
 800024e:	f000 faf7 	bl	8000840 <flashWrite>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d003      	beq.n	8000260 <apMain+0xf8>
				{
					logPrintf("Write Ok\n");
 8000258:	480a      	ldr	r0, [pc, #40]	@ (8000284 <apMain+0x11c>)
 800025a:	f00a fa8f 	bl	800a77c <puts>
 800025e:	e789      	b.n	8000174 <apMain+0xc>
				}
				else
				{
					logPrintf("Write Fail\n");
 8000260:	4809      	ldr	r0, [pc, #36]	@ (8000288 <apMain+0x120>)
 8000262:	f00a fa8b 	bl	800a77c <puts>
		if(millis() - pre_time >= 500)
 8000266:	e785      	b.n	8000174 <apMain+0xc>
 8000268:	0800b46c 	.word	0x0800b46c
 800026c:	0800f000 	.word	0x0800f000
 8000270:	0800b474 	.word	0x0800b474
 8000274:	0800b484 	.word	0x0800b484
 8000278:	0800b490 	.word	0x0800b490
 800027c:	0800b49c 	.word	0x0800b49c
 8000280:	0800b4a8 	.word	0x0800b4a8
 8000284:	0800b4b4 	.word	0x0800b4b4
 8000288:	0800b4c0 	.word	0x0800b4c0

0800028c <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
	 HAL_Init();
 8000292:	f000 fee9 	bl	8001068 <HAL_Init>
	 SystemClock_Config();
 8000296:	f000 f840 	bl	800031a <SystemClock_Config>

	 __HAL_RCC_GPIOD_CLK_ENABLE();
 800029a:	4b0e      	ldr	r3, [pc, #56]	@ (80002d4 <bspInit+0x48>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a0d      	ldr	r2, [pc, #52]	@ (80002d4 <bspInit+0x48>)
 80002a0:	f043 0320 	orr.w	r3, r3, #32
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <bspInit+0x48>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0320 	and.w	r3, r3, #32
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b2:	4b08      	ldr	r3, [pc, #32]	@ (80002d4 <bspInit+0x48>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a07      	ldr	r2, [pc, #28]	@ (80002d4 <bspInit+0x48>)
 80002b8:	f043 0304 	orr.w	r3, r3, #4
 80002bc:	6193      	str	r3, [r2, #24]
 80002be:	4b05      	ldr	r3, [pc, #20]	@ (80002d4 <bspInit+0x48>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f003 0304 	and.w	r3, r3, #4
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]



}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40021000 	.word	0x40021000

080002d8 <delay>:

void delay(uint32_t ms)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f000 ff23 	bl	800112c <HAL_Delay>
}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}

080002ee <millis>:

uint32_t millis(void)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80002f2:	f000 ff11 	bl	8001118 <HAL_GetTick>
 80002f6:	4603      	mov	r3, r0
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	bd80      	pop	{r7, pc}

080002fc <__io_putchar>:

int __io_putchar(int ch)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	//USB로 printf 캐릭터 전송

	uartWrite(_DEF_UART1,(uint8_t *)&ch,1);
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2201      	movs	r2, #1
 8000308:	4619      	mov	r1, r3
 800030a:	2000      	movs	r0, #0
 800030c:	f000 fd80 	bl	8000e10 <uartWrite>
	return 1;
 8000310:	2301      	movs	r3, #1
}
 8000312:	4618      	mov	r0, r3
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <SystemClock_Config>:



void SystemClock_Config(void)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b094      	sub	sp, #80	@ 0x50
 800031e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000320:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000324:	2228      	movs	r2, #40	@ 0x28
 8000326:	2100      	movs	r1, #0
 8000328:	4618      	mov	r0, r3
 800032a:	f00a fb07 	bl	800a93c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800034a:	2305      	movs	r3, #5
 800034c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	2301      	movs	r3, #1
 800035e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000360:	2302      	movs	r3, #2
 8000362:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000364:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000368:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800036e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000370:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000374:	4618      	mov	r0, r3
 8000376:	f003 fd19 	bl	8003dac <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000380:	f000 f82a 	bl	80003d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	230f      	movs	r3, #15
 8000386:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000388:	2302      	movs	r3, #2
 800038a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000394:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	2102      	movs	r1, #2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f003 ff85 	bl	80042b0 <HAL_RCC_ClockConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003ac:	f000 f814 	bl	80003d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80003b0:	2311      	movs	r3, #17
 80003b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80003b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4618      	mov	r0, r3
 80003c2:	f004 f903 	bl	80045cc <HAL_RCCEx_PeriphCLKConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003cc:	f000 f804 	bl	80003d8 <Error_Handler>
  }
}
 80003d0:	bf00      	nop
 80003d2:	3750      	adds	r7, #80	@ 0x50
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003dc:	b672      	cpsid	i
}
 80003de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <Error_Handler+0x8>

080003e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ea:	4b15      	ldr	r3, [pc, #84]	@ (8000440 <HAL_MspInit+0x5c>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a14      	ldr	r2, [pc, #80]	@ (8000440 <HAL_MspInit+0x5c>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6193      	str	r3, [r2, #24]
 80003f6:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <HAL_MspInit+0x5c>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	4a0e      	ldr	r2, [pc, #56]	@ (8000440 <HAL_MspInit+0x5c>)
 8000408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800040c:	61d3      	str	r3, [r2, #28]
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800041a:	4b0a      	ldr	r3, [pc, #40]	@ (8000444 <HAL_MspInit+0x60>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	4a04      	ldr	r2, [pc, #16]	@ (8000444 <HAL_MspInit+0x60>)
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	40021000 	.word	0x40021000
 8000444:	40010000 	.word	0x40010000

08000448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <NMI_Handler+0x4>

08000450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <HardFault_Handler+0x4>

08000458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <MemManage_Handler+0x4>

08000460 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <BusFault_Handler+0x4>

08000468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <UsageFault_Handler+0x4>

08000470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr

0800047c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000498:	f000 fe2c 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}

080004a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80004a4:	4802      	ldr	r0, [pc, #8]	@ (80004b0 <DMA1_Channel5_IRQHandler+0x10>)
 80004a6:	f001 f96f 	bl	8001788 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000594 	.word	0x20000594

080004b4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004b8:	4802      	ldr	r0, [pc, #8]	@ (80004c4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004ba:	f002 f826 	bl	800250a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200010d4 	.word	0x200010d4

080004c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004cc:	4802      	ldr	r0, [pc, #8]	@ (80004d8 <USART1_IRQHandler+0x10>)
 80004ce:	f004 fc5b 	bl	8004d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	2000054c 	.word	0x2000054c

080004dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	e00a      	b.n	8000504 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004ee:	f3af 8000 	nop.w
 80004f2:	4601      	mov	r1, r0
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	60ba      	str	r2, [r7, #8]
 80004fa:	b2ca      	uxtb	r2, r1
 80004fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	3301      	adds	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	dbf0      	blt.n	80004ee <_read+0x12>
  }

  return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b086      	sub	sp, #24
 800051a:	af00      	add	r7, sp, #0
 800051c:	60f8      	str	r0, [r7, #12]
 800051e:	60b9      	str	r1, [r7, #8]
 8000520:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	e009      	b.n	800053c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	60ba      	str	r2, [r7, #8]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fee3 	bl	80002fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3301      	adds	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	dbf1      	blt.n	8000528 <_write+0x12>
  }
  return len;
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <_close>:

int _close(int file)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000574:	605a      	str	r2, [r3, #4]
  return 0;
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <_isatty>:

int _isatty(int file)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000596:	b480      	push	{r7}
 8000598:	b085      	sub	sp, #20
 800059a:	af00      	add	r7, sp, #0
 800059c:	60f8      	str	r0, [r7, #12]
 800059e:	60b9      	str	r1, [r7, #8]
 80005a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
	...

080005b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b8:	4a14      	ldr	r2, [pc, #80]	@ (800060c <_sbrk+0x5c>)
 80005ba:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <_sbrk+0x60>)
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c4:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <_sbrk+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <_sbrk+0x64>)
 80005ce:	4a12      	ldr	r2, [pc, #72]	@ (8000618 <_sbrk+0x68>)
 80005d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005d2:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <_sbrk+0x64>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d207      	bcs.n	80005f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e0:	f00a f9fa 	bl	800a9d8 <__errno>
 80005e4:	4603      	mov	r3, r0
 80005e6:	220c      	movs	r2, #12
 80005e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	e009      	b.n	8000604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f0:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <_sbrk+0x64>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	4a05      	ldr	r2, [pc, #20]	@ (8000614 <_sbrk+0x64>)
 8000600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000602:	68fb      	ldr	r3, [r7, #12]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20005000 	.word	0x20005000
 8000610:	00000400 	.word	0x00000400
 8000614:	2000020c 	.word	0x2000020c
 8000618:	20001718 	.word	0x20001718

0800061c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000628:	f7ff fff8 	bl	800061c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800062c:	480b      	ldr	r0, [pc, #44]	@ (800065c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800062e:	490c      	ldr	r1, [pc, #48]	@ (8000660 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000630:	4a0c      	ldr	r2, [pc, #48]	@ (8000664 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a09      	ldr	r2, [pc, #36]	@ (8000668 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000644:	4c09      	ldr	r4, [pc, #36]	@ (800066c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000652:	f00a f9c7 	bl	800a9e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000656:	f009 ff5b 	bl	800a510 <main>
  bx lr
 800065a:	4770      	bx	lr
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000664:	0800b590 	.word	0x0800b590
  ldr r2, =_sbss
 8000668:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800066c:	20001718 	.word	0x20001718

08000670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC1_2_IRQHandler>

08000672 <qbufferCreate>:
{

}

bool   qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000672:	b480      	push	{r7}
 8000674:	b087      	sub	sp, #28
 8000676:	af00      	add	r7, sp, #0
 8000678:	60f8      	str	r0, [r7, #12]
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800067e:	2301      	movs	r3, #1
 8000680:	75fb      	strb	r3, [r7, #23]

  p_node->in	  = 0;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
  p_node->out 	= 0;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
  p_node->len 	= length;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	60da      	str	r2, [r3, #12]

  return ret;
 800069a:	7dfb      	ldrb	r3, [r7, #23]
}
 800069c:	4618      	mov	r0, r3
 800069e:	371c      	adds	r7, #28
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr

080006a6 <qbufferRead>:

	return ret;
}

bool   qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b087      	sub	sp, #28
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
	bool ret = true;
 80006b2:	2301      	movs	r3, #1
 80006b4:	75fb      	strb	r3, [r7, #23]

	for(int i=0; i<length; i++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	e026      	b.n	800070a <qbufferRead+0x64>
	{
		if (p_node->p_buf != NULL)
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d009      	beq.n	80006d8 <qbufferRead+0x32>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	68da      	ldr	r2, [r3, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	441a      	add	r2, r3
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	440b      	add	r3, r1
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	701a      	strb	r2, [r3, #0]
		}

		if(p_node->out != p_node->in)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	685a      	ldr	r2, [r3, #4]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d00c      	beq.n	80006fe <qbufferRead+0x58>
		{
			p_node->out = (p_node->out + 1) % p_node->len;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	6892      	ldr	r2, [r2, #8]
 80006ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80006f2:	fb01 f202 	mul.w	r2, r1, r2
 80006f6:	1a9a      	subs	r2, r3, r2
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	e002      	b.n	8000704 <qbufferRead+0x5e>
		}
		else
		{
			ret = false;
 80006fe:	2300      	movs	r3, #0
 8000700:	75fb      	strb	r3, [r7, #23]
			break;
 8000702:	e006      	b.n	8000712 <qbufferRead+0x6c>
	for(int i=0; i<length; i++)
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	3301      	adds	r3, #1
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	429a      	cmp	r2, r3
 8000710:	d8d4      	bhi.n	80006bc <qbufferRead+0x16>
		}
	}

	return ret;
 8000712:	7dfb      	ldrb	r3, [r7, #23]
}
 8000714:	4618      	mov	r0, r3
 8000716:	371c      	adds	r7, #28
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800071e:	b480      	push	{r7}
 8000720:	b085      	sub	sp, #20
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
	uint32_t ret;

	ret = (p_node->in - p_node->out) % p_node->len;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	6892      	ldr	r2, [r2, #8]
 8000734:	fbb3 f1f2 	udiv	r1, r3, r2
 8000738:	fb01 f202 	mul.w	r2, r1, r2
 800073c:	1a9b      	subs	r3, r3, r2
 800073e:	60fb      	str	r3, [r7, #12]

	return ret;
 8000740:	68fb      	ldr	r3, [r7, #12]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <flashInit>:
static flash_tbl_t flash_tbl[FLASH_SECTOR_MAX];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
	for (int i=0;i<FLASH_SECTOR_MAX;i++)
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	e012      	b.n	800077e <flashInit+0x32>
	{
		flash_tbl[i].addr =0x8000000 + i*1024;   //테이블 시트에 나와있은 시작 주소 0x8000000 에 sector 크기 1024(0x800U)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 800075e:	029b      	lsls	r3, r3, #10
 8000760:	4619      	mov	r1, r3
 8000762:	4a0b      	ldr	r2, [pc, #44]	@ (8000790 <flashInit+0x44>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		flash_tbl[i].length = 1024;
 800076a:	4a09      	ldr	r2, [pc, #36]	@ (8000790 <flashInit+0x44>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	4413      	add	r3, r2
 8000772:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000776:	809a      	strh	r2, [r3, #4]
	for (int i=0;i<FLASH_SECTOR_MAX;i++)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3301      	adds	r3, #1
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b3f      	cmp	r3, #63	@ 0x3f
 8000782:	dde9      	ble.n	8000758 <flashInit+0xc>
	}

	return true;
 8000784:	2301      	movs	r3, #1
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	20000210 	.word	0x20000210

08000794 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	@ 0x30
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
	bool ret = false;
 800079e:	2300      	movs	r3, #0
 80007a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	HAL_StatusTypeDef status;
	FLASH_EraseInitTypeDef init;
	uint32_t page_error;

	int16_t start_sector_num = -1;
 80007a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	uint32_t sector_count = 0 ;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28


	for(int i=0;i<FLASH_SECTOR_MAX;i++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80007b2:	e015      	b.n	80007e0 <flashErase+0x4c>
	{
		if(flashInSector(i,addr,length) == true)
 80007b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f8a9 	bl	8000914 <flashInSector>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d008      	beq.n	80007da <flashErase+0x46>
		{
			if(start_sector_num < 0)
 80007c8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	da01      	bge.n	80007d4 <flashErase+0x40>
			{
				start_sector_num = i;  //처음 검출되는 sector가 첫 넘버
 80007d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			}
			sector_count++;  //몇개의 sector를 지워야하는지
 80007d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007d6:	3301      	adds	r3, #1
 80007d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	for(int i=0;i<FLASH_SECTOR_MAX;i++)
 80007da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007dc:	3301      	adds	r3, #1
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
 80007e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80007e4:	dde6      	ble.n	80007b4 <flashErase+0x20>
		}
	}


	if(sector_count >0)
 80007e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d021      	beq.n	8000830 <flashErase+0x9c>
	{
		HAL_FLASH_Unlock();
 80007ec:	f001 f970 	bl	8001ad0 <HAL_FLASH_Unlock>
		init.TypeErase = FLASH_TYPEERASE_PAGES; //FLASH_EraseInitTypeDef 타고 들어가서 찾음
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
		init.Banks = FLASH_BANK_1;  // //FLASH_EraseInitTypeDef 타고 들어가서 찾음
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
		init.PageAddress = flash_tbl[start_sector_num].addr;
 80007f8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80007fc:	4a0f      	ldr	r2, [pc, #60]	@ (800083c <flashErase+0xa8>)
 80007fe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000802:	61bb      	str	r3, [r7, #24]
		init.NbPages    = sector_count;
 8000804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000806:	61fb      	str	r3, [r7, #28]
		status =  HAL_FLASHEx_Erase(&init,&page_error);
 8000808:	f107 020c 	add.w	r2, r7, #12
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fa44 	bl	8001ca0 <HAL_FLASHEx_Erase>
 8000818:	4603      	mov	r3, r0
 800081a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		if(status == HAL_OK)
 800081e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000822:	2b00      	cmp	r3, #0
 8000824:	d102      	bne.n	800082c <flashErase+0x98>
		{
			ret =true;
 8000826:	2301      	movs	r3, #1
 8000828:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		HAL_FLASH_Lock();
 800082c:	f001 f976 	bl	8001b1c <HAL_FLASH_Lock>
	}

	return ret;
 8000830:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f

}
 8000834:	4618      	mov	r0, r3
 8000836:	3730      	adds	r7, #48	@ 0x30
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000210 	.word	0x20000210

08000840 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8000840:	b5b0      	push	{r4, r5, r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
	bool ret =true;
 800084c:	2301      	movs	r3, #1
 800084e:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef status;

	if(addr%2 != 0)   //ALIGN 되지 않았으면 리턴
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <flashWrite+0x1e>
	{
		return false;
 800085a:	2300      	movs	r3, #0
 800085c:	e034      	b.n	80008c8 <flashWrite+0x88>
	}

	HAL_FLASH_Unlock();
 800085e:	f001 f937 	bl	8001ad0 <HAL_FLASH_Unlock>

	for(int i=0;i<length; i+=2)
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
 8000866:	e028      	b.n	80008ba <flashWrite+0x7a>
	{
		uint16_t data;

		data = p_data[i+0]  << 0 ;    //쉬프트를 하지 않는다
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	82fb      	strh	r3, [r7, #22]
		data |= p_data[i+1] << 8 ;   //16bit 변수로 만들어 준다?
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	3301      	adds	r3, #1
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b21b      	sxth	r3, r3
 800087e:	021b      	lsls	r3, r3, #8
 8000880:	b21a      	sxth	r2, r3
 8000882:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000886:	4313      	orrs	r3, r2
 8000888:	b21b      	sxth	r3, r3
 800088a:	82fb      	strh	r3, [r7, #22]

		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr +i , (uint64_t)data);
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	18d1      	adds	r1, r2, r3
 8000892:	8afb      	ldrh	r3, [r7, #22]
 8000894:	2200      	movs	r2, #0
 8000896:	461c      	mov	r4, r3
 8000898:	4615      	mov	r5, r2
 800089a:	4622      	mov	r2, r4
 800089c:	462b      	mov	r3, r5
 800089e:	2001      	movs	r0, #1
 80008a0:	f001 f8a6 	bl	80019f0 <HAL_FLASH_Program>
 80008a4:	4603      	mov	r3, r0
 80008a6:	757b      	strb	r3, [r7, #21]
		if(status != HAL_OK)
 80008a8:	7d7b      	ldrb	r3, [r7, #21]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <flashWrite+0x74>
		{
			ret =false;
 80008ae:	2300      	movs	r3, #0
 80008b0:	77fb      	strb	r3, [r7, #31]
			break;
 80008b2:	e006      	b.n	80008c2 <flashWrite+0x82>
	for(int i=0;i<length; i+=2)
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	3302      	adds	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d8d2      	bhi.n	8000868 <flashWrite+0x28>
		}
	}

	HAL_FLASH_Lock();
 80008c2:	f001 f92b 	bl	8001b1c <HAL_FLASH_Lock>
	return ret;
 80008c6:	7ffb      	ldrb	r3, [r7, #31]

}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bdb0      	pop	{r4, r5, r7, pc}

080008d0 <flashRead>:

bool flashRead(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b089      	sub	sp, #36	@ 0x24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
	bool ret =true;
 80008dc:	2301      	movs	r3, #1
 80008de:	76fb      	strb	r3, [r7, #27]

	uint8_t *p_byte = (uint8_t *)addr;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	617b      	str	r3, [r7, #20]

	for(int i=0;i<length;i++)
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
 80008e8:	e00a      	b.n	8000900 <flashRead+0x30>
	{
		p_data[i] = p_byte[i];
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	441a      	add	r2, r3
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	440b      	add	r3, r1
 80008f6:	7812      	ldrb	r2, [r2, #0]
 80008f8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<length;i++)
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3301      	adds	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	429a      	cmp	r2, r3
 8000906:	d8f0      	bhi.n	80008ea <flashRead+0x1a>
	}

	return ret;
 8000908:	7efb      	ldrb	r3, [r7, #27]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3724      	adds	r7, #36	@ 0x24
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <flashInSector>:


bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8000914:	b480      	push	{r7}
 8000916:	b08b      	sub	sp, #44	@ 0x2c
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
 8000920:	81fb      	strh	r3, [r7, #14]
	bool ret = false;
 8000922:	2300      	movs	r3, #0
 8000924:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t sector_start;
	uint32_t sector_end;
	uint32_t flash_start;
	uint32_t flash_end;

	sector_start = flash_tbl[sector_num].addr;
 8000928:	89fb      	ldrh	r3, [r7, #14]
 800092a:	4a25      	ldr	r2, [pc, #148]	@ (80009c0 <flashInSector+0xac>)
 800092c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000930:	623b      	str	r3, [r7, #32]
	sector_end = flash_tbl[sector_num].addr + flash_tbl[sector_num].length -1;
 8000932:	89fb      	ldrh	r3, [r7, #14]
 8000934:	4a22      	ldr	r2, [pc, #136]	@ (80009c0 <flashInSector+0xac>)
 8000936:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800093a:	89fb      	ldrh	r3, [r7, #14]
 800093c:	4920      	ldr	r1, [pc, #128]	@ (80009c0 <flashInSector+0xac>)
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	440b      	add	r3, r1
 8000942:	889b      	ldrh	r3, [r3, #4]
 8000944:	4413      	add	r3, r2
 8000946:	3b01      	subs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
	flash_start = addr;      //지워야 할 주소
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	61bb      	str	r3, [r7, #24]
	flash_end = addr + length -1;
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4413      	add	r3, r2
 8000954:	3b01      	subs	r3, #1
 8000956:	617b      	str	r3, [r7, #20]

	if(sector_start >=flash_start && sector_start <=flash_end)
 8000958:	6a3a      	ldr	r2, [r7, #32]
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	429a      	cmp	r2, r3
 800095e:	d306      	bcc.n	800096e <flashInSector+0x5a>
 8000960:	6a3a      	ldr	r2, [r7, #32]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	429a      	cmp	r2, r3
 8000966:	d802      	bhi.n	800096e <flashInSector+0x5a>
	{
		ret = true;
 8000968:	2301      	movs	r3, #1
 800096a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}
	if (sector_end >= flash_start && sector_end <= flash_end)
 800096e:	69fa      	ldr	r2, [r7, #28]
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	429a      	cmp	r2, r3
 8000974:	d306      	bcc.n	8000984 <flashInSector+0x70>
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	429a      	cmp	r2, r3
 800097c:	d802      	bhi.n	8000984 <flashInSector+0x70>
	{
		ret =true;
 800097e:	2301      	movs	r3, #1
 8000980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	if(flash_start >=sector_start && flash_start <= sector_end)
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	429a      	cmp	r2, r3
 800098a:	d306      	bcc.n	800099a <flashInSector+0x86>
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	429a      	cmp	r2, r3
 8000992:	d802      	bhi.n	800099a <flashInSector+0x86>
	{
		ret =true;
 8000994:	2301      	movs	r3, #1
 8000996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	if(flash_end >=sector_start && flash_end <= sector_end)
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d306      	bcc.n	80009b0 <flashInSector+0x9c>
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d802      	bhi.n	80009b0 <flashInSector+0x9c>
	{
		ret = true;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	//sector start 주소가 flash 주소 안에 있는지 and sector end 주소가 flash 주소 안에 있는지

//flash는  1Kbyte 64개로 이루어져 있음. 이 데이터시트는
	return ret;
 80009b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	372c      	adds	r7, #44	@ 0x2c
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000210 	.word	0x20000210

080009c4 <ledInit>:
};



bool ledInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0
	bool ret = true;
 80009ca:	2301      	movs	r3, #1
 80009cc:	76fb      	strb	r3, [r7, #27]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]

	 /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <ledInit+0x84>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a19      	ldr	r2, [pc, #100]	@ (8000a48 <ledInit+0x84>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <ledInit+0x84>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]

	 /*Configure GPIO pin : PB12 */

	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2302      	movs	r3, #2
 80009fe:	617b      	str	r3, [r7, #20]

	 for(int i=0;i<LED_MAX_CH;i++)
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
 8000a04:	e017      	b.n	8000a36 <ledInit+0x72>
	 {
		 GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000a06:	4a11      	ldr	r2, [pc, #68]	@ (8000a4c <ledInit+0x88>)
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	4413      	add	r3, r2
 8000a0e:	889b      	ldrh	r3, [r3, #4]
 8000a10:	60bb      	str	r3, [r7, #8]
		 HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000a12:	4a0e      	ldr	r2, [pc, #56]	@ (8000a4c <ledInit+0x88>)
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000a1a:	f107 0208 	add.w	r2, r7, #8
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 f9e5 	bl	8001df0 <HAL_GPIO_Init>
		 ledOff(i);
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f810 	bl	8000a50 <ledOff>
	 for(int i=0;i<LED_MAX_CH;i++)
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	3301      	adds	r3, #1
 8000a34:	61fb      	str	r3, [r7, #28]
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	dde4      	ble.n	8000a06 <ledInit+0x42>
	 }

	return ret;
 8000a3c:	7efb      	ldrb	r3, [r7, #27]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3720      	adds	r7, #32
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	20000004 	.word	0x20000004

08000a50 <ledOff>:
{
	if(ch >=LED_MAX_CH) return;
	 HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state); // Reset이 0
}
void ledOff(uint8_t ch)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	if(ch >=LED_MAX_CH) return;
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d111      	bne.n	8000a84 <ledOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <ledOff+0x3c>)
 8000a64:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	4a08      	ldr	r2, [pc, #32]	@ (8000a8c <ledOff+0x3c>)
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	4413      	add	r3, r2
 8000a70:	8899      	ldrh	r1, [r3, #4]
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4a05      	ldr	r2, [pc, #20]	@ (8000a8c <ledOff+0x3c>)
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	4413      	add	r3, r2
 8000a7a:	79db      	ldrb	r3, [r3, #7]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	f001 fbf7 	bl	8002270 <HAL_GPIO_WritePin>
 8000a82:	e000      	b.n	8000a86 <ledOff+0x36>
	if(ch >=LED_MAX_CH) return;
 8000a84:	bf00      	nop

}
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000004 	.word	0x20000004

08000a90 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
	if(ch >=LED_MAX_CH) return;
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d10d      	bne.n	8000abc <ledToggle+0x2c>
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4a08      	ldr	r2, [pc, #32]	@ (8000ac4 <ledToggle+0x34>)
 8000aa4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	4906      	ldr	r1, [pc, #24]	@ (8000ac4 <ledToggle+0x34>)
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	440b      	add	r3, r1
 8000ab0:	889b      	ldrh	r3, [r3, #4]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4610      	mov	r0, r2
 8000ab6:	f001 fbf3 	bl	80022a0 <HAL_GPIO_TogglePin>
 8000aba:	e000      	b.n	8000abe <ledToggle+0x2e>
	if(ch >=LED_MAX_CH) return;
 8000abc:	bf00      	nop
}
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
	bool ret = true;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	71fb      	strb	r3, [r7, #7]

	//만약 Reset 핀이 눌렸다면
	//delay 500ms 안에 다시 빠르게 누르면 레지스터 값이 증가
	if(RCC->CSR & (1<<26))
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <resetInit+0x50>)
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d012      	beq.n	8000b04 <resetInit+0x3c>
	{
		rtcBackupRegWrite(1,rtcBackupRegRead(1)+1);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f000 f84e 	bl	8000b80 <rtcBackupRegRead>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	2001      	movs	r0, #1
 8000aec:	f000 f858 	bl	8000ba0 <rtcBackupRegWrite>
		delay(500);
 8000af0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000af4:	f7ff fbf0 	bl	80002d8 <delay>
		reset_count = rtcBackupRegRead(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f000 f841 	bl	8000b80 <rtcBackupRegRead>
 8000afe:	4603      	mov	r3, r0
 8000b00:	4a06      	ldr	r2, [pc, #24]	@ (8000b1c <resetInit+0x54>)
 8000b02:	6013      	str	r3, [r2, #0]
	}

	rtcBackupRegWrite(1,0);
 8000b04:	2100      	movs	r1, #0
 8000b06:	2001      	movs	r0, #1
 8000b08:	f000 f84a 	bl	8000ba0 <rtcBackupRegWrite>

	return ret;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	20000410 	.word	0x20000410

08000b20 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
	bool ret = true;
 8000b26:	2301      	movs	r3, #1
 8000b28:	71fb      	strb	r3, [r7, #7]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <rtcInit+0x54>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	4a11      	ldr	r2, [pc, #68]	@ (8000b74 <rtcInit+0x54>)
 8000b30:	f043 0310 	orr.w	r3, r3, #16
 8000b34:	6193      	str	r3, [r2, #24]
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <rtcInit+0x54>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	f003 0310 	and.w	r3, r3, #16
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

	hrtc.Instance = RTC;
 8000b42:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <rtcInit+0x58>)
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <rtcInit+0x5c>)
 8000b46:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <rtcInit+0x58>)
 8000b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4e:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <rtcInit+0x58>)
 8000b52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b56:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b58:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <rtcInit+0x58>)
 8000b5a:	f003 fea3 	bl	80048a4 <HAL_RTC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <rtcInit+0x48>
	{
	   Error_Handler();
 8000b64:	f7ff fc38 	bl	80003d8 <Error_Handler>
	}


	return ret;
 8000b68:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000
 8000b78:	20000414 	.word	0x20000414
 8000b7c:	40002800 	.word	0x40002800

08000b80 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	4804      	ldr	r0, [pc, #16]	@ (8000b9c <rtcBackupRegRead+0x1c>)
 8000b8c:	f003 ffae 	bl	8004aec <HAL_RTCEx_BKUPRead>
 8000b90:	4603      	mov	r3, r0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000414 	.word	0x20000414

08000ba0 <rtcBackupRegWrite>:


void rtcBackupRegWrite(uint32_t index,uint32_t data)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	4803      	ldr	r0, [pc, #12]	@ (8000bbc <rtcBackupRegWrite+0x1c>)
 8000bb0:	f003 ff82 	bl	8004ab8 <HAL_RTCEx_BKUPWrite>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000414 	.word	0x20000414

08000bc0 <HAL_RTC_MspInit>:




void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000bfc <HAL_RTC_MspInit+0x3c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d110      	bne.n	8000bf4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000bd2:	f003 f8df 	bl	8003d94 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <HAL_RTC_MspInit+0x40>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a09      	ldr	r2, [pc, #36]	@ (8000c00 <HAL_RTC_MspInit+0x40>)
 8000bdc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <HAL_RTC_MspInit+0x40>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bee:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <HAL_RTC_MspInit+0x44>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40002800 	.word	0x40002800
 8000c00:	40021000 	.word	0x40021000
 8000c04:	4242043c 	.word	0x4242043c

08000c08 <uartInit>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_rx;


bool  uartInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
	for (int i=0; i<UART_MAX_CH;i++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	e007      	b.n	8000c24 <uartInit+0x1c>
	{
		is_open[i] = false;
 8000c14:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <uartInit+0x30>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<UART_MAX_CH;i++)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3301      	adds	r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	ddf4      	ble.n	8000c14 <uartInit+0xc>
	}

	return true;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000428 	.word	0x20000428

08000c3c <uartOpen>:

bool     uartOpen(uint8_t ch, uint32_t baud)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]


	switch(ch)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <uartOpen+0x1c>
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d007      	beq.n	8000c66 <uartOpen+0x2a>
 8000c56:	e074      	b.n	8000d42 <uartOpen+0x106>
	{
	case _DEF_UART1:
		is_open[ch] = true;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4a3c      	ldr	r2, [pc, #240]	@ (8000d4c <uartOpen+0x110>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	54d1      	strb	r1, [r2, r3]
		ret = true;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
		break;
 8000c64:	e06d      	b.n	8000d42 <uartOpen+0x106>

	case _DEF_UART2:
			huart1.Instance          = USART1;
 8000c66:	4b3a      	ldr	r3, [pc, #232]	@ (8000d50 <uartOpen+0x114>)
 8000c68:	4a3a      	ldr	r2, [pc, #232]	@ (8000d54 <uartOpen+0x118>)
 8000c6a:	601a      	str	r2, [r3, #0]
		  huart1.Init.BaudRate     = baud;
 8000c6c:	4a38      	ldr	r2, [pc, #224]	@ (8000d50 <uartOpen+0x114>)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	6053      	str	r3, [r2, #4]
		  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8000c72:	4b37      	ldr	r3, [pc, #220]	@ (8000d50 <uartOpen+0x114>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
		  huart1.Init.StopBits     = UART_STOPBITS_1;
 8000c78:	4b35      	ldr	r3, [pc, #212]	@ (8000d50 <uartOpen+0x114>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
		  huart1.Init.Parity       = UART_PARITY_NONE;
 8000c7e:	4b34      	ldr	r3, [pc, #208]	@ (8000d50 <uartOpen+0x114>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
		  huart1.Init.Mode         = UART_MODE_TX_RX;
 8000c84:	4b32      	ldr	r3, [pc, #200]	@ (8000d50 <uartOpen+0x114>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
		  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8000c8a:	4b31      	ldr	r3, [pc, #196]	@ (8000d50 <uartOpen+0x114>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
		  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b2f      	ldr	r3, [pc, #188]	@ (8000d50 <uartOpen+0x114>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]

		  qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d58 <uartOpen+0x11c>)
 8000c9c:	4413      	add	r3, r2
 8000c9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ca2:	492e      	ldr	r1, [pc, #184]	@ (8000d5c <uartOpen+0x120>)
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fce4 	bl	8000672 <qbufferCreate>

		  __HAL_RCC_DMA1_CLK_ENABLE();
 8000caa:	4b2d      	ldr	r3, [pc, #180]	@ (8000d60 <uartOpen+0x124>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4a2c      	ldr	r2, [pc, #176]	@ (8000d60 <uartOpen+0x124>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6153      	str	r3, [r2, #20]
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d60 <uartOpen+0x124>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
		  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f000 fb4f 	bl	800136a <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ccc:	200f      	movs	r0, #15
 8000cce:	f000 fb68 	bl	80013a2 <HAL_NVIC_EnableIRQ>

		  HAL_UART_DeInit(&huart1);
 8000cd2:	481f      	ldr	r0, [pc, #124]	@ (8000d50 <uartOpen+0x114>)
 8000cd4:	f003 ff76 	bl	8004bc4 <HAL_UART_DeInit>

		  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cd8:	481d      	ldr	r0, [pc, #116]	@ (8000d50 <uartOpen+0x114>)
 8000cda:	f003 ff23 	bl	8004b24 <HAL_UART_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d002      	beq.n	8000cea <uartOpen+0xae>
		  {
		  	ret = false;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]

		  	qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
		  	qbuffer[ch].out = qbuffer[ch].in;
		  }

		break;
 8000ce8:	e02a      	b.n	8000d40 <uartOpen+0x104>
		  	ret =true;
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
		  	is_open[ch]= true;
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4a16      	ldr	r2, [pc, #88]	@ (8000d4c <uartOpen+0x110>)
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	54d1      	strb	r1, [r2, r3]
		  	if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000cf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cfa:	4918      	ldr	r1, [pc, #96]	@ (8000d5c <uartOpen+0x120>)
 8000cfc:	4814      	ldr	r0, [pc, #80]	@ (8000d50 <uartOpen+0x114>)
 8000cfe:	f004 f81e 	bl	8004d3e <HAL_UART_Receive_DMA>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <uartOpen+0xd0>
		  			ret =false;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]
		  	qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <uartOpen+0x11c>)
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	4413      	add	r3, r2
 8000d14:	3308      	adds	r3, #8
 8000d16:	6819      	ldr	r1, [r3, #0]
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <uartOpen+0x128>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	1a8a      	subs	r2, r1, r2
 8000d22:	490d      	ldr	r1, [pc, #52]	@ (8000d58 <uartOpen+0x11c>)
 8000d24:	011b      	lsls	r3, r3, #4
 8000d26:	440b      	add	r3, r1
 8000d28:	601a      	str	r2, [r3, #0]
		  	qbuffer[ch].out = qbuffer[ch].in;
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	490a      	ldr	r1, [pc, #40]	@ (8000d58 <uartOpen+0x11c>)
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	440a      	add	r2, r1
 8000d34:	6812      	ldr	r2, [r2, #0]
 8000d36:	4908      	ldr	r1, [pc, #32]	@ (8000d58 <uartOpen+0x11c>)
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	440b      	add	r3, r1
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	601a      	str	r2, [r3, #0]
		break;
 8000d40:	bf00      	nop
	}


	return ret;
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000428 	.word	0x20000428
 8000d50:	2000054c 	.word	0x2000054c
 8000d54:	40013800 	.word	0x40013800
 8000d58:	2000042c 	.word	0x2000042c
 8000d5c:	2000044c 	.word	0x2000044c
 8000d60:	40021000 	.word	0x40021000
 8000d64:	20000594 	.word	0x20000594

08000d68 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]

	switch(ch)
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <uartAvailable+0x1a>
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d004      	beq.n	8000d8a <uartAvailable+0x22>
 8000d80:	e01b      	b.n	8000dba <uartAvailable+0x52>
	{
		case _DEF_UART1:
			ret = cdcAvailable();
 8000d82:	f008 fe23 	bl	80099cc <cdcAvailable>
 8000d86:	60f8      	str	r0, [r7, #12]
			break;
 8000d88:	e017      	b.n	8000dba <uartAvailable+0x52>
		case _DEF_UART2:
			qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <uartAvailable+0x5c>)
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	4413      	add	r3, r2
 8000d92:	3308      	adds	r3, #8
 8000d94:	6819      	ldr	r1, [r3, #0]
 8000d96:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <uartAvailable+0x60>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	1a8a      	subs	r2, r1, r2
 8000da0:	4908      	ldr	r1, [pc, #32]	@ (8000dc4 <uartAvailable+0x5c>)
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	440b      	add	r3, r1
 8000da6:	601a      	str	r2, [r3, #0]
			ret = qbufferAvailable(&qbuffer[ch]);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <uartAvailable+0x5c>)
 8000dae:	4413      	add	r3, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fcb4 	bl	800071e <qbufferAvailable>
 8000db6:	60f8      	str	r0, [r7, #12]
			break;
 8000db8:	bf00      	nop
	}

	return ret;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2000042c 	.word	0x2000042c
 8000dc8:	20000594 	.word	0x20000594

08000dcc <uartRead>:

uint8_t  uartRead(uint8_t ch)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret=0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <uartRead+0x1a>
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d005      	beq.n	8000df0 <uartRead+0x24>
 8000de4:	e00c      	b.n	8000e00 <uartRead+0x34>
	{
	case _DEF_UART1:
		ret = cdcRead();
 8000de6:	f008 fe0d 	bl	8009a04 <cdcRead>
 8000dea:	4603      	mov	r3, r0
 8000dec:	73fb      	strb	r3, [r7, #15]
		break;
 8000dee:	e007      	b.n	8000e00 <uartRead+0x34>

	case _DEF_UART2:
		qbufferRead(&qbuffer[_DEF_UART2],&ret,1);
 8000df0:	f107 030f 	add.w	r3, r7, #15
 8000df4:	2201      	movs	r2, #1
 8000df6:	4619      	mov	r1, r3
 8000df8:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <uartRead+0x40>)
 8000dfa:	f7ff fc54 	bl	80006a6 <qbufferRead>
		break;
 8000dfe:	bf00      	nop
	}

	return ret;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000043c 	.word	0x2000043c

08000e10 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data,uint32_t length)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	73fb      	strb	r3, [r7, #15]
	uint8_t ret=0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	switch(ch)
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <uartWrite+0x1e>
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d007      	beq.n	8000e3c <uartWrite+0x2c>
 8000e2c:	e015      	b.n	8000e5a <uartWrite+0x4a>
	{
	case _DEF_UART1:
		ret = cdcWrite(p_data,length);
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	68b8      	ldr	r0, [r7, #8]
 8000e32:	f008 fe39 	bl	8009aa8 <cdcWrite>
 8000e36:	4603      	mov	r3, r0
 8000e38:	75fb      	strb	r3, [r7, #23]
		break;
 8000e3a:	e00e      	b.n	8000e5a <uartWrite+0x4a>
	case _DEF_UART2:
		status = HAL_UART_Transmit(&huart1,p_data, length, 100);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	2364      	movs	r3, #100	@ 0x64
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	4807      	ldr	r0, [pc, #28]	@ (8000e64 <uartWrite+0x54>)
 8000e46:	f003 feef 	bl	8004c28 <HAL_UART_Transmit>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	75bb      	strb	r3, [r7, #22]

		if(status == HAL_OK)
 8000e4e:	7dbb      	ldrb	r3, [r7, #22]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <uartWrite+0x48>
		{
			ret = length;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	75fb      	strb	r3, [r7, #23]
		}
		break;
 8000e58:	bf00      	nop
	}
	return ret;
 8000e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000054c 	.word	0x2000054c

08000e68 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	if(huart->Instance ==USART1)
	{

	}
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr

08000e7a <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  		qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2],1);

  		HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a33      	ldr	r2, [pc, #204]	@ (8000f74 <HAL_UART_MspInit+0xe8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d15f      	bne.n	8000f6c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eac:	4b32      	ldr	r3, [pc, #200]	@ (8000f78 <HAL_UART_MspInit+0xec>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a31      	ldr	r2, [pc, #196]	@ (8000f78 <HAL_UART_MspInit+0xec>)
 8000eb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f78 <HAL_UART_MspInit+0xec>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f78 <HAL_UART_MspInit+0xec>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a2b      	ldr	r2, [pc, #172]	@ (8000f78 <HAL_UART_MspInit+0xec>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b29      	ldr	r3, [pc, #164]	@ (8000f78 <HAL_UART_MspInit+0xec>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000edc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ee0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4822      	ldr	r0, [pc, #136]	@ (8000f7c <HAL_UART_MspInit+0xf0>)
 8000ef2:	f000 ff7d 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4619      	mov	r1, r3
 8000f0a:	481c      	ldr	r0, [pc, #112]	@ (8000f7c <HAL_UART_MspInit+0xf0>)
 8000f0c:	f000 ff70 	bl	8001df0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <HAL_UART_MspInit+0xf4>)
 8000f12:	4a1c      	ldr	r2, [pc, #112]	@ (8000f84 <HAL_UART_MspInit+0xf8>)
 8000f14:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <HAL_UART_MspInit+0xf4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <HAL_UART_MspInit+0xf4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f22:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <HAL_UART_MspInit+0xf4>)
 8000f24:	2280      	movs	r2, #128	@ 0x80
 8000f26:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <HAL_UART_MspInit+0xf4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <HAL_UART_MspInit+0xf4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <HAL_UART_MspInit+0xf4>)
 8000f36:	2220      	movs	r2, #32
 8000f38:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <HAL_UART_MspInit+0xf4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f40:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <HAL_UART_MspInit+0xf4>)
 8000f42:	f000 fa57 	bl	80013f4 <HAL_DMA_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000f4c:	f7ff fa44 	bl	80003d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <HAL_UART_MspInit+0xf4>)
 8000f54:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <HAL_UART_MspInit+0xf4>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2025      	movs	r0, #37	@ 0x25
 8000f62:	f000 fa02 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f66:	2025      	movs	r0, #37	@ 0x25
 8000f68:	f000 fa1b 	bl	80013a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40013800 	.word	0x40013800
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010800 	.word	0x40010800
 8000f80:	20000594 	.word	0x20000594
 8000f84:	40020058 	.word	0x40020058

08000f88 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc8 <HAL_UART_MspDeInit+0x40>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d112      	bne.n	8000fc0 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <HAL_UART_MspDeInit+0x44>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <HAL_UART_MspDeInit+0x44>)
 8000fa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000fa4:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000fa6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000faa:	4809      	ldr	r0, [pc, #36]	@ (8000fd0 <HAL_UART_MspDeInit+0x48>)
 8000fac:	f001 f8a4 	bl	80020f8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 fa77 	bl	80014a8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000fba:	2025      	movs	r0, #37	@ 0x25
 8000fbc:	f000 f9ff 	bl	80013be <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40013800 	.word	0x40013800
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010800 	.word	0x40010800

08000fd4 <usbInit>:

#include "usb_device.h"


bool usbInit(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
	bool ret = true;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fee:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  //open drain
 8000ff0:	2311      	movs	r3, #17
 8000ff2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	480f      	ldr	r0, [pc, #60]	@ (8001040 <usbInit+0x6c>)
 8001002:	f000 fef5 	bl	8001df0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET); //회로에 풀업이
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800100c:	480c      	ldr	r0, [pc, #48]	@ (8001040 <usbInit+0x6c>)
 800100e:	f001 f92f 	bl	8002270 <HAL_GPIO_WritePin>
	delay(100);
 8001012:	2064      	movs	r0, #100	@ 0x64
 8001014:	f7ff f960 	bl	80002d8 <delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101e:	4808      	ldr	r0, [pc, #32]	@ (8001040 <usbInit+0x6c>)
 8001020:	f001 f926 	bl	8002270 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	4619      	mov	r1, r3
 800102c:	4804      	ldr	r0, [pc, #16]	@ (8001040 <usbInit+0x6c>)
 800102e:	f000 fedf 	bl	8001df0 <HAL_GPIO_Init>


	 MX_USB_DEVICE_Init();
 8001032:	f008 fc9b 	bl	800996c <MX_USB_DEVICE_Init>

	return ret;
 8001036:	7dfb      	ldrb	r3, [r7, #23]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40010800 	.word	0x40010800

08001044 <hwInit>:




void hwInit(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	bspInit();
 8001048:	f7ff f920 	bl	800028c <bspInit>
	rtcInit();
 800104c:	f7ff fd68 	bl	8000b20 <rtcInit>

	resetInit();
 8001050:	f7ff fd3a 	bl	8000ac8 <resetInit>
	ledInit();
 8001054:	f7ff fcb6 	bl	80009c4 <ledInit>
	usbInit();
 8001058:	f7ff ffbc 	bl	8000fd4 <usbInit>
	uartInit();
 800105c:	f7ff fdd4 	bl	8000c08 <uartInit>
	flashInit();
 8001060:	f7ff fb74 	bl	800074c <flashInit>

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <HAL_Init+0x28>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	@ (8001090 <HAL_Init+0x28>)
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f96b 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	200f      	movs	r0, #15
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff f9ae 	bl	80003e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40022000 	.word	0x40022000

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f991 	bl	80013da <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f94b 	bl	800136a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	@ (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000010 	.word	0x20000010
 80010f0:	2000000c 	.word	0x2000000c

080010f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <HAL_IncTick+0x1c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <HAL_IncTick+0x20>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a03      	ldr	r2, [pc, #12]	@ (8001114 <HAL_IncTick+0x20>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	20000010 	.word	0x20000010
 8001114:	200005d8 	.word	0x200005d8

08001118 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b02      	ldr	r3, [pc, #8]	@ (8001128 <HAL_GetTick+0x10>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	200005d8 	.word	0x200005d8

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff fff0 	bl	8001118 <HAL_GetTick>
 8001138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d005      	beq.n	8001152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001146:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <HAL_Delay+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001152:	bf00      	nop
 8001154:	f7ff ffe0 	bl	8001118 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d8f7      	bhi.n	8001154 <HAL_Delay+0x28>
  {
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000010 	.word	0x20000010

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800119c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db0b      	blt.n	8001202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	4906      	ldr	r1, [pc, #24]	@ (800120c <__NVIC_EnableIRQ+0x34>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db12      	blt.n	8001248 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	490a      	ldr	r1, [pc, #40]	@ (8001254 <__NVIC_DisableIRQ+0x44>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	3320      	adds	r3, #32
 8001238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800123c:	f3bf 8f4f 	dsb	sy
}
 8001240:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001242:	f3bf 8f6f 	isb	sy
}
 8001246:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e100 	.word	0xe000e100

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	@ (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	@ (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	@ 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	@ 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001320:	d301      	bcc.n	8001326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001322:	2301      	movs	r3, #1
 8001324:	e00f      	b.n	8001346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001326:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <SysTick_Config+0x40>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132e:	210f      	movs	r1, #15
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff ff90 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <SysTick_Config+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <SysTick_Config+0x40>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff09 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff1e 	bl	80011bc <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ff90 	bl	80012ac <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff5f 	bl	8001258 <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff11 	bl	80011d8 <__NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff1f 	bl	8001210 <__NVIC_DisableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff94 	bl	8001310 <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e043      	b.n	8001492 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	4b22      	ldr	r3, [pc, #136]	@ (800149c <HAL_DMA_Init+0xa8>)
 8001412:	4413      	add	r3, r2
 8001414:	4a22      	ldr	r2, [pc, #136]	@ (80014a0 <HAL_DMA_Init+0xac>)
 8001416:	fba2 2303 	umull	r2, r3, r2, r3
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	009a      	lsls	r2, r3, #2
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a1f      	ldr	r2, [pc, #124]	@ (80014a4 <HAL_DMA_Init+0xb0>)
 8001426:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2202      	movs	r2, #2
 800142c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800143e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001442:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800144c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001458:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001464:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	bffdfff8 	.word	0xbffdfff8
 80014a0:	cccccccd 	.word	0xcccccccd
 80014a4:	40020000 	.word	0x40020000

080014a8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e046      	b.n	8001548 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <HAL_DMA_DeInit+0xac>)
 80014f2:	4413      	add	r3, r2
 80014f4:	4a18      	ldr	r2, [pc, #96]	@ (8001558 <HAL_DMA_DeInit+0xb0>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	009a      	lsls	r2, r3, #2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a15      	ldr	r2, [pc, #84]	@ (800155c <HAL_DMA_DeInit+0xb4>)
 8001506:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001510:	2101      	movs	r1, #1
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	bffdfff8 	.word	0xbffdfff8
 8001558:	cccccccd 	.word	0xcccccccd
 800155c:	40020000 	.word	0x40020000

08001560 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_DMA_Start_IT+0x20>
 800157c:	2302      	movs	r3, #2
 800157e:	e04b      	b.n	8001618 <HAL_DMA_Start_IT+0xb8>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d13a      	bne.n	800160a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2202      	movs	r2, #2
 8001598:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0201 	bic.w	r2, r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 f9eb 	bl	8001994 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 020e 	orr.w	r2, r2, #14
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	e00f      	b.n	80015f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0204 	bic.w	r2, r2, #4
 80015e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 020a 	orr.w	r2, r2, #10
 80015f6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e005      	b.n	8001616 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001612:	2302      	movs	r3, #2
 8001614:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001616:	7dfb      	ldrb	r3, [r7, #23]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d008      	beq.n	800164a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2204      	movs	r2, #4
 800163c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e020      	b.n	800168c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 020e 	bic.w	r2, r2, #14
 8001658:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0201 	bic.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001672:	2101      	movs	r1, #1
 8001674:	fa01 f202 	lsl.w	r2, r1, r2
 8001678:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
	...

08001698 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d005      	beq.n	80016bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2204      	movs	r2, #4
 80016b4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	e051      	b.n	8001760 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 020e 	bic.w	r2, r2, #14
 80016ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0201 	bic.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a22      	ldr	r2, [pc, #136]	@ (800176c <HAL_DMA_Abort_IT+0xd4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d029      	beq.n	800173a <HAL_DMA_Abort_IT+0xa2>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a21      	ldr	r2, [pc, #132]	@ (8001770 <HAL_DMA_Abort_IT+0xd8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d022      	beq.n	8001736 <HAL_DMA_Abort_IT+0x9e>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001774 <HAL_DMA_Abort_IT+0xdc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d01a      	beq.n	8001730 <HAL_DMA_Abort_IT+0x98>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001778 <HAL_DMA_Abort_IT+0xe0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d012      	beq.n	800172a <HAL_DMA_Abort_IT+0x92>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1c      	ldr	r2, [pc, #112]	@ (800177c <HAL_DMA_Abort_IT+0xe4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00a      	beq.n	8001724 <HAL_DMA_Abort_IT+0x8c>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a1b      	ldr	r2, [pc, #108]	@ (8001780 <HAL_DMA_Abort_IT+0xe8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d102      	bne.n	800171e <HAL_DMA_Abort_IT+0x86>
 8001718:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800171c:	e00e      	b.n	800173c <HAL_DMA_Abort_IT+0xa4>
 800171e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001722:	e00b      	b.n	800173c <HAL_DMA_Abort_IT+0xa4>
 8001724:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001728:	e008      	b.n	800173c <HAL_DMA_Abort_IT+0xa4>
 800172a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800172e:	e005      	b.n	800173c <HAL_DMA_Abort_IT+0xa4>
 8001730:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001734:	e002      	b.n	800173c <HAL_DMA_Abort_IT+0xa4>
 8001736:	2310      	movs	r3, #16
 8001738:	e000      	b.n	800173c <HAL_DMA_Abort_IT+0xa4>
 800173a:	2301      	movs	r3, #1
 800173c:	4a11      	ldr	r2, [pc, #68]	@ (8001784 <HAL_DMA_Abort_IT+0xec>)
 800173e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	4798      	blx	r3
    } 
  }
  return status;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40020008 	.word	0x40020008
 8001770:	4002001c 	.word	0x4002001c
 8001774:	40020030 	.word	0x40020030
 8001778:	40020044 	.word	0x40020044
 800177c:	40020058 	.word	0x40020058
 8001780:	4002006c 	.word	0x4002006c
 8001784:	40020000 	.word	0x40020000

08001788 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	2204      	movs	r2, #4
 80017a6:	409a      	lsls	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d04f      	beq.n	8001850 <HAL_DMA_IRQHandler+0xc8>
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d04a      	beq.n	8001850 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d107      	bne.n	80017d8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0204 	bic.w	r2, r2, #4
 80017d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a66      	ldr	r2, [pc, #408]	@ (8001978 <HAL_DMA_IRQHandler+0x1f0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d029      	beq.n	8001836 <HAL_DMA_IRQHandler+0xae>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a65      	ldr	r2, [pc, #404]	@ (800197c <HAL_DMA_IRQHandler+0x1f4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d022      	beq.n	8001832 <HAL_DMA_IRQHandler+0xaa>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a63      	ldr	r2, [pc, #396]	@ (8001980 <HAL_DMA_IRQHandler+0x1f8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01a      	beq.n	800182c <HAL_DMA_IRQHandler+0xa4>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a62      	ldr	r2, [pc, #392]	@ (8001984 <HAL_DMA_IRQHandler+0x1fc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d012      	beq.n	8001826 <HAL_DMA_IRQHandler+0x9e>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a60      	ldr	r2, [pc, #384]	@ (8001988 <HAL_DMA_IRQHandler+0x200>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00a      	beq.n	8001820 <HAL_DMA_IRQHandler+0x98>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a5f      	ldr	r2, [pc, #380]	@ (800198c <HAL_DMA_IRQHandler+0x204>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d102      	bne.n	800181a <HAL_DMA_IRQHandler+0x92>
 8001814:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001818:	e00e      	b.n	8001838 <HAL_DMA_IRQHandler+0xb0>
 800181a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800181e:	e00b      	b.n	8001838 <HAL_DMA_IRQHandler+0xb0>
 8001820:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001824:	e008      	b.n	8001838 <HAL_DMA_IRQHandler+0xb0>
 8001826:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800182a:	e005      	b.n	8001838 <HAL_DMA_IRQHandler+0xb0>
 800182c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001830:	e002      	b.n	8001838 <HAL_DMA_IRQHandler+0xb0>
 8001832:	2340      	movs	r3, #64	@ 0x40
 8001834:	e000      	b.n	8001838 <HAL_DMA_IRQHandler+0xb0>
 8001836:	2304      	movs	r3, #4
 8001838:	4a55      	ldr	r2, [pc, #340]	@ (8001990 <HAL_DMA_IRQHandler+0x208>)
 800183a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 8094 	beq.w	800196e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800184e:	e08e      	b.n	800196e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001854:	2202      	movs	r2, #2
 8001856:	409a      	lsls	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d056      	beq.n	800190e <HAL_DMA_IRQHandler+0x186>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d051      	beq.n	800190e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0320 	and.w	r3, r3, #32
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10b      	bne.n	8001890 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 020a 	bic.w	r2, r2, #10
 8001886:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a38      	ldr	r2, [pc, #224]	@ (8001978 <HAL_DMA_IRQHandler+0x1f0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d029      	beq.n	80018ee <HAL_DMA_IRQHandler+0x166>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a37      	ldr	r2, [pc, #220]	@ (800197c <HAL_DMA_IRQHandler+0x1f4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d022      	beq.n	80018ea <HAL_DMA_IRQHandler+0x162>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a35      	ldr	r2, [pc, #212]	@ (8001980 <HAL_DMA_IRQHandler+0x1f8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d01a      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x15c>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a34      	ldr	r2, [pc, #208]	@ (8001984 <HAL_DMA_IRQHandler+0x1fc>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d012      	beq.n	80018de <HAL_DMA_IRQHandler+0x156>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a32      	ldr	r2, [pc, #200]	@ (8001988 <HAL_DMA_IRQHandler+0x200>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00a      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x150>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a31      	ldr	r2, [pc, #196]	@ (800198c <HAL_DMA_IRQHandler+0x204>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d102      	bne.n	80018d2 <HAL_DMA_IRQHandler+0x14a>
 80018cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80018d0:	e00e      	b.n	80018f0 <HAL_DMA_IRQHandler+0x168>
 80018d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018d6:	e00b      	b.n	80018f0 <HAL_DMA_IRQHandler+0x168>
 80018d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018dc:	e008      	b.n	80018f0 <HAL_DMA_IRQHandler+0x168>
 80018de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018e2:	e005      	b.n	80018f0 <HAL_DMA_IRQHandler+0x168>
 80018e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018e8:	e002      	b.n	80018f0 <HAL_DMA_IRQHandler+0x168>
 80018ea:	2320      	movs	r3, #32
 80018ec:	e000      	b.n	80018f0 <HAL_DMA_IRQHandler+0x168>
 80018ee:	2302      	movs	r3, #2
 80018f0:	4a27      	ldr	r2, [pc, #156]	@ (8001990 <HAL_DMA_IRQHandler+0x208>)
 80018f2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001900:	2b00      	cmp	r3, #0
 8001902:	d034      	beq.n	800196e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800190c:	e02f      	b.n	800196e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	2208      	movs	r2, #8
 8001914:	409a      	lsls	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d028      	beq.n	8001970 <HAL_DMA_IRQHandler+0x1e8>
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d023      	beq.n	8001970 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 020e 	bic.w	r2, r2, #14
 8001936:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001940:	2101      	movs	r1, #1
 8001942:	fa01 f202 	lsl.w	r2, r1, r2
 8001946:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	2b00      	cmp	r3, #0
 8001964:	d004      	beq.n	8001970 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	4798      	blx	r3
    }
  }
  return;
 800196e:	bf00      	nop
 8001970:	bf00      	nop
}
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40020008 	.word	0x40020008
 800197c:	4002001c 	.word	0x4002001c
 8001980:	40020030 	.word	0x40020030
 8001984:	40020044 	.word	0x40020044
 8001988:	40020058 	.word	0x40020058
 800198c:	4002006c 	.word	0x4002006c
 8001990:	40020000 	.word	0x40020000

08001994 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019aa:	2101      	movs	r1, #1
 80019ac:	fa01 f202 	lsl.w	r2, r1, r2
 80019b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d108      	bne.n	80019d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019d2:	e007      	b.n	80019e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	60da      	str	r2, [r3, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac8 <HAL_FLASH_Program+0xd8>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x26>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e054      	b.n	8001ac0 <HAL_FLASH_Program+0xd0>
 8001a16:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac8 <HAL_FLASH_Program+0xd8>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a20:	f000 f8a8 	bl	8001b74 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d144      	bne.n	8001ab8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d102      	bne.n	8001a3a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001a34:	2301      	movs	r3, #1
 8001a36:	757b      	strb	r3, [r7, #21]
 8001a38:	e007      	b.n	8001a4a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d102      	bne.n	8001a46 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001a40:	2302      	movs	r3, #2
 8001a42:	757b      	strb	r3, [r7, #21]
 8001a44:	e001      	b.n	8001a4a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001a46:	2304      	movs	r3, #4
 8001a48:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75bb      	strb	r3, [r7, #22]
 8001a4e:	e02d      	b.n	8001aac <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001a50:	7dbb      	ldrb	r3, [r7, #22]
 8001a52:	005a      	lsls	r2, r3, #1
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	eb02 0c03 	add.w	ip, r2, r3
 8001a5a:	7dbb      	ldrb	r3, [r7, #22]
 8001a5c:	0119      	lsls	r1, r3, #4
 8001a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a62:	f1c1 0620 	rsb	r6, r1, #32
 8001a66:	f1a1 0020 	sub.w	r0, r1, #32
 8001a6a:	fa22 f401 	lsr.w	r4, r2, r1
 8001a6e:	fa03 f606 	lsl.w	r6, r3, r6
 8001a72:	4334      	orrs	r4, r6
 8001a74:	fa23 f000 	lsr.w	r0, r3, r0
 8001a78:	4304      	orrs	r4, r0
 8001a7a:	fa23 f501 	lsr.w	r5, r3, r1
 8001a7e:	b2a3      	uxth	r3, r4
 8001a80:	4619      	mov	r1, r3
 8001a82:	4660      	mov	r0, ip
 8001a84:	f000 f85a 	bl	8001b3c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a88:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a8c:	f000 f872 	bl	8001b74 <FLASH_WaitForLastOperation>
 8001a90:	4603      	mov	r3, r0
 8001a92:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001a94:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <HAL_FLASH_Program+0xdc>)
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	4a0c      	ldr	r2, [pc, #48]	@ (8001acc <HAL_FLASH_Program+0xdc>)
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d107      	bne.n	8001ab6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001aa6:	7dbb      	ldrb	r3, [r7, #22]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	75bb      	strb	r3, [r7, #22]
 8001aac:	7dba      	ldrb	r2, [r7, #22]
 8001aae:	7d7b      	ldrb	r3, [r7, #21]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d3cd      	bcc.n	8001a50 <HAL_FLASH_Program+0x60>
 8001ab4:	e000      	b.n	8001ab8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001ab6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ab8:	4b03      	ldr	r3, [pc, #12]	@ (8001ac8 <HAL_FLASH_Program+0xd8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	761a      	strb	r2, [r3, #24]

  return status;
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac8:	200005e0 	.word	0x200005e0
 8001acc:	40022000 	.word	0x40022000

08001ad0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ada:	4b0d      	ldr	r3, [pc, #52]	@ (8001b10 <HAL_FLASH_Unlock+0x40>)
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00d      	beq.n	8001b02 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <HAL_FLASH_Unlock+0x40>)
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <HAL_FLASH_Unlock+0x44>)
 8001aea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <HAL_FLASH_Unlock+0x40>)
 8001aee:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <HAL_FLASH_Unlock+0x48>)
 8001af0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001af2:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <HAL_FLASH_Unlock+0x40>)
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001b02:	79fb      	ldrb	r3, [r7, #7]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000
 8001b14:	45670123 	.word	0x45670123
 8001b18:	cdef89ab 	.word	0xcdef89ab

08001b1c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_FLASH_Lock+0x1c>)
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <HAL_FLASH_Lock+0x1c>)
 8001b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b2a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40022000 	.word	0x40022000

08001b3c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b48:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <FLASH_Program_HalfWord+0x30>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b4e:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <FLASH_Program_HalfWord+0x34>)
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	4a07      	ldr	r2, [pc, #28]	@ (8001b70 <FLASH_Program_HalfWord+0x34>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	887a      	ldrh	r2, [r7, #2]
 8001b5e:	801a      	strh	r2, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	200005e0 	.word	0x200005e0
 8001b70:	40022000 	.word	0x40022000

08001b74 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001b7c:	f7ff facc 	bl	8001118 <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001b82:	e010      	b.n	8001ba6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8a:	d00c      	beq.n	8001ba6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <FLASH_WaitForLastOperation+0x2e>
 8001b92:	f7ff fac1 	bl	8001118 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d201      	bcs.n	8001ba6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e025      	b.n	8001bf2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <FLASH_WaitForLastOperation+0x88>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1e8      	bne.n	8001b84 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001bb2:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <FLASH_WaitForLastOperation+0x88>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001bfc <FLASH_WaitForLastOperation+0x88>)
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <FLASH_WaitForLastOperation+0x88>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10b      	bne.n	8001be8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <FLASH_WaitForLastOperation+0x88>)
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001bdc:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <FLASH_WaitForLastOperation+0x88>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001be8:	f000 f80a 	bl	8001c00 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40022000 	.word	0x40022000

08001c00 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001c0a:	4b23      	ldr	r3, [pc, #140]	@ (8001c98 <FLASH_SetErrorCode+0x98>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c16:	4b21      	ldr	r3, [pc, #132]	@ (8001c9c <FLASH_SetErrorCode+0x9c>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f043 0302 	orr.w	r3, r3, #2
 8001c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c9c <FLASH_SetErrorCode+0x9c>)
 8001c20:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f043 0310 	orr.w	r3, r3, #16
 8001c28:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c98 <FLASH_SetErrorCode+0x98>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001c36:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <FLASH_SetErrorCode+0x9c>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	4a17      	ldr	r2, [pc, #92]	@ (8001c9c <FLASH_SetErrorCode+0x9c>)
 8001c40:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001c4a:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <FLASH_SetErrorCode+0x98>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001c56:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <FLASH_SetErrorCode+0x9c>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c9c <FLASH_SetErrorCode+0x9c>)
 8001c60:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <FLASH_SetErrorCode+0x98>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a0c      	ldr	r2, [pc, #48]	@ (8001c98 <FLASH_SetErrorCode+0x98>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f240 1201 	movw	r2, #257	@ 0x101
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d106      	bne.n	8001c86 <FLASH_SetErrorCode+0x86>
 8001c78:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <FLASH_SetErrorCode+0x98>)
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	4a06      	ldr	r2, [pc, #24]	@ (8001c98 <FLASH_SetErrorCode+0x98>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	61d3      	str	r3, [r2, #28]
}  
 8001c84:	e002      	b.n	8001c8c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001c86:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <FLASH_SetErrorCode+0x98>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	60d3      	str	r3, [r2, #12]
}  
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40022000 	.word	0x40022000
 8001c9c:	200005e0 	.word	0x200005e0

08001ca0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d70 <HAL_FLASHEx_Erase+0xd0>)
 8001cb4:	7e1b      	ldrb	r3, [r3, #24]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_FLASHEx_Erase+0x1e>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e053      	b.n	8001d66 <HAL_FLASHEx_Erase+0xc6>
 8001cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001d70 <HAL_FLASHEx_Erase+0xd0>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d116      	bne.n	8001cfa <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001ccc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001cd0:	f7ff ff50 	bl	8001b74 <FLASH_WaitForLastOperation>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d141      	bne.n	8001d5e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f000 f84c 	bl	8001d78 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ce0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ce4:	f7ff ff46 	bl	8001b74 <FLASH_WaitForLastOperation>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001cec:	4b21      	ldr	r3, [pc, #132]	@ (8001d74 <HAL_FLASHEx_Erase+0xd4>)
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	4a20      	ldr	r2, [pc, #128]	@ (8001d74 <HAL_FLASHEx_Erase+0xd4>)
 8001cf2:	f023 0304 	bic.w	r3, r3, #4
 8001cf6:	6113      	str	r3, [r2, #16]
 8001cf8:	e031      	b.n	8001d5e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001cfa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001cfe:	f7ff ff39 	bl	8001b74 <FLASH_WaitForLastOperation>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d12a      	bne.n	8001d5e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	e019      	b.n	8001d4c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001d18:	68b8      	ldr	r0, [r7, #8]
 8001d1a:	f000 f849 	bl	8001db0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d1e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001d22:	f7ff ff27 	bl	8001b74 <FLASH_WaitForLastOperation>
 8001d26:	4603      	mov	r3, r0
 8001d28:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001d2a:	4b12      	ldr	r3, [pc, #72]	@ (8001d74 <HAL_FLASHEx_Erase+0xd4>)
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	4a11      	ldr	r2, [pc, #68]	@ (8001d74 <HAL_FLASHEx_Erase+0xd4>)
 8001d30:	f023 0302 	bic.w	r3, r3, #2
 8001d34:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	601a      	str	r2, [r3, #0]
            break;
 8001d42:	e00c      	b.n	8001d5e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d4a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	029a      	lsls	r2, r3, #10
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	4413      	add	r3, r2
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d3dc      	bcc.n	8001d18 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d5e:	4b04      	ldr	r3, [pc, #16]	@ (8001d70 <HAL_FLASHEx_Erase+0xd0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	761a      	strb	r2, [r3, #24]

  return status;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200005e0 	.word	0x200005e0
 8001d74:	40022000 	.word	0x40022000

08001d78 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d80:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <FLASH_MassErase+0x30>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001d86:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <FLASH_MassErase+0x34>)
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	4a08      	ldr	r2, [pc, #32]	@ (8001dac <FLASH_MassErase+0x34>)
 8001d8c:	f043 0304 	orr.w	r3, r3, #4
 8001d90:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <FLASH_MassErase+0x34>)
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	4a05      	ldr	r2, [pc, #20]	@ (8001dac <FLASH_MassErase+0x34>)
 8001d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d9c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	200005e0 	.word	0x200005e0
 8001dac:	40022000 	.word	0x40022000

08001db0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <FLASH_PageErase+0x38>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <FLASH_PageErase+0x3c>)
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dec <FLASH_PageErase+0x3c>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001dca:	4a08      	ldr	r2, [pc, #32]	@ (8001dec <FLASH_PageErase+0x3c>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <FLASH_PageErase+0x3c>)
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	4a05      	ldr	r2, [pc, #20]	@ (8001dec <FLASH_PageErase+0x3c>)
 8001dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dda:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	200005e0 	.word	0x200005e0
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b08b      	sub	sp, #44	@ 0x2c
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	e169      	b.n	80020d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e04:	2201      	movs	r2, #1
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 8158 	bne.w	80020d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a9a      	ldr	r2, [pc, #616]	@ (8002090 <HAL_GPIO_Init+0x2a0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d05e      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e2c:	4a98      	ldr	r2, [pc, #608]	@ (8002090 <HAL_GPIO_Init+0x2a0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d875      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e32:	4a98      	ldr	r2, [pc, #608]	@ (8002094 <HAL_GPIO_Init+0x2a4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d058      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e38:	4a96      	ldr	r2, [pc, #600]	@ (8002094 <HAL_GPIO_Init+0x2a4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d86f      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e3e:	4a96      	ldr	r2, [pc, #600]	@ (8002098 <HAL_GPIO_Init+0x2a8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d052      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e44:	4a94      	ldr	r2, [pc, #592]	@ (8002098 <HAL_GPIO_Init+0x2a8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d869      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e4a:	4a94      	ldr	r2, [pc, #592]	@ (800209c <HAL_GPIO_Init+0x2ac>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d04c      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e50:	4a92      	ldr	r2, [pc, #584]	@ (800209c <HAL_GPIO_Init+0x2ac>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d863      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e56:	4a92      	ldr	r2, [pc, #584]	@ (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d046      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e5c:	4a90      	ldr	r2, [pc, #576]	@ (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d85d      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e62:	2b12      	cmp	r3, #18
 8001e64:	d82a      	bhi.n	8001ebc <HAL_GPIO_Init+0xcc>
 8001e66:	2b12      	cmp	r3, #18
 8001e68:	d859      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e70 <HAL_GPIO_Init+0x80>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001eeb 	.word	0x08001eeb
 8001e74:	08001ec5 	.word	0x08001ec5
 8001e78:	08001ed7 	.word	0x08001ed7
 8001e7c:	08001f19 	.word	0x08001f19
 8001e80:	08001f1f 	.word	0x08001f1f
 8001e84:	08001f1f 	.word	0x08001f1f
 8001e88:	08001f1f 	.word	0x08001f1f
 8001e8c:	08001f1f 	.word	0x08001f1f
 8001e90:	08001f1f 	.word	0x08001f1f
 8001e94:	08001f1f 	.word	0x08001f1f
 8001e98:	08001f1f 	.word	0x08001f1f
 8001e9c:	08001f1f 	.word	0x08001f1f
 8001ea0:	08001f1f 	.word	0x08001f1f
 8001ea4:	08001f1f 	.word	0x08001f1f
 8001ea8:	08001f1f 	.word	0x08001f1f
 8001eac:	08001f1f 	.word	0x08001f1f
 8001eb0:	08001f1f 	.word	0x08001f1f
 8001eb4:	08001ecd 	.word	0x08001ecd
 8001eb8:	08001ee1 	.word	0x08001ee1
 8001ebc:	4a79      	ldr	r2, [pc, #484]	@ (80020a4 <HAL_GPIO_Init+0x2b4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ec2:	e02c      	b.n	8001f1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e029      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e024      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	3308      	adds	r3, #8
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e01f      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e01a      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e013      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f00:	2308      	movs	r3, #8
 8001f02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	611a      	str	r2, [r3, #16]
          break;
 8001f0a:	e009      	b.n	8001f20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	615a      	str	r2, [r3, #20]
          break;
 8001f16:	e003      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
          break;
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          break;
 8001f1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2bff      	cmp	r3, #255	@ 0xff
 8001f24:	d801      	bhi.n	8001f2a <HAL_GPIO_Init+0x13a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	e001      	b.n	8001f2e <HAL_GPIO_Init+0x13e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2bff      	cmp	r3, #255	@ 0xff
 8001f34:	d802      	bhi.n	8001f3c <HAL_GPIO_Init+0x14c>
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	e002      	b.n	8001f42 <HAL_GPIO_Init+0x152>
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	3b08      	subs	r3, #8
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	210f      	movs	r1, #15
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	6a39      	ldr	r1, [r7, #32]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80b1 	beq.w	80020d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f70:	4b4d      	ldr	r3, [pc, #308]	@ (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a4c      	ldr	r2, [pc, #304]	@ (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f88:	4a48      	ldr	r2, [pc, #288]	@ (80020ac <HAL_GPIO_Init+0x2bc>)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a40      	ldr	r2, [pc, #256]	@ (80020b0 <HAL_GPIO_Init+0x2c0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d013      	beq.n	8001fdc <HAL_GPIO_Init+0x1ec>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3f      	ldr	r2, [pc, #252]	@ (80020b4 <HAL_GPIO_Init+0x2c4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00d      	beq.n	8001fd8 <HAL_GPIO_Init+0x1e8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3e      	ldr	r2, [pc, #248]	@ (80020b8 <HAL_GPIO_Init+0x2c8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <HAL_GPIO_Init+0x1e4>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3d      	ldr	r2, [pc, #244]	@ (80020bc <HAL_GPIO_Init+0x2cc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d101      	bne.n	8001fd0 <HAL_GPIO_Init+0x1e0>
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e006      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	e004      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e002      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe0:	f002 0203 	and.w	r2, r2, #3
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	4093      	lsls	r3, r2
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fee:	492f      	ldr	r1, [pc, #188]	@ (80020ac <HAL_GPIO_Init+0x2bc>)
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002008:	4b2d      	ldr	r3, [pc, #180]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	492c      	ldr	r1, [pc, #176]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	608b      	str	r3, [r1, #8]
 8002014:	e006      	b.n	8002024 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002016:	4b2a      	ldr	r3, [pc, #168]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	43db      	mvns	r3, r3
 800201e:	4928      	ldr	r1, [pc, #160]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002020:	4013      	ands	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002030:	4b23      	ldr	r3, [pc, #140]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	4922      	ldr	r1, [pc, #136]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	60cb      	str	r3, [r1, #12]
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800203e:	4b20      	ldr	r3, [pc, #128]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	43db      	mvns	r3, r3
 8002046:	491e      	ldr	r1, [pc, #120]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002048:	4013      	ands	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002058:	4b19      	ldr	r3, [pc, #100]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	4918      	ldr	r1, [pc, #96]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002066:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	43db      	mvns	r3, r3
 800206e:	4914      	ldr	r1, [pc, #80]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002070:	4013      	ands	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d021      	beq.n	80020c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002080:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	490e      	ldr	r1, [pc, #56]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e021      	b.n	80020d2 <HAL_GPIO_Init+0x2e2>
 800208e:	bf00      	nop
 8002090:	10320000 	.word	0x10320000
 8002094:	10310000 	.word	0x10310000
 8002098:	10220000 	.word	0x10220000
 800209c:	10210000 	.word	0x10210000
 80020a0:	10120000 	.word	0x10120000
 80020a4:	10110000 	.word	0x10110000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40010800 	.word	0x40010800
 80020b4:	40010c00 	.word	0x40010c00
 80020b8:	40011000 	.word	0x40011000
 80020bc:	40011400 	.word	0x40011400
 80020c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <HAL_GPIO_Init+0x304>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	4909      	ldr	r1, [pc, #36]	@ (80020f4 <HAL_GPIO_Init+0x304>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	3301      	adds	r3, #1
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f47f ae8e 	bne.w	8001e04 <HAL_GPIO_Init+0x14>
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	372c      	adds	r7, #44	@ 0x2c
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	40010400 	.word	0x40010400

080020f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	@ 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002106:	e09a      	b.n	800223e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002108:	2201      	movs	r2, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 808d 	beq.w	8002238 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800211e:	4a4e      	ldr	r2, [pc, #312]	@ (8002258 <HAL_GPIO_DeInit+0x160>)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	220f      	movs	r2, #15
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4013      	ands	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a46      	ldr	r2, [pc, #280]	@ (800225c <HAL_GPIO_DeInit+0x164>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d013      	beq.n	8002170 <HAL_GPIO_DeInit+0x78>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a45      	ldr	r2, [pc, #276]	@ (8002260 <HAL_GPIO_DeInit+0x168>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00d      	beq.n	800216c <HAL_GPIO_DeInit+0x74>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a44      	ldr	r2, [pc, #272]	@ (8002264 <HAL_GPIO_DeInit+0x16c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d007      	beq.n	8002168 <HAL_GPIO_DeInit+0x70>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a43      	ldr	r2, [pc, #268]	@ (8002268 <HAL_GPIO_DeInit+0x170>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d101      	bne.n	8002164 <HAL_GPIO_DeInit+0x6c>
 8002160:	2303      	movs	r3, #3
 8002162:	e006      	b.n	8002172 <HAL_GPIO_DeInit+0x7a>
 8002164:	2304      	movs	r3, #4
 8002166:	e004      	b.n	8002172 <HAL_GPIO_DeInit+0x7a>
 8002168:	2302      	movs	r3, #2
 800216a:	e002      	b.n	8002172 <HAL_GPIO_DeInit+0x7a>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_GPIO_DeInit+0x7a>
 8002170:	2300      	movs	r3, #0
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	f002 0203 	and.w	r2, r2, #3
 8002178:	0092      	lsls	r2, r2, #2
 800217a:	4093      	lsls	r3, r2
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	429a      	cmp	r2, r3
 8002180:	d132      	bne.n	80021e8 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002182:	4b3a      	ldr	r3, [pc, #232]	@ (800226c <HAL_GPIO_DeInit+0x174>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	43db      	mvns	r3, r3
 800218a:	4938      	ldr	r1, [pc, #224]	@ (800226c <HAL_GPIO_DeInit+0x174>)
 800218c:	4013      	ands	r3, r2
 800218e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002190:	4b36      	ldr	r3, [pc, #216]	@ (800226c <HAL_GPIO_DeInit+0x174>)
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	43db      	mvns	r3, r3
 8002198:	4934      	ldr	r1, [pc, #208]	@ (800226c <HAL_GPIO_DeInit+0x174>)
 800219a:	4013      	ands	r3, r2
 800219c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800219e:	4b33      	ldr	r3, [pc, #204]	@ (800226c <HAL_GPIO_DeInit+0x174>)
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	4931      	ldr	r1, [pc, #196]	@ (800226c <HAL_GPIO_DeInit+0x174>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80021ac:	4b2f      	ldr	r3, [pc, #188]	@ (800226c <HAL_GPIO_DeInit+0x174>)
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	492d      	ldr	r1, [pc, #180]	@ (800226c <HAL_GPIO_DeInit+0x174>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80021ca:	4a23      	ldr	r2, [pc, #140]	@ (8002258 <HAL_GPIO_DeInit+0x160>)
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	3302      	adds	r3, #2
 80021d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	43da      	mvns	r2, r3
 80021da:	481f      	ldr	r0, [pc, #124]	@ (8002258 <HAL_GPIO_DeInit+0x160>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	400a      	ands	r2, r1
 80021e2:	3302      	adds	r3, #2
 80021e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2bff      	cmp	r3, #255	@ 0xff
 80021ec:	d801      	bhi.n	80021f2 <HAL_GPIO_DeInit+0xfa>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_DeInit+0xfe>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2bff      	cmp	r3, #255	@ 0xff
 80021fc:	d802      	bhi.n	8002204 <HAL_GPIO_DeInit+0x10c>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_DeInit+0x112>
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	3b08      	subs	r3, #8
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	210f      	movs	r1, #15
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	401a      	ands	r2, r3
 800221c:	2104      	movs	r1, #4
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	431a      	orrs	r2, r3
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	43db      	mvns	r3, r3
 8002232:	401a      	ands	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	3301      	adds	r3, #1
 800223c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	f47f af5e 	bne.w	8002108 <HAL_GPIO_DeInit+0x10>
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	3724      	adds	r7, #36	@ 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	40010000 	.word	0x40010000
 800225c:	40010800 	.word	0x40010800
 8002260:	40010c00 	.word	0x40010c00
 8002264:	40011000 	.word	0x40011000
 8002268:	40011400 	.word	0x40011400
 800226c:	40010400 	.word	0x40010400

08002270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800228c:	e003      	b.n	8002296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	611a      	str	r2, [r3, #16]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022b2:	887a      	ldrh	r2, [r7, #2]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4013      	ands	r3, r2
 80022b8:	041a      	lsls	r2, r3, #16
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	43d9      	mvns	r1, r3
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	400b      	ands	r3, r1
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	611a      	str	r2, [r3, #16]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0e8      	b.n	80024b6 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d106      	bne.n	80022fe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f007 fe5f 	bl	8009fbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2203      	movs	r2, #3
 8002302:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f003 fc4c 	bl	8005bae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3304      	adds	r3, #4
 800231e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002320:	f003 fc22 	bl	8005b68 <USB_CoreInit>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e0bf      	b.n	80024b6 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f003 fc50 	bl	8005be2 <USB_SetCurrentMode>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0b0      	b.n	80024b6 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e03e      	b.n	80023d8 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	3311      	adds	r3, #17
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	3310      	adds	r3, #16
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	3313      	adds	r3, #19
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	440b      	add	r3, r1
 80023a4:	3320      	adds	r3, #32
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	3324      	adds	r3, #36	@ 0x24
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	3301      	adds	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	791b      	ldrb	r3, [r3, #4]
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d3bb      	bcc.n	800235a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
 80023e6:	e044      	b.n	8002472 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	440b      	add	r3, r1
 80023f6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	440b      	add	r3, r1
 800240c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800242a:	7bfa      	ldrb	r2, [r7, #15]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	440b      	add	r3, r1
 8002438:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	3301      	adds	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	791b      	ldrb	r3, [r3, #4]
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	429a      	cmp	r2, r3
 800247a:	d3b5      	bcc.n	80023e8 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3304      	adds	r3, #4
 8002484:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002486:	f003 fbb8 	bl	8005bfa <USB_DevInit>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e00c      	b.n	80024b6 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f005 fe37 	bl	8008122 <USB_DevDisconnect>

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_PCD_Start+0x16>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e016      	b.n	8002502 <HAL_PCD_Start+0x44>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f003 fb4e 	bl	8005b82 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80024e6:	2101      	movs	r1, #1
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f007 ffda 	bl	800a4a2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f005 fe0b 	bl	800810e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b088      	sub	sp, #32
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f005 fe0d 	bl	8008136 <USB_ReadInterrupts>
 800251c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fb1a 	bl	8002b62 <PCD_EP_ISR_Handler>

    return;
 800252e:	e119      	b.n	8002764 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002536:	2b00      	cmp	r3, #0
 8002538:	d013      	beq.n	8002562 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002542:	b29a      	uxth	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800254c:	b292      	uxth	r2, r2
 800254e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f007 fdad 	bl	800a0b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002558:	2100      	movs	r1, #0
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f905 	bl	800276a <HAL_PCD_SetAddress>

    return;
 8002560:	e100      	b.n	8002764 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00c      	beq.n	8002586 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002574:	b29a      	uxth	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800257e:	b292      	uxth	r2, r2
 8002580:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002584:	e0ee      	b.n	8002764 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00c      	beq.n	80025aa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002598:	b29a      	uxth	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025a2:	b292      	uxth	r2, r2
 80025a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80025a8:	e0dc      	b.n	8002764 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d027      	beq.n	8002604 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025bc:	b29a      	uxth	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0204 	bic.w	r2, r2, #4
 80025c6:	b292      	uxth	r2, r2
 80025c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0208 	bic.w	r2, r2, #8
 80025de:	b292      	uxth	r2, r2
 80025e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f007 fd9d 	bl	800a124 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025fc:	b292      	uxth	r2, r2
 80025fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002602:	e0af      	b.n	8002764 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8083 	beq.w	8002716 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002610:	2300      	movs	r3, #0
 8002612:	77fb      	strb	r3, [r7, #31]
 8002614:	e010      	b.n	8002638 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	7ffb      	ldrb	r3, [r7, #31]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	7ffb      	ldrb	r3, [r7, #31]
 8002624:	8812      	ldrh	r2, [r2, #0]
 8002626:	b292      	uxth	r2, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	3320      	adds	r3, #32
 800262c:	443b      	add	r3, r7
 800262e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002632:	7ffb      	ldrb	r3, [r7, #31]
 8002634:	3301      	adds	r3, #1
 8002636:	77fb      	strb	r3, [r7, #31]
 8002638:	7ffb      	ldrb	r3, [r7, #31]
 800263a:	2b07      	cmp	r3, #7
 800263c:	d9eb      	bls.n	8002616 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	b292      	uxth	r2, r2
 8002652:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0201 	bic.w	r2, r2, #1
 8002668:	b292      	uxth	r2, r2
 800266a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800266e:	bf00      	nop
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002678:	b29b      	uxth	r3, r3
 800267a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f6      	beq.n	8002670 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800268a:	b29a      	uxth	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002694:	b292      	uxth	r2, r2
 8002696:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800269a:	2300      	movs	r3, #0
 800269c:	77fb      	strb	r3, [r7, #31]
 800269e:	e00f      	b.n	80026c0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80026a0:	7ffb      	ldrb	r3, [r7, #31]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	4611      	mov	r1, r2
 80026a8:	7ffa      	ldrb	r2, [r7, #31]
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	440a      	add	r2, r1
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	3320      	adds	r3, #32
 80026b2:	443b      	add	r3, r7
 80026b4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80026b8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80026ba:	7ffb      	ldrb	r3, [r7, #31]
 80026bc:	3301      	adds	r3, #1
 80026be:	77fb      	strb	r3, [r7, #31]
 80026c0:	7ffb      	ldrb	r3, [r7, #31]
 80026c2:	2b07      	cmp	r3, #7
 80026c4:	d9ec      	bls.n	80026a0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0208 	orr.w	r2, r2, #8
 80026d8:	b292      	uxth	r2, r2
 80026da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026f0:	b292      	uxth	r2, r2
 80026f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026fe:	b29a      	uxth	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0204 	orr.w	r2, r2, #4
 8002708:	b292      	uxth	r2, r2
 800270a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f007 fcee 	bl	800a0f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002714:	e026      	b.n	8002764 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00f      	beq.n	8002740 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002728:	b29a      	uxth	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002732:	b292      	uxth	r2, r2
 8002734:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f007 fcac 	bl	800a096 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800273e:	e011      	b.n	8002764 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00c      	beq.n	8002764 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002752:	b29a      	uxth	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800275c:	b292      	uxth	r2, r2
 800275e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002762:	bf00      	nop
  }
}
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_PCD_SetAddress+0x1a>
 8002780:	2302      	movs	r3, #2
 8002782:	e012      	b.n	80027aa <HAL_PCD_SetAddress+0x40>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	78fa      	ldrb	r2, [r7, #3]
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f005 fca4 	bl	80080e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	4608      	mov	r0, r1
 80027bc:	4611      	mov	r1, r2
 80027be:	461a      	mov	r2, r3
 80027c0:	4603      	mov	r3, r0
 80027c2:	70fb      	strb	r3, [r7, #3]
 80027c4:	460b      	mov	r3, r1
 80027c6:	803b      	strh	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	da0e      	bge.n	80027f6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	f003 0207 	and.w	r2, r3, #7
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	3310      	adds	r3, #16
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	705a      	strb	r2, [r3, #1]
 80027f4:	e00e      	b.n	8002814 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	f003 0207 	and.w	r2, r3, #7
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4413      	add	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	b2da      	uxtb	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002820:	883a      	ldrh	r2, [r7, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	78ba      	ldrb	r2, [r7, #2]
 800282a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800282c:	78bb      	ldrb	r3, [r7, #2]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d102      	bne.n	8002838 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_PCD_EP_Open+0x94>
 8002842:	2302      	movs	r3, #2
 8002844:	e00e      	b.n	8002864 <HAL_PCD_EP_Open+0xb2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68f9      	ldr	r1, [r7, #12]
 8002854:	4618      	mov	r0, r3
 8002856:	f003 f9ed 	bl	8005c34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002862:	7afb      	ldrb	r3, [r7, #11]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800287c:	2b00      	cmp	r3, #0
 800287e:	da0e      	bge.n	800289e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	f003 0207 	and.w	r2, r3, #7
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	3310      	adds	r3, #16
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	705a      	strb	r2, [r3, #1]
 800289c:	e00e      	b.n	80028bc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	f003 0207 	and.w	r2, r3, #7
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_PCD_EP_Close+0x6a>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e00e      	b.n	80028f4 <HAL_PCD_EP_Close+0x88>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68f9      	ldr	r1, [r7, #12]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 fd65 	bl	80063b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	460b      	mov	r3, r1
 800290a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800290c:	7afb      	ldrb	r3, [r7, #11]
 800290e:	f003 0207 	and.w	r2, r3, #7
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4413      	add	r3, r2
 8002922:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2200      	movs	r2, #0
 800293a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800293c:	7afb      	ldrb	r3, [r7, #11]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	b2da      	uxtb	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6979      	ldr	r1, [r7, #20]
 800294e:	4618      	mov	r0, r3
 8002950:	f003 ff1c 	bl	800678c <USB_EPStartXfer>

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	460b      	mov	r3, r1
 8002968:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	f003 0207 	and.w	r2, r3, #7
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002980:	681b      	ldr	r3, [r3, #0]
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	460b      	mov	r3, r1
 800299a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299c:	7afb      	ldrb	r3, [r7, #11]
 800299e:	f003 0207 	and.w	r2, r3, #7
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	3310      	adds	r3, #16
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2200      	movs	r2, #0
 80029d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2201      	movs	r2, #1
 80029d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d8:	7afb      	ldrb	r3, [r7, #11]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6979      	ldr	r1, [r7, #20]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 fece 	bl	800678c <USB_EPStartXfer>

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	7912      	ldrb	r2, [r2, #4]
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e04c      	b.n	8002ab2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	da0e      	bge.n	8002a3e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	f003 0207 	and.w	r2, r3, #7
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	3310      	adds	r3, #16
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	4413      	add	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	705a      	strb	r2, [r3, #1]
 8002a3c:	e00c      	b.n	8002a58 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	4413      	add	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_PCD_EP_SetStall+0x7e>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e01c      	b.n	8002ab2 <HAL_PCD_EP_SetStall+0xb8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68f9      	ldr	r1, [r7, #12]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f005 fa31 	bl	8007eee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d108      	bne.n	8002aa8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	f005 fb56 	bl	8008154 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	7912      	ldrb	r2, [r2, #4]
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e040      	b.n	8002b5a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	da0e      	bge.n	8002afe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	f003 0207 	and.w	r2, r3, #7
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	3310      	adds	r3, #16
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	705a      	strb	r2, [r3, #1]
 8002afc:	e00e      	b.n	8002b1c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	f003 0207 	and.w	r2, r3, #7
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_PCD_EP_ClrStall+0x82>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e00e      	b.n	8002b5a <HAL_PCD_EP_ClrStall+0xa0>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68f9      	ldr	r1, [r7, #12]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f005 fa1f 	bl	8007f8e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b096      	sub	sp, #88	@ 0x58
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b6a:	e3bb      	b.n	80032e4 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b74:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002b86:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 8175 	bne.w	8002e7a <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d14e      	bne.n	8002c3a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bac:	81fb      	strh	r3, [r7, #14]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	89fb      	ldrh	r3, [r7, #14]
 8002bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3310      	adds	r3, #16
 8002bc4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3302      	adds	r3, #2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	441a      	add	r2, r3
 8002bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bfe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c00:	2100      	movs	r1, #0
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f007 fa2d 	bl	800a062 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7b5b      	ldrb	r3, [r3, #13]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8368 	beq.w	80032e4 <PCD_EP_ISR_Handler+0x782>
 8002c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f040 8363 	bne.w	80032e4 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7b5b      	ldrb	r3, [r3, #13]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	735a      	strb	r2, [r3, #13]
 8002c38:	e354      	b.n	80032e4 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c40:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d034      	beq.n	8002cc2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3306      	adds	r3, #6
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c82:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c90:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c94:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f005 faad 	bl	80081f6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002ca8:	4013      	ands	r3, r2
 8002caa:	823b      	strh	r3, [r7, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	8a3a      	ldrh	r2, [r7, #16]
 8002cb2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cb6:	b292      	uxth	r2, r2
 8002cb8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f007 f9a4 	bl	800a008 <HAL_PCD_SetupStageCallback>
 8002cc0:	e310      	b.n	80032e4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002cc2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f280 830c 	bge.w	80032e4 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002cd8:	4013      	ands	r3, r2
 8002cda:	83fb      	strh	r3, [r7, #30]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	8bfa      	ldrh	r2, [r7, #30]
 8002ce2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ce6:	b292      	uxth	r2, r2
 8002ce8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3306      	adds	r3, #6
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d14:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d019      	beq.n	8002d52 <PCD_EP_ISR_Handler+0x1f0>
 8002d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d015      	beq.n	8002d52 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d2c:	6959      	ldr	r1, [r3, #20]
 8002d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d30:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d34:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f005 fa5d 	bl	80081f6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	441a      	add	r2, r3
 8002d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d48:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f007 f96d 	bl	800a02c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002d5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f040 82bd 	bne.w	80032e4 <PCD_EP_ISR_Handler+0x782>
 8002d6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d6e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002d72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d76:	f000 82b5 	beq.w	80032e4 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	4413      	add	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	801a      	strh	r2, [r3, #0]
 8002daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b3e      	cmp	r3, #62	@ 0x3e
 8002db0:	d91d      	bls.n	8002dee <PCD_EP_ISR_Handler+0x28c>
 8002db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d102      	bne.n	8002dcc <PCD_EP_ISR_Handler+0x26a>
 8002dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	029b      	lsls	r3, r3, #10
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	801a      	strh	r2, [r3, #0]
 8002dec:	e026      	b.n	8002e3c <PCD_EP_ISR_Handler+0x2da>
 8002dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <PCD_EP_ISR_Handler+0x2aa>
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	801a      	strh	r2, [r3, #0]
 8002e0a:	e017      	b.n	8002e3c <PCD_EP_ISR_Handler+0x2da>
 8002e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	085b      	lsrs	r3, r3, #1
 8002e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <PCD_EP_ISR_Handler+0x2c4>
 8002e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e22:	3301      	adds	r3, #1
 8002e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	029b      	lsls	r3, r3, #10
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e4c:	827b      	strh	r3, [r7, #18]
 8002e4e:	8a7b      	ldrh	r3, [r7, #18]
 8002e50:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002e54:	827b      	strh	r3, [r7, #18]
 8002e56:	8a7b      	ldrh	r3, [r7, #18]
 8002e58:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e5c:	827b      	strh	r3, [r7, #18]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	8a7b      	ldrh	r3, [r7, #18]
 8002e64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	8013      	strh	r3, [r2, #0]
 8002e78:	e234      	b.n	80032e4 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e8e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f280 80fc 	bge.w	8003090 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002eae:	4013      	ands	r3, r2
 8002eb0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002ec6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002eca:	b292      	uxth	r2, r2
 8002ecc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ece:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee6:	7b1b      	ldrb	r3, [r3, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d125      	bne.n	8002f38 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	3306      	adds	r3, #6
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f14:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002f18:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8092 	beq.w	8003046 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f28:	6959      	ldr	r1, [r3, #20]
 8002f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f2c:	88da      	ldrh	r2, [r3, #6]
 8002f2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f32:	f005 f960 	bl	80081f6 <USB_ReadPMA>
 8002f36:	e086      	b.n	8003046 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f3a:	78db      	ldrb	r3, [r3, #3]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d10a      	bne.n	8002f56 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f44:	461a      	mov	r2, r3
 8002f46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f9d9 	bl	8003300 <HAL_PCD_EP_DB_Receive>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002f54:	e077      	b.n	8003046 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f70:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	441a      	add	r2, r3
 8002f82:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002f86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f92:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d024      	beq.n	8002ffe <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fdc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002fe0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d02e      	beq.n	8003046 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fee:	6959      	ldr	r1, [r3, #20]
 8002ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff2:	891a      	ldrh	r2, [r3, #8]
 8002ff4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ff8:	f005 f8fd 	bl	80081f6 <USB_ReadPMA>
 8002ffc:	e023      	b.n	8003046 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003006:	b29b      	uxth	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	3306      	adds	r3, #6
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003026:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800302a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003038:	6959      	ldr	r1, [r3, #20]
 800303a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303c:	895a      	ldrh	r2, [r3, #10]
 800303e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003042:	f005 f8d8 	bl	80081f6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800304e:	441a      	add	r2, r3
 8003050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003052:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800305c:	441a      	add	r2, r3
 800305e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003060:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <PCD_EP_ISR_Handler+0x514>
 800306a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800306e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	429a      	cmp	r2, r3
 8003074:	d206      	bcs.n	8003084 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f006 ffd5 	bl	800a02c <HAL_PCD_DataOutStageCallback>
 8003082:	e005      	b.n	8003090 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800308a:	4618      	mov	r0, r3
 800308c:	f003 fb7e 	bl	800678c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003090:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8123 	beq.w	80032e4 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800309e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	3310      	adds	r3, #16
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80030c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030cc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	441a      	add	r2, r3
 80030de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80030e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80030ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f0:	78db      	ldrb	r3, [r3, #3]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	f040 80a2 	bne.w	800323c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80030f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030fa:	2200      	movs	r2, #0
 80030fc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80030fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003100:	7b1b      	ldrb	r3, [r3, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 8093 	beq.w	800322e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003108:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800310c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d046      	beq.n	80031a2 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003116:	785b      	ldrb	r3, [r3, #1]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d126      	bne.n	800316a <PCD_EP_ISR_Handler+0x608>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	4413      	add	r3, r2
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24
 8003134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	011a      	lsls	r2, r3, #4
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	4413      	add	r3, r2
 800313e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003142:	623b      	str	r3, [r7, #32]
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	b29b      	uxth	r3, r3
 800314a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800314e:	b29a      	uxth	r2, r3
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	801a      	strh	r2, [r3, #0]
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	b29b      	uxth	r3, r3
 800315a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800315e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003162:	b29a      	uxth	r2, r3
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	801a      	strh	r2, [r3, #0]
 8003168:	e061      	b.n	800322e <PCD_EP_ISR_Handler+0x6cc>
 800316a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d15d      	bne.n	800322e <PCD_EP_ISR_Handler+0x6cc>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003180:	b29b      	uxth	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003186:	4413      	add	r3, r2
 8003188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800318a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	011a      	lsls	r2, r3, #4
 8003190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003192:	4413      	add	r3, r2
 8003194:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003198:	62bb      	str	r3, [r7, #40]	@ 0x28
 800319a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319c:	2200      	movs	r2, #0
 800319e:	801a      	strh	r2, [r3, #0]
 80031a0:	e045      	b.n	800322e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d126      	bne.n	80031fe <PCD_EP_ISR_Handler+0x69c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c4:	4413      	add	r3, r2
 80031c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	011a      	lsls	r2, r3, #4
 80031ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d0:	4413      	add	r3, r2
 80031d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80031d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80031d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e6:	801a      	strh	r2, [r3, #0]
 80031e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fa:	801a      	strh	r2, [r3, #0]
 80031fc:	e017      	b.n	800322e <PCD_EP_ISR_Handler+0x6cc>
 80031fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003200:	785b      	ldrb	r3, [r3, #1]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d113      	bne.n	800322e <PCD_EP_ISR_Handler+0x6cc>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800320e:	b29b      	uxth	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003214:	4413      	add	r3, r2
 8003216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	011a      	lsls	r2, r3, #4
 800321e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003220:	4413      	add	r3, r2
 8003222:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003226:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322a:	2200      	movs	r2, #0
 800322c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800322e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	4619      	mov	r1, r3
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f006 ff14 	bl	800a062 <HAL_PCD_DataInStageCallback>
 800323a:	e053      	b.n	80032e4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800323c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d146      	bne.n	80032d6 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003250:	b29b      	uxth	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	3302      	adds	r3, #2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003270:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800327c:	429a      	cmp	r2, r3
 800327e:	d907      	bls.n	8003290 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003282:	699a      	ldr	r2, [r3, #24]
 8003284:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003288:	1ad2      	subs	r2, r2, r3
 800328a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800328c:	619a      	str	r2, [r3, #24]
 800328e:	e002      	b.n	8003296 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003292:	2200      	movs	r2, #0
 8003294:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800329e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	4619      	mov	r1, r3
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f006 fedc 	bl	800a062 <HAL_PCD_DataInStageCallback>
 80032aa:	e01b      	b.n	80032e4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80032ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80032b4:	441a      	add	r2, r3
 80032b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80032ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80032c2:	441a      	add	r2, r3
 80032c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032ce:	4618      	mov	r0, r3
 80032d0:	f003 fa5c 	bl	800678c <USB_EPStartXfer>
 80032d4:	e006      	b.n	80032e4 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80032d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80032da:	461a      	mov	r2, r3
 80032dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f91b 	bl	800351a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	b21b      	sxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f6ff ac3b 	blt.w	8002b6c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3758      	adds	r7, #88	@ 0x58
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	4613      	mov	r3, r2
 800330c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d07e      	beq.n	8003416 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003320:	b29b      	uxth	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	3302      	adds	r3, #2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	4413      	add	r3, r2
 8003336:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003340:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	8b7b      	ldrh	r3, [r7, #26]
 8003348:	429a      	cmp	r2, r3
 800334a:	d306      	bcc.n	800335a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	8b7b      	ldrh	r3, [r7, #26]
 8003352:	1ad2      	subs	r2, r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	619a      	str	r2, [r3, #24]
 8003358:	e002      	b.n	8003360 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2200      	movs	r2, #0
 800335e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d123      	bne.n	80033b0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b29b      	uxth	r3, r3
 800337a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800337e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003382:	833b      	strh	r3, [r7, #24]
 8003384:	8b3b      	ldrh	r3, [r7, #24]
 8003386:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800338a:	833b      	strh	r3, [r7, #24]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	441a      	add	r2, r3
 800339a:	8b3b      	ldrh	r3, [r7, #24]
 800339c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01f      	beq.n	80033fa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033d4:	82fb      	strh	r3, [r7, #22]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	441a      	add	r2, r3
 80033e4:	8afb      	ldrh	r3, [r7, #22]
 80033e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033fa:	8b7b      	ldrh	r3, [r7, #26]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8087 	beq.w	8003510 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	6959      	ldr	r1, [r3, #20]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	891a      	ldrh	r2, [r3, #8]
 800340e:	8b7b      	ldrh	r3, [r7, #26]
 8003410:	f004 fef1 	bl	80081f6 <USB_ReadPMA>
 8003414:	e07c      	b.n	8003510 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800341e:	b29b      	uxth	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	3306      	adds	r3, #6
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800343e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	8b7b      	ldrh	r3, [r7, #26]
 8003446:	429a      	cmp	r2, r3
 8003448:	d306      	bcc.n	8003458 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	8b7b      	ldrh	r3, [r7, #26]
 8003450:	1ad2      	subs	r2, r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	619a      	str	r2, [r3, #24]
 8003456:	e002      	b.n	800345e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2200      	movs	r2, #0
 800345c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d123      	bne.n	80034ae <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800347c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003480:	83fb      	strh	r3, [r7, #30]
 8003482:	8bfb      	ldrh	r3, [r7, #30]
 8003484:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003488:	83fb      	strh	r3, [r7, #30]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	441a      	add	r2, r3
 8003498:	8bfb      	ldrh	r3, [r7, #30]
 800349a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800349e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11f      	bne.n	80034f8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d2:	83bb      	strh	r3, [r7, #28]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	441a      	add	r2, r3
 80034e2:	8bbb      	ldrh	r3, [r7, #28]
 80034e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034f8:	8b7b      	ldrh	r3, [r7, #26]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6959      	ldr	r1, [r3, #20]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	895a      	ldrh	r2, [r3, #10]
 800350a:	8b7b      	ldrh	r3, [r7, #26]
 800350c:	f004 fe73 	bl	80081f6 <USB_ReadPMA>
    }
  }

  return count;
 8003510:	8b7b      	ldrh	r3, [r7, #26]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b0a4      	sub	sp, #144	@ 0x90
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	4613      	mov	r3, r2
 8003526:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 81dd 	beq.w	80038ee <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800353c:	b29b      	uxth	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	3302      	adds	r3, #2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800355c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003568:	429a      	cmp	r2, r3
 800356a:	d907      	bls.n	800357c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	619a      	str	r2, [r3, #24]
 800357a:	e002      	b.n	8003582 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2200      	movs	r2, #0
 8003580:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f040 80b9 	bne.w	80036fe <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	785b      	ldrb	r3, [r3, #1]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d126      	bne.n	80035e2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a8:	4413      	add	r3, r2
 80035aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	011a      	lsls	r2, r3, #4
 80035b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b4:	4413      	add	r3, r2
 80035b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035da:	b29a      	uxth	r2, r3
 80035dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035de:	801a      	strh	r2, [r3, #0]
 80035e0:	e01a      	b.n	8003618 <HAL_PCD_EP_DB_Transmit+0xfe>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	785b      	ldrb	r3, [r3, #1]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d116      	bne.n	8003618 <HAL_PCD_EP_DB_Transmit+0xfe>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fe:	4413      	add	r3, r2
 8003600:	637b      	str	r3, [r7, #52]	@ 0x34
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	011a      	lsls	r2, r3, #4
 8003608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360a:	4413      	add	r3, r2
 800360c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003610:	633b      	str	r3, [r7, #48]	@ 0x30
 8003612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003614:	2200      	movs	r2, #0
 8003616:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d126      	bne.n	8003674 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003634:	b29b      	uxth	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	4413      	add	r3, r2
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	011a      	lsls	r2, r3, #4
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003658:	b29a      	uxth	r2, r3
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	801a      	strh	r2, [r3, #0]
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800366c:	b29a      	uxth	r2, r3
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	801a      	strh	r2, [r3, #0]
 8003672:	e017      	b.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	785b      	ldrb	r3, [r3, #1]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d113      	bne.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x18a>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003684:	b29b      	uxth	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	4413      	add	r3, r2
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	011a      	lsls	r2, r3, #4
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	4413      	add	r3, r2
 8003698:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800369c:	623b      	str	r3, [r7, #32]
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	2200      	movs	r2, #0
 80036a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	4619      	mov	r1, r3
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f006 fcd9 	bl	800a062 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 82fc 	beq.w	8003cb4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d6:	82fb      	strh	r3, [r7, #22]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	441a      	add	r2, r3
 80036e6:	8afb      	ldrh	r3, [r7, #22]
 80036e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	8013      	strh	r3, [r2, #0]
 80036fc:	e2da      	b.n	8003cb4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d021      	beq.n	800374c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	b29b      	uxth	r3, r3
 800371a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800371e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003722:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	441a      	add	r2, r3
 8003734:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800373c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003740:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003748:	b29b      	uxth	r3, r3
 800374a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003752:	2b01      	cmp	r3, #1
 8003754:	f040 82ae 	bne.w	8003cb4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	695a      	ldr	r2, [r3, #20]
 800375c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003760:	441a      	add	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	69da      	ldr	r2, [r3, #28]
 800376a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800376e:	441a      	add	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	6a1a      	ldr	r2, [r3, #32]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	429a      	cmp	r2, r3
 800377e:	d30b      	bcc.n	8003798 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	6a1a      	ldr	r2, [r3, #32]
 800378c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003790:	1ad2      	subs	r2, r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	621a      	str	r2, [r3, #32]
 8003796:	e017      	b.n	80037c8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d108      	bne.n	80037b2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80037a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80037b0:	e00a      	b.n	80037c8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2200      	movs	r2, #0
 80037c6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	785b      	ldrb	r3, [r3, #1]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d165      	bne.n	800389c <HAL_PCD_EP_DB_Transmit+0x382>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037de:	b29b      	uxth	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e4:	4413      	add	r3, r2
 80037e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	011a      	lsls	r2, r3, #4
 80037ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f0:	4413      	add	r3, r2
 80037f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003802:	b29a      	uxth	r2, r3
 8003804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003806:	801a      	strh	r2, [r3, #0]
 8003808:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800380c:	2b3e      	cmp	r3, #62	@ 0x3e
 800380e:	d91d      	bls.n	800384c <HAL_PCD_EP_DB_Transmit+0x332>
 8003810:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003818:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <HAL_PCD_EP_DB_Transmit+0x310>
 8003824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003826:	3b01      	subs	r3, #1
 8003828:	64bb      	str	r3, [r7, #72]	@ 0x48
 800382a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29a      	uxth	r2, r3
 8003830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003832:	b29b      	uxth	r3, r3
 8003834:	029b      	lsls	r3, r3, #10
 8003836:	b29b      	uxth	r3, r3
 8003838:	4313      	orrs	r3, r2
 800383a:	b29b      	uxth	r3, r3
 800383c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003844:	b29a      	uxth	r2, r3
 8003846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003848:	801a      	strh	r2, [r3, #0]
 800384a:	e044      	b.n	80038d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800384c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <HAL_PCD_EP_DB_Transmit+0x350>
 8003854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800385e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003862:	b29a      	uxth	r2, r3
 8003864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003866:	801a      	strh	r2, [r3, #0]
 8003868:	e035      	b.n	80038d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800386a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800386e:	085b      	lsrs	r3, r3, #1
 8003870:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003872:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_PCD_EP_DB_Transmit+0x36a>
 800387e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003880:	3301      	adds	r3, #1
 8003882:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29a      	uxth	r2, r3
 800388a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800388c:	b29b      	uxth	r3, r3
 800388e:	029b      	lsls	r3, r3, #10
 8003890:	b29b      	uxth	r3, r3
 8003892:	4313      	orrs	r3, r2
 8003894:	b29a      	uxth	r2, r3
 8003896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003898:	801a      	strh	r2, [r3, #0]
 800389a:	e01c      	b.n	80038d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	785b      	ldrb	r3, [r3, #1]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d118      	bne.n	80038d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038b8:	4413      	add	r3, r2
 80038ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	011a      	lsls	r2, r3, #4
 80038c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038c4:	4413      	add	r3, r2
 80038c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80038cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6959      	ldr	r1, [r3, #20]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	891a      	ldrh	r2, [r3, #8]
 80038e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f004 fc3f 	bl	800816a <USB_WritePMA>
 80038ec:	e1e2      	b.n	8003cb4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4413      	add	r3, r2
 8003902:	3306      	adds	r3, #6
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003916:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003922:	429a      	cmp	r2, r3
 8003924:	d307      	bcc.n	8003936 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800392e:	1ad2      	subs	r2, r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	619a      	str	r2, [r3, #24]
 8003934:	e002      	b.n	800393c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2200      	movs	r2, #0
 800393a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f040 80c0 	bne.w	8003ac6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	785b      	ldrb	r3, [r3, #1]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d126      	bne.n	800399c <HAL_PCD_EP_DB_Transmit+0x482>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800395c:	b29b      	uxth	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003962:	4413      	add	r3, r2
 8003964:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	011a      	lsls	r2, r3, #4
 800396c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800396e:	4413      	add	r3, r2
 8003970:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003974:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003976:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003980:	b29a      	uxth	r2, r3
 8003982:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003984:	801a      	strh	r2, [r3, #0]
 8003986:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003994:	b29a      	uxth	r2, r3
 8003996:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003998:	801a      	strh	r2, [r3, #0]
 800399a:	e01a      	b.n	80039d2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d116      	bne.n	80039d2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039b8:	4413      	add	r3, r2
 80039ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	011a      	lsls	r2, r3, #4
 80039c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039c4:	4413      	add	r3, r2
 80039c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80039cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039ce:	2200      	movs	r2, #0
 80039d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	785b      	ldrb	r3, [r3, #1]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d12b      	bne.n	8003a38 <HAL_PCD_EP_DB_Transmit+0x51e>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039f4:	4413      	add	r3, r2
 80039f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	011a      	lsls	r2, r3, #4
 80039fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a00:	4413      	add	r3, r2
 8003a02:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a1c:	801a      	strh	r2, [r3, #0]
 8003a1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a34:	801a      	strh	r2, [r3, #0]
 8003a36:	e017      	b.n	8003a68 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d113      	bne.n	8003a68 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a4e:	4413      	add	r3, r2
 8003a50:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	011a      	lsls	r2, r3, #4
 8003a58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a60:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a64:	2200      	movs	r2, #0
 8003a66:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f006 faf7 	bl	800a062 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 811a 	bne.w	8003cb4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a9a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	441a      	add	r2, r3
 8003aac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003ab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ab8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	8013      	strh	r3, [r2, #0]
 8003ac4:	e0f6      	b.n	8003cb4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d121      	bne.n	8003b14 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	441a      	add	r2, r3
 8003afc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	f040 80ca 	bne.w	8003cb4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b28:	441a      	add	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	69da      	ldr	r2, [r3, #28]
 8003b32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b36:	441a      	add	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	6a1a      	ldr	r2, [r3, #32]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d30b      	bcc.n	8003b60 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b58:	1ad2      	subs	r2, r2, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	621a      	str	r2, [r3, #32]
 8003b5e:	e017      	b.n	8003b90 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d108      	bne.n	8003b7a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003b68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003b78:	e00a      	b.n	8003b90 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2200      	movs	r2, #0
 8003b86:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	785b      	ldrb	r3, [r3, #1]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d165      	bne.n	8003c6a <HAL_PCD_EP_DB_Transmit+0x750>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bb2:	4413      	add	r3, r2
 8003bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	011a      	lsls	r2, r3, #4
 8003bbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bd4:	801a      	strh	r2, [r3, #0]
 8003bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bda:	2b3e      	cmp	r3, #62	@ 0x3e
 8003bdc:	d91d      	bls.n	8003c1a <HAL_PCD_EP_DB_Transmit+0x700>
 8003bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d102      	bne.n	8003bf8 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003bf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	029b      	lsls	r3, r3, #10
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	4313      	orrs	r3, r2
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c16:	801a      	strh	r2, [r3, #0]
 8003c18:	e041      	b.n	8003c9e <HAL_PCD_EP_DB_Transmit+0x784>
 8003c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003c22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	e032      	b.n	8003c9e <HAL_PCD_EP_DB_Transmit+0x784>
 8003c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_PCD_EP_DB_Transmit+0x738>
 8003c4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c4e:	3301      	adds	r3, #1
 8003c50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	029b      	lsls	r3, r3, #10
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	4313      	orrs	r3, r2
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c66:	801a      	strh	r2, [r3, #0]
 8003c68:	e019      	b.n	8003c9e <HAL_PCD_EP_DB_Transmit+0x784>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	785b      	ldrb	r3, [r3, #1]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d115      	bne.n	8003c9e <HAL_PCD_EP_DB_Transmit+0x784>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c80:	4413      	add	r3, r2
 8003c82:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	011a      	lsls	r2, r3, #4
 8003c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c92:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c9c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6959      	ldr	r1, [r3, #20]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	895a      	ldrh	r2, [r3, #10]
 8003caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	f004 fa5b 	bl	800816a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cce:	82bb      	strh	r3, [r7, #20]
 8003cd0:	8abb      	ldrh	r3, [r7, #20]
 8003cd2:	f083 0310 	eor.w	r3, r3, #16
 8003cd6:	82bb      	strh	r3, [r7, #20]
 8003cd8:	8abb      	ldrh	r3, [r7, #20]
 8003cda:	f083 0320 	eor.w	r3, r3, #32
 8003cde:	82bb      	strh	r3, [r7, #20]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	441a      	add	r2, r3
 8003cee:	8abb      	ldrh	r3, [r7, #20]
 8003cf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3790      	adds	r7, #144	@ 0x90
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b087      	sub	sp, #28
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	607b      	str	r3, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	817b      	strh	r3, [r7, #10]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d20:	897b      	ldrh	r3, [r7, #10]
 8003d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00b      	beq.n	8003d44 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d2c:	897b      	ldrh	r3, [r7, #10]
 8003d2e:	f003 0207 	and.w	r2, r3, #7
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	3310      	adds	r3, #16
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	e009      	b.n	8003d58 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d44:	897a      	ldrh	r2, [r7, #10]
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4413      	add	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d58:	893b      	ldrh	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d107      	bne.n	8003d6e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	80da      	strh	r2, [r3, #6]
 8003d6c:	e00b      	b.n	8003d86 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2201      	movs	r2, #1
 8003d72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	0c1b      	lsrs	r3, r3, #16
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003d98:	4b03      	ldr	r3, [pc, #12]	@ (8003da8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	420e0020 	.word	0x420e0020

08003dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e272      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 8087 	beq.w	8003eda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dcc:	4b92      	ldr	r3, [pc, #584]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 030c 	and.w	r3, r3, #12
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d00c      	beq.n	8003df2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003dd8:	4b8f      	ldr	r3, [pc, #572]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d112      	bne.n	8003e0a <HAL_RCC_OscConfig+0x5e>
 8003de4:	4b8c      	ldr	r3, [pc, #560]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df0:	d10b      	bne.n	8003e0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df2:	4b89      	ldr	r3, [pc, #548]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d06c      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x12c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d168      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e24c      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e12:	d106      	bne.n	8003e22 <HAL_RCC_OscConfig+0x76>
 8003e14:	4b80      	ldr	r3, [pc, #512]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a7f      	ldr	r2, [pc, #508]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	e02e      	b.n	8003e80 <HAL_RCC_OscConfig+0xd4>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x98>
 8003e2a:	4b7b      	ldr	r3, [pc, #492]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a7a      	ldr	r2, [pc, #488]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	4b78      	ldr	r3, [pc, #480]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a77      	ldr	r2, [pc, #476]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e01d      	b.n	8003e80 <HAL_RCC_OscConfig+0xd4>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0xbc>
 8003e4e:	4b72      	ldr	r3, [pc, #456]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a71      	ldr	r2, [pc, #452]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b6f      	ldr	r3, [pc, #444]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a6e      	ldr	r2, [pc, #440]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0xd4>
 8003e68:	4b6b      	ldr	r3, [pc, #428]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6a      	ldr	r2, [pc, #424]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b68      	ldr	r3, [pc, #416]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a67      	ldr	r2, [pc, #412]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fd f946 	bl	8001118 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fd f942 	bl	8001118 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	@ 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e200      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0xe4>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fd f932 	bl	8001118 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fd f92e 	bl	8001118 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	@ 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e1ec      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	4b53      	ldr	r3, [pc, #332]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x10c>
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d063      	beq.n	8003fae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ef2:	4b49      	ldr	r3, [pc, #292]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d11c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x18c>
 8003efe:	4b46      	ldr	r3, [pc, #280]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d116      	bne.n	8003f38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	4b43      	ldr	r3, [pc, #268]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_RCC_OscConfig+0x176>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1c0      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b3d      	ldr	r3, [pc, #244]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4939      	ldr	r1, [pc, #228]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	e03a      	b.n	8003fae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f40:	4b36      	ldr	r3, [pc, #216]	@ (800401c <HAL_RCC_OscConfig+0x270>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f46:	f7fd f8e7 	bl	8001118 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fd f8e3 	bl	8001118 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e1a1      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	4b2d      	ldr	r3, [pc, #180]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4927      	ldr	r1, [pc, #156]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
 8003f80:	e015      	b.n	8003fae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f82:	4b26      	ldr	r3, [pc, #152]	@ (800401c <HAL_RCC_OscConfig+0x270>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fd f8c6 	bl	8001118 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f90:	f7fd f8c2 	bl	8001118 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e180      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d03a      	beq.n	8004030 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d019      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc2:	4b17      	ldr	r3, [pc, #92]	@ (8004020 <HAL_RCC_OscConfig+0x274>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc8:	f7fd f8a6 	bl	8001118 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fd f8a2 	bl	8001118 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e160      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fee:	2001      	movs	r0, #1
 8003ff0:	f000 face 	bl	8004590 <RCC_Delay>
 8003ff4:	e01c      	b.n	8004030 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8004020 <HAL_RCC_OscConfig+0x274>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffc:	f7fd f88c 	bl	8001118 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004002:	e00f      	b.n	8004024 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004004:	f7fd f888 	bl	8001118 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d908      	bls.n	8004024 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e146      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
 8004016:	bf00      	nop
 8004018:	40021000 	.word	0x40021000
 800401c:	42420000 	.word	0x42420000
 8004020:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004024:	4b92      	ldr	r3, [pc, #584]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e9      	bne.n	8004004 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 80a6 	beq.w	800418a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004042:	4b8b      	ldr	r3, [pc, #556]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10d      	bne.n	800406a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404e:	4b88      	ldr	r3, [pc, #544]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4a87      	ldr	r2, [pc, #540]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004058:	61d3      	str	r3, [r2, #28]
 800405a:	4b85      	ldr	r3, [pc, #532]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004066:	2301      	movs	r3, #1
 8004068:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406a:	4b82      	ldr	r3, [pc, #520]	@ (8004274 <HAL_RCC_OscConfig+0x4c8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d118      	bne.n	80040a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004076:	4b7f      	ldr	r3, [pc, #508]	@ (8004274 <HAL_RCC_OscConfig+0x4c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a7e      	ldr	r2, [pc, #504]	@ (8004274 <HAL_RCC_OscConfig+0x4c8>)
 800407c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004082:	f7fd f849 	bl	8001118 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408a:	f7fd f845 	bl	8001118 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b64      	cmp	r3, #100	@ 0x64
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e103      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	4b75      	ldr	r3, [pc, #468]	@ (8004274 <HAL_RCC_OscConfig+0x4c8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d106      	bne.n	80040be <HAL_RCC_OscConfig+0x312>
 80040b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	4a6e      	ldr	r2, [pc, #440]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	6213      	str	r3, [r2, #32]
 80040bc:	e02d      	b.n	800411a <HAL_RCC_OscConfig+0x36e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCC_OscConfig+0x334>
 80040c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	4a69      	ldr	r2, [pc, #420]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	6213      	str	r3, [r2, #32]
 80040d2:	4b67      	ldr	r3, [pc, #412]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	4a66      	ldr	r2, [pc, #408]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040d8:	f023 0304 	bic.w	r3, r3, #4
 80040dc:	6213      	str	r3, [r2, #32]
 80040de:	e01c      	b.n	800411a <HAL_RCC_OscConfig+0x36e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	d10c      	bne.n	8004102 <HAL_RCC_OscConfig+0x356>
 80040e8:	4b61      	ldr	r3, [pc, #388]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	4a60      	ldr	r2, [pc, #384]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040ee:	f043 0304 	orr.w	r3, r3, #4
 80040f2:	6213      	str	r3, [r2, #32]
 80040f4:	4b5e      	ldr	r3, [pc, #376]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	4a5d      	ldr	r2, [pc, #372]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6213      	str	r3, [r2, #32]
 8004100:	e00b      	b.n	800411a <HAL_RCC_OscConfig+0x36e>
 8004102:	4b5b      	ldr	r3, [pc, #364]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4a5a      	ldr	r2, [pc, #360]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	6213      	str	r3, [r2, #32]
 800410e:	4b58      	ldr	r3, [pc, #352]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4a57      	ldr	r2, [pc, #348]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004114:	f023 0304 	bic.w	r3, r3, #4
 8004118:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d015      	beq.n	800414e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004122:	f7fc fff9 	bl	8001118 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004128:	e00a      	b.n	8004140 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412a:	f7fc fff5 	bl	8001118 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004138:	4293      	cmp	r3, r2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e0b1      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004140:	4b4b      	ldr	r3, [pc, #300]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0ee      	beq.n	800412a <HAL_RCC_OscConfig+0x37e>
 800414c:	e014      	b.n	8004178 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800414e:	f7fc ffe3 	bl	8001118 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004154:	e00a      	b.n	800416c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004156:	f7fc ffdf 	bl	8001118 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004164:	4293      	cmp	r3, r2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e09b      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800416c:	4b40      	ldr	r3, [pc, #256]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1ee      	bne.n	8004156 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d105      	bne.n	800418a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800417e:	4b3c      	ldr	r3, [pc, #240]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	4a3b      	ldr	r2, [pc, #236]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004184:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004188:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8087 	beq.w	80042a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004194:	4b36      	ldr	r3, [pc, #216]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 030c 	and.w	r3, r3, #12
 800419c:	2b08      	cmp	r3, #8
 800419e:	d061      	beq.n	8004264 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d146      	bne.n	8004236 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a8:	4b33      	ldr	r3, [pc, #204]	@ (8004278 <HAL_RCC_OscConfig+0x4cc>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7fc ffb3 	bl	8001118 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b6:	f7fc ffaf 	bl	8001118 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e06d      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c8:	4b29      	ldr	r3, [pc, #164]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f0      	bne.n	80041b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041dc:	d108      	bne.n	80041f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041de:	4b24      	ldr	r3, [pc, #144]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	4921      	ldr	r1, [pc, #132]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a19      	ldr	r1, [r3, #32]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	430b      	orrs	r3, r1
 8004202:	491b      	ldr	r1, [pc, #108]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004208:	4b1b      	ldr	r3, [pc, #108]	@ (8004278 <HAL_RCC_OscConfig+0x4cc>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420e:	f7fc ff83 	bl	8001118 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004216:	f7fc ff7f 	bl	8001118 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e03d      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004228:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x46a>
 8004234:	e035      	b.n	80042a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004236:	4b10      	ldr	r3, [pc, #64]	@ (8004278 <HAL_RCC_OscConfig+0x4cc>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fc ff6c 	bl	8001118 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004244:	f7fc ff68 	bl	8001118 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e026      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004256:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x498>
 8004262:	e01e      	b.n	80042a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d107      	bne.n	800427c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e019      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
 8004270:	40021000 	.word	0x40021000
 8004274:	40007000 	.word	0x40007000
 8004278:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800427c:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <HAL_RCC_OscConfig+0x500>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	429a      	cmp	r2, r3
 800428e:	d106      	bne.n	800429e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429a:	429a      	cmp	r2, r3
 800429c:	d001      	beq.n	80042a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000

080042b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0d0      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b6a      	ldr	r3, [pc, #424]	@ (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d910      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b67      	ldr	r3, [pc, #412]	@ (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 0207 	bic.w	r2, r3, #7
 80042da:	4965      	ldr	r1, [pc, #404]	@ (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b63      	ldr	r3, [pc, #396]	@ (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0b8      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800430c:	4b59      	ldr	r3, [pc, #356]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4a58      	ldr	r2, [pc, #352]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004312:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004316:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004324:	4b53      	ldr	r3, [pc, #332]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4a52      	ldr	r2, [pc, #328]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800432a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800432e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004330:	4b50      	ldr	r3, [pc, #320]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	494d      	ldr	r1, [pc, #308]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d040      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	4b47      	ldr	r3, [pc, #284]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d115      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e07f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b41      	ldr	r3, [pc, #260]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e073      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3d      	ldr	r3, [pc, #244]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e06b      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b39      	ldr	r3, [pc, #228]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4936      	ldr	r1, [pc, #216]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800439c:	4313      	orrs	r3, r2
 800439e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fc feba 	bl	8001118 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fc feb6 	bl	8001118 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e053      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2d      	ldr	r3, [pc, #180]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b27      	ldr	r3, [pc, #156]	@ (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d210      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b24      	ldr	r3, [pc, #144]	@ (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 0207 	bic.w	r2, r3, #7
 80043e6:	4922      	ldr	r1, [pc, #136]	@ (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b20      	ldr	r3, [pc, #128]	@ (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e032      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800440c:	4b19      	ldr	r3, [pc, #100]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4916      	ldr	r1, [pc, #88]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800442a:	4b12      	ldr	r3, [pc, #72]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	490e      	ldr	r1, [pc, #56]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800443e:	f000 f821 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8004442:	4602      	mov	r2, r0
 8004444:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	490a      	ldr	r1, [pc, #40]	@ (8004478 <HAL_RCC_ClockConfig+0x1c8>)
 8004450:	5ccb      	ldrb	r3, [r1, r3]
 8004452:	fa22 f303 	lsr.w	r3, r2, r3
 8004456:	4a09      	ldr	r2, [pc, #36]	@ (800447c <HAL_RCC_ClockConfig+0x1cc>)
 8004458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800445a:	4b09      	ldr	r3, [pc, #36]	@ (8004480 <HAL_RCC_ClockConfig+0x1d0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc fe18 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40022000 	.word	0x40022000
 8004474:	40021000 	.word	0x40021000
 8004478:	0800b514 	.word	0x0800b514
 800447c:	20000000 	.word	0x20000000
 8004480:	2000000c 	.word	0x2000000c

08004484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800449e:	4b1e      	ldr	r3, [pc, #120]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x94>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d002      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x30>
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d003      	beq.n	80044ba <HAL_RCC_GetSysClockFreq+0x36>
 80044b2:	e027      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044b4:	4b19      	ldr	r3, [pc, #100]	@ (800451c <HAL_RCC_GetSysClockFreq+0x98>)
 80044b6:	613b      	str	r3, [r7, #16]
      break;
 80044b8:	e027      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	0c9b      	lsrs	r3, r3, #18
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	4a17      	ldr	r2, [pc, #92]	@ (8004520 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044c4:	5cd3      	ldrb	r3, [r2, r3]
 80044c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d010      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044d2:	4b11      	ldr	r3, [pc, #68]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x94>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	0c5b      	lsrs	r3, r3, #17
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	4a11      	ldr	r2, [pc, #68]	@ (8004524 <HAL_RCC_GetSysClockFreq+0xa0>)
 80044de:	5cd3      	ldrb	r3, [r2, r3]
 80044e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a0d      	ldr	r2, [pc, #52]	@ (800451c <HAL_RCC_GetSysClockFreq+0x98>)
 80044e6:	fb03 f202 	mul.w	r2, r3, r2
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	e004      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004528 <HAL_RCC_GetSysClockFreq+0xa4>)
 80044f8:	fb02 f303 	mul.w	r3, r2, r3
 80044fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	613b      	str	r3, [r7, #16]
      break;
 8004502:	e002      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004504:	4b05      	ldr	r3, [pc, #20]	@ (800451c <HAL_RCC_GetSysClockFreq+0x98>)
 8004506:	613b      	str	r3, [r7, #16]
      break;
 8004508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800450a:	693b      	ldr	r3, [r7, #16]
}
 800450c:	4618      	mov	r0, r3
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000
 800451c:	007a1200 	.word	0x007a1200
 8004520:	0800b52c 	.word	0x0800b52c
 8004524:	0800b53c 	.word	0x0800b53c
 8004528:	003d0900 	.word	0x003d0900

0800452c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004530:	4b02      	ldr	r3, [pc, #8]	@ (800453c <HAL_RCC_GetHCLKFreq+0x10>)
 8004532:	681b      	ldr	r3, [r3, #0]
}
 8004534:	4618      	mov	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr
 800453c:	20000000 	.word	0x20000000

08004540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004544:	f7ff fff2 	bl	800452c <HAL_RCC_GetHCLKFreq>
 8004548:	4602      	mov	r2, r0
 800454a:	4b05      	ldr	r3, [pc, #20]	@ (8004560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	0a1b      	lsrs	r3, r3, #8
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	4903      	ldr	r1, [pc, #12]	@ (8004564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004556:	5ccb      	ldrb	r3, [r1, r3]
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40021000 	.word	0x40021000
 8004564:	0800b524 	.word	0x0800b524

08004568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800456c:	f7ff ffde 	bl	800452c <HAL_RCC_GetHCLKFreq>
 8004570:	4602      	mov	r2, r0
 8004572:	4b05      	ldr	r3, [pc, #20]	@ (8004588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	0adb      	lsrs	r3, r3, #11
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	4903      	ldr	r1, [pc, #12]	@ (800458c <HAL_RCC_GetPCLK2Freq+0x24>)
 800457e:	5ccb      	ldrb	r3, [r1, r3]
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004584:	4618      	mov	r0, r3
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40021000 	.word	0x40021000
 800458c:	0800b524 	.word	0x0800b524

08004590 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004598:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <RCC_Delay+0x34>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a0a      	ldr	r2, [pc, #40]	@ (80045c8 <RCC_Delay+0x38>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	0a5b      	lsrs	r3, r3, #9
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	fb02 f303 	mul.w	r3, r2, r3
 80045aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045ac:	bf00      	nop
  }
  while (Delay --);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1e5a      	subs	r2, r3, #1
 80045b2:	60fa      	str	r2, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f9      	bne.n	80045ac <RCC_Delay+0x1c>
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr
 80045c4:	20000000 	.word	0x20000000
 80045c8:	10624dd3 	.word	0x10624dd3

080045cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d07d      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80045e8:	2300      	movs	r3, #0
 80045ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ec:	4b4f      	ldr	r3, [pc, #316]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10d      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f8:	4b4c      	ldr	r3, [pc, #304]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	4a4b      	ldr	r2, [pc, #300]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004602:	61d3      	str	r3, [r2, #28]
 8004604:	4b49      	ldr	r3, [pc, #292]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004610:	2301      	movs	r3, #1
 8004612:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	4b46      	ldr	r3, [pc, #280]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d118      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004620:	4b43      	ldr	r3, [pc, #268]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a42      	ldr	r2, [pc, #264]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800462a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800462c:	f7fc fd74 	bl	8001118 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004632:	e008      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004634:	f7fc fd70 	bl	8001118 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	@ 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e06d      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004646:	4b3a      	ldr	r3, [pc, #232]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004652:	4b36      	ldr	r3, [pc, #216]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800465a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d02e      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	429a      	cmp	r2, r3
 800466e:	d027      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004670:	4b2e      	ldr	r3, [pc, #184]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004678:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800467a:	4b2e      	ldr	r3, [pc, #184]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800467c:	2201      	movs	r2, #1
 800467e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004680:	4b2c      	ldr	r3, [pc, #176]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004686:	4a29      	ldr	r2, [pc, #164]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d014      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004696:	f7fc fd3f 	bl	8001118 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469c:	e00a      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469e:	f7fc fd3b 	bl	8001118 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e036      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b4:	4b1d      	ldr	r3, [pc, #116]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0ee      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046c0:	4b1a      	ldr	r3, [pc, #104]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	4917      	ldr	r1, [pc, #92]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d105      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d8:	4b14      	ldr	r3, [pc, #80]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	4a13      	ldr	r2, [pc, #76]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046f0:	4b0e      	ldr	r3, [pc, #56]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	490b      	ldr	r1, [pc, #44]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800470e:	4b07      	ldr	r3, [pc, #28]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	4904      	ldr	r1, [pc, #16]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471c:	4313      	orrs	r3, r2
 800471e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000
 8004730:	40007000 	.word	0x40007000
 8004734:	42420440 	.word	0x42420440

08004738 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	2300      	movs	r3, #0
 8004752:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b10      	cmp	r3, #16
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b10      	cmp	r3, #16
 800475e:	f200 808a 	bhi.w	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d045      	beq.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d075      	beq.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800476e:	e082      	b.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004770:	4b46      	ldr	r3, [pc, #280]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004776:	4b45      	ldr	r3, [pc, #276]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d07b      	beq.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	0c9b      	lsrs	r3, r3, #18
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	4a41      	ldr	r2, [pc, #260]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800478c:	5cd3      	ldrb	r3, [r2, r3]
 800478e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d015      	beq.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800479a:	4b3c      	ldr	r3, [pc, #240]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	0c5b      	lsrs	r3, r3, #17
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	4a3b      	ldr	r2, [pc, #236]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80047a6:	5cd3      	ldrb	r3, [r2, r3]
 80047a8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80047b4:	4a38      	ldr	r2, [pc, #224]	@ (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	fb02 f303 	mul.w	r3, r2, r3
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	e004      	b.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4a34      	ldr	r2, [pc, #208]	@ (800489c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80047d0:	4b2e      	ldr	r3, [pc, #184]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047dc:	d102      	bne.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	61bb      	str	r3, [r7, #24]
      break;
 80047e2:	e04a      	b.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	4a2d      	ldr	r2, [pc, #180]	@ (80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	085b      	lsrs	r3, r3, #1
 80047f0:	61bb      	str	r3, [r7, #24]
      break;
 80047f2:	e042      	b.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80047f4:	4b25      	ldr	r3, [pc, #148]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004800:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004804:	d108      	bne.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004810:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	e01f      	b.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800481e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004822:	d109      	bne.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004824:	4b19      	ldr	r3, [pc, #100]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004830:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	e00f      	b.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004842:	d11c      	bne.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004844:	4b11      	ldr	r3, [pc, #68]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d016      	beq.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004850:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004854:	61bb      	str	r3, [r7, #24]
      break;
 8004856:	e012      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004858:	e011      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800485a:	f7ff fe85 	bl	8004568 <HAL_RCC_GetPCLK2Freq>
 800485e:	4602      	mov	r2, r0
 8004860:	4b0a      	ldr	r3, [pc, #40]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	0b9b      	lsrs	r3, r3, #14
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	3301      	adds	r3, #1
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	61bb      	str	r3, [r7, #24]
      break;
 8004874:	e004      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004876:	bf00      	nop
 8004878:	e002      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800487a:	bf00      	nop
 800487c:	e000      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800487e:	bf00      	nop
    }
  }
  return (frequency);
 8004880:	69bb      	ldr	r3, [r7, #24]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40021000 	.word	0x40021000
 8004890:	0800b540 	.word	0x0800b540
 8004894:	0800b550 	.word	0x0800b550
 8004898:	007a1200 	.word	0x007a1200
 800489c:	003d0900 	.word	0x003d0900
 80048a0:	aaaaaaab 	.word	0xaaaaaaab

080048a4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e07a      	b.n	80049b0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	7c5b      	ldrb	r3, [r3, #17]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d105      	bne.n	80048d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fc f978 	bl	8000bc0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f870 	bl	80049bc <HAL_RTC_WaitForSynchro>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2204      	movs	r2, #4
 80048e6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e061      	b.n	80049b0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f892 	bl	8004a16 <RTC_EnterInitMode>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d004      	beq.n	8004902 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2204      	movs	r2, #4
 80048fc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e056      	b.n	80049b0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0207 	bic.w	r2, r2, #7
 8004910:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800491a:	4b27      	ldr	r3, [pc, #156]	@ (80049b8 <HAL_RTC_Init+0x114>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491e:	4a26      	ldr	r2, [pc, #152]	@ (80049b8 <HAL_RTC_Init+0x114>)
 8004920:	f023 0301 	bic.w	r3, r3, #1
 8004924:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004926:	4b24      	ldr	r3, [pc, #144]	@ (80049b8 <HAL_RTC_Init+0x114>)
 8004928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	4921      	ldr	r1, [pc, #132]	@ (80049b8 <HAL_RTC_Init+0x114>)
 8004934:	4313      	orrs	r3, r2
 8004936:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d003      	beq.n	800494a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e00e      	b.n	8004968 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800494a:	2001      	movs	r0, #1
 800494c:	f7ff fef4 	bl	8004738 <HAL_RCCEx_GetPeriphCLKFreq>
 8004950:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2204      	movs	r2, #4
 800495c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e026      	b.n	80049b0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3b01      	subs	r3, #1
 8004966:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	0c1a      	lsrs	r2, r3, #16
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f002 020f 	and.w	r2, r2, #15
 8004974:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	b292      	uxth	r2, r2
 800497e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f870 	bl	8004a66 <RTC_ExitInitMode>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2204      	movs	r2, #4
 8004990:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e00c      	b.n	80049b0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80049ae:	2300      	movs	r3, #0
  }
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40006c00 	.word	0x40006c00

080049bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e01d      	b.n	8004a0e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0208 	bic.w	r2, r2, #8
 80049e0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80049e2:	f7fc fb99 	bl	8001118 <HAL_GetTick>
 80049e6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80049e8:	e009      	b.n	80049fe <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80049ea:	f7fc fb95 	bl	8001118 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049f8:	d901      	bls.n	80049fe <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e007      	b.n	8004a0e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0ee      	beq.n	80049ea <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004a22:	f7fc fb79 	bl	8001118 <HAL_GetTick>
 8004a26:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a28:	e009      	b.n	8004a3e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a2a:	f7fc fb75 	bl	8001118 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a38:	d901      	bls.n	8004a3e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e00f      	b.n	8004a5e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0ee      	beq.n	8004a2a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0210 	orr.w	r2, r2, #16
 8004a5a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0210 	bic.w	r2, r2, #16
 8004a80:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004a82:	f7fc fb49 	bl	8001118 <HAL_GetTick>
 8004a86:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a88:	e009      	b.n	8004a9e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a8a:	f7fc fb45 	bl	8001118 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a98:	d901      	bls.n	8004a9e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e007      	b.n	8004aae <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0ee      	beq.n	8004a8a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8004ac8:	4b07      	ldr	r3, [pc, #28]	@ (8004ae8 <HAL_RTCEx_BKUPWrite+0x30>)
 8004aca:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	b292      	uxth	r2, r2
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr
 8004ae8:	40006c00 	.word	0x40006c00

08004aec <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8004afe:	4b08      	ldr	r3, [pc, #32]	@ (8004b20 <HAL_RTCEx_BKUPRead+0x34>)
 8004b00:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8004b14:	68bb      	ldr	r3, [r7, #8]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr
 8004b20:	40006c00 	.word	0x40006c00

08004b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e042      	b.n	8004bbc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fc f99e 	bl	8000e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2224      	movs	r2, #36	@ 0x24
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 ff6f 	bl	8005a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695a      	ldr	r2, [r3, #20]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e024      	b.n	8004c20 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2224      	movs	r2, #36	@ 0x24
 8004bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bec:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc f9ca 	bl	8000f88 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	@ 0x28
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d175      	bne.n	8004d34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <HAL_UART_Transmit+0x2c>
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e06e      	b.n	8004d36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2221      	movs	r2, #33	@ 0x21
 8004c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c66:	f7fc fa57 	bl	8001118 <HAL_GetTick>
 8004c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	88fa      	ldrh	r2, [r7, #6]
 8004c70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	88fa      	ldrh	r2, [r7, #6]
 8004c76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c80:	d108      	bne.n	8004c94 <HAL_UART_Transmit+0x6c>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d104      	bne.n	8004c94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	e003      	b.n	8004c9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c9c:	e02e      	b.n	8004cfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2180      	movs	r1, #128	@ 0x80
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 fc1a 	bl	80054e2 <UART_WaitOnFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e03a      	b.n	8004d36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	3302      	adds	r3, #2
 8004cda:	61bb      	str	r3, [r7, #24]
 8004cdc:	e007      	b.n	8004cee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	781a      	ldrb	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	3301      	adds	r3, #1
 8004cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1cb      	bne.n	8004c9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2140      	movs	r1, #64	@ 0x40
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fbe6 	bl	80054e2 <UART_WaitOnFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e006      	b.n	8004d36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	e000      	b.n	8004d36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d34:	2302      	movs	r3, #2
  }
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d112      	bne.n	8004d7e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_UART_Receive_DMA+0x26>
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e00b      	b.n	8004d80 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	461a      	mov	r2, r3
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 fc0d 	bl	8005594 <UART_Start_Receive_DMA>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	e000      	b.n	8004d80 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d7e:	2302      	movs	r3, #2
  }
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b0ba      	sub	sp, #232	@ 0xe8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10f      	bne.n	8004dee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_UART_IRQHandler+0x66>
 8004dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fd72 	bl	80058d0 <UART_Receive_IT>
      return;
 8004dec:	e25b      	b.n	80052a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 80de 	beq.w	8004fb4 <HAL_UART_IRQHandler+0x22c>
 8004df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d106      	bne.n	8004e12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80d1 	beq.w	8004fb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00b      	beq.n	8004e36 <HAL_UART_IRQHandler+0xae>
 8004e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d005      	beq.n	8004e36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2e:	f043 0201 	orr.w	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00b      	beq.n	8004e5a <HAL_UART_IRQHandler+0xd2>
 8004e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e52:	f043 0202 	orr.w	r2, r3, #2
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00b      	beq.n	8004e7e <HAL_UART_IRQHandler+0xf6>
 8004e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e76:	f043 0204 	orr.w	r2, r3, #4
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d011      	beq.n	8004eae <HAL_UART_IRQHandler+0x126>
 8004e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea6:	f043 0208 	orr.w	r2, r3, #8
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 81f2 	beq.w	800529c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x14e>
 8004ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fcfd 	bl	80058d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bf14      	ite	ne
 8004ee4:	2301      	movne	r3, #1
 8004ee6:	2300      	moveq	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <HAL_UART_IRQHandler+0x17a>
 8004efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d04f      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fc07 	bl	8005716 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d041      	beq.n	8004f9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3314      	adds	r3, #20
 8004f1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3314      	adds	r3, #20
 8004f3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1d9      	bne.n	8004f16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d013      	beq.n	8004f92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6e:	4a7e      	ldr	r2, [pc, #504]	@ (8005168 <HAL_UART_IRQHandler+0x3e0>)
 8004f70:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fc fb8e 	bl	8001698 <HAL_DMA_Abort_IT>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d016      	beq.n	8004fb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f90:	e00e      	b.n	8004fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fb ff68 	bl	8000e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f98:	e00a      	b.n	8004fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fb ff64 	bl	8000e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa0:	e006      	b.n	8004fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fb ff60 	bl	8000e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fae:	e175      	b.n	800529c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	bf00      	nop
    return;
 8004fb2:	e173      	b.n	800529c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	f040 814f 	bne.w	800525c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 8148 	beq.w	800525c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd0:	f003 0310 	and.w	r3, r3, #16
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8141 	beq.w	800525c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80b6 	beq.w	800516c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800500c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 8145 	beq.w	80052a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800501a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800501e:	429a      	cmp	r2, r3
 8005020:	f080 813e 	bcs.w	80052a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800502a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	2b20      	cmp	r3, #32
 8005034:	f000 8088 	beq.w	8005148 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	330c      	adds	r3, #12
 800503e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800504e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005052:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005056:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	330c      	adds	r3, #12
 8005060:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005064:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005068:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005070:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800507c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1d9      	bne.n	8005038 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3314      	adds	r3, #20
 800508a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005094:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005096:	f023 0301 	bic.w	r3, r3, #1
 800509a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3314      	adds	r3, #20
 80050a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050a8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e1      	bne.n	8005084 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3314      	adds	r3, #20
 80050c6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3314      	adds	r3, #20
 80050e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050e4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050ec:	e841 2300 	strex	r3, r2, [r1]
 80050f0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e3      	bne.n	80050c0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005118:	f023 0310 	bic.w	r3, r3, #16
 800511c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	330c      	adds	r3, #12
 8005126:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800512a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800512c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005130:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005138:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e3      	bne.n	8005106 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005142:	4618      	mov	r0, r3
 8005144:	f7fc fa6c 	bl	8001620 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005156:	b29b      	uxth	r3, r3
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	b29b      	uxth	r3, r3
 800515c:	4619      	mov	r1, r3
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f8b6 	bl	80052d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005164:	e09c      	b.n	80052a0 <HAL_UART_IRQHandler+0x518>
 8005166:	bf00      	nop
 8005168:	080057db 	.word	0x080057db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005174:	b29b      	uxth	r3, r3
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 808e 	beq.w	80052a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005188:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8089 	beq.w	80052a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	330c      	adds	r3, #12
 8005198:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	330c      	adds	r3, #12
 80051b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80051b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e3      	bne.n	8005192 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3314      	adds	r3, #20
 80051d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	623b      	str	r3, [r7, #32]
   return(result);
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	f023 0301 	bic.w	r3, r3, #1
 80051e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3314      	adds	r3, #20
 80051ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80051f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e3      	bne.n	80051ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	330c      	adds	r3, #12
 8005216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0310 	bic.w	r3, r3, #16
 8005226:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	330c      	adds	r3, #12
 8005230:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005234:	61fa      	str	r2, [r7, #28]
 8005236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	69b9      	ldr	r1, [r7, #24]
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	617b      	str	r3, [r7, #20]
   return(result);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e3      	bne.n	8005210 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800524e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f83b 	bl	80052d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800525a:	e023      	b.n	80052a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800525c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005264:	2b00      	cmp	r3, #0
 8005266:	d009      	beq.n	800527c <HAL_UART_IRQHandler+0x4f4>
 8005268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800526c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fac4 	bl	8005802 <UART_Transmit_IT>
    return;
 800527a:	e014      	b.n	80052a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800527c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00e      	beq.n	80052a6 <HAL_UART_IRQHandler+0x51e>
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800528c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fb03 	bl	80058a0 <UART_EndTransmit_IT>
    return;
 800529a:	e004      	b.n	80052a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800529c:	bf00      	nop
 800529e:	e002      	b.n	80052a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80052a0:	bf00      	nop
 80052a2:	e000      	b.n	80052a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80052a4:	bf00      	nop
  }
}
 80052a6:	37e8      	adds	r7, #232	@ 0xe8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr

080052be <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr

080052d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr

080052e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b09c      	sub	sp, #112	@ 0x70
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d172      	bne.n	80053e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005304:	2200      	movs	r2, #0
 8005306:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005308:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800531a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800531e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	330c      	adds	r3, #12
 8005326:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005328:	65ba      	str	r2, [r7, #88]	@ 0x58
 800532a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800532e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e5      	bne.n	8005308 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3314      	adds	r3, #20
 8005342:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800534c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	667b      	str	r3, [r7, #100]	@ 0x64
 8005354:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3314      	adds	r3, #20
 800535a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800535c:	647a      	str	r2, [r7, #68]	@ 0x44
 800535e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800536a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e5      	bne.n	800533c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3314      	adds	r3, #20
 8005376:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	623b      	str	r3, [r7, #32]
   return(result);
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005386:	663b      	str	r3, [r7, #96]	@ 0x60
 8005388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3314      	adds	r3, #20
 800538e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005390:	633a      	str	r2, [r7, #48]	@ 0x30
 8005392:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800539e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e5      	bne.n	8005370 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d119      	bne.n	80053e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0310 	bic.w	r3, r3, #16
 80053ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	330c      	adds	r3, #12
 80053d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80053d4:	61fa      	str	r2, [r7, #28]
 80053d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	69b9      	ldr	r1, [r7, #24]
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	617b      	str	r3, [r7, #20]
   return(result);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e5      	bne.n	80053b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ea:	2200      	movs	r2, #0
 80053ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d106      	bne.n	8005404 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053fa:	4619      	mov	r1, r3
 80053fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80053fe:	f7ff ff67 	bl	80052d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005402:	e002      	b.n	800540a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005404:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005406:	f7fb fd38 	bl	8000e7a <HAL_UART_RxCpltCallback>
}
 800540a:	bf00      	nop
 800540c:	3770      	adds	r7, #112	@ 0x70
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b084      	sub	sp, #16
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542a:	2b01      	cmp	r3, #1
 800542c:	d108      	bne.n	8005440 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005432:	085b      	lsrs	r3, r3, #1
 8005434:	b29b      	uxth	r3, r3
 8005436:	4619      	mov	r1, r3
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff ff49 	bl	80052d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800543e:	e002      	b.n	8005446 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff ff3c 	bl	80052be <HAL_UART_RxHalfCpltCallback>
}
 8005446:	bf00      	nop
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	bf14      	ite	ne
 800546e:	2301      	movne	r3, #1
 8005470:	2300      	moveq	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b21      	cmp	r3, #33	@ 0x21
 8005480:	d108      	bne.n	8005494 <UART_DMAError+0x46>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800548e:	68b8      	ldr	r0, [r7, #8]
 8005490:	f000 f91a 	bl	80056c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bf14      	ite	ne
 80054a2:	2301      	movne	r3, #1
 80054a4:	2300      	moveq	r3, #0
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b22      	cmp	r3, #34	@ 0x22
 80054b4:	d108      	bne.n	80054c8 <UART_DMAError+0x7a>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2200      	movs	r2, #0
 80054c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80054c2:	68b8      	ldr	r0, [r7, #8]
 80054c4:	f000 f927 	bl	8005716 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054cc:	f043 0210 	orr.w	r2, r3, #16
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054d4:	68b8      	ldr	r0, [r7, #8]
 80054d6:	f7fb fcc7 	bl	8000e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b086      	sub	sp, #24
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	603b      	str	r3, [r7, #0]
 80054ee:	4613      	mov	r3, r2
 80054f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f2:	e03b      	b.n	800556c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	d037      	beq.n	800556c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fc:	f7fb fe0c 	bl	8001118 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	6a3a      	ldr	r2, [r7, #32]
 8005508:	429a      	cmp	r2, r3
 800550a:	d302      	bcc.n	8005512 <UART_WaitOnFlagUntilTimeout+0x30>
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e03a      	b.n	800558c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d023      	beq.n	800556c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b80      	cmp	r3, #128	@ 0x80
 8005528:	d020      	beq.n	800556c <UART_WaitOnFlagUntilTimeout+0x8a>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b40      	cmp	r3, #64	@ 0x40
 800552e:	d01d      	beq.n	800556c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b08      	cmp	r3, #8
 800553c:	d116      	bne.n	800556c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 f8de 	bl	8005716 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2208      	movs	r2, #8
 800555e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e00f      	b.n	800558c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	4013      	ands	r3, r2
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	429a      	cmp	r2, r3
 800557a:	bf0c      	ite	eq
 800557c:	2301      	moveq	r3, #1
 800557e:	2300      	movne	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	461a      	mov	r2, r3
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	429a      	cmp	r2, r3
 8005588:	d0b4      	beq.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b098      	sub	sp, #96	@ 0x60
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	4613      	mov	r3, r2
 80055a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	88fa      	ldrh	r2, [r7, #6]
 80055ac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2222      	movs	r2, #34	@ 0x22
 80055b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c0:	4a3e      	ldr	r2, [pc, #248]	@ (80056bc <UART_Start_Receive_DMA+0x128>)
 80055c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c8:	4a3d      	ldr	r2, [pc, #244]	@ (80056c0 <UART_Start_Receive_DMA+0x12c>)
 80055ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d0:	4a3c      	ldr	r2, [pc, #240]	@ (80056c4 <UART_Start_Receive_DMA+0x130>)
 80055d2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d8:	2200      	movs	r2, #0
 80055da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80055dc:	f107 0308 	add.w	r3, r7, #8
 80055e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3304      	adds	r3, #4
 80055ec:	4619      	mov	r1, r3
 80055ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	88fb      	ldrh	r3, [r7, #6]
 80055f4:	f7fb ffb4 	bl	8001560 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80055f8:	2300      	movs	r3, #0
 80055fa:	613b      	str	r3, [r7, #16]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d019      	beq.n	800564a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800562c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005636:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005638:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800563c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e5      	bne.n	8005616 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3314      	adds	r3, #20
 8005650:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800565a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565c:	f043 0301 	orr.w	r3, r3, #1
 8005660:	657b      	str	r3, [r7, #84]	@ 0x54
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3314      	adds	r3, #20
 8005668:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800566a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800566c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005670:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e5      	bne.n	800564a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3314      	adds	r3, #20
 8005684:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	617b      	str	r3, [r7, #20]
   return(result);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005694:	653b      	str	r3, [r7, #80]	@ 0x50
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3314      	adds	r3, #20
 800569c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800569e:	627a      	str	r2, [r7, #36]	@ 0x24
 80056a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6a39      	ldr	r1, [r7, #32]
 80056a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e5      	bne.n	800567e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3760      	adds	r7, #96	@ 0x60
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	080052e7 	.word	0x080052e7
 80056c0:	08005413 	.word	0x08005413
 80056c4:	0800544f 	.word	0x0800544f

080056c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b089      	sub	sp, #36	@ 0x24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	330c      	adds	r3, #12
 80056d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	60bb      	str	r3, [r7, #8]
   return(result);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	330c      	adds	r3, #12
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	61ba      	str	r2, [r7, #24]
 80056f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6979      	ldr	r1, [r7, #20]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	613b      	str	r3, [r7, #16]
   return(result);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e5      	bne.n	80056d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800570c:	bf00      	nop
 800570e:	3724      	adds	r7, #36	@ 0x24
 8005710:	46bd      	mov	sp, r7
 8005712:	bc80      	pop	{r7}
 8005714:	4770      	bx	lr

08005716 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005716:	b480      	push	{r7}
 8005718:	b095      	sub	sp, #84	@ 0x54
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	330c      	adds	r3, #12
 8005724:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800572e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005730:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005734:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	330c      	adds	r3, #12
 800573c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800573e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005740:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005744:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800574c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e5      	bne.n	800571e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3314      	adds	r3, #20
 8005758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	61fb      	str	r3, [r7, #28]
   return(result);
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	64bb      	str	r3, [r7, #72]	@ 0x48
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3314      	adds	r3, #20
 8005770:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005772:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005774:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005778:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e5      	bne.n	8005752 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578a:	2b01      	cmp	r3, #1
 800578c:	d119      	bne.n	80057c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	60bb      	str	r3, [r7, #8]
   return(result);
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f023 0310 	bic.w	r3, r3, #16
 80057a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057ae:	61ba      	str	r2, [r7, #24]
 80057b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6979      	ldr	r1, [r7, #20]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	613b      	str	r3, [r7, #16]
   return(result);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e5      	bne.n	800578e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057d0:	bf00      	nop
 80057d2:	3754      	adds	r7, #84	@ 0x54
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7fb fb37 	bl	8000e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057fa:	bf00      	nop
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b21      	cmp	r3, #33	@ 0x21
 8005814:	d13e      	bne.n	8005894 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800581e:	d114      	bne.n	800584a <UART_Transmit_IT+0x48>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d110      	bne.n	800584a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800583c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	1c9a      	adds	r2, r3, #2
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	621a      	str	r2, [r3, #32]
 8005848:	e008      	b.n	800585c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	1c59      	adds	r1, r3, #1
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6211      	str	r1, [r2, #32]
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	b29b      	uxth	r3, r3
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	4619      	mov	r1, r3
 800586a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10f      	bne.n	8005890 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800587e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800588e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	e000      	b.n	8005896 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005894:	2302      	movs	r3, #2
  }
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr

080058a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff fcf3 	bl	80052ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08c      	sub	sp, #48	@ 0x30
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b22      	cmp	r3, #34	@ 0x22
 80058e2:	f040 80ae 	bne.w	8005a42 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ee:	d117      	bne.n	8005920 <UART_Receive_IT+0x50>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d113      	bne.n	8005920 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005900:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	b29b      	uxth	r3, r3
 800590a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800590e:	b29a      	uxth	r2, r3
 8005910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005912:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005918:	1c9a      	adds	r2, r3, #2
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	629a      	str	r2, [r3, #40]	@ 0x28
 800591e:	e026      	b.n	800596e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005924:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005926:	2300      	movs	r3, #0
 8005928:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005932:	d007      	beq.n	8005944 <UART_Receive_IT+0x74>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <UART_Receive_IT+0x82>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d106      	bne.n	8005952 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	b2da      	uxtb	r2, r3
 800594c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	e008      	b.n	8005964 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800595e:	b2da      	uxtb	r2, r3
 8005960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005962:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29b      	uxth	r3, r3
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	4619      	mov	r1, r3
 800597c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800597e:	2b00      	cmp	r3, #0
 8005980:	d15d      	bne.n	8005a3e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0220 	bic.w	r2, r2, #32
 8005990:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0201 	bic.w	r2, r2, #1
 80059b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d135      	bne.n	8005a34 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	613b      	str	r3, [r7, #16]
   return(result);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f023 0310 	bic.w	r3, r3, #16
 80059e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ee:	623a      	str	r2, [r7, #32]
 80059f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	69f9      	ldr	r1, [r7, #28]
 80059f4:	6a3a      	ldr	r2, [r7, #32]
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e5      	bne.n	80059ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b10      	cmp	r3, #16
 8005a0e:	d10a      	bne.n	8005a26 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff fc4f 	bl	80052d0 <HAL_UARTEx_RxEventCallback>
 8005a32:	e002      	b.n	8005a3a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7fb fa20 	bl	8000e7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e002      	b.n	8005a44 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e000      	b.n	8005a44 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a42:	2302      	movs	r3, #2
  }
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3730      	adds	r7, #48	@ 0x30
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005a86:	f023 030c 	bic.w	r3, r3, #12
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6812      	ldr	r2, [r2, #0]
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	430b      	orrs	r3, r1
 8005a92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a2c      	ldr	r2, [pc, #176]	@ (8005b60 <UART_SetConfig+0x114>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d103      	bne.n	8005abc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ab4:	f7fe fd58 	bl	8004568 <HAL_RCC_GetPCLK2Freq>
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	e002      	b.n	8005ac2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005abc:	f7fe fd40 	bl	8004540 <HAL_RCC_GetPCLK1Freq>
 8005ac0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	009a      	lsls	r2, r3, #2
 8005acc:	441a      	add	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad8:	4a22      	ldr	r2, [pc, #136]	@ (8005b64 <UART_SetConfig+0x118>)
 8005ada:	fba2 2303 	umull	r2, r3, r2, r3
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	0119      	lsls	r1, r3, #4
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	009a      	lsls	r2, r3, #2
 8005aec:	441a      	add	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005af8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b64 <UART_SetConfig+0x118>)
 8005afa:	fba3 0302 	umull	r0, r3, r3, r2
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	2064      	movs	r0, #100	@ 0x64
 8005b02:	fb00 f303 	mul.w	r3, r0, r3
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	3332      	adds	r3, #50	@ 0x32
 8005b0c:	4a15      	ldr	r2, [pc, #84]	@ (8005b64 <UART_SetConfig+0x118>)
 8005b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b18:	4419      	add	r1, r3
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	009a      	lsls	r2, r3, #2
 8005b24:	441a      	add	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b30:	4b0c      	ldr	r3, [pc, #48]	@ (8005b64 <UART_SetConfig+0x118>)
 8005b32:	fba3 0302 	umull	r0, r3, r3, r2
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	2064      	movs	r0, #100	@ 0x64
 8005b3a:	fb00 f303 	mul.w	r3, r0, r3
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	3332      	adds	r3, #50	@ 0x32
 8005b44:	4a07      	ldr	r2, [pc, #28]	@ (8005b64 <UART_SetConfig+0x118>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	f003 020f 	and.w	r2, r3, #15
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	440a      	add	r2, r1
 8005b56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	40013800 	.word	0x40013800
 8005b64:	51eb851f 	.word	0x51eb851f

08005b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	4638      	mov	r0, r7
 8005b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr

08005b82 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b92:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005b96:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr

08005bae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b085      	sub	sp, #20
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bb6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005bba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	4013      	ands	r3, r2
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr

08005be2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	460b      	mov	r3, r1
 8005bec:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr

08005bfa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	4638      	mov	r0, r7
 8005c04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr

08005c34 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b09d      	sub	sp, #116	@ 0x74
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	78db      	ldrb	r3, [r3, #3]
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d81f      	bhi.n	8005ca6 <USB_ActivateEndpoint+0x72>
 8005c66:	a201      	add	r2, pc, #4	@ (adr r2, 8005c6c <USB_ActivateEndpoint+0x38>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005c7d 	.word	0x08005c7d
 8005c70:	08005c99 	.word	0x08005c99
 8005c74:	08005caf 	.word	0x08005caf
 8005c78:	08005c8b 	.word	0x08005c8b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005c7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005c88:	e012      	b.n	8005cb0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005c8a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c8e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005c92:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005c96:	e00b      	b.n	8005cb0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005c98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ca0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005ca4:	e004      	b.n	8005cb0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005cac:	e000      	b.n	8005cb0 <USB_ActivateEndpoint+0x7c>
      break;
 8005cae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	441a      	add	r2, r3
 8005cba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005cbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	7812      	ldrb	r2, [r2, #0]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	441a      	add	r2, r3
 8005cfe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005d02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	7b1b      	ldrb	r3, [r3, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f040 8178 	bne.w	8006010 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8084 	beq.w	8005e32 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	61bb      	str	r3, [r7, #24]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	011a      	lsls	r2, r3, #4
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	88db      	ldrh	r3, [r3, #6]
 8005d52:	085b      	lsrs	r3, r3, #1
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	827b      	strh	r3, [r7, #18]
 8005d6c:	8a7b      	ldrh	r3, [r7, #18]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d01b      	beq.n	8005dae <USB_ActivateEndpoint+0x17a>
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8c:	823b      	strh	r3, [r7, #16]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	441a      	add	r2, r3
 8005d98:	8a3b      	ldrh	r3, [r7, #16]
 8005d9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005da6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	78db      	ldrb	r3, [r3, #3]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d020      	beq.n	8005df8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dcc:	81bb      	strh	r3, [r7, #12]
 8005dce:	89bb      	ldrh	r3, [r7, #12]
 8005dd0:	f083 0320 	eor.w	r3, r3, #32
 8005dd4:	81bb      	strh	r3, [r7, #12]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	441a      	add	r2, r3
 8005de0:	89bb      	ldrh	r3, [r7, #12]
 8005de2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005de6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	8013      	strh	r3, [r2, #0]
 8005df6:	e2d5      	b.n	80063a4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e0e:	81fb      	strh	r3, [r7, #14]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	441a      	add	r2, r3
 8005e1a:	89fb      	ldrh	r3, [r7, #14]
 8005e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	8013      	strh	r3, [r2, #0]
 8005e30:	e2b8      	b.n	80063a4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	461a      	mov	r2, r3
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	4413      	add	r3, r2
 8005e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	011a      	lsls	r2, r3, #4
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	88db      	ldrh	r3, [r3, #6]
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e64:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e76:	4413      	add	r3, r2
 8005e78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	011a      	lsls	r2, r3, #4
 8005e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e82:	4413      	add	r3, r2
 8005e84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e98:	801a      	strh	r2, [r3, #0]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ea0:	d91d      	bls.n	8005ede <USB_ActivateEndpoint+0x2aa>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d102      	bne.n	8005ebc <USB_ActivateEndpoint+0x288>
 8005eb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	029b      	lsls	r3, r3, #10
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eda:	801a      	strh	r2, [r3, #0]
 8005edc:	e026      	b.n	8005f2c <USB_ActivateEndpoint+0x2f8>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <USB_ActivateEndpoint+0x2c8>
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	e017      	b.n	8005f2c <USB_ActivateEndpoint+0x2f8>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	085b      	lsrs	r3, r3, #1
 8005f02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <USB_ActivateEndpoint+0x2e2>
 8005f10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f12:	3301      	adds	r3, #1
 8005f14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	029b      	lsls	r3, r3, #10
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	4313      	orrs	r3, r2
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01b      	beq.n	8005f7c <USB_ActivateEndpoint+0x348>
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5a:	843b      	strh	r3, [r7, #32]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	441a      	add	r2, r3
 8005f66:	8c3b      	ldrh	r3, [r7, #32]
 8005f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d124      	bne.n	8005fce <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f9a:	83bb      	strh	r3, [r7, #28]
 8005f9c:	8bbb      	ldrh	r3, [r7, #28]
 8005f9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005fa2:	83bb      	strh	r3, [r7, #28]
 8005fa4:	8bbb      	ldrh	r3, [r7, #28]
 8005fa6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005faa:	83bb      	strh	r3, [r7, #28]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	441a      	add	r2, r3
 8005fb6:	8bbb      	ldrh	r3, [r7, #28]
 8005fb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	8013      	strh	r3, [r2, #0]
 8005fcc:	e1ea      	b.n	80063a4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe4:	83fb      	strh	r3, [r7, #30]
 8005fe6:	8bfb      	ldrh	r3, [r7, #30]
 8005fe8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005fec:	83fb      	strh	r3, [r7, #30]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	441a      	add	r2, r3
 8005ff8:	8bfb      	ldrh	r3, [r7, #30]
 8005ffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800600a:	b29b      	uxth	r3, r3
 800600c:	8013      	strh	r3, [r2, #0]
 800600e:	e1c9      	b.n	80063a4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	78db      	ldrb	r3, [r3, #3]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d11e      	bne.n	8006056 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800602a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800602e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	441a      	add	r2, r3
 800603c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006048:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800604c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006050:	b29b      	uxth	r3, r3
 8006052:	8013      	strh	r3, [r2, #0]
 8006054:	e01d      	b.n	8006092 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006068:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800606c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	441a      	add	r2, r3
 800607a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800607e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800608a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800609c:	b29b      	uxth	r3, r3
 800609e:	461a      	mov	r2, r3
 80060a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060a2:	4413      	add	r3, r2
 80060a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	011a      	lsls	r2, r3, #4
 80060ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	891b      	ldrh	r3, [r3, #8]
 80060ba:	085b      	lsrs	r3, r3, #1
 80060bc:	b29b      	uxth	r3, r3
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060c4:	801a      	strh	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	461a      	mov	r2, r3
 80060d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d6:	4413      	add	r3, r2
 80060d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	011a      	lsls	r2, r3, #4
 80060e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80060e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	895b      	ldrh	r3, [r3, #10]
 80060ee:	085b      	lsrs	r3, r3, #1
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060f8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f040 8093 	bne.w	800622a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006114:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01b      	beq.n	8006158 <USB_ActivateEndpoint+0x524>
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006136:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	441a      	add	r2, r3
 8006142:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006144:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006148:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800614c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006154:	b29b      	uxth	r3, r3
 8006156:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006166:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01b      	beq.n	80061a8 <USB_ActivateEndpoint+0x574>
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006186:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	441a      	add	r2, r3
 8006192:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006194:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006198:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800619c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061be:	873b      	strh	r3, [r7, #56]	@ 0x38
 80061c0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80061c2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80061c6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80061c8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80061ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80061ce:	873b      	strh	r3, [r7, #56]	@ 0x38
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	441a      	add	r2, r3
 80061da:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80061dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006206:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	441a      	add	r2, r3
 8006212:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006214:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006218:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800621c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006224:	b29b      	uxth	r3, r3
 8006226:	8013      	strh	r3, [r2, #0]
 8006228:	e0bc      	b.n	80063a4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800623a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800623e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d01d      	beq.n	8006282 <USB_ActivateEndpoint+0x64e>
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	441a      	add	r2, r3
 800626a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800626e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006272:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006276:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800627a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800627e:	b29b      	uxth	r3, r3
 8006280:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006292:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d01d      	beq.n	80062da <USB_ActivateEndpoint+0x6a6>
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	441a      	add	r2, r3
 80062c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80062c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	78db      	ldrb	r3, [r3, #3]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d024      	beq.n	800632c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80062fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006300:	f083 0320 	eor.w	r3, r3, #32
 8006304:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	441a      	add	r2, r3
 8006312:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006316:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800631a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800631e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006326:	b29b      	uxth	r3, r3
 8006328:	8013      	strh	r3, [r2, #0]
 800632a:	e01d      	b.n	8006368 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	881b      	ldrh	r3, [r3, #0]
 8006338:	b29b      	uxth	r3, r3
 800633a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800633e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006342:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	441a      	add	r2, r3
 8006350:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800635c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006364:	b29b      	uxth	r3, r3
 8006366:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800637a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800637e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	441a      	add	r2, r3
 800638c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800639c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80063a4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3774      	adds	r7, #116	@ 0x74
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bc80      	pop	{r7}
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop

080063b4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b08d      	sub	sp, #52	@ 0x34
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	7b1b      	ldrb	r3, [r3, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f040 808e 	bne.w	80064e4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	785b      	ldrb	r3, [r3, #1]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d044      	beq.n	800645a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	81bb      	strh	r3, [r7, #12]
 80063de:	89bb      	ldrh	r3, [r7, #12]
 80063e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01b      	beq.n	8006420 <USB_DeactivateEndpoint+0x6c>
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063fe:	817b      	strh	r3, [r7, #10]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	441a      	add	r2, r3
 800640a:	897b      	ldrh	r3, [r7, #10]
 800640c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006410:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006414:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006418:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800641c:	b29b      	uxth	r3, r3
 800641e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006432:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006436:	813b      	strh	r3, [r7, #8]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	441a      	add	r2, r3
 8006442:	893b      	ldrh	r3, [r7, #8]
 8006444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800644c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006454:	b29b      	uxth	r3, r3
 8006456:	8013      	strh	r3, [r2, #0]
 8006458:	e192      	b.n	8006780 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	827b      	strh	r3, [r7, #18]
 8006468:	8a7b      	ldrh	r3, [r7, #18]
 800646a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d01b      	beq.n	80064aa <USB_DeactivateEndpoint+0xf6>
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006488:	823b      	strh	r3, [r7, #16]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	441a      	add	r2, r3
 8006494:	8a3b      	ldrh	r3, [r7, #16]
 8006496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800649a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800649e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064c0:	81fb      	strh	r3, [r7, #14]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	441a      	add	r2, r3
 80064cc:	89fb      	ldrh	r3, [r7, #14]
 80064ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064de:	b29b      	uxth	r3, r3
 80064e0:	8013      	strh	r3, [r2, #0]
 80064e2:	e14d      	b.n	8006780 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	785b      	ldrb	r3, [r3, #1]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f040 80a5 	bne.w	8006638 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	843b      	strh	r3, [r7, #32]
 80064fc:	8c3b      	ldrh	r3, [r7, #32]
 80064fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d01b      	beq.n	800653e <USB_DeactivateEndpoint+0x18a>
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651c:	83fb      	strh	r3, [r7, #30]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	441a      	add	r2, r3
 8006528:	8bfb      	ldrh	r3, [r7, #30]
 800652a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800652e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006532:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800653a:	b29b      	uxth	r3, r3
 800653c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	83bb      	strh	r3, [r7, #28]
 800654c:	8bbb      	ldrh	r3, [r7, #28]
 800654e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d01b      	beq.n	800658e <USB_DeactivateEndpoint+0x1da>
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	b29b      	uxth	r3, r3
 8006564:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656c:	837b      	strh	r3, [r7, #26]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	441a      	add	r2, r3
 8006578:	8b7b      	ldrh	r3, [r7, #26]
 800657a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800657e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006586:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800658a:	b29b      	uxth	r3, r3
 800658c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	b29b      	uxth	r3, r3
 800659c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a4:	833b      	strh	r3, [r7, #24]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	441a      	add	r2, r3
 80065b0:	8b3b      	ldrh	r3, [r7, #24]
 80065b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065dc:	82fb      	strh	r3, [r7, #22]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	441a      	add	r2, r3
 80065e8:	8afb      	ldrh	r3, [r7, #22]
 80065ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006614:	82bb      	strh	r3, [r7, #20]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	441a      	add	r2, r3
 8006620:	8abb      	ldrh	r3, [r7, #20]
 8006622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006626:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800662a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800662e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006632:	b29b      	uxth	r3, r3
 8006634:	8013      	strh	r3, [r2, #0]
 8006636:	e0a3      	b.n	8006780 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006646:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01b      	beq.n	8006688 <USB_DeactivateEndpoint+0x2d4>
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006666:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	441a      	add	r2, r3
 8006672:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006674:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006678:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800667c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006684:	b29b      	uxth	r3, r3
 8006686:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006696:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01b      	beq.n	80066d8 <USB_DeactivateEndpoint+0x324>
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	441a      	add	r2, r3
 80066c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	441a      	add	r2, r3
 80066fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006700:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006704:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800670c:	b29b      	uxth	r3, r3
 800670e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	b29b      	uxth	r3, r3
 800671e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006722:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006726:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	441a      	add	r2, r3
 8006732:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006734:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006738:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800673c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006744:	b29b      	uxth	r3, r3
 8006746:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800675a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800675e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	441a      	add	r2, r3
 800676a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800676c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006770:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677c:	b29b      	uxth	r3, r3
 800677e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3734      	adds	r7, #52	@ 0x34
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr

0800678c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b0c2      	sub	sp, #264	@ 0x108
 8006790:	af00      	add	r7, sp, #0
 8006792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006796:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800679a:	6018      	str	r0, [r3, #0]
 800679c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	f040 86b7 	bne.w	8007526 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80067b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	699a      	ldr	r2, [r3, #24]
 80067c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d908      	bls.n	80067e6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80067d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80067e4:	e007      	b.n	80067f6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80067e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80067f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	7b1b      	ldrb	r3, [r3, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d13a      	bne.n	800687c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6959      	ldr	r1, [r3, #20]
 8006812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	88da      	ldrh	r2, [r3, #6]
 800681e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006822:	b29b      	uxth	r3, r3
 8006824:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006828:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800682c:	6800      	ldr	r0, [r0, #0]
 800682e:	f001 fc9c 	bl	800816a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006836:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006842:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800684c:	b29b      	uxth	r3, r3
 800684e:	461a      	mov	r2, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4413      	add	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
 8006856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	011a      	lsls	r2, r3, #4
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	4413      	add	r3, r2
 8006868:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	f000 be1f 	b.w	80074ba <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800687c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	78db      	ldrb	r3, [r3, #3]
 8006888:	2b02      	cmp	r3, #2
 800688a:	f040 8462 	bne.w	8007152 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800688e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6a1a      	ldr	r2, [r3, #32]
 800689a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	f240 83df 	bls.w	800706a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80068ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80068d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	441a      	add	r2, r3
 80068f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80068f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068fc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006904:	b29b      	uxth	r3, r3
 8006906:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6a1a      	ldr	r2, [r3, #32]
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006918:	1ad2      	subs	r2, r2, r3
 800691a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 81c7 	beq.w	8006cdc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800694e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006952:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	633b      	str	r3, [r7, #48]	@ 0x30
 800695a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	785b      	ldrb	r3, [r3, #1]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d177      	bne.n	8006a5a <USB_EPStartXfer+0x2ce>
 800696a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006984:	b29b      	uxth	r3, r3
 8006986:	461a      	mov	r2, r3
 8006988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698a:	4413      	add	r3, r2
 800698c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800698e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	011a      	lsls	r2, r3, #4
 800699c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699e:	4413      	add	r3, r2
 80069a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80069a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	801a      	strh	r2, [r3, #0]
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80069bc:	d921      	bls.n	8006a02 <USB_EPStartXfer+0x276>
 80069be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80069c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069cc:	f003 031f 	and.w	r3, r3, #31
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <USB_EPStartXfer+0x252>
 80069d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80069d8:	3b01      	subs	r3, #1
 80069da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80069de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	029b      	lsls	r3, r3, #10
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fe:	801a      	strh	r2, [r3, #0]
 8006a00:	e050      	b.n	8006aa4 <USB_EPStartXfer+0x318>
 8006a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <USB_EPStartXfer+0x294>
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	801a      	strh	r2, [r3, #0]
 8006a1e:	e041      	b.n	8006aa4 <USB_EPStartXfer+0x318>
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a24:	085b      	lsrs	r3, r3, #1
 8006a26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d004      	beq.n	8006a40 <USB_EPStartXfer+0x2b4>
 8006a36:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	029b      	lsls	r3, r3, #10
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a56:	801a      	strh	r2, [r3, #0]
 8006a58:	e024      	b.n	8006aa4 <USB_EPStartXfer+0x318>
 8006a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	785b      	ldrb	r3, [r3, #1]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d11c      	bne.n	8006aa4 <USB_EPStartXfer+0x318>
 8006a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7e:	4413      	add	r3, r2
 8006a80:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	011a      	lsls	r2, r3, #4
 8006a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a92:	4413      	add	r3, r2
 8006a94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	895b      	ldrh	r3, [r3, #10]
 8006ab0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6959      	ldr	r1, [r3, #20]
 8006ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006aca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ace:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ad2:	6800      	ldr	r0, [r0, #0]
 8006ad4:	f001 fb49 	bl	800816a <USB_WritePMA>
            ep->xfer_buff += len;
 8006ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695a      	ldr	r2, [r3, #20]
 8006ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae8:	441a      	add	r2, r3
 8006aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6a1a      	ldr	r2, [r3, #32]
 8006b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d90f      	bls.n	8006b32 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6a1a      	ldr	r2, [r3, #32]
 8006b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b22:	1ad2      	subs	r2, r2, r3
 8006b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	621a      	str	r2, [r3, #32]
 8006b30:	e00e      	b.n	8006b50 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d177      	bne.n	8006c50 <USB_EPStartXfer+0x4c4>
 8006b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	4413      	add	r3, r2
 8006b82:	61bb      	str	r3, [r7, #24]
 8006b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	011a      	lsls	r2, r3, #4
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	4413      	add	r3, r2
 8006b96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	801a      	strh	r2, [r3, #0]
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bb2:	d921      	bls.n	8006bf8 <USB_EPStartXfer+0x46c>
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb8:	095b      	lsrs	r3, r3, #5
 8006bba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc2:	f003 031f 	and.w	r3, r3, #31
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d104      	bne.n	8006bd4 <USB_EPStartXfer+0x448>
 8006bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	029b      	lsls	r3, r3, #10
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	4313      	orrs	r3, r2
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	801a      	strh	r2, [r3, #0]
 8006bf6:	e056      	b.n	8006ca6 <USB_EPStartXfer+0x51a>
 8006bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <USB_EPStartXfer+0x48a>
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	801a      	strh	r2, [r3, #0]
 8006c14:	e047      	b.n	8006ca6 <USB_EPStartXfer+0x51a>
 8006c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1a:	085b      	lsrs	r3, r3, #1
 8006c1c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d004      	beq.n	8006c36 <USB_EPStartXfer+0x4aa>
 8006c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c30:	3301      	adds	r3, #1
 8006c32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	029b      	lsls	r3, r3, #10
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	4313      	orrs	r3, r2
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	801a      	strh	r2, [r3, #0]
 8006c4e:	e02a      	b.n	8006ca6 <USB_EPStartXfer+0x51a>
 8006c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	785b      	ldrb	r3, [r3, #1]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d122      	bne.n	8006ca6 <USB_EPStartXfer+0x51a>
 8006c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	623b      	str	r3, [r7, #32]
 8006c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	4413      	add	r3, r2
 8006c82:	623b      	str	r3, [r7, #32]
 8006c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	011a      	lsls	r2, r3, #4
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	4413      	add	r3, r2
 8006c96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	891b      	ldrh	r3, [r3, #8]
 8006cb2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6959      	ldr	r1, [r3, #20]
 8006cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ccc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cd0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cd4:	6800      	ldr	r0, [r0, #0]
 8006cd6:	f001 fa48 	bl	800816a <USB_WritePMA>
 8006cda:	e3ee      	b.n	80074ba <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d177      	bne.n	8006ddc <USB_EPStartXfer+0x650>
 8006cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d0c:	4413      	add	r3, r2
 8006d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	011a      	lsls	r2, r3, #4
 8006d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d20:	4413      	add	r3, r2
 8006d22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d26:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d3e:	d921      	bls.n	8006d84 <USB_EPStartXfer+0x5f8>
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4e:	f003 031f 	and.w	r3, r3, #31
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d104      	bne.n	8006d60 <USB_EPStartXfer+0x5d4>
 8006d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	029b      	lsls	r3, r3, #10
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	4313      	orrs	r3, r2
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d80:	801a      	strh	r2, [r3, #0]
 8006d82:	e056      	b.n	8006e32 <USB_EPStartXfer+0x6a6>
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <USB_EPStartXfer+0x616>
 8006d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	e047      	b.n	8006e32 <USB_EPStartXfer+0x6a6>
 8006da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da6:	085b      	lsrs	r3, r3, #1
 8006da8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d004      	beq.n	8006dc2 <USB_EPStartXfer+0x636>
 8006db8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	029b      	lsls	r3, r3, #10
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	e02a      	b.n	8006e32 <USB_EPStartXfer+0x6a6>
 8006ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d122      	bne.n	8006e32 <USB_EPStartXfer+0x6a6>
 8006dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e0c:	4413      	add	r3, r2
 8006e0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	011a      	lsls	r2, r3, #4
 8006e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e20:	4413      	add	r3, r2
 8006e22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	891b      	ldrh	r3, [r3, #8]
 8006e3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6959      	ldr	r1, [r3, #20]
 8006e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e58:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e5c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e60:	6800      	ldr	r0, [r0, #0]
 8006e62:	f001 f982 	bl	800816a <USB_WritePMA>
            ep->xfer_buff += len;
 8006e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	695a      	ldr	r2, [r3, #20]
 8006e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e76:	441a      	add	r2, r3
 8006e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	6a1a      	ldr	r2, [r3, #32]
 8006e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d90f      	bls.n	8006ec0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6a1a      	ldr	r2, [r3, #32]
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb0:	1ad2      	subs	r2, r2, r3
 8006eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	621a      	str	r2, [r3, #32]
 8006ebe:	e00e      	b.n	8006ede <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2200      	movs	r2, #0
 8006edc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d177      	bne.n	8006fea <USB_EPStartXfer+0x85e>
 8006efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	4413      	add	r3, r2
 8006f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	011a      	lsls	r2, r3, #4
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2e:	4413      	add	r3, r2
 8006f30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f4c:	d921      	bls.n	8006f92 <USB_EPStartXfer+0x806>
 8006f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5c:	f003 031f 	and.w	r3, r3, #31
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <USB_EPStartXfer+0x7e2>
 8006f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	029b      	lsls	r3, r3, #10
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8e:	801a      	strh	r2, [r3, #0]
 8006f90:	e050      	b.n	8007034 <USB_EPStartXfer+0x8a8>
 8006f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <USB_EPStartXfer+0x824>
 8006f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fac:	801a      	strh	r2, [r3, #0]
 8006fae:	e041      	b.n	8007034 <USB_EPStartXfer+0x8a8>
 8006fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb4:	085b      	lsrs	r3, r3, #1
 8006fb6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d004      	beq.n	8006fd0 <USB_EPStartXfer+0x844>
 8006fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fca:	3301      	adds	r3, #1
 8006fcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	029b      	lsls	r3, r3, #10
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe6:	801a      	strh	r2, [r3, #0]
 8006fe8:	e024      	b.n	8007034 <USB_EPStartXfer+0x8a8>
 8006fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d11c      	bne.n	8007034 <USB_EPStartXfer+0x8a8>
 8006ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007008:	b29b      	uxth	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800700e:	4413      	add	r3, r2
 8007010:	643b      	str	r3, [r7, #64]	@ 0x40
 8007012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	011a      	lsls	r2, r3, #4
 8007020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007022:	4413      	add	r3, r2
 8007024:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800702a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702e:	b29a      	uxth	r2, r3
 8007030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007032:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	895b      	ldrh	r3, [r3, #10]
 8007040:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6959      	ldr	r1, [r3, #20]
 8007050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007054:	b29b      	uxth	r3, r3
 8007056:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800705a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800705e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007062:	6800      	ldr	r0, [r0, #0]
 8007064:	f001 f881 	bl	800816a <USB_WritePMA>
 8007068:	e227      	b.n	80074ba <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800706a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800707a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	b29b      	uxth	r3, r3
 8007098:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800709c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070a0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80070a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	441a      	add	r2, r3
 80070be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80070c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	461a      	mov	r2, r3
 80070f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070f6:	4413      	add	r3, r2
 80070f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	011a      	lsls	r2, r3, #4
 8007108:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800710a:	4413      	add	r3, r2
 800710c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007110:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007116:	b29a      	uxth	r2, r3
 8007118:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800711a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800711c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	891b      	ldrh	r3, [r3, #8]
 8007128:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800712c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6959      	ldr	r1, [r3, #20]
 8007138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713c:	b29b      	uxth	r3, r3
 800713e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007142:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007146:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800714a:	6800      	ldr	r0, [r0, #0]
 800714c:	f001 f80d 	bl	800816a <USB_WritePMA>
 8007150:	e1b3      	b.n	80074ba <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6a1a      	ldr	r2, [r3, #32]
 800715e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007162:	1ad2      	subs	r2, r2, r3
 8007164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	b29b      	uxth	r3, r3
 800718e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 80c6 	beq.w	8007324 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80071a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	785b      	ldrb	r3, [r3, #1]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d177      	bne.n	80072a4 <USB_EPStartXfer+0xb18>
 80071b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	461a      	mov	r2, r3
 80071d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071d4:	4413      	add	r3, r2
 80071d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	011a      	lsls	r2, r3, #4
 80071e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071e8:	4413      	add	r3, r2
 80071ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80071f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071fe:	801a      	strh	r2, [r3, #0]
 8007200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007204:	2b3e      	cmp	r3, #62	@ 0x3e
 8007206:	d921      	bls.n	800724c <USB_EPStartXfer+0xac0>
 8007208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007216:	f003 031f 	and.w	r3, r3, #31
 800721a:	2b00      	cmp	r3, #0
 800721c:	d104      	bne.n	8007228 <USB_EPStartXfer+0xa9c>
 800721e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007222:	3b01      	subs	r3, #1
 8007224:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29a      	uxth	r2, r3
 800722e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007232:	b29b      	uxth	r3, r3
 8007234:	029b      	lsls	r3, r3, #10
 8007236:	b29b      	uxth	r3, r3
 8007238:	4313      	orrs	r3, r2
 800723a:	b29b      	uxth	r3, r3
 800723c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007244:	b29a      	uxth	r2, r3
 8007246:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	e050      	b.n	80072ee <USB_EPStartXfer+0xb62>
 800724c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <USB_EPStartXfer+0xade>
 8007254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b29b      	uxth	r3, r3
 800725a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007262:	b29a      	uxth	r2, r3
 8007264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007266:	801a      	strh	r2, [r3, #0]
 8007268:	e041      	b.n	80072ee <USB_EPStartXfer+0xb62>
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726e:	085b      	lsrs	r3, r3, #1
 8007270:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	d004      	beq.n	800728a <USB_EPStartXfer+0xafe>
 8007280:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007284:	3301      	adds	r3, #1
 8007286:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800728a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	b29a      	uxth	r2, r3
 8007290:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007294:	b29b      	uxth	r3, r3
 8007296:	029b      	lsls	r3, r3, #10
 8007298:	b29b      	uxth	r3, r3
 800729a:	4313      	orrs	r3, r2
 800729c:	b29a      	uxth	r2, r3
 800729e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072a0:	801a      	strh	r2, [r3, #0]
 80072a2:	e024      	b.n	80072ee <USB_EPStartXfer+0xb62>
 80072a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	785b      	ldrb	r3, [r3, #1]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d11c      	bne.n	80072ee <USB_EPStartXfer+0xb62>
 80072b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	461a      	mov	r2, r3
 80072c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072c8:	4413      	add	r3, r2
 80072ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80072cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	011a      	lsls	r2, r3, #4
 80072da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072dc:	4413      	add	r3, r2
 80072de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80072ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	895b      	ldrh	r3, [r3, #10]
 80072fa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6959      	ldr	r1, [r3, #20]
 800730a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730e:	b29b      	uxth	r3, r3
 8007310:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007314:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007318:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800731c:	6800      	ldr	r0, [r0, #0]
 800731e:	f000 ff24 	bl	800816a <USB_WritePMA>
 8007322:	e0ca      	b.n	80074ba <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d177      	bne.n	8007424 <USB_EPStartXfer+0xc98>
 8007334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007338:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007344:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800734e:	b29b      	uxth	r3, r3
 8007350:	461a      	mov	r2, r3
 8007352:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007354:	4413      	add	r3, r2
 8007356:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	011a      	lsls	r2, r3, #4
 8007366:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007368:	4413      	add	r3, r2
 800736a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800736e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007370:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	b29b      	uxth	r3, r3
 8007376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800737a:	b29a      	uxth	r2, r3
 800737c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800737e:	801a      	strh	r2, [r3, #0]
 8007380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007384:	2b3e      	cmp	r3, #62	@ 0x3e
 8007386:	d921      	bls.n	80073cc <USB_EPStartXfer+0xc40>
 8007388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738c:	095b      	lsrs	r3, r3, #5
 800738e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007396:	f003 031f 	and.w	r3, r3, #31
 800739a:	2b00      	cmp	r3, #0
 800739c:	d104      	bne.n	80073a8 <USB_EPStartXfer+0xc1c>
 800739e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80073a2:	3b01      	subs	r3, #1
 80073a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	029b      	lsls	r3, r3, #10
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	4313      	orrs	r3, r2
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073c8:	801a      	strh	r2, [r3, #0]
 80073ca:	e05c      	b.n	8007486 <USB_EPStartXfer+0xcfa>
 80073cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10a      	bne.n	80073ea <USB_EPStartXfer+0xc5e>
 80073d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073e6:	801a      	strh	r2, [r3, #0]
 80073e8:	e04d      	b.n	8007486 <USB_EPStartXfer+0xcfa>
 80073ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ee:	085b      	lsrs	r3, r3, #1
 80073f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d004      	beq.n	800740a <USB_EPStartXfer+0xc7e>
 8007400:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007404:	3301      	adds	r3, #1
 8007406:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800740a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29a      	uxth	r2, r3
 8007410:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007414:	b29b      	uxth	r3, r3
 8007416:	029b      	lsls	r3, r3, #10
 8007418:	b29b      	uxth	r3, r3
 800741a:	4313      	orrs	r3, r2
 800741c:	b29a      	uxth	r2, r3
 800741e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007420:	801a      	strh	r2, [r3, #0]
 8007422:	e030      	b.n	8007486 <USB_EPStartXfer+0xcfa>
 8007424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	785b      	ldrb	r3, [r3, #1]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d128      	bne.n	8007486 <USB_EPStartXfer+0xcfa>
 8007434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007438:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007450:	b29b      	uxth	r3, r3
 8007452:	461a      	mov	r2, r3
 8007454:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007458:	4413      	add	r3, r2
 800745a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800745e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	011a      	lsls	r2, r3, #4
 800746c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007470:	4413      	add	r3, r2
 8007472:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007476:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800747a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747e:	b29a      	uxth	r2, r3
 8007480:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007484:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	891b      	ldrh	r3, [r3, #8]
 8007492:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6959      	ldr	r1, [r3, #20]
 80074a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074ac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074b0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074b4:	6800      	ldr	r0, [r0, #0]
 80074b6:	f000 fe58 	bl	800816a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80074ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074e0:	817b      	strh	r3, [r7, #10]
 80074e2:	897b      	ldrh	r3, [r7, #10]
 80074e4:	f083 0310 	eor.w	r3, r3, #16
 80074e8:	817b      	strh	r3, [r7, #10]
 80074ea:	897b      	ldrh	r3, [r7, #10]
 80074ec:	f083 0320 	eor.w	r3, r3, #32
 80074f0:	817b      	strh	r3, [r7, #10]
 80074f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	441a      	add	r2, r3
 800750c:	897b      	ldrh	r3, [r7, #10]
 800750e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800751a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800751e:	b29b      	uxth	r3, r3
 8007520:	8013      	strh	r3, [r2, #0]
 8007522:	f000 bcde 	b.w	8007ee2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	7b1b      	ldrb	r3, [r3, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	f040 80bb 	bne.w	80076ae <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	699a      	ldr	r2, [r3, #24]
 8007544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	429a      	cmp	r2, r3
 8007552:	d917      	bls.n	8007584 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	699a      	ldr	r2, [r3, #24]
 8007570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007574:	1ad2      	subs	r2, r2, r3
 8007576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	619a      	str	r2, [r3, #24]
 8007582:	e00e      	b.n	80075a2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2200      	movs	r2, #0
 80075a0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80075a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075be:	b29b      	uxth	r3, r3
 80075c0:	461a      	mov	r2, r3
 80075c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075c6:	4413      	add	r3, r2
 80075c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	011a      	lsls	r2, r3, #4
 80075da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075de:	4413      	add	r3, r2
 80075e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80075e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007600:	2b3e      	cmp	r3, #62	@ 0x3e
 8007602:	d924      	bls.n	800764e <USB_EPStartXfer+0xec2>
 8007604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007608:	095b      	lsrs	r3, r3, #5
 800760a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007612:	f003 031f 	and.w	r3, r3, #31
 8007616:	2b00      	cmp	r3, #0
 8007618:	d104      	bne.n	8007624 <USB_EPStartXfer+0xe98>
 800761a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800761e:	3b01      	subs	r3, #1
 8007620:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007624:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29a      	uxth	r2, r3
 800762c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007630:	b29b      	uxth	r3, r3
 8007632:	029b      	lsls	r3, r3, #10
 8007634:	b29b      	uxth	r3, r3
 8007636:	4313      	orrs	r3, r2
 8007638:	b29b      	uxth	r3, r3
 800763a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800763e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007642:	b29a      	uxth	r2, r3
 8007644:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007648:	801a      	strh	r2, [r3, #0]
 800764a:	f000 bc10 	b.w	8007e6e <USB_EPStartXfer+0x16e2>
 800764e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10c      	bne.n	8007670 <USB_EPStartXfer+0xee4>
 8007656:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007666:	b29a      	uxth	r2, r3
 8007668:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	e3fe      	b.n	8007e6e <USB_EPStartXfer+0x16e2>
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007674:	085b      	lsrs	r3, r3, #1
 8007676:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	d004      	beq.n	8007690 <USB_EPStartXfer+0xf04>
 8007686:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800768a:	3301      	adds	r3, #1
 800768c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007690:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	b29a      	uxth	r2, r3
 8007698:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800769c:	b29b      	uxth	r3, r3
 800769e:	029b      	lsls	r3, r3, #10
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	4313      	orrs	r3, r2
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076aa:	801a      	strh	r2, [r3, #0]
 80076ac:	e3df      	b.n	8007e6e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80076ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	78db      	ldrb	r3, [r3, #3]
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	f040 8218 	bne.w	8007af0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80076c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	785b      	ldrb	r3, [r3, #1]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f040 809d 	bne.w	800780c <USB_EPStartXfer+0x1080>
 80076d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076f6:	4413      	add	r3, r2
 80076f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	011a      	lsls	r2, r3, #4
 800770a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800770e:	4413      	add	r3, r2
 8007710:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007714:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007718:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	b29b      	uxth	r3, r3
 8007720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007724:	b29a      	uxth	r2, r3
 8007726:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800772a:	801a      	strh	r2, [r3, #0]
 800772c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	2b3e      	cmp	r3, #62	@ 0x3e
 800773a:	d92b      	bls.n	8007794 <USB_EPStartXfer+0x1008>
 800773c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	095b      	lsrs	r3, r3, #5
 800774a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800774e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f003 031f 	and.w	r3, r3, #31
 800775e:	2b00      	cmp	r3, #0
 8007760:	d104      	bne.n	800776c <USB_EPStartXfer+0xfe0>
 8007762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007766:	3b01      	subs	r3, #1
 8007768:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800776c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	b29a      	uxth	r2, r3
 8007774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007778:	b29b      	uxth	r3, r3
 800777a:	029b      	lsls	r3, r3, #10
 800777c:	b29b      	uxth	r3, r3
 800777e:	4313      	orrs	r3, r2
 8007780:	b29b      	uxth	r3, r3
 8007782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800778a:	b29a      	uxth	r2, r3
 800778c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007790:	801a      	strh	r2, [r3, #0]
 8007792:	e070      	b.n	8007876 <USB_EPStartXfer+0x10ea>
 8007794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10c      	bne.n	80077be <USB_EPStartXfer+0x1032>
 80077a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077ba:	801a      	strh	r2, [r3, #0]
 80077bc:	e05b      	b.n	8007876 <USB_EPStartXfer+0x10ea>
 80077be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	085b      	lsrs	r3, r3, #1
 80077cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d004      	beq.n	80077ee <USB_EPStartXfer+0x1062>
 80077e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e8:	3301      	adds	r3, #1
 80077ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	029b      	lsls	r3, r3, #10
 80077fe:	b29b      	uxth	r3, r3
 8007800:	4313      	orrs	r3, r2
 8007802:	b29a      	uxth	r2, r3
 8007804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007808:	801a      	strh	r2, [r3, #0]
 800780a:	e034      	b.n	8007876 <USB_EPStartXfer+0x10ea>
 800780c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	785b      	ldrb	r3, [r3, #1]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d12c      	bne.n	8007876 <USB_EPStartXfer+0x10ea>
 800781c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007820:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800782a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007838:	b29b      	uxth	r3, r3
 800783a:	461a      	mov	r2, r3
 800783c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007840:	4413      	add	r3, r2
 8007842:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	011a      	lsls	r2, r3, #4
 8007854:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007858:	4413      	add	r3, r2
 800785a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800785e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	b29a      	uxth	r2, r3
 8007870:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007874:	801a      	strh	r2, [r3, #0]
 8007876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	785b      	ldrb	r3, [r3, #1]
 8007890:	2b00      	cmp	r3, #0
 8007892:	f040 809d 	bne.w	80079d0 <USB_EPStartXfer+0x1244>
 8007896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	461a      	mov	r2, r3
 80078b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078ba:	4413      	add	r3, r2
 80078bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	011a      	lsls	r2, r3, #4
 80078ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078d2:	4413      	add	r3, r2
 80078d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078ee:	801a      	strh	r2, [r3, #0]
 80078f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80078fe:	d92b      	bls.n	8007958 <USB_EPStartXfer+0x11cc>
 8007900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	095b      	lsrs	r3, r3, #5
 800790e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	f003 031f 	and.w	r3, r3, #31
 8007922:	2b00      	cmp	r3, #0
 8007924:	d104      	bne.n	8007930 <USB_EPStartXfer+0x11a4>
 8007926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800792a:	3b01      	subs	r3, #1
 800792c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007930:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	b29a      	uxth	r2, r3
 8007938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800793c:	b29b      	uxth	r3, r3
 800793e:	029b      	lsls	r3, r3, #10
 8007940:	b29b      	uxth	r3, r3
 8007942:	4313      	orrs	r3, r2
 8007944:	b29b      	uxth	r3, r3
 8007946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800794a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794e:	b29a      	uxth	r2, r3
 8007950:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007954:	801a      	strh	r2, [r3, #0]
 8007956:	e069      	b.n	8007a2c <USB_EPStartXfer+0x12a0>
 8007958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10c      	bne.n	8007982 <USB_EPStartXfer+0x11f6>
 8007968:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007978:	b29a      	uxth	r2, r3
 800797a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800797e:	801a      	strh	r2, [r3, #0]
 8007980:	e054      	b.n	8007a2c <USB_EPStartXfer+0x12a0>
 8007982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	085b      	lsrs	r3, r3, #1
 8007990:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d004      	beq.n	80079b2 <USB_EPStartXfer+0x1226>
 80079a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ac:	3301      	adds	r3, #1
 80079ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079be:	b29b      	uxth	r3, r3
 80079c0:	029b      	lsls	r3, r3, #10
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	4313      	orrs	r3, r2
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079cc:	801a      	strh	r2, [r3, #0]
 80079ce:	e02d      	b.n	8007a2c <USB_EPStartXfer+0x12a0>
 80079d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d125      	bne.n	8007a2c <USB_EPStartXfer+0x12a0>
 80079e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079f6:	4413      	add	r3, r2
 80079f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80079fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	011a      	lsls	r2, r3, #4
 8007a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a0e:	4413      	add	r3, r2
 8007a10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a2a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 8218 	beq.w	8007e6e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a5e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d005      	beq.n	8007a76 <USB_EPStartXfer+0x12ea>
 8007a6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10d      	bne.n	8007a92 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f040 81f5 	bne.w	8007e6e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f040 81ee 	bne.w	8007e6e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ab8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	441a      	add	r2, r3
 8007ad6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007ada:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ade:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ae6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	8013      	strh	r3, [r2, #0]
 8007aee:	e1be      	b.n	8007e6e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	78db      	ldrb	r3, [r3, #3]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	f040 81b4 	bne.w	8007e6a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699a      	ldr	r2, [r3, #24]
 8007b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d917      	bls.n	8007b4e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	699a      	ldr	r2, [r3, #24]
 8007b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	619a      	str	r2, [r3, #24]
 8007b4c:	e00e      	b.n	8007b6c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	785b      	ldrb	r3, [r3, #1]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f040 8085 	bne.w	8007c88 <USB_EPStartXfer+0x14fc>
 8007b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	011a      	lsls	r2, r3, #4
 8007bb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bba:	4413      	add	r3, r2
 8007bbc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bd6:	801a      	strh	r2, [r3, #0]
 8007bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bdc:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bde:	d923      	bls.n	8007c28 <USB_EPStartXfer+0x149c>
 8007be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be4:	095b      	lsrs	r3, r3, #5
 8007be6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bee:	f003 031f 	and.w	r3, r3, #31
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d104      	bne.n	8007c00 <USB_EPStartXfer+0x1474>
 8007bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	029b      	lsls	r3, r3, #10
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	4313      	orrs	r3, r2
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c24:	801a      	strh	r2, [r3, #0]
 8007c26:	e060      	b.n	8007cea <USB_EPStartXfer+0x155e>
 8007c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10c      	bne.n	8007c4a <USB_EPStartXfer+0x14be>
 8007c30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c46:	801a      	strh	r2, [r3, #0]
 8007c48:	e04f      	b.n	8007cea <USB_EPStartXfer+0x155e>
 8007c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c4e:	085b      	lsrs	r3, r3, #1
 8007c50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d004      	beq.n	8007c6a <USB_EPStartXfer+0x14de>
 8007c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c64:	3301      	adds	r3, #1
 8007c66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	029b      	lsls	r3, r3, #10
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c84:	801a      	strh	r2, [r3, #0]
 8007c86:	e030      	b.n	8007cea <USB_EPStartXfer+0x155e>
 8007c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	785b      	ldrb	r3, [r3, #1]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d128      	bne.n	8007cea <USB_EPStartXfer+0x155e>
 8007c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	011a      	lsls	r2, r3, #4
 8007cd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007cda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007ce8:	801a      	strh	r2, [r3, #0]
 8007cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	785b      	ldrb	r3, [r3, #1]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f040 8085 	bne.w	8007e14 <USB_EPStartXfer+0x1688>
 8007d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	461a      	mov	r2, r3
 8007d2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d2e:	4413      	add	r3, r2
 8007d30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	011a      	lsls	r2, r3, #4
 8007d42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d46:	4413      	add	r3, r2
 8007d48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d68:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d6a:	d923      	bls.n	8007db4 <USB_EPStartXfer+0x1628>
 8007d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d70:	095b      	lsrs	r3, r3, #5
 8007d72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7a:	f003 031f 	and.w	r3, r3, #31
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d104      	bne.n	8007d8c <USB_EPStartXfer+0x1600>
 8007d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d86:	3b01      	subs	r3, #1
 8007d88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	029b      	lsls	r3, r3, #10
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	e05c      	b.n	8007e6e <USB_EPStartXfer+0x16e2>
 8007db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10c      	bne.n	8007dd6 <USB_EPStartXfer+0x164a>
 8007dbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dd2:	801a      	strh	r2, [r3, #0]
 8007dd4:	e04b      	b.n	8007e6e <USB_EPStartXfer+0x16e2>
 8007dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dda:	085b      	lsrs	r3, r3, #1
 8007ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d004      	beq.n	8007df6 <USB_EPStartXfer+0x166a>
 8007dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007df0:	3301      	adds	r3, #1
 8007df2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007df6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	029b      	lsls	r3, r3, #10
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e10:	801a      	strh	r2, [r3, #0]
 8007e12:	e02c      	b.n	8007e6e <USB_EPStartXfer+0x16e2>
 8007e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d124      	bne.n	8007e6e <USB_EPStartXfer+0x16e2>
 8007e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	461a      	mov	r2, r3
 8007e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	011a      	lsls	r2, r3, #4
 8007e4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e52:	4413      	add	r3, r2
 8007e54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e66:	801a      	strh	r2, [r3, #0]
 8007e68:	e001      	b.n	8007e6e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e03a      	b.n	8007ee4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e94:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007e98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e9c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ea0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007ea4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ea8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007eac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	441a      	add	r2, r3
 8007eca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b085      	sub	sp, #20
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	785b      	ldrb	r3, [r3, #1]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d020      	beq.n	8007f42 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f16:	81bb      	strh	r3, [r7, #12]
 8007f18:	89bb      	ldrh	r3, [r7, #12]
 8007f1a:	f083 0310 	eor.w	r3, r3, #16
 8007f1e:	81bb      	strh	r3, [r7, #12]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	441a      	add	r2, r3
 8007f2a:	89bb      	ldrh	r3, [r7, #12]
 8007f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	8013      	strh	r3, [r2, #0]
 8007f40:	e01f      	b.n	8007f82 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f58:	81fb      	strh	r3, [r7, #14]
 8007f5a:	89fb      	ldrh	r3, [r7, #14]
 8007f5c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f60:	81fb      	strh	r3, [r7, #14]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	441a      	add	r2, r3
 8007f6c:	89fb      	ldrh	r3, [r7, #14]
 8007f6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bc80      	pop	{r7}
 8007f8c:	4770      	bx	lr

08007f8e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b087      	sub	sp, #28
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	7b1b      	ldrb	r3, [r3, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f040 809d 	bne.w	80080dc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	785b      	ldrb	r3, [r3, #1]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d04c      	beq.n	8008044 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	823b      	strh	r3, [r7, #16]
 8007fb8:	8a3b      	ldrh	r3, [r7, #16]
 8007fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d01b      	beq.n	8007ffa <USB_EPClearStall+0x6c>
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fd8:	81fb      	strh	r3, [r7, #14]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	441a      	add	r2, r3
 8007fe4:	89fb      	ldrh	r3, [r7, #14]
 8007fe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ff2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	78db      	ldrb	r3, [r3, #3]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d06c      	beq.n	80080dc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	b29b      	uxth	r3, r3
 8008010:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008014:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008018:	81bb      	strh	r3, [r7, #12]
 800801a:	89bb      	ldrh	r3, [r7, #12]
 800801c:	f083 0320 	eor.w	r3, r3, #32
 8008020:	81bb      	strh	r3, [r7, #12]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	441a      	add	r2, r3
 800802c:	89bb      	ldrh	r3, [r7, #12]
 800802e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800803a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800803e:	b29b      	uxth	r3, r3
 8008040:	8013      	strh	r3, [r2, #0]
 8008042:	e04b      	b.n	80080dc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	881b      	ldrh	r3, [r3, #0]
 8008050:	82fb      	strh	r3, [r7, #22]
 8008052:	8afb      	ldrh	r3, [r7, #22]
 8008054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01b      	beq.n	8008094 <USB_EPClearStall+0x106>
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	b29b      	uxth	r3, r3
 800806a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800806e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008072:	82bb      	strh	r3, [r7, #20]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	441a      	add	r2, r3
 800807e:	8abb      	ldrh	r3, [r7, #20]
 8008080:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008084:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008088:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800808c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008090:	b29b      	uxth	r3, r3
 8008092:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080aa:	827b      	strh	r3, [r7, #18]
 80080ac:	8a7b      	ldrh	r3, [r7, #18]
 80080ae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80080b2:	827b      	strh	r3, [r7, #18]
 80080b4:	8a7b      	ldrh	r3, [r7, #18]
 80080b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80080ba:	827b      	strh	r3, [r7, #18]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	441a      	add	r2, r3
 80080c6:	8a7b      	ldrh	r3, [r7, #18]
 80080c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080d8:	b29b      	uxth	r3, r3
 80080da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bc80      	pop	{r7}
 80080e6:	4770      	bx	lr

080080e8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80080f4:	78fb      	ldrb	r3, [r7, #3]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d103      	bne.n	8008102 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2280      	movs	r2, #128	@ 0x80
 80080fe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	bc80      	pop	{r7}
 800810c:	4770      	bx	lr

0800810e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	bc80      	pop	{r7}
 8008120:	4770      	bx	lr

08008122 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	bc80      	pop	{r7}
 8008134:	4770      	bx	lr

08008136 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008136:	b480      	push	{r7}
 8008138:	b085      	sub	sp, #20
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008144:	b29b      	uxth	r3, r3
 8008146:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008148:	68fb      	ldr	r3, [r7, #12]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	bc80      	pop	{r7}
 8008152:	4770      	bx	lr

08008154 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	bc80      	pop	{r7}
 8008168:	4770      	bx	lr

0800816a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800816a:	b480      	push	{r7}
 800816c:	b08b      	sub	sp, #44	@ 0x2c
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	4611      	mov	r1, r2
 8008176:	461a      	mov	r2, r3
 8008178:	460b      	mov	r3, r1
 800817a:	80fb      	strh	r3, [r7, #6]
 800817c:	4613      	mov	r3, r2
 800817e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008180:	88bb      	ldrh	r3, [r7, #4]
 8008182:	3301      	adds	r3, #1
 8008184:	085b      	lsrs	r3, r3, #1
 8008186:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008190:	88fb      	ldrh	r3, [r7, #6]
 8008192:	005a      	lsls	r2, r3, #1
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800819c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80081a2:	e01f      	b.n	80081e4 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	3301      	adds	r3, #1
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	b21b      	sxth	r3, r3
 80081b2:	021b      	lsls	r3, r3, #8
 80081b4:	b21a      	sxth	r2, r3
 80081b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	b21b      	sxth	r3, r3
 80081be:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	8a7a      	ldrh	r2, [r7, #18]
 80081c4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	3302      	adds	r3, #2
 80081ca:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	3302      	adds	r3, #2
 80081d0:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	3301      	adds	r3, #1
 80081d6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	3301      	adds	r3, #1
 80081dc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80081de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e0:	3b01      	subs	r3, #1
 80081e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80081e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1dc      	bne.n	80081a4 <USB_WritePMA+0x3a>
  }
}
 80081ea:	bf00      	nop
 80081ec:	bf00      	nop
 80081ee:	372c      	adds	r7, #44	@ 0x2c
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bc80      	pop	{r7}
 80081f4:	4770      	bx	lr

080081f6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b08b      	sub	sp, #44	@ 0x2c
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	4611      	mov	r1, r2
 8008202:	461a      	mov	r2, r3
 8008204:	460b      	mov	r3, r1
 8008206:	80fb      	strh	r3, [r7, #6]
 8008208:	4613      	mov	r3, r2
 800820a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800820c:	88bb      	ldrh	r3, [r7, #4]
 800820e:	085b      	lsrs	r3, r3, #1
 8008210:	b29b      	uxth	r3, r3
 8008212:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800821c:	88fb      	ldrh	r3, [r7, #6]
 800821e:	005a      	lsls	r2, r3, #1
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008228:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	627b      	str	r3, [r7, #36]	@ 0x24
 800822e:	e01b      	b.n	8008268 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29b      	uxth	r3, r3
 8008236:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	3302      	adds	r3, #2
 800823c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	b2da      	uxtb	r2, r3
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	3301      	adds	r3, #1
 800824a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	0a1b      	lsrs	r3, r3, #8
 8008250:	b2da      	uxtb	r2, r3
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	3301      	adds	r3, #1
 800825a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800825c:	6a3b      	ldr	r3, [r7, #32]
 800825e:	3302      	adds	r3, #2
 8008260:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	3b01      	subs	r3, #1
 8008266:	627b      	str	r3, [r7, #36]	@ 0x24
 8008268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e0      	bne.n	8008230 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800826e:	88bb      	ldrh	r3, [r7, #4]
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	b29b      	uxth	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d007      	beq.n	800828a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	b2da      	uxtb	r2, r3
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	701a      	strb	r2, [r3, #0]
  }
}
 800828a:	bf00      	nop
 800828c:	372c      	adds	r7, #44	@ 0x2c
 800828e:	46bd      	mov	sp, r7
 8008290:	bc80      	pop	{r7}
 8008292:	4770      	bx	lr

08008294 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80082a0:	2300      	movs	r3, #0
 80082a2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	7c1b      	ldrb	r3, [r3, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d115      	bne.n	80082d8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082b0:	2202      	movs	r2, #2
 80082b2:	2181      	movs	r1, #129	@ 0x81
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f001 ffb8 	bl	800a22a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082c4:	2202      	movs	r2, #2
 80082c6:	2101      	movs	r1, #1
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 ffae 	bl	800a22a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80082d6:	e012      	b.n	80082fe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082d8:	2340      	movs	r3, #64	@ 0x40
 80082da:	2202      	movs	r2, #2
 80082dc:	2181      	movs	r1, #129	@ 0x81
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 ffa3 	bl	800a22a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082ea:	2340      	movs	r3, #64	@ 0x40
 80082ec:	2202      	movs	r2, #2
 80082ee:	2101      	movs	r1, #1
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 ff9a 	bl	800a22a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082fe:	2308      	movs	r3, #8
 8008300:	2203      	movs	r2, #3
 8008302:	2182      	movs	r1, #130	@ 0x82
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f001 ff90 	bl	800a22a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008310:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008314:	f002 f8b0 	bl	800a478 <USBD_static_malloc>
 8008318:	4602      	mov	r2, r0
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008326:	2b00      	cmp	r3, #0
 8008328:	d102      	bne.n	8008330 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800832a:	2301      	movs	r3, #1
 800832c:	73fb      	strb	r3, [r7, #15]
 800832e:	e026      	b.n	800837e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008336:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2200      	movs	r2, #0
 8008346:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2200      	movs	r2, #0
 800834e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	7c1b      	ldrb	r3, [r3, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d109      	bne.n	800836e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008360:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008364:	2101      	movs	r1, #1
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f002 f84f 	bl	800a40a <USBD_LL_PrepareReceive>
 800836c:	e007      	b.n	800837e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008374:	2340      	movs	r3, #64	@ 0x40
 8008376:	2101      	movs	r1, #1
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f002 f846 	bl	800a40a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800837e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008398:	2181      	movs	r1, #129	@ 0x81
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 ff6b 	bl	800a276 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80083a6:	2101      	movs	r1, #1
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f001 ff64 	bl	800a276 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80083b6:	2182      	movs	r1, #130	@ 0x82
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f001 ff5c 	bl	800a276 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00e      	beq.n	80083ec <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083de:	4618      	mov	r0, r3
 80083e0:	f002 f856 	bl	800a490 <USBD_static_free>
    pdev->pClassData = NULL;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b086      	sub	sp, #24
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008406:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800841c:	2b00      	cmp	r3, #0
 800841e:	d039      	beq.n	8008494 <USBD_CDC_Setup+0x9e>
 8008420:	2b20      	cmp	r3, #32
 8008422:	d17f      	bne.n	8008524 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	88db      	ldrh	r3, [r3, #6]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d029      	beq.n	8008480 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	b25b      	sxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	da11      	bge.n	800845a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008442:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	88d2      	ldrh	r2, [r2, #6]
 8008448:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800844a:	6939      	ldr	r1, [r7, #16]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	88db      	ldrh	r3, [r3, #6]
 8008450:	461a      	mov	r2, r3
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f001 fa06 	bl	8009864 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008458:	e06b      	b.n	8008532 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	785a      	ldrb	r2, [r3, #1]
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	88db      	ldrh	r3, [r3, #6]
 8008468:	b2da      	uxtb	r2, r3
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008470:	6939      	ldr	r1, [r7, #16]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	88db      	ldrh	r3, [r3, #6]
 8008476:	461a      	mov	r2, r3
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f001 fa21 	bl	80098c0 <USBD_CtlPrepareRx>
      break;
 800847e:	e058      	b.n	8008532 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	7850      	ldrb	r0, [r2, #1]
 800848c:	2200      	movs	r2, #0
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	4798      	blx	r3
      break;
 8008492:	e04e      	b.n	8008532 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	785b      	ldrb	r3, [r3, #1]
 8008498:	2b0b      	cmp	r3, #11
 800849a:	d02e      	beq.n	80084fa <USBD_CDC_Setup+0x104>
 800849c:	2b0b      	cmp	r3, #11
 800849e:	dc38      	bgt.n	8008512 <USBD_CDC_Setup+0x11c>
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <USBD_CDC_Setup+0xb4>
 80084a4:	2b0a      	cmp	r3, #10
 80084a6:	d014      	beq.n	80084d2 <USBD_CDC_Setup+0xdc>
 80084a8:	e033      	b.n	8008512 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b0:	2b03      	cmp	r3, #3
 80084b2:	d107      	bne.n	80084c4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80084b4:	f107 030c 	add.w	r3, r7, #12
 80084b8:	2202      	movs	r2, #2
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 f9d1 	bl	8009864 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084c2:	e02e      	b.n	8008522 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 f962 	bl	8009790 <USBD_CtlError>
            ret = USBD_FAIL;
 80084cc:	2302      	movs	r3, #2
 80084ce:	75fb      	strb	r3, [r7, #23]
          break;
 80084d0:	e027      	b.n	8008522 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d107      	bne.n	80084ec <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80084dc:	f107 030f 	add.w	r3, r7, #15
 80084e0:	2201      	movs	r2, #1
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f001 f9bd 	bl	8009864 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084ea:	e01a      	b.n	8008522 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f001 f94e 	bl	8009790 <USBD_CtlError>
            ret = USBD_FAIL;
 80084f4:	2302      	movs	r3, #2
 80084f6:	75fb      	strb	r3, [r7, #23]
          break;
 80084f8:	e013      	b.n	8008522 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008500:	2b03      	cmp	r3, #3
 8008502:	d00d      	beq.n	8008520 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 f942 	bl	8009790 <USBD_CtlError>
            ret = USBD_FAIL;
 800850c:	2302      	movs	r3, #2
 800850e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008510:	e006      	b.n	8008520 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f001 f93b 	bl	8009790 <USBD_CtlError>
          ret = USBD_FAIL;
 800851a:	2302      	movs	r3, #2
 800851c:	75fb      	strb	r3, [r7, #23]
          break;
 800851e:	e000      	b.n	8008522 <USBD_CDC_Setup+0x12c>
          break;
 8008520:	bf00      	nop
      }
      break;
 8008522:	e006      	b.n	8008532 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f001 f932 	bl	8009790 <USBD_CtlError>
      ret = USBD_FAIL;
 800852c:	2302      	movs	r3, #2
 800852e:	75fb      	strb	r3, [r7, #23]
      break;
 8008530:	bf00      	nop
  }

  return ret;
 8008532:	7dfb      	ldrb	r3, [r7, #23]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800854e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008556:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800855e:	2b00      	cmp	r3, #0
 8008560:	d03a      	beq.n	80085d8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008562:	78fa      	ldrb	r2, [r7, #3]
 8008564:	6879      	ldr	r1, [r7, #4]
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	440b      	add	r3, r1
 8008570:	331c      	adds	r3, #28
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d029      	beq.n	80085cc <USBD_CDC_DataIn+0x90>
 8008578:	78fa      	ldrb	r2, [r7, #3]
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	4613      	mov	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	440b      	add	r3, r1
 8008586:	331c      	adds	r3, #28
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	78f9      	ldrb	r1, [r7, #3]
 800858c:	68b8      	ldr	r0, [r7, #8]
 800858e:	460b      	mov	r3, r1
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	4403      	add	r3, r0
 8008598:	3320      	adds	r3, #32
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	fbb2 f1f3 	udiv	r1, r2, r3
 80085a0:	fb01 f303 	mul.w	r3, r1, r3
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d110      	bne.n	80085cc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80085aa:	78fa      	ldrb	r2, [r7, #3]
 80085ac:	6879      	ldr	r1, [r7, #4]
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	440b      	add	r3, r1
 80085b8:	331c      	adds	r3, #28
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085be:	78f9      	ldrb	r1, [r7, #3]
 80085c0:	2300      	movs	r3, #0
 80085c2:	2200      	movs	r2, #0
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 fefd 	bl	800a3c4 <USBD_LL_Transmit>
 80085ca:	e003      	b.n	80085d4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	e000      	b.n	80085da <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80085d8:	2302      	movs	r3, #2
  }
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	460b      	mov	r3, r1
 80085ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 ff28 	bl	800a450 <USBD_LL_GetRxDataSize>
 8008600:	4602      	mov	r2, r0
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00d      	beq.n	800862e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008626:	4611      	mov	r1, r2
 8008628:	4798      	blx	r3

    return USBD_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	e000      	b.n	8008630 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800862e:	2302      	movs	r3, #2
  }
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008646:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800864e:	2b00      	cmp	r3, #0
 8008650:	d014      	beq.n	800867c <USBD_CDC_EP0_RxReady+0x44>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008658:	2bff      	cmp	r3, #255	@ 0xff
 800865a:	d00f      	beq.n	800867c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800866a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008672:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	22ff      	movs	r2, #255	@ 0xff
 8008678:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
	...

08008688 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2243      	movs	r2, #67	@ 0x43
 8008694:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008696:	4b03      	ldr	r3, [pc, #12]	@ (80086a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	bc80      	pop	{r7}
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	2000009c 	.word	0x2000009c

080086a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2243      	movs	r2, #67	@ 0x43
 80086b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80086b6:	4b03      	ldr	r3, [pc, #12]	@ (80086c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	bc80      	pop	{r7}
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	20000058 	.word	0x20000058

080086c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2243      	movs	r2, #67	@ 0x43
 80086d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80086d6:	4b03      	ldr	r3, [pc, #12]	@ (80086e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	bc80      	pop	{r7}
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	200000e0 	.word	0x200000e0

080086e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	220a      	movs	r2, #10
 80086f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80086f6:	4b03      	ldr	r3, [pc, #12]	@ (8008704 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bc80      	pop	{r7}
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	20000014 	.word	0x20000014

08008708 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008712:	2302      	movs	r3, #2
 8008714:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d005      	beq.n	8008728 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008728:	7bfb      	ldrb	r3, [r7, #15]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	bc80      	pop	{r7}
 8008732:	4770      	bx	lr

08008734 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	4613      	mov	r3, r2
 8008740:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008748:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008752:	88fa      	ldrh	r2, [r7, #6]
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	371c      	adds	r7, #28
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr

08008766 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008766:	b480      	push	{r7}
 8008768:	b085      	sub	sp, #20
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008776:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	bc80      	pop	{r7}
 800878a:	4770      	bx	lr

0800878c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800879a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d01c      	beq.n	80087e0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d115      	bne.n	80087dc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	2181      	movs	r1, #129	@ 0x81
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f001 fdf6 	bl	800a3c4 <USBD_LL_Transmit>

      return USBD_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	e002      	b.n	80087e2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80087dc:	2301      	movs	r3, #1
 80087de:	e000      	b.n	80087e2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80087e0:	2302      	movs	r3, #2
  }
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087f8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008800:	2b00      	cmp	r3, #0
 8008802:	d017      	beq.n	8008834 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	7c1b      	ldrb	r3, [r3, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d109      	bne.n	8008820 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008812:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008816:	2101      	movs	r1, #1
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f001 fdf6 	bl	800a40a <USBD_LL_PrepareReceive>
 800881e:	e007      	b.n	8008830 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008826:	2340      	movs	r3, #64	@ 0x40
 8008828:	2101      	movs	r1, #1
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 fded 	bl	800a40a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	e000      	b.n	8008836 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008834:	2302      	movs	r3, #2
  }
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	60f8      	str	r0, [r7, #12]
 8008846:	60b9      	str	r1, [r7, #8]
 8008848:	4613      	mov	r3, r2
 800884a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008852:	2302      	movs	r3, #2
 8008854:	e01a      	b.n	800888c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d003      	beq.n	8008868 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	79fa      	ldrb	r2, [r7, #7]
 8008882:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f001 fc5b 	bl	800a140 <USBD_LL_Init>

  return USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d006      	beq.n	80088b6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
 80088b4:	e001      	b.n	80088ba <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80088b6:	2302      	movs	r3, #2
 80088b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bc80      	pop	{r7}
 80088c4:	4770      	bx	lr

080088c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f001 fc90 	bl	800a1f4 <USBD_LL_Start>

  return USBD_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bc80      	pop	{r7}
 80088f0:	4770      	bx	lr

080088f2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80088fe:	2302      	movs	r3, #2
 8008900:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00c      	beq.n	8008926 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	78fa      	ldrb	r2, [r7, #3]
 8008916:	4611      	mov	r1, r2
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	4798      	blx	r3
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008926:	7bfb      	ldrb	r3, [r7, #15]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	78fa      	ldrb	r2, [r7, #3]
 8008946:	4611      	mov	r1, r2
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	4798      	blx	r3

  return USBD_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b082      	sub	sp, #8
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	4618      	mov	r0, r3
 800896a:	f000 fed8 	bl	800971e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800897c:	461a      	mov	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800898a:	f003 031f 	and.w	r3, r3, #31
 800898e:	2b02      	cmp	r3, #2
 8008990:	d016      	beq.n	80089c0 <USBD_LL_SetupStage+0x6a>
 8008992:	2b02      	cmp	r3, #2
 8008994:	d81c      	bhi.n	80089d0 <USBD_LL_SetupStage+0x7a>
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <USBD_LL_SetupStage+0x4a>
 800899a:	2b01      	cmp	r3, #1
 800899c:	d008      	beq.n	80089b0 <USBD_LL_SetupStage+0x5a>
 800899e:	e017      	b.n	80089d0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f9cb 	bl	8008d44 <USBD_StdDevReq>
      break;
 80089ae:	e01a      	b.n	80089e6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fa2d 	bl	8008e18 <USBD_StdItfReq>
      break;
 80089be:	e012      	b.n	80089e6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fa6d 	bl	8008ea8 <USBD_StdEPReq>
      break;
 80089ce:	e00a      	b.n	80089e6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80089d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f001 fc68 	bl	800a2b4 <USBD_LL_StallEP>
      break;
 80089e4:	bf00      	nop
  }

  return USBD_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	460b      	mov	r3, r1
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80089fe:	7afb      	ldrb	r3, [r7, #11]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d14b      	bne.n	8008a9c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008a0a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d134      	bne.n	8008a80 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	68da      	ldr	r2, [r3, #12]
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d919      	bls.n	8008a56 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	1ad2      	subs	r2, r2, r3
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	68da      	ldr	r2, [r3, #12]
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d203      	bcs.n	8008a44 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	e002      	b.n	8008a4a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	6879      	ldr	r1, [r7, #4]
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 ff54 	bl	80098fc <USBD_CtlContinueRx>
 8008a54:	e038      	b.n	8008ac8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00a      	beq.n	8008a78 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	d105      	bne.n	8008a78 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 ff51 	bl	8009920 <USBD_CtlSendStatus>
 8008a7e:	e023      	b.n	8008ac8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a86:	2b05      	cmp	r3, #5
 8008a88:	d11e      	bne.n	8008ac8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008a92:	2100      	movs	r1, #0
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f001 fc0d 	bl	800a2b4 <USBD_LL_StallEP>
 8008a9a:	e015      	b.n	8008ac8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00d      	beq.n	8008ac4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d108      	bne.n	8008ac4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	7afa      	ldrb	r2, [r7, #11]
 8008abc:	4611      	mov	r1, r2
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	4798      	blx	r3
 8008ac2:	e001      	b.n	8008ac8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	e000      	b.n	8008aca <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3718      	adds	r7, #24
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b086      	sub	sp, #24
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	60f8      	str	r0, [r7, #12]
 8008ada:	460b      	mov	r3, r1
 8008adc:	607a      	str	r2, [r7, #4]
 8008ade:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ae0:	7afb      	ldrb	r3, [r7, #11]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d17f      	bne.n	8008be6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3314      	adds	r3, #20
 8008aea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d15c      	bne.n	8008bb0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	68da      	ldr	r2, [r3, #12]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d915      	bls.n	8008b2e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	1ad2      	subs	r2, r2, r3
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	461a      	mov	r2, r3
 8008b18:	6879      	ldr	r1, [r7, #4]
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 febe 	bl	800989c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b20:	2300      	movs	r3, #0
 8008b22:	2200      	movs	r2, #0
 8008b24:	2100      	movs	r1, #0
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f001 fc6f 	bl	800a40a <USBD_LL_PrepareReceive>
 8008b2c:	e04e      	b.n	8008bcc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	6912      	ldr	r2, [r2, #16]
 8008b36:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b3a:	fb01 f202 	mul.w	r2, r1, r2
 8008b3e:	1a9b      	subs	r3, r3, r2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d11c      	bne.n	8008b7e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d316      	bcc.n	8008b7e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	689a      	ldr	r2, [r3, #8]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d20f      	bcs.n	8008b7e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2100      	movs	r1, #0
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 fe9a 	bl	800989c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b70:	2300      	movs	r3, #0
 8008b72:	2200      	movs	r2, #0
 8008b74:	2100      	movs	r1, #0
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f001 fc47 	bl	800a40a <USBD_LL_PrepareReceive>
 8008b7c:	e026      	b.n	8008bcc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	d105      	bne.n	8008ba0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008ba0:	2180      	movs	r1, #128	@ 0x80
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f001 fb86 	bl	800a2b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 fecc 	bl	8009946 <USBD_CtlReceiveStatus>
 8008bae:	e00d      	b.n	8008bcc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d004      	beq.n	8008bc4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d103      	bne.n	8008bcc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008bc4:	2180      	movs	r1, #128	@ 0x80
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f001 fb74 	bl	800a2b4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d11d      	bne.n	8008c12 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f7ff fe81 	bl	80088de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008be4:	e015      	b.n	8008c12 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00d      	beq.n	8008c0e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008bf8:	2b03      	cmp	r3, #3
 8008bfa:	d108      	bne.n	8008c0e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	7afa      	ldrb	r2, [r7, #11]
 8008c06:	4611      	mov	r1, r2
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	4798      	blx	r3
 8008c0c:	e001      	b.n	8008c12 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e000      	b.n	8008c14 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c24:	2340      	movs	r3, #64	@ 0x40
 8008c26:	2200      	movs	r2, #0
 8008c28:	2100      	movs	r1, #0
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 fafd 	bl	800a22a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2240      	movs	r2, #64	@ 0x40
 8008c3c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c40:	2340      	movs	r3, #64	@ 0x40
 8008c42:	2200      	movs	r2, #0
 8008c44:	2180      	movs	r1, #128	@ 0x80
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f001 faef 	bl	800a22a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2240      	movs	r2, #64	@ 0x40
 8008c56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d009      	beq.n	8008c94 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	6852      	ldr	r2, [r2, #4]
 8008c8c:	b2d2      	uxtb	r2, r2
 8008c8e:	4611      	mov	r1, r2
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	4798      	blx	r3
  }

  return USBD_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	78fa      	ldrb	r2, [r7, #3]
 8008cae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bc80      	pop	{r7}
 8008cba:	4770      	bx	lr

08008cbc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2204      	movs	r2, #4
 8008cd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bc80      	pop	{r7}
 8008ce2:	4770      	bx	lr

08008ce4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cf2:	2b04      	cmp	r3, #4
 8008cf4:	d105      	bne.n	8008d02 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc80      	pop	{r7}
 8008d0c:	4770      	bx	lr

08008d0e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d10b      	bne.n	8008d38 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d5a:	2b40      	cmp	r3, #64	@ 0x40
 8008d5c:	d005      	beq.n	8008d6a <USBD_StdDevReq+0x26>
 8008d5e:	2b40      	cmp	r3, #64	@ 0x40
 8008d60:	d84f      	bhi.n	8008e02 <USBD_StdDevReq+0xbe>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d009      	beq.n	8008d7a <USBD_StdDevReq+0x36>
 8008d66:	2b20      	cmp	r3, #32
 8008d68:	d14b      	bne.n	8008e02 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	4798      	blx	r3
      break;
 8008d78:	e048      	b.n	8008e0c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	785b      	ldrb	r3, [r3, #1]
 8008d7e:	2b09      	cmp	r3, #9
 8008d80:	d839      	bhi.n	8008df6 <USBD_StdDevReq+0xb2>
 8008d82:	a201      	add	r2, pc, #4	@ (adr r2, 8008d88 <USBD_StdDevReq+0x44>)
 8008d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d88:	08008dd9 	.word	0x08008dd9
 8008d8c:	08008ded 	.word	0x08008ded
 8008d90:	08008df7 	.word	0x08008df7
 8008d94:	08008de3 	.word	0x08008de3
 8008d98:	08008df7 	.word	0x08008df7
 8008d9c:	08008dbb 	.word	0x08008dbb
 8008da0:	08008db1 	.word	0x08008db1
 8008da4:	08008df7 	.word	0x08008df7
 8008da8:	08008dcf 	.word	0x08008dcf
 8008dac:	08008dc5 	.word	0x08008dc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f9dc 	bl	8009170 <USBD_GetDescriptor>
          break;
 8008db8:	e022      	b.n	8008e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fb3f 	bl	8009440 <USBD_SetAddress>
          break;
 8008dc2:	e01d      	b.n	8008e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fb7e 	bl	80094c8 <USBD_SetConfig>
          break;
 8008dcc:	e018      	b.n	8008e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fc07 	bl	80095e4 <USBD_GetConfig>
          break;
 8008dd6:	e013      	b.n	8008e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fc37 	bl	800964e <USBD_GetStatus>
          break;
 8008de0:	e00e      	b.n	8008e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fc65 	bl	80096b4 <USBD_SetFeature>
          break;
 8008dea:	e009      	b.n	8008e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fc74 	bl	80096dc <USBD_ClrFeature>
          break;
 8008df4:	e004      	b.n	8008e00 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fcc9 	bl	8009790 <USBD_CtlError>
          break;
 8008dfe:	bf00      	nop
      }
      break;
 8008e00:	e004      	b.n	8008e0c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fcc3 	bl	8009790 <USBD_CtlError>
      break;
 8008e0a:	bf00      	nop
  }

  return ret;
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop

08008e18 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e2e:	2b40      	cmp	r3, #64	@ 0x40
 8008e30:	d005      	beq.n	8008e3e <USBD_StdItfReq+0x26>
 8008e32:	2b40      	cmp	r3, #64	@ 0x40
 8008e34:	d82e      	bhi.n	8008e94 <USBD_StdItfReq+0x7c>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <USBD_StdItfReq+0x26>
 8008e3a:	2b20      	cmp	r3, #32
 8008e3c:	d12a      	bne.n	8008e94 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e44:	3b01      	subs	r3, #1
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d81d      	bhi.n	8008e86 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	889b      	ldrh	r3, [r3, #4]
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d813      	bhi.n	8008e7c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	4798      	blx	r3
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	88db      	ldrh	r3, [r3, #6]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d110      	bne.n	8008e90 <USBD_StdItfReq+0x78>
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10d      	bne.n	8008e90 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fd53 	bl	8009920 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e7a:	e009      	b.n	8008e90 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fc86 	bl	8009790 <USBD_CtlError>
          break;
 8008e84:	e004      	b.n	8008e90 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fc81 	bl	8009790 <USBD_CtlError>
          break;
 8008e8e:	e000      	b.n	8008e92 <USBD_StdItfReq+0x7a>
          break;
 8008e90:	bf00      	nop
      }
      break;
 8008e92:	e004      	b.n	8008e9e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fc7a 	bl	8009790 <USBD_CtlError>
      break;
 8008e9c:	bf00      	nop
  }

  return USBD_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	889b      	ldrh	r3, [r3, #4]
 8008eba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ec4:	2b40      	cmp	r3, #64	@ 0x40
 8008ec6:	d007      	beq.n	8008ed8 <USBD_StdEPReq+0x30>
 8008ec8:	2b40      	cmp	r3, #64	@ 0x40
 8008eca:	f200 8146 	bhi.w	800915a <USBD_StdEPReq+0x2b2>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00a      	beq.n	8008ee8 <USBD_StdEPReq+0x40>
 8008ed2:	2b20      	cmp	r3, #32
 8008ed4:	f040 8141 	bne.w	800915a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	4798      	blx	r3
      break;
 8008ee6:	e13d      	b.n	8009164 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ef0:	2b20      	cmp	r3, #32
 8008ef2:	d10a      	bne.n	8008f0a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	4798      	blx	r3
 8008f02:	4603      	mov	r3, r0
 8008f04:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	e12d      	b.n	8009166 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d007      	beq.n	8008f22 <USBD_StdEPReq+0x7a>
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	f300 811b 	bgt.w	800914e <USBD_StdEPReq+0x2a6>
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d072      	beq.n	8009002 <USBD_StdEPReq+0x15a>
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d03a      	beq.n	8008f96 <USBD_StdEPReq+0xee>
 8008f20:	e115      	b.n	800914e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d002      	beq.n	8008f32 <USBD_StdEPReq+0x8a>
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	d015      	beq.n	8008f5c <USBD_StdEPReq+0xb4>
 8008f30:	e02b      	b.n	8008f8a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f32:	7bbb      	ldrb	r3, [r7, #14]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00c      	beq.n	8008f52 <USBD_StdEPReq+0xaa>
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	2b80      	cmp	r3, #128	@ 0x80
 8008f3c:	d009      	beq.n	8008f52 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 f9b6 	bl	800a2b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f48:	2180      	movs	r1, #128	@ 0x80
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 f9b2 	bl	800a2b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f50:	e020      	b.n	8008f94 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fc1b 	bl	8009790 <USBD_CtlError>
              break;
 8008f5a:	e01b      	b.n	8008f94 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	885b      	ldrh	r3, [r3, #2]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10e      	bne.n	8008f82 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00b      	beq.n	8008f82 <USBD_StdEPReq+0xda>
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	2b80      	cmp	r3, #128	@ 0x80
 8008f6e:	d008      	beq.n	8008f82 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	88db      	ldrh	r3, [r3, #6]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d104      	bne.n	8008f82 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 f999 	bl	800a2b4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fccc 	bl	8009920 <USBD_CtlSendStatus>

              break;
 8008f88:	e004      	b.n	8008f94 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008f8a:	6839      	ldr	r1, [r7, #0]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fbff 	bl	8009790 <USBD_CtlError>
              break;
 8008f92:	bf00      	nop
          }
          break;
 8008f94:	e0e0      	b.n	8009158 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d002      	beq.n	8008fa6 <USBD_StdEPReq+0xfe>
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d015      	beq.n	8008fd0 <USBD_StdEPReq+0x128>
 8008fa4:	e026      	b.n	8008ff4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00c      	beq.n	8008fc6 <USBD_StdEPReq+0x11e>
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	2b80      	cmp	r3, #128	@ 0x80
 8008fb0:	d009      	beq.n	8008fc6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 f97c 	bl	800a2b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008fbc:	2180      	movs	r1, #128	@ 0x80
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f001 f978 	bl	800a2b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fc4:	e01c      	b.n	8009000 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fbe1 	bl	8009790 <USBD_CtlError>
              break;
 8008fce:	e017      	b.n	8009000 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	885b      	ldrh	r3, [r3, #2]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d112      	bne.n	8008ffe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d004      	beq.n	8008fec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f001 f983 	bl	800a2f2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fc97 	bl	8009920 <USBD_CtlSendStatus>
              }
              break;
 8008ff2:	e004      	b.n	8008ffe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fbca 	bl	8009790 <USBD_CtlError>
              break;
 8008ffc:	e000      	b.n	8009000 <USBD_StdEPReq+0x158>
              break;
 8008ffe:	bf00      	nop
          }
          break;
 8009000:	e0aa      	b.n	8009158 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009008:	2b02      	cmp	r3, #2
 800900a:	d002      	beq.n	8009012 <USBD_StdEPReq+0x16a>
 800900c:	2b03      	cmp	r3, #3
 800900e:	d032      	beq.n	8009076 <USBD_StdEPReq+0x1ce>
 8009010:	e097      	b.n	8009142 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009012:	7bbb      	ldrb	r3, [r7, #14]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d007      	beq.n	8009028 <USBD_StdEPReq+0x180>
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	2b80      	cmp	r3, #128	@ 0x80
 800901c:	d004      	beq.n	8009028 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fbb5 	bl	8009790 <USBD_CtlError>
                break;
 8009026:	e091      	b.n	800914c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009028:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800902c:	2b00      	cmp	r3, #0
 800902e:	da0b      	bge.n	8009048 <USBD_StdEPReq+0x1a0>
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009036:	4613      	mov	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	3310      	adds	r3, #16
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	4413      	add	r3, r2
 8009044:	3304      	adds	r3, #4
 8009046:	e00b      	b.n	8009060 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800904e:	4613      	mov	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4413      	add	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	4413      	add	r3, r2
 800905e:	3304      	adds	r3, #4
 8009060:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	2200      	movs	r2, #0
 8009066:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2202      	movs	r2, #2
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fbf8 	bl	8009864 <USBD_CtlSendData>
              break;
 8009074:	e06a      	b.n	800914c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800907a:	2b00      	cmp	r3, #0
 800907c:	da11      	bge.n	80090a2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	f003 020f 	and.w	r2, r3, #15
 8009084:	6879      	ldr	r1, [r7, #4]
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	440b      	add	r3, r1
 8009090:	3318      	adds	r3, #24
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d117      	bne.n	80090c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fb78 	bl	8009790 <USBD_CtlError>
                  break;
 80090a0:	e054      	b.n	800914c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
 80090a4:	f003 020f 	and.w	r2, r3, #15
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	4613      	mov	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	440b      	add	r3, r1
 80090b4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fb65 	bl	8009790 <USBD_CtlError>
                  break;
 80090c6:	e041      	b.n	800914c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	da0b      	bge.n	80090e8 <USBD_StdEPReq+0x240>
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
 80090d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090d6:	4613      	mov	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4413      	add	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	3310      	adds	r3, #16
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	4413      	add	r3, r2
 80090e4:	3304      	adds	r3, #4
 80090e6:	e00b      	b.n	8009100 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
 80090ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090ee:	4613      	mov	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	4413      	add	r3, r2
 80090fe:	3304      	adds	r3, #4
 8009100:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <USBD_StdEPReq+0x266>
 8009108:	7bbb      	ldrb	r3, [r7, #14]
 800910a:	2b80      	cmp	r3, #128	@ 0x80
 800910c:	d103      	bne.n	8009116 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2200      	movs	r2, #0
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	e00e      	b.n	8009134 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009116:	7bbb      	ldrb	r3, [r7, #14]
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f001 f908 	bl	800a330 <USBD_LL_IsStallEP>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2201      	movs	r2, #1
 800912a:	601a      	str	r2, [r3, #0]
 800912c:	e002      	b.n	8009134 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2200      	movs	r2, #0
 8009132:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2202      	movs	r2, #2
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fb92 	bl	8009864 <USBD_CtlSendData>
              break;
 8009140:	e004      	b.n	800914c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fb23 	bl	8009790 <USBD_CtlError>
              break;
 800914a:	bf00      	nop
          }
          break;
 800914c:	e004      	b.n	8009158 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fb1d 	bl	8009790 <USBD_CtlError>
          break;
 8009156:	bf00      	nop
      }
      break;
 8009158:	e004      	b.n	8009164 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fb17 	bl	8009790 <USBD_CtlError>
      break;
 8009162:	bf00      	nop
  }

  return ret;
 8009164:	7bfb      	ldrb	r3, [r7, #15]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800917a:	2300      	movs	r3, #0
 800917c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	885b      	ldrh	r3, [r3, #2]
 800918a:	0a1b      	lsrs	r3, r3, #8
 800918c:	b29b      	uxth	r3, r3
 800918e:	3b01      	subs	r3, #1
 8009190:	2b06      	cmp	r3, #6
 8009192:	f200 8128 	bhi.w	80093e6 <USBD_GetDescriptor+0x276>
 8009196:	a201      	add	r2, pc, #4	@ (adr r2, 800919c <USBD_GetDescriptor+0x2c>)
 8009198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919c:	080091b9 	.word	0x080091b9
 80091a0:	080091d1 	.word	0x080091d1
 80091a4:	08009211 	.word	0x08009211
 80091a8:	080093e7 	.word	0x080093e7
 80091ac:	080093e7 	.word	0x080093e7
 80091b0:	08009387 	.word	0x08009387
 80091b4:	080093b3 	.word	0x080093b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	7c12      	ldrb	r2, [r2, #16]
 80091c4:	f107 0108 	add.w	r1, r7, #8
 80091c8:	4610      	mov	r0, r2
 80091ca:	4798      	blx	r3
 80091cc:	60f8      	str	r0, [r7, #12]
      break;
 80091ce:	e112      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	7c1b      	ldrb	r3, [r3, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10d      	bne.n	80091f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e0:	f107 0208 	add.w	r2, r7, #8
 80091e4:	4610      	mov	r0, r2
 80091e6:	4798      	blx	r3
 80091e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3301      	adds	r3, #1
 80091ee:	2202      	movs	r2, #2
 80091f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80091f2:	e100      	b.n	80093f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fc:	f107 0208 	add.w	r2, r7, #8
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3301      	adds	r3, #1
 800920a:	2202      	movs	r2, #2
 800920c:	701a      	strb	r2, [r3, #0]
      break;
 800920e:	e0f2      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	885b      	ldrh	r3, [r3, #2]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b05      	cmp	r3, #5
 8009218:	f200 80ac 	bhi.w	8009374 <USBD_GetDescriptor+0x204>
 800921c:	a201      	add	r2, pc, #4	@ (adr r2, 8009224 <USBD_GetDescriptor+0xb4>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	0800923d 	.word	0x0800923d
 8009228:	08009271 	.word	0x08009271
 800922c:	080092a5 	.word	0x080092a5
 8009230:	080092d9 	.word	0x080092d9
 8009234:	0800930d 	.word	0x0800930d
 8009238:	08009341 	.word	0x08009341
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00b      	beq.n	8009260 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	7c12      	ldrb	r2, [r2, #16]
 8009254:	f107 0108 	add.w	r1, r7, #8
 8009258:	4610      	mov	r0, r2
 800925a:	4798      	blx	r3
 800925c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800925e:	e091      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fa94 	bl	8009790 <USBD_CtlError>
            err++;
 8009268:	7afb      	ldrb	r3, [r7, #11]
 800926a:	3301      	adds	r3, #1
 800926c:	72fb      	strb	r3, [r7, #11]
          break;
 800926e:	e089      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00b      	beq.n	8009294 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	7c12      	ldrb	r2, [r2, #16]
 8009288:	f107 0108 	add.w	r1, r7, #8
 800928c:	4610      	mov	r0, r2
 800928e:	4798      	blx	r3
 8009290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009292:	e077      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fa7a 	bl	8009790 <USBD_CtlError>
            err++;
 800929c:	7afb      	ldrb	r3, [r7, #11]
 800929e:	3301      	adds	r3, #1
 80092a0:	72fb      	strb	r3, [r7, #11]
          break;
 80092a2:	e06f      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	7c12      	ldrb	r2, [r2, #16]
 80092bc:	f107 0108 	add.w	r1, r7, #8
 80092c0:	4610      	mov	r0, r2
 80092c2:	4798      	blx	r3
 80092c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092c6:	e05d      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fa60 	bl	8009790 <USBD_CtlError>
            err++;
 80092d0:	7afb      	ldrb	r3, [r7, #11]
 80092d2:	3301      	adds	r3, #1
 80092d4:	72fb      	strb	r3, [r7, #11]
          break;
 80092d6:	e055      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00b      	beq.n	80092fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	7c12      	ldrb	r2, [r2, #16]
 80092f0:	f107 0108 	add.w	r1, r7, #8
 80092f4:	4610      	mov	r0, r2
 80092f6:	4798      	blx	r3
 80092f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092fa:	e043      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fa46 	bl	8009790 <USBD_CtlError>
            err++;
 8009304:	7afb      	ldrb	r3, [r7, #11]
 8009306:	3301      	adds	r3, #1
 8009308:	72fb      	strb	r3, [r7, #11]
          break;
 800930a:	e03b      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00b      	beq.n	8009330 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	7c12      	ldrb	r2, [r2, #16]
 8009324:	f107 0108 	add.w	r1, r7, #8
 8009328:	4610      	mov	r0, r2
 800932a:	4798      	blx	r3
 800932c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800932e:	e029      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fa2c 	bl	8009790 <USBD_CtlError>
            err++;
 8009338:	7afb      	ldrb	r3, [r7, #11]
 800933a:	3301      	adds	r3, #1
 800933c:	72fb      	strb	r3, [r7, #11]
          break;
 800933e:	e021      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	7c12      	ldrb	r2, [r2, #16]
 8009358:	f107 0108 	add.w	r1, r7, #8
 800935c:	4610      	mov	r0, r2
 800935e:	4798      	blx	r3
 8009360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009362:	e00f      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa12 	bl	8009790 <USBD_CtlError>
            err++;
 800936c:	7afb      	ldrb	r3, [r7, #11]
 800936e:	3301      	adds	r3, #1
 8009370:	72fb      	strb	r3, [r7, #11]
          break;
 8009372:	e007      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fa0a 	bl	8009790 <USBD_CtlError>
          err++;
 800937c:	7afb      	ldrb	r3, [r7, #11]
 800937e:	3301      	adds	r3, #1
 8009380:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009382:	e038      	b.n	80093f6 <USBD_GetDescriptor+0x286>
 8009384:	e037      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	7c1b      	ldrb	r3, [r3, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d109      	bne.n	80093a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009396:	f107 0208 	add.w	r2, r7, #8
 800939a:	4610      	mov	r0, r2
 800939c:	4798      	blx	r3
 800939e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093a0:	e029      	b.n	80093f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f9f3 	bl	8009790 <USBD_CtlError>
        err++;
 80093aa:	7afb      	ldrb	r3, [r7, #11]
 80093ac:	3301      	adds	r3, #1
 80093ae:	72fb      	strb	r3, [r7, #11]
      break;
 80093b0:	e021      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	7c1b      	ldrb	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10d      	bne.n	80093d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c2:	f107 0208 	add.w	r2, r7, #8
 80093c6:	4610      	mov	r0, r2
 80093c8:	4798      	blx	r3
 80093ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	3301      	adds	r3, #1
 80093d0:	2207      	movs	r2, #7
 80093d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093d4:	e00f      	b.n	80093f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f9d9 	bl	8009790 <USBD_CtlError>
        err++;
 80093de:	7afb      	ldrb	r3, [r7, #11]
 80093e0:	3301      	adds	r3, #1
 80093e2:	72fb      	strb	r3, [r7, #11]
      break;
 80093e4:	e007      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f9d1 	bl	8009790 <USBD_CtlError>
      err++;
 80093ee:	7afb      	ldrb	r3, [r7, #11]
 80093f0:	3301      	adds	r3, #1
 80093f2:	72fb      	strb	r3, [r7, #11]
      break;
 80093f4:	bf00      	nop
  }

  if (err != 0U)
 80093f6:	7afb      	ldrb	r3, [r7, #11]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d11c      	bne.n	8009436 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80093fc:	893b      	ldrh	r3, [r7, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d011      	beq.n	8009426 <USBD_GetDescriptor+0x2b6>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	88db      	ldrh	r3, [r3, #6]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00d      	beq.n	8009426 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	88da      	ldrh	r2, [r3, #6]
 800940e:	893b      	ldrh	r3, [r7, #8]
 8009410:	4293      	cmp	r3, r2
 8009412:	bf28      	it	cs
 8009414:	4613      	movcs	r3, r2
 8009416:	b29b      	uxth	r3, r3
 8009418:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800941a:	893b      	ldrh	r3, [r7, #8]
 800941c:	461a      	mov	r2, r3
 800941e:	68f9      	ldr	r1, [r7, #12]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fa1f 	bl	8009864 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	88db      	ldrh	r3, [r3, #6]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d104      	bne.n	8009438 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fa76 	bl	8009920 <USBD_CtlSendStatus>
 8009434:	e000      	b.n	8009438 <USBD_GetDescriptor+0x2c8>
    return;
 8009436:	bf00      	nop
    }
  }
}
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop

08009440 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	889b      	ldrh	r3, [r3, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d130      	bne.n	80094b4 <USBD_SetAddress+0x74>
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	88db      	ldrh	r3, [r3, #6]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d12c      	bne.n	80094b4 <USBD_SetAddress+0x74>
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	885b      	ldrh	r3, [r3, #2]
 800945e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009460:	d828      	bhi.n	80094b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	885b      	ldrh	r3, [r3, #2]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800946c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009474:	2b03      	cmp	r3, #3
 8009476:	d104      	bne.n	8009482 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f988 	bl	8009790 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009480:	e01d      	b.n	80094be <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	7bfa      	ldrb	r2, [r7, #15]
 8009486:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	4619      	mov	r1, r3
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 ff79 	bl	800a386 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fa43 	bl	8009920 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d004      	beq.n	80094aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2202      	movs	r2, #2
 80094a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094a8:	e009      	b.n	80094be <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b2:	e004      	b.n	80094be <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f96a 	bl	8009790 <USBD_CtlError>
  }
}
 80094bc:	bf00      	nop
 80094be:	bf00      	nop
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	885b      	ldrh	r3, [r3, #2]
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	4b41      	ldr	r3, [pc, #260]	@ (80095e0 <USBD_SetConfig+0x118>)
 80094da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094dc:	4b40      	ldr	r3, [pc, #256]	@ (80095e0 <USBD_SetConfig+0x118>)
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d904      	bls.n	80094ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f952 	bl	8009790 <USBD_CtlError>
 80094ec:	e075      	b.n	80095da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d002      	beq.n	80094fe <USBD_SetConfig+0x36>
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d023      	beq.n	8009544 <USBD_SetConfig+0x7c>
 80094fc:	e062      	b.n	80095c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80094fe:	4b38      	ldr	r3, [pc, #224]	@ (80095e0 <USBD_SetConfig+0x118>)
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d01a      	beq.n	800953c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009506:	4b36      	ldr	r3, [pc, #216]	@ (80095e0 <USBD_SetConfig+0x118>)
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2203      	movs	r2, #3
 8009514:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009518:	4b31      	ldr	r3, [pc, #196]	@ (80095e0 <USBD_SetConfig+0x118>)
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7ff f9e7 	bl	80088f2 <USBD_SetClassConfig>
 8009524:	4603      	mov	r3, r0
 8009526:	2b02      	cmp	r3, #2
 8009528:	d104      	bne.n	8009534 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f92f 	bl	8009790 <USBD_CtlError>
            return;
 8009532:	e052      	b.n	80095da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f9f3 	bl	8009920 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800953a:	e04e      	b.n	80095da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f9ef 	bl	8009920 <USBD_CtlSendStatus>
        break;
 8009542:	e04a      	b.n	80095da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009544:	4b26      	ldr	r3, [pc, #152]	@ (80095e0 <USBD_SetConfig+0x118>)
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d112      	bne.n	8009572 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2202      	movs	r2, #2
 8009550:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009554:	4b22      	ldr	r3, [pc, #136]	@ (80095e0 <USBD_SetConfig+0x118>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	461a      	mov	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800955e:	4b20      	ldr	r3, [pc, #128]	@ (80095e0 <USBD_SetConfig+0x118>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7ff f9e3 	bl	8008930 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f9d8 	bl	8009920 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009570:	e033      	b.n	80095da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009572:	4b1b      	ldr	r3, [pc, #108]	@ (80095e0 <USBD_SetConfig+0x118>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	429a      	cmp	r2, r3
 800957e:	d01d      	beq.n	80095bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7ff f9d1 	bl	8008930 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800958e:	4b14      	ldr	r3, [pc, #80]	@ (80095e0 <USBD_SetConfig+0x118>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009598:	4b11      	ldr	r3, [pc, #68]	@ (80095e0 <USBD_SetConfig+0x118>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7ff f9a7 	bl	80088f2 <USBD_SetClassConfig>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d104      	bne.n	80095b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f8ef 	bl	8009790 <USBD_CtlError>
            return;
 80095b2:	e012      	b.n	80095da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f9b3 	bl	8009920 <USBD_CtlSendStatus>
        break;
 80095ba:	e00e      	b.n	80095da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f9af 	bl	8009920 <USBD_CtlSendStatus>
        break;
 80095c2:	e00a      	b.n	80095da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f8e2 	bl	8009790 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80095cc:	4b04      	ldr	r3, [pc, #16]	@ (80095e0 <USBD_SetConfig+0x118>)
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7ff f9ac 	bl	8008930 <USBD_ClrClassConfig>
        break;
 80095d8:	bf00      	nop
    }
  }
}
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	20000600 	.word	0x20000600

080095e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	88db      	ldrh	r3, [r3, #6]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d004      	beq.n	8009600 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f8c9 	bl	8009790 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095fe:	e022      	b.n	8009646 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009606:	2b02      	cmp	r3, #2
 8009608:	dc02      	bgt.n	8009610 <USBD_GetConfig+0x2c>
 800960a:	2b00      	cmp	r3, #0
 800960c:	dc03      	bgt.n	8009616 <USBD_GetConfig+0x32>
 800960e:	e015      	b.n	800963c <USBD_GetConfig+0x58>
 8009610:	2b03      	cmp	r3, #3
 8009612:	d00b      	beq.n	800962c <USBD_GetConfig+0x48>
 8009614:	e012      	b.n	800963c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3308      	adds	r3, #8
 8009620:	2201      	movs	r2, #1
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f91d 	bl	8009864 <USBD_CtlSendData>
        break;
 800962a:	e00c      	b.n	8009646 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3304      	adds	r3, #4
 8009630:	2201      	movs	r2, #1
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f915 	bl	8009864 <USBD_CtlSendData>
        break;
 800963a:	e004      	b.n	8009646 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f8a6 	bl	8009790 <USBD_CtlError>
        break;
 8009644:	bf00      	nop
}
 8009646:	bf00      	nop
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b082      	sub	sp, #8
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800965e:	3b01      	subs	r3, #1
 8009660:	2b02      	cmp	r3, #2
 8009662:	d81e      	bhi.n	80096a2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	88db      	ldrh	r3, [r3, #6]
 8009668:	2b02      	cmp	r3, #2
 800966a:	d004      	beq.n	8009676 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f88e 	bl	8009790 <USBD_CtlError>
        break;
 8009674:	e01a      	b.n	80096ac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009682:	2b00      	cmp	r3, #0
 8009684:	d005      	beq.n	8009692 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f043 0202 	orr.w	r2, r3, #2
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	330c      	adds	r3, #12
 8009696:	2202      	movs	r2, #2
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f8e2 	bl	8009864 <USBD_CtlSendData>
      break;
 80096a0:	e004      	b.n	80096ac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f873 	bl	8009790 <USBD_CtlError>
      break;
 80096aa:	bf00      	nop
  }
}
 80096ac:	bf00      	nop
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	885b      	ldrh	r3, [r3, #2]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d106      	bne.n	80096d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f926 	bl	8009920 <USBD_CtlSendStatus>
  }
}
 80096d4:	bf00      	nop
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096ec:	3b01      	subs	r3, #1
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d80b      	bhi.n	800970a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	885b      	ldrh	r3, [r3, #2]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d10c      	bne.n	8009714 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f90c 	bl	8009920 <USBD_CtlSendStatus>
      }
      break;
 8009708:	e004      	b.n	8009714 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f83f 	bl	8009790 <USBD_CtlError>
      break;
 8009712:	e000      	b.n	8009716 <USBD_ClrFeature+0x3a>
      break;
 8009714:	bf00      	nop
  }
}
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800971e:	b480      	push	{r7}
 8009720:	b083      	sub	sp, #12
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	781a      	ldrb	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	785a      	ldrb	r2, [r3, #1]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	3302      	adds	r3, #2
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	461a      	mov	r2, r3
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	3303      	adds	r3, #3
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	021b      	lsls	r3, r3, #8
 8009748:	b29b      	uxth	r3, r3
 800974a:	4413      	add	r3, r2
 800974c:	b29a      	uxth	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	3304      	adds	r3, #4
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	461a      	mov	r2, r3
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	3305      	adds	r3, #5
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	021b      	lsls	r3, r3, #8
 8009762:	b29b      	uxth	r3, r3
 8009764:	4413      	add	r3, r2
 8009766:	b29a      	uxth	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	3306      	adds	r3, #6
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	3307      	adds	r3, #7
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	021b      	lsls	r3, r3, #8
 800977c:	b29b      	uxth	r3, r3
 800977e:	4413      	add	r3, r2
 8009780:	b29a      	uxth	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	80da      	strh	r2, [r3, #6]

}
 8009786:	bf00      	nop
 8009788:	370c      	adds	r7, #12
 800978a:	46bd      	mov	sp, r7
 800978c:	bc80      	pop	{r7}
 800978e:	4770      	bx	lr

08009790 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800979a:	2180      	movs	r1, #128	@ 0x80
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fd89 	bl	800a2b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80097a2:	2100      	movs	r1, #0
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fd85 	bl	800a2b4 <USBD_LL_StallEP>
}
 80097aa:	bf00      	nop
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b086      	sub	sp, #24
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	60f8      	str	r0, [r7, #12]
 80097ba:	60b9      	str	r1, [r7, #8]
 80097bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097be:	2300      	movs	r3, #0
 80097c0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d032      	beq.n	800982e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 f834 	bl	8009836 <USBD_GetLen>
 80097ce:	4603      	mov	r3, r0
 80097d0:	3301      	adds	r3, #1
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80097dc:	7dfb      	ldrb	r3, [r7, #23]
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	75fa      	strb	r2, [r7, #23]
 80097e2:	461a      	mov	r2, r3
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	4413      	add	r3, r2
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	7812      	ldrb	r2, [r2, #0]
 80097ec:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80097ee:	7dfb      	ldrb	r3, [r7, #23]
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	75fa      	strb	r2, [r7, #23]
 80097f4:	461a      	mov	r2, r3
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	4413      	add	r3, r2
 80097fa:	2203      	movs	r2, #3
 80097fc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80097fe:	e012      	b.n	8009826 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	60fa      	str	r2, [r7, #12]
 8009806:	7dfa      	ldrb	r2, [r7, #23]
 8009808:	1c51      	adds	r1, r2, #1
 800980a:	75f9      	strb	r1, [r7, #23]
 800980c:	4611      	mov	r1, r2
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	440a      	add	r2, r1
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	1c5a      	adds	r2, r3, #1
 800981a:	75fa      	strb	r2, [r7, #23]
 800981c:	461a      	mov	r2, r3
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	4413      	add	r3, r2
 8009822:	2200      	movs	r2, #0
 8009824:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e8      	bne.n	8009800 <USBD_GetString+0x4e>
    }
  }
}
 800982e:	bf00      	nop
 8009830:	3718      	adds	r7, #24
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009836:	b480      	push	{r7}
 8009838:	b085      	sub	sp, #20
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800983e:	2300      	movs	r3, #0
 8009840:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009842:	e005      	b.n	8009850 <USBD_GetLen+0x1a>
  {
    len++;
 8009844:	7bfb      	ldrb	r3, [r7, #15]
 8009846:	3301      	adds	r3, #1
 8009848:	73fb      	strb	r3, [r7, #15]
    buf++;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	3301      	adds	r3, #1
 800984e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1f5      	bne.n	8009844 <USBD_GetLen+0xe>
  }

  return len;
 8009858:	7bfb      	ldrb	r3, [r7, #15]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	bc80      	pop	{r7}
 8009862:	4770      	bx	lr

08009864 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	4613      	mov	r3, r2
 8009870:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2202      	movs	r2, #2
 8009876:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800987a:	88fa      	ldrh	r2, [r7, #6]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009880:	88fa      	ldrh	r2, [r7, #6]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009886:	88fb      	ldrh	r3, [r7, #6]
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	2100      	movs	r1, #0
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 fd99 	bl	800a3c4 <USBD_LL_Transmit>

  return USBD_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	4613      	mov	r3, r2
 80098a8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098aa:	88fb      	ldrh	r3, [r7, #6]
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	2100      	movs	r1, #0
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 fd87 	bl	800a3c4 <USBD_LL_Transmit>

  return USBD_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	4613      	mov	r3, r2
 80098cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2203      	movs	r2, #3
 80098d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80098d6:	88fa      	ldrh	r2, [r7, #6]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80098de:	88fa      	ldrh	r2, [r7, #6]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098e6:	88fb      	ldrh	r3, [r7, #6]
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	2100      	movs	r1, #0
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 fd8c 	bl	800a40a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	4613      	mov	r3, r2
 8009908:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800990a:	88fb      	ldrh	r3, [r7, #6]
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	2100      	movs	r1, #0
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f000 fd7a 	bl	800a40a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2204      	movs	r2, #4
 800992c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009930:	2300      	movs	r3, #0
 8009932:	2200      	movs	r2, #0
 8009934:	2100      	movs	r1, #0
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fd44 	bl	800a3c4 <USBD_LL_Transmit>

  return USBD_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b082      	sub	sp, #8
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2205      	movs	r2, #5
 8009952:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009956:	2300      	movs	r3, #0
 8009958:	2200      	movs	r2, #0
 800995a:	2100      	movs	r1, #0
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fd54 	bl	800a40a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009970:	2200      	movs	r2, #0
 8009972:	4912      	ldr	r1, [pc, #72]	@ (80099bc <MX_USB_DEVICE_Init+0x50>)
 8009974:	4812      	ldr	r0, [pc, #72]	@ (80099c0 <MX_USB_DEVICE_Init+0x54>)
 8009976:	f7fe ff62 	bl	800883e <USBD_Init>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d001      	beq.n	8009984 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009980:	f7f6 fd2a 	bl	80003d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009984:	490f      	ldr	r1, [pc, #60]	@ (80099c4 <MX_USB_DEVICE_Init+0x58>)
 8009986:	480e      	ldr	r0, [pc, #56]	@ (80099c0 <MX_USB_DEVICE_Init+0x54>)
 8009988:	f7fe ff84 	bl	8008894 <USBD_RegisterClass>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009992:	f7f6 fd21 	bl	80003d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009996:	490c      	ldr	r1, [pc, #48]	@ (80099c8 <MX_USB_DEVICE_Init+0x5c>)
 8009998:	4809      	ldr	r0, [pc, #36]	@ (80099c0 <MX_USB_DEVICE_Init+0x54>)
 800999a:	f7fe feb5 	bl	8008708 <USBD_CDC_RegisterInterface>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80099a4:	f7f6 fd18 	bl	80003d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099a8:	4805      	ldr	r0, [pc, #20]	@ (80099c0 <MX_USB_DEVICE_Init+0x54>)
 80099aa:	f7fe ff8c 	bl	80088c6 <USBD_Start>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d001      	beq.n	80099b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099b4:	f7f6 fd10 	bl	80003d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099b8:	bf00      	nop
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	20000140 	.word	0x20000140
 80099c0:	20000604 	.word	0x20000604
 80099c4:	20000020 	.word	0x20000020
 80099c8:	20000130 	.word	0x20000130

080099cc <cdcAvailable>:
uint8_t  rx_buf[512];
bool     rx_full =false;


uint32_t cdcAvailable(void)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 80099d2:	4b09      	ldr	r3, [pc, #36]	@ (80099f8 <cdcAvailable+0x2c>)
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	4b09      	ldr	r3, [pc, #36]	@ (80099fc <cdcAvailable+0x30>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	4a08      	ldr	r2, [pc, #32]	@ (8009a00 <cdcAvailable+0x34>)
 80099de:	6812      	ldr	r2, [r2, #0]
 80099e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80099e4:	fb01 f202 	mul.w	r2, r1, r2
 80099e8:	1a9b      	subs	r3, r3, r2
 80099ea:	607b      	str	r3, [r7, #4]

  return ret;
 80099ec:	687b      	ldr	r3, [r7, #4]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bc80      	pop	{r7}
 80099f6:	4770      	bx	lr
 80099f8:	200008c8 	.word	0x200008c8
 80099fc:	200008cc 	.word	0x200008cc
 8009a00:	2000012c 	.word	0x2000012c

08009a04 <cdcRead>:


uint8_t cdcRead(void)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 8009a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8009a44 <cdcRead+0x40>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8009a48 <cdcRead+0x44>)
 8009a10:	5cd3      	ldrb	r3, [r2, r3]
 8009a12:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 8009a14:	4b0b      	ldr	r3, [pc, #44]	@ (8009a44 <cdcRead+0x40>)
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	4b0c      	ldr	r3, [pc, #48]	@ (8009a4c <cdcRead+0x48>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d00b      	beq.n	8009a38 <cdcRead+0x34>
  {
	  rx_out = (rx_out + 1) % rx_len;
 8009a20:	4b08      	ldr	r3, [pc, #32]	@ (8009a44 <cdcRead+0x40>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	3301      	adds	r3, #1
 8009a26:	4a0a      	ldr	r2, [pc, #40]	@ (8009a50 <cdcRead+0x4c>)
 8009a28:	6812      	ldr	r2, [r2, #0]
 8009a2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a2e:	fb01 f202 	mul.w	r2, r1, r2
 8009a32:	1a9b      	subs	r3, r3, r2
 8009a34:	4a03      	ldr	r2, [pc, #12]	@ (8009a44 <cdcRead+0x40>)
 8009a36:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009a38:	79fb      	ldrb	r3, [r7, #7]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bc80      	pop	{r7}
 8009a42:	4770      	bx	lr
 8009a44:	200008cc 	.word	0x200008cc
 8009a48:	200008d0 	.word	0x200008d0
 8009a4c:	200008c8 	.word	0x200008c8
 8009a50:	2000012c 	.word	0x2000012c

08009a54 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] =rx_data;    //오버라이트
 8009a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a98 <cdcDataIn+0x44>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	490e      	ldr	r1, [pc, #56]	@ (8009a9c <cdcDataIn+0x48>)
 8009a64:	79fa      	ldrb	r2, [r7, #7]
 8009a66:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in +1) % rx_len;
 8009a68:	4b0b      	ldr	r3, [pc, #44]	@ (8009a98 <cdcDataIn+0x44>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8009aa0 <cdcDataIn+0x4c>)
 8009a70:	6812      	ldr	r2, [r2, #0]
 8009a72:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a76:	fb01 f202 	mul.w	r2, r1, r2
 8009a7a:	1a9b      	subs	r3, r3, r2
 8009a7c:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 8009a7e:	4b09      	ldr	r3, [pc, #36]	@ (8009aa4 <cdcDataIn+0x50>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d002      	beq.n	8009a8e <cdcDataIn+0x3a>
  {
	  rx_in = next_rx_in;
 8009a88:	4a03      	ldr	r2, [pc, #12]	@ (8009a98 <cdcDataIn+0x44>)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6013      	str	r3, [r2, #0]
  }
}
 8009a8e:	bf00      	nop
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bc80      	pop	{r7}
 8009a96:	4770      	bx	lr
 8009a98:	200008c8 	.word	0x200008c8
 8009a9c:	200008d0 	.word	0x200008d0
 8009aa0:	2000012c 	.word	0x2000012c
 8009aa4:	200008cc 	.word	0x200008cc

08009aa8 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 8009ab2:	f7f6 fc1c 	bl	80002ee <millis>
 8009ab6:	60f8      	str	r0, [r7, #12]
  while(1)
  {
	  ret = CDC_Transmit_FS(p_data,length);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	4619      	mov	r1, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f948 	bl	8009d54 <CDC_Transmit_FS>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	72fb      	strb	r3, [r7, #11]
    if(ret == USBD_OK)
 8009ac8:	7afb      	ldrb	r3, [r7, #11]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <cdcWrite+0x2a>
    {
    	return length;
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	e00e      	b.n	8009af0 <cdcWrite+0x48>
    }
    else if(ret ==USBD_FAIL)
 8009ad2:	7afb      	ldrb	r3, [r7, #11]
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d101      	bne.n	8009adc <cdcWrite+0x34>
    {
    	return 0;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	e009      	b.n	8009af0 <cdcWrite+0x48>
    }
    //busy 인 경우 while문을 돈다.
    if(millis()-pre_time >= 100)
 8009adc:	f7f6 fc07 	bl	80002ee <millis>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	2b63      	cmp	r3, #99	@ 0x63
 8009ae8:	d800      	bhi.n	8009aec <cdcWrite+0x44>
	  ret = CDC_Transmit_FS(p_data,length);
 8009aea:	e7e5      	b.n	8009ab8 <cdcWrite+0x10>
    {
    	break;
 8009aec:	bf00      	nop
    }
  }

  return 0;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <USBD_CDC_SOF>:
{
	return LineCoding.bitrate;
}

uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 8009af8:	b590      	push	{r4, r7, lr}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
	if(rx_full == true)
 8009b00:	4b0c      	ldr	r3, [pc, #48]	@ (8009b34 <USBD_CDC_SOF+0x3c>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d010      	beq.n	8009b2a <USBD_CDC_SOF+0x32>
	{
		uint32_t buf_len;

			//수신 버퍼에서 비어있는 데이터 양
			buf_len = (rx_len - cdcAvailable()) - 1;
 8009b08:	4b0b      	ldr	r3, [pc, #44]	@ (8009b38 <USBD_CDC_SOF+0x40>)
 8009b0a:	681c      	ldr	r4, [r3, #0]
 8009b0c:	f7ff ff5e 	bl	80099cc <cdcAvailable>
 8009b10:	4603      	mov	r3, r0
 8009b12:	1ae3      	subs	r3, r4, r3
 8009b14:	3b01      	subs	r3, #1
 8009b16:	60fb      	str	r3, [r7, #12]


			if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8009b1c:	d905      	bls.n	8009b2a <USBD_CDC_SOF+0x32>
			{
				//다음 데이터도 보내줘
				 USBD_CDC_ReceivePacket(pdev);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7fe fe63 	bl	80087ea <USBD_CDC_ReceivePacket>
				 rx_full = false;
 8009b24:	4b03      	ldr	r3, [pc, #12]	@ (8009b34 <USBD_CDC_SOF+0x3c>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	701a      	strb	r2, [r3, #0]
			}
	}

	return 0;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd90      	pop	{r4, r7, pc}
 8009b34:	20000ad0 	.word	0x20000ad0
 8009b38:	2000012c 	.word	0x2000012c

08009b3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b40:	2200      	movs	r2, #0
 8009b42:	4905      	ldr	r1, [pc, #20]	@ (8009b58 <CDC_Init_FS+0x1c>)
 8009b44:	4805      	ldr	r0, [pc, #20]	@ (8009b5c <CDC_Init_FS+0x20>)
 8009b46:	f7fe fdf5 	bl	8008734 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b4a:	4905      	ldr	r1, [pc, #20]	@ (8009b60 <CDC_Init_FS+0x24>)
 8009b4c:	4803      	ldr	r0, [pc, #12]	@ (8009b5c <CDC_Init_FS+0x20>)
 8009b4e:	f7fe fe0a 	bl	8008766 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	20000cd4 	.word	0x20000cd4
 8009b5c:	20000604 	.word	0x20000604
 8009b60:	20000ad4 	.word	0x20000ad4

08009b64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009b64:	b480      	push	{r7}
 8009b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bc80      	pop	{r7}
 8009b70:	4770      	bx	lr
	...

08009b74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	6039      	str	r1, [r7, #0]
 8009b7e:	71fb      	strb	r3, [r7, #7]
 8009b80:	4613      	mov	r3, r2
 8009b82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b84:	79fb      	ldrb	r3, [r7, #7]
 8009b86:	2b23      	cmp	r3, #35	@ 0x23
 8009b88:	f200 80a3 	bhi.w	8009cd2 <CDC_Control_FS+0x15e>
 8009b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b94 <CDC_Control_FS+0x20>)
 8009b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b92:	bf00      	nop
 8009b94:	08009cd3 	.word	0x08009cd3
 8009b98:	08009cd3 	.word	0x08009cd3
 8009b9c:	08009cd3 	.word	0x08009cd3
 8009ba0:	08009cd3 	.word	0x08009cd3
 8009ba4:	08009cd3 	.word	0x08009cd3
 8009ba8:	08009cd3 	.word	0x08009cd3
 8009bac:	08009cd3 	.word	0x08009cd3
 8009bb0:	08009cd3 	.word	0x08009cd3
 8009bb4:	08009cd3 	.word	0x08009cd3
 8009bb8:	08009cd3 	.word	0x08009cd3
 8009bbc:	08009cd3 	.word	0x08009cd3
 8009bc0:	08009cd3 	.word	0x08009cd3
 8009bc4:	08009cd3 	.word	0x08009cd3
 8009bc8:	08009cd3 	.word	0x08009cd3
 8009bcc:	08009cd3 	.word	0x08009cd3
 8009bd0:	08009cd3 	.word	0x08009cd3
 8009bd4:	08009cd3 	.word	0x08009cd3
 8009bd8:	08009cd3 	.word	0x08009cd3
 8009bdc:	08009cd3 	.word	0x08009cd3
 8009be0:	08009cd3 	.word	0x08009cd3
 8009be4:	08009cd3 	.word	0x08009cd3
 8009be8:	08009cd3 	.word	0x08009cd3
 8009bec:	08009cd3 	.word	0x08009cd3
 8009bf0:	08009cd3 	.word	0x08009cd3
 8009bf4:	08009cd3 	.word	0x08009cd3
 8009bf8:	08009cd3 	.word	0x08009cd3
 8009bfc:	08009cd3 	.word	0x08009cd3
 8009c00:	08009cd3 	.word	0x08009cd3
 8009c04:	08009cd3 	.word	0x08009cd3
 8009c08:	08009cd3 	.word	0x08009cd3
 8009c0c:	08009cd3 	.word	0x08009cd3
 8009c10:	08009cd3 	.word	0x08009cd3
 8009c14:	08009c25 	.word	0x08009c25
 8009c18:	08009c7f 	.word	0x08009c7f
 8009c1c:	08009cd3 	.word	0x08009cd3
 8009c20:	08009cd3 	.word	0x08009cd3
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]);
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	461a      	mov	r2, r3
 8009c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009c2c:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 8009c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	3301      	adds	r3, #1
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	021b      	lsls	r3, r3, #8
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	4a28      	ldr	r2, [pc, #160]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009c3e:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 8009c40:	4b27      	ldr	r3, [pc, #156]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	3302      	adds	r3, #2
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	041b      	lsls	r3, r3, #16
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	4a24      	ldr	r2, [pc, #144]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009c50:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 8009c52:	4b23      	ldr	r3, [pc, #140]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	3303      	adds	r3, #3
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	061b      	lsls	r3, r3, #24
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	4a1f      	ldr	r2, [pc, #124]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009c62:	6013      	str	r3, [r2, #0]
    	LineCoding.format   = pbuf[4];
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	791a      	ldrb	r2, [r3, #4]
 8009c68:	4b1d      	ldr	r3, [pc, #116]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009c6a:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	795a      	ldrb	r2, [r3, #5]
 8009c70:	4b1b      	ldr	r3, [pc, #108]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009c72:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	799a      	ldrb	r2, [r3, #6]
 8009c78:	4b19      	ldr	r3, [pc, #100]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009c7a:	719a      	strb	r2, [r3, #6]
    break;
 8009c7c:	e02a      	b.n	8009cd4 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8009c7e:	4b18      	ldr	r3, [pc, #96]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8009c88:	4b15      	ldr	r3, [pc, #84]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	0a1a      	lsrs	r2, r3, #8
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	3301      	adds	r3, #1
 8009c92:	b2d2      	uxtb	r2, r2
 8009c94:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8009c96:	4b12      	ldr	r3, [pc, #72]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	0c1a      	lsrs	r2, r3, #16
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	3302      	adds	r3, #2
 8009ca0:	b2d2      	uxtb	r2, r2
 8009ca2:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8009ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	0e1a      	lsrs	r2, r3, #24
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	3303      	adds	r3, #3
 8009cae:	b2d2      	uxtb	r2, r2
 8009cb0:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009cb8:	7912      	ldrb	r2, [r2, #4]
 8009cba:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	3305      	adds	r3, #5
 8009cc0:	4a07      	ldr	r2, [pc, #28]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009cc2:	7952      	ldrb	r2, [r2, #5]
 8009cc4:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	3306      	adds	r3, #6
 8009cca:	4a05      	ldr	r2, [pc, #20]	@ (8009ce0 <CDC_Control_FS+0x16c>)
 8009ccc:	7992      	ldrb	r2, [r2, #6]
 8009cce:	701a      	strb	r2, [r3, #0]
    break;
 8009cd0:	e000      	b.n	8009cd4 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009cd2:	bf00      	nop
  }

  return (USBD_OK);
 8009cd4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bc80      	pop	{r7}
 8009cde:	4770      	bx	lr
 8009ce0:	20000124 	.word	0x20000124

08009ce4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ce4:	b590      	push	{r4, r7, lr}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	for(int i=0;i<*Len;i++)
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60fb      	str	r3, [r7, #12]
 8009cf2:	e009      	b.n	8009d08 <CDC_Receive_FS+0x24>
	  {
		  cdcDataIn(Buf[i]);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7ff fea9 	bl	8009a54 <cdcDataIn>
	for(int i=0;i<*Len;i++)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3301      	adds	r3, #1
 8009d06:	60fb      	str	r3, [r7, #12]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d8f0      	bhi.n	8009cf4 <CDC_Receive_FS+0x10>
	  }

	uint32_t buf_len;

	//수신 버퍼에서 비어있는 데이터 양
	buf_len = (rx_len - cdcAvailable()) - 1;
 8009d12:	4b0d      	ldr	r3, [pc, #52]	@ (8009d48 <CDC_Receive_FS+0x64>)
 8009d14:	681c      	ldr	r4, [r3, #0]
 8009d16:	f7ff fe59 	bl	80099cc <cdcAvailable>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	1ae3      	subs	r3, r4, r3
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	60bb      	str	r3, [r7, #8]


	if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b3f      	cmp	r3, #63	@ 0x3f
 8009d26:	d907      	bls.n	8009d38 <CDC_Receive_FS+0x54>
	{
		//다음 데이터도 보내줘
		 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009d28:	6879      	ldr	r1, [r7, #4]
 8009d2a:	4808      	ldr	r0, [pc, #32]	@ (8009d4c <CDC_Receive_FS+0x68>)
 8009d2c:	f7fe fd1b 	bl	8008766 <USBD_CDC_SetRxBuffer>
		 USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009d30:	4806      	ldr	r0, [pc, #24]	@ (8009d4c <CDC_Receive_FS+0x68>)
 8009d32:	f7fe fd5a 	bl	80087ea <USBD_CDC_ReceivePacket>
 8009d36:	e002      	b.n	8009d3e <CDC_Receive_FS+0x5a>
	}
	else
	{
		//버퍼 용량이 부족하니, 기다려라
		rx_full = true;
 8009d38:	4b05      	ldr	r3, [pc, #20]	@ (8009d50 <CDC_Receive_FS+0x6c>)
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	701a      	strb	r2, [r3, #0]
	}
  return (USBD_OK);
 8009d3e:	2300      	movs	r3, #0




  /* USER CODE END 6 */
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd90      	pop	{r4, r7, pc}
 8009d48:	2000012c 	.word	0x2000012c
 8009d4c:	20000604 	.word	0x20000604
 8009d50:	20000ad0 	.word	0x20000ad0

08009d54 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d64:	4b0d      	ldr	r3, [pc, #52]	@ (8009d9c <CDC_Transmit_FS+0x48>)
 8009d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d6a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e00b      	b.n	8009d92 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d7a:	887b      	ldrh	r3, [r7, #2]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	4806      	ldr	r0, [pc, #24]	@ (8009d9c <CDC_Transmit_FS+0x48>)
 8009d82:	f7fe fcd7 	bl	8008734 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d86:	4805      	ldr	r0, [pc, #20]	@ (8009d9c <CDC_Transmit_FS+0x48>)
 8009d88:	f7fe fd00 	bl	800878c <USBD_CDC_TransmitPacket>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20000604 	.word	0x20000604

08009da0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	4603      	mov	r3, r0
 8009da8:	6039      	str	r1, [r7, #0]
 8009daa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2212      	movs	r2, #18
 8009db0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009db2:	4b03      	ldr	r3, [pc, #12]	@ (8009dc0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bc80      	pop	{r7}
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	2000015c 	.word	0x2000015c

08009dc4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	4603      	mov	r3, r0
 8009dcc:	6039      	str	r1, [r7, #0]
 8009dce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	2204      	movs	r2, #4
 8009dd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009dd6:	4b03      	ldr	r3, [pc, #12]	@ (8009de4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bc80      	pop	{r7}
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	20000170 	.word	0x20000170

08009de8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	4603      	mov	r3, r0
 8009df0:	6039      	str	r1, [r7, #0]
 8009df2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009df4:	79fb      	ldrb	r3, [r7, #7]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d105      	bne.n	8009e06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	4907      	ldr	r1, [pc, #28]	@ (8009e1c <USBD_FS_ProductStrDescriptor+0x34>)
 8009dfe:	4808      	ldr	r0, [pc, #32]	@ (8009e20 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e00:	f7ff fcd7 	bl	80097b2 <USBD_GetString>
 8009e04:	e004      	b.n	8009e10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	4904      	ldr	r1, [pc, #16]	@ (8009e1c <USBD_FS_ProductStrDescriptor+0x34>)
 8009e0a:	4805      	ldr	r0, [pc, #20]	@ (8009e20 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e0c:	f7ff fcd1 	bl	80097b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e10:	4b02      	ldr	r3, [pc, #8]	@ (8009e1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20000ed4 	.word	0x20000ed4
 8009e20:	0800b4cc 	.word	0x0800b4cc

08009e24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	6039      	str	r1, [r7, #0]
 8009e2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	4904      	ldr	r1, [pc, #16]	@ (8009e44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e34:	4804      	ldr	r0, [pc, #16]	@ (8009e48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e36:	f7ff fcbc 	bl	80097b2 <USBD_GetString>
  return USBD_StrDesc;
 8009e3a:	4b02      	ldr	r3, [pc, #8]	@ (8009e44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	20000ed4 	.word	0x20000ed4
 8009e48:	0800b4e4 	.word	0x0800b4e4

08009e4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	6039      	str	r1, [r7, #0]
 8009e56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	221a      	movs	r2, #26
 8009e5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e5e:	f000 f843 	bl	8009ee8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e62:	4b02      	ldr	r3, [pc, #8]	@ (8009e6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	20000174 	.word	0x20000174

08009e70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	4603      	mov	r3, r0
 8009e78:	6039      	str	r1, [r7, #0]
 8009e7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e7c:	79fb      	ldrb	r3, [r7, #7]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d105      	bne.n	8009e8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	4907      	ldr	r1, [pc, #28]	@ (8009ea4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e86:	4808      	ldr	r0, [pc, #32]	@ (8009ea8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e88:	f7ff fc93 	bl	80097b2 <USBD_GetString>
 8009e8c:	e004      	b.n	8009e98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	4904      	ldr	r1, [pc, #16]	@ (8009ea4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e92:	4805      	ldr	r0, [pc, #20]	@ (8009ea8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e94:	f7ff fc8d 	bl	80097b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e98:	4b02      	ldr	r3, [pc, #8]	@ (8009ea4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20000ed4 	.word	0x20000ed4
 8009ea8:	0800b4f8 	.word	0x0800b4f8

08009eac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	6039      	str	r1, [r7, #0]
 8009eb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009eb8:	79fb      	ldrb	r3, [r7, #7]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d105      	bne.n	8009eca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	4907      	ldr	r1, [pc, #28]	@ (8009ee0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ec2:	4808      	ldr	r0, [pc, #32]	@ (8009ee4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ec4:	f7ff fc75 	bl	80097b2 <USBD_GetString>
 8009ec8:	e004      	b.n	8009ed4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009eca:	683a      	ldr	r2, [r7, #0]
 8009ecc:	4904      	ldr	r1, [pc, #16]	@ (8009ee0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ece:	4805      	ldr	r0, [pc, #20]	@ (8009ee4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ed0:	f7ff fc6f 	bl	80097b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ed4:	4b02      	ldr	r3, [pc, #8]	@ (8009ee0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	20000ed4 	.word	0x20000ed4
 8009ee4:	0800b504 	.word	0x0800b504

08009ee8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009eee:	4b0f      	ldr	r3, [pc, #60]	@ (8009f2c <Get_SerialNum+0x44>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8009f30 <Get_SerialNum+0x48>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009efa:	4b0e      	ldr	r3, [pc, #56]	@ (8009f34 <Get_SerialNum+0x4c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4413      	add	r3, r2
 8009f06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d009      	beq.n	8009f22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f0e:	2208      	movs	r2, #8
 8009f10:	4909      	ldr	r1, [pc, #36]	@ (8009f38 <Get_SerialNum+0x50>)
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f000 f814 	bl	8009f40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f18:	2204      	movs	r2, #4
 8009f1a:	4908      	ldr	r1, [pc, #32]	@ (8009f3c <Get_SerialNum+0x54>)
 8009f1c:	68b8      	ldr	r0, [r7, #8]
 8009f1e:	f000 f80f 	bl	8009f40 <IntToUnicode>
  }
}
 8009f22:	bf00      	nop
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	1ffff7e8 	.word	0x1ffff7e8
 8009f30:	1ffff7ec 	.word	0x1ffff7ec
 8009f34:	1ffff7f0 	.word	0x1ffff7f0
 8009f38:	20000176 	.word	0x20000176
 8009f3c:	20000186 	.word	0x20000186

08009f40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b087      	sub	sp, #28
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f52:	2300      	movs	r3, #0
 8009f54:	75fb      	strb	r3, [r7, #23]
 8009f56:	e027      	b.n	8009fa8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	0f1b      	lsrs	r3, r3, #28
 8009f5c:	2b09      	cmp	r3, #9
 8009f5e:	d80b      	bhi.n	8009f78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	0f1b      	lsrs	r3, r3, #28
 8009f64:	b2da      	uxtb	r2, r3
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	440b      	add	r3, r1
 8009f70:	3230      	adds	r2, #48	@ 0x30
 8009f72:	b2d2      	uxtb	r2, r2
 8009f74:	701a      	strb	r2, [r3, #0]
 8009f76:	e00a      	b.n	8009f8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	0f1b      	lsrs	r3, r3, #28
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	7dfb      	ldrb	r3, [r7, #23]
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	4619      	mov	r1, r3
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	440b      	add	r3, r1
 8009f88:	3237      	adds	r2, #55	@ 0x37
 8009f8a:	b2d2      	uxtb	r2, r2
 8009f8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	011b      	lsls	r3, r3, #4
 8009f92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f94:	7dfb      	ldrb	r3, [r7, #23]
 8009f96:	005b      	lsls	r3, r3, #1
 8009f98:	3301      	adds	r3, #1
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009fa2:	7dfb      	ldrb	r3, [r7, #23]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	75fb      	strb	r3, [r7, #23]
 8009fa8:	7dfa      	ldrb	r2, [r7, #23]
 8009faa:	79fb      	ldrb	r3, [r7, #7]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d3d3      	bcc.n	8009f58 <IntToUnicode+0x18>
  }
}
 8009fb0:	bf00      	nop
 8009fb2:	bf00      	nop
 8009fb4:	371c      	adds	r7, #28
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bc80      	pop	{r7}
 8009fba:	4770      	bx	lr

08009fbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a0d      	ldr	r2, [pc, #52]	@ (800a000 <HAL_PCD_MspInit+0x44>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d113      	bne.n	8009ff6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009fce:	4b0d      	ldr	r3, [pc, #52]	@ (800a004 <HAL_PCD_MspInit+0x48>)
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	4a0c      	ldr	r2, [pc, #48]	@ (800a004 <HAL_PCD_MspInit+0x48>)
 8009fd4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009fd8:	61d3      	str	r3, [r2, #28]
 8009fda:	4b0a      	ldr	r3, [pc, #40]	@ (800a004 <HAL_PCD_MspInit+0x48>)
 8009fdc:	69db      	ldr	r3, [r3, #28]
 8009fde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fe2:	60fb      	str	r3, [r7, #12]
 8009fe4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2100      	movs	r1, #0
 8009fea:	2014      	movs	r0, #20
 8009fec:	f7f7 f9bd 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009ff0:	2014      	movs	r0, #20
 8009ff2:	f7f7 f9d6 	bl	80013a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009ff6:	bf00      	nop
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	40005c00 	.word	0x40005c00
 800a004:	40021000 	.word	0x40021000

0800a008 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a01c:	4619      	mov	r1, r3
 800a01e:	4610      	mov	r0, r2
 800a020:	f7fe fc99 	bl	8008956 <USBD_LL_SetupStage>
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a03e:	78fa      	ldrb	r2, [r7, #3]
 800a040:	6879      	ldr	r1, [r7, #4]
 800a042:	4613      	mov	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	00db      	lsls	r3, r3, #3
 800a04a:	440b      	add	r3, r1
 800a04c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	78fb      	ldrb	r3, [r7, #3]
 800a054:	4619      	mov	r1, r3
 800a056:	f7fe fccb 	bl	80089f0 <USBD_LL_DataOutStage>
}
 800a05a:	bf00      	nop
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	460b      	mov	r3, r1
 800a06c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a074:	78fa      	ldrb	r2, [r7, #3]
 800a076:	6879      	ldr	r1, [r7, #4]
 800a078:	4613      	mov	r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	4413      	add	r3, r2
 800a07e:	00db      	lsls	r3, r3, #3
 800a080:	440b      	add	r3, r1
 800a082:	3324      	adds	r3, #36	@ 0x24
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	78fb      	ldrb	r3, [r7, #3]
 800a088:	4619      	mov	r1, r3
 800a08a:	f7fe fd22 	bl	8008ad2 <USBD_LL_DataInStage>
}
 800a08e:	bf00      	nop
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe fe32 	bl	8008d0e <USBD_LL_SOF>
}
 800a0aa:	bf00      	nop
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	799b      	ldrb	r3, [r3, #6]
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d001      	beq.n	800a0ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a0c6:	f7f6 f987 	bl	80003d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0d0:	7bfa      	ldrb	r2, [r7, #15]
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fe fde2 	bl	8008c9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7fe fd9b 	bl	8008c1c <USBD_LL_Reset>
}
 800a0e6:	bf00      	nop
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
	...

0800a0f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fe fddc 	bl	8008cbc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	7a9b      	ldrb	r3, [r3, #10]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d005      	beq.n	800a118 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a10c:	4b04      	ldr	r3, [pc, #16]	@ (800a120 <HAL_PCD_SuspendCallback+0x30>)
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	4a03      	ldr	r2, [pc, #12]	@ (800a120 <HAL_PCD_SuspendCallback+0x30>)
 800a112:	f043 0306 	orr.w	r3, r3, #6
 800a116:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a118:	bf00      	nop
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	e000ed00 	.word	0xe000ed00

0800a124 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe fdd6 	bl	8008ce4 <USBD_LL_Resume>
}
 800a138:	bf00      	nop
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a148:	4a28      	ldr	r2, [pc, #160]	@ (800a1ec <USBD_LL_Init+0xac>)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a26      	ldr	r2, [pc, #152]	@ (800a1ec <USBD_LL_Init+0xac>)
 800a154:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a158:	4b24      	ldr	r3, [pc, #144]	@ (800a1ec <USBD_LL_Init+0xac>)
 800a15a:	4a25      	ldr	r2, [pc, #148]	@ (800a1f0 <USBD_LL_Init+0xb0>)
 800a15c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a15e:	4b23      	ldr	r3, [pc, #140]	@ (800a1ec <USBD_LL_Init+0xac>)
 800a160:	2208      	movs	r2, #8
 800a162:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a164:	4b21      	ldr	r3, [pc, #132]	@ (800a1ec <USBD_LL_Init+0xac>)
 800a166:	2202      	movs	r2, #2
 800a168:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a16a:	4b20      	ldr	r3, [pc, #128]	@ (800a1ec <USBD_LL_Init+0xac>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a170:	4b1e      	ldr	r3, [pc, #120]	@ (800a1ec <USBD_LL_Init+0xac>)
 800a172:	2200      	movs	r2, #0
 800a174:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a176:	4b1d      	ldr	r3, [pc, #116]	@ (800a1ec <USBD_LL_Init+0xac>)
 800a178:	2200      	movs	r2, #0
 800a17a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a17c:	481b      	ldr	r0, [pc, #108]	@ (800a1ec <USBD_LL_Init+0xac>)
 800a17e:	f7f8 f8a8 	bl	80022d2 <HAL_PCD_Init>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d001      	beq.n	800a18c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a188:	f7f6 f926 	bl	80003d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a192:	2318      	movs	r3, #24
 800a194:	2200      	movs	r2, #0
 800a196:	2100      	movs	r1, #0
 800a198:	f7f9 fdb9 	bl	8003d0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a1a2:	2358      	movs	r3, #88	@ 0x58
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	2180      	movs	r1, #128	@ 0x80
 800a1a8:	f7f9 fdb1 	bl	8003d0e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a1b2:	23c0      	movs	r3, #192	@ 0xc0
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	2181      	movs	r1, #129	@ 0x81
 800a1b8:	f7f9 fda9 	bl	8003d0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a1c2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	f7f9 fda0 	bl	8003d0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a1d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2182      	movs	r1, #130	@ 0x82
 800a1dc:	f7f9 fd97 	bl	8003d0e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	200010d4 	.word	0x200010d4
 800a1f0:	40005c00 	.word	0x40005c00

0800a1f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7f8 f957 	bl	80024be <HAL_PCD_Start>
 800a210:	4603      	mov	r3, r0
 800a212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	4618      	mov	r0, r3
 800a218:	f000 f94e 	bl	800a4b8 <USBD_Get_USB_Status>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a220:	7bbb      	ldrb	r3, [r7, #14]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	4608      	mov	r0, r1
 800a234:	4611      	mov	r1, r2
 800a236:	461a      	mov	r2, r3
 800a238:	4603      	mov	r3, r0
 800a23a:	70fb      	strb	r3, [r7, #3]
 800a23c:	460b      	mov	r3, r1
 800a23e:	70bb      	strb	r3, [r7, #2]
 800a240:	4613      	mov	r3, r2
 800a242:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a248:	2300      	movs	r3, #0
 800a24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a252:	78bb      	ldrb	r3, [r7, #2]
 800a254:	883a      	ldrh	r2, [r7, #0]
 800a256:	78f9      	ldrb	r1, [r7, #3]
 800a258:	f7f8 faab 	bl	80027b2 <HAL_PCD_EP_Open>
 800a25c:	4603      	mov	r3, r0
 800a25e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a260:	7bfb      	ldrb	r3, [r7, #15]
 800a262:	4618      	mov	r0, r3
 800a264:	f000 f928 	bl	800a4b8 <USBD_Get_USB_Status>
 800a268:	4603      	mov	r3, r0
 800a26a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a26c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b084      	sub	sp, #16
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	460b      	mov	r3, r1
 800a280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a290:	78fa      	ldrb	r2, [r7, #3]
 800a292:	4611      	mov	r1, r2
 800a294:	4618      	mov	r0, r3
 800a296:	f7f8 fae9 	bl	800286c <HAL_PCD_EP_Close>
 800a29a:	4603      	mov	r3, r0
 800a29c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a29e:	7bfb      	ldrb	r3, [r7, #15]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 f909 	bl	800a4b8 <USBD_Get_USB_Status>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a2ce:	78fa      	ldrb	r2, [r7, #3]
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7f8 fb91 	bl	80029fa <HAL_PCD_EP_SetStall>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 f8ea 	bl	800a4b8 <USBD_Get_USB_Status>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a30c:	78fa      	ldrb	r2, [r7, #3]
 800a30e:	4611      	mov	r1, r2
 800a310:	4618      	mov	r0, r3
 800a312:	f7f8 fbd2 	bl	8002aba <HAL_PCD_EP_ClrStall>
 800a316:	4603      	mov	r3, r0
 800a318:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a31a:	7bfb      	ldrb	r3, [r7, #15]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f000 f8cb 	bl	800a4b8 <USBD_Get_USB_Status>
 800a322:	4603      	mov	r3, r0
 800a324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a326:	7bbb      	ldrb	r3, [r7, #14]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	460b      	mov	r3, r1
 800a33a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a342:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	da0b      	bge.n	800a364 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a34c:	78fb      	ldrb	r3, [r7, #3]
 800a34e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a352:	68f9      	ldr	r1, [r7, #12]
 800a354:	4613      	mov	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4413      	add	r3, r2
 800a35a:	00db      	lsls	r3, r3, #3
 800a35c:	440b      	add	r3, r1
 800a35e:	3312      	adds	r3, #18
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	e00b      	b.n	800a37c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a36a:	68f9      	ldr	r1, [r7, #12]
 800a36c:	4613      	mov	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	00db      	lsls	r3, r3, #3
 800a374:	440b      	add	r3, r1
 800a376:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a37a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	bc80      	pop	{r7}
 800a384:	4770      	bx	lr

0800a386 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b084      	sub	sp, #16
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	460b      	mov	r3, r1
 800a390:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a3a0:	78fa      	ldrb	r2, [r7, #3]
 800a3a2:	4611      	mov	r1, r2
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7f8 f9e0 	bl	800276a <HAL_PCD_SetAddress>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 f881 	bl	800a4b8 <USBD_Get_USB_Status>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	607a      	str	r2, [r7, #4]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	72fb      	strb	r3, [r7, #11]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a3e6:	893b      	ldrh	r3, [r7, #8]
 800a3e8:	7af9      	ldrb	r1, [r7, #11]
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	f7f8 face 	bl	800298c <HAL_PCD_EP_Transmit>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 f85e 	bl	800a4b8 <USBD_Get_USB_Status>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a400:	7dbb      	ldrb	r3, [r7, #22]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3718      	adds	r7, #24
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b086      	sub	sp, #24
 800a40e:	af00      	add	r7, sp, #0
 800a410:	60f8      	str	r0, [r7, #12]
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	461a      	mov	r2, r3
 800a416:	460b      	mov	r3, r1
 800a418:	72fb      	strb	r3, [r7, #11]
 800a41a:	4613      	mov	r3, r2
 800a41c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a42c:	893b      	ldrh	r3, [r7, #8]
 800a42e:	7af9      	ldrb	r1, [r7, #11]
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	f7f8 fa63 	bl	80028fc <HAL_PCD_EP_Receive>
 800a436:	4603      	mov	r3, r0
 800a438:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 f83b 	bl	800a4b8 <USBD_Get_USB_Status>
 800a442:	4603      	mov	r3, r0
 800a444:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a446:	7dbb      	ldrb	r3, [r7, #22]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	460b      	mov	r3, r1
 800a45a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a462:	78fa      	ldrb	r2, [r7, #3]
 800a464:	4611      	mov	r1, r2
 800a466:	4618      	mov	r0, r3
 800a468:	f7f8 fa79 	bl	800295e <HAL_PCD_EP_GetRxCount>
 800a46c:	4603      	mov	r3, r0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
	...

0800a478 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a480:	4b02      	ldr	r3, [pc, #8]	@ (800a48c <USBD_static_malloc+0x14>)
}
 800a482:	4618      	mov	r0, r3
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	bc80      	pop	{r7}
 800a48a:	4770      	bx	lr
 800a48c:	200013ac 	.word	0x200013ac

0800a490 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]

}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bc80      	pop	{r7}
 800a4a0:	4770      	bx	lr

0800a4a2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a4ae:	bf00      	nop
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bc80      	pop	{r7}
 800a4b6:	4770      	bx	lr

0800a4b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	4603      	mov	r3, r0
 800a4c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4c6:	79fb      	ldrb	r3, [r7, #7]
 800a4c8:	2b03      	cmp	r3, #3
 800a4ca:	d817      	bhi.n	800a4fc <USBD_Get_USB_Status+0x44>
 800a4cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d4 <USBD_Get_USB_Status+0x1c>)
 800a4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d2:	bf00      	nop
 800a4d4:	0800a4e5 	.word	0x0800a4e5
 800a4d8:	0800a4eb 	.word	0x0800a4eb
 800a4dc:	0800a4f1 	.word	0x0800a4f1
 800a4e0:	0800a4f7 	.word	0x0800a4f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e8:	e00b      	b.n	800a502 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ee:	e008      	b.n	800a502 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4f4:	e005      	b.n	800a502 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4fa:	e002      	b.n	800a502 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a500:	bf00      	nop
  }
  return usb_status;
 800a502:	7bfb      	ldrb	r3, [r7, #15]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	bc80      	pop	{r7}
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop

0800a510 <main>:




int main(void)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	af00      	add	r7, sp, #0
	hwInit();
 800a514:	f7f6 fd96 	bl	8001044 <hwInit>
	apInit();
 800a518:	f7f5 fe18 	bl	800014c <apInit>

	apMain();
 800a51c:	f7f5 fe24 	bl	8000168 <apMain>

	return 0;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	bd80      	pop	{r7, pc}
	...

0800a528 <std>:
 800a528:	2300      	movs	r3, #0
 800a52a:	b510      	push	{r4, lr}
 800a52c:	4604      	mov	r4, r0
 800a52e:	e9c0 3300 	strd	r3, r3, [r0]
 800a532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a536:	6083      	str	r3, [r0, #8]
 800a538:	8181      	strh	r1, [r0, #12]
 800a53a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a53c:	81c2      	strh	r2, [r0, #14]
 800a53e:	6183      	str	r3, [r0, #24]
 800a540:	4619      	mov	r1, r3
 800a542:	2208      	movs	r2, #8
 800a544:	305c      	adds	r0, #92	@ 0x5c
 800a546:	f000 f9f9 	bl	800a93c <memset>
 800a54a:	4b0d      	ldr	r3, [pc, #52]	@ (800a580 <std+0x58>)
 800a54c:	6224      	str	r4, [r4, #32]
 800a54e:	6263      	str	r3, [r4, #36]	@ 0x24
 800a550:	4b0c      	ldr	r3, [pc, #48]	@ (800a584 <std+0x5c>)
 800a552:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a554:	4b0c      	ldr	r3, [pc, #48]	@ (800a588 <std+0x60>)
 800a556:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a558:	4b0c      	ldr	r3, [pc, #48]	@ (800a58c <std+0x64>)
 800a55a:	6323      	str	r3, [r4, #48]	@ 0x30
 800a55c:	4b0c      	ldr	r3, [pc, #48]	@ (800a590 <std+0x68>)
 800a55e:	429c      	cmp	r4, r3
 800a560:	d006      	beq.n	800a570 <std+0x48>
 800a562:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a566:	4294      	cmp	r4, r2
 800a568:	d002      	beq.n	800a570 <std+0x48>
 800a56a:	33d0      	adds	r3, #208	@ 0xd0
 800a56c:	429c      	cmp	r4, r3
 800a56e:	d105      	bne.n	800a57c <std+0x54>
 800a570:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a578:	f000 ba58 	b.w	800aa2c <__retarget_lock_init_recursive>
 800a57c:	bd10      	pop	{r4, pc}
 800a57e:	bf00      	nop
 800a580:	0800a78d 	.word	0x0800a78d
 800a584:	0800a7af 	.word	0x0800a7af
 800a588:	0800a7e7 	.word	0x0800a7e7
 800a58c:	0800a80b 	.word	0x0800a80b
 800a590:	200015cc 	.word	0x200015cc

0800a594 <stdio_exit_handler>:
 800a594:	4a02      	ldr	r2, [pc, #8]	@ (800a5a0 <stdio_exit_handler+0xc>)
 800a596:	4903      	ldr	r1, [pc, #12]	@ (800a5a4 <stdio_exit_handler+0x10>)
 800a598:	4803      	ldr	r0, [pc, #12]	@ (800a5a8 <stdio_exit_handler+0x14>)
 800a59a:	f000 b869 	b.w	800a670 <_fwalk_sglue>
 800a59e:	bf00      	nop
 800a5a0:	20000190 	.word	0x20000190
 800a5a4:	0800b2c1 	.word	0x0800b2c1
 800a5a8:	200001a0 	.word	0x200001a0

0800a5ac <cleanup_stdio>:
 800a5ac:	6841      	ldr	r1, [r0, #4]
 800a5ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a5e0 <cleanup_stdio+0x34>)
 800a5b0:	b510      	push	{r4, lr}
 800a5b2:	4299      	cmp	r1, r3
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	d001      	beq.n	800a5bc <cleanup_stdio+0x10>
 800a5b8:	f000 fe82 	bl	800b2c0 <_fflush_r>
 800a5bc:	68a1      	ldr	r1, [r4, #8]
 800a5be:	4b09      	ldr	r3, [pc, #36]	@ (800a5e4 <cleanup_stdio+0x38>)
 800a5c0:	4299      	cmp	r1, r3
 800a5c2:	d002      	beq.n	800a5ca <cleanup_stdio+0x1e>
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f000 fe7b 	bl	800b2c0 <_fflush_r>
 800a5ca:	68e1      	ldr	r1, [r4, #12]
 800a5cc:	4b06      	ldr	r3, [pc, #24]	@ (800a5e8 <cleanup_stdio+0x3c>)
 800a5ce:	4299      	cmp	r1, r3
 800a5d0:	d004      	beq.n	800a5dc <cleanup_stdio+0x30>
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d8:	f000 be72 	b.w	800b2c0 <_fflush_r>
 800a5dc:	bd10      	pop	{r4, pc}
 800a5de:	bf00      	nop
 800a5e0:	200015cc 	.word	0x200015cc
 800a5e4:	20001634 	.word	0x20001634
 800a5e8:	2000169c 	.word	0x2000169c

0800a5ec <global_stdio_init.part.0>:
 800a5ec:	b510      	push	{r4, lr}
 800a5ee:	4b0b      	ldr	r3, [pc, #44]	@ (800a61c <global_stdio_init.part.0+0x30>)
 800a5f0:	4c0b      	ldr	r4, [pc, #44]	@ (800a620 <global_stdio_init.part.0+0x34>)
 800a5f2:	4a0c      	ldr	r2, [pc, #48]	@ (800a624 <global_stdio_init.part.0+0x38>)
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	601a      	str	r2, [r3, #0]
 800a5f8:	2104      	movs	r1, #4
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f7ff ff94 	bl	800a528 <std>
 800a600:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a604:	2201      	movs	r2, #1
 800a606:	2109      	movs	r1, #9
 800a608:	f7ff ff8e 	bl	800a528 <std>
 800a60c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a610:	2202      	movs	r2, #2
 800a612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a616:	2112      	movs	r1, #18
 800a618:	f7ff bf86 	b.w	800a528 <std>
 800a61c:	20001704 	.word	0x20001704
 800a620:	200015cc 	.word	0x200015cc
 800a624:	0800a595 	.word	0x0800a595

0800a628 <__sfp_lock_acquire>:
 800a628:	4801      	ldr	r0, [pc, #4]	@ (800a630 <__sfp_lock_acquire+0x8>)
 800a62a:	f000 ba00 	b.w	800aa2e <__retarget_lock_acquire_recursive>
 800a62e:	bf00      	nop
 800a630:	2000170d 	.word	0x2000170d

0800a634 <__sfp_lock_release>:
 800a634:	4801      	ldr	r0, [pc, #4]	@ (800a63c <__sfp_lock_release+0x8>)
 800a636:	f000 b9fb 	b.w	800aa30 <__retarget_lock_release_recursive>
 800a63a:	bf00      	nop
 800a63c:	2000170d 	.word	0x2000170d

0800a640 <__sinit>:
 800a640:	b510      	push	{r4, lr}
 800a642:	4604      	mov	r4, r0
 800a644:	f7ff fff0 	bl	800a628 <__sfp_lock_acquire>
 800a648:	6a23      	ldr	r3, [r4, #32]
 800a64a:	b11b      	cbz	r3, 800a654 <__sinit+0x14>
 800a64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a650:	f7ff bff0 	b.w	800a634 <__sfp_lock_release>
 800a654:	4b04      	ldr	r3, [pc, #16]	@ (800a668 <__sinit+0x28>)
 800a656:	6223      	str	r3, [r4, #32]
 800a658:	4b04      	ldr	r3, [pc, #16]	@ (800a66c <__sinit+0x2c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1f5      	bne.n	800a64c <__sinit+0xc>
 800a660:	f7ff ffc4 	bl	800a5ec <global_stdio_init.part.0>
 800a664:	e7f2      	b.n	800a64c <__sinit+0xc>
 800a666:	bf00      	nop
 800a668:	0800a5ad 	.word	0x0800a5ad
 800a66c:	20001704 	.word	0x20001704

0800a670 <_fwalk_sglue>:
 800a670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a674:	4607      	mov	r7, r0
 800a676:	4688      	mov	r8, r1
 800a678:	4614      	mov	r4, r2
 800a67a:	2600      	movs	r6, #0
 800a67c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a680:	f1b9 0901 	subs.w	r9, r9, #1
 800a684:	d505      	bpl.n	800a692 <_fwalk_sglue+0x22>
 800a686:	6824      	ldr	r4, [r4, #0]
 800a688:	2c00      	cmp	r4, #0
 800a68a:	d1f7      	bne.n	800a67c <_fwalk_sglue+0xc>
 800a68c:	4630      	mov	r0, r6
 800a68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a692:	89ab      	ldrh	r3, [r5, #12]
 800a694:	2b01      	cmp	r3, #1
 800a696:	d907      	bls.n	800a6a8 <_fwalk_sglue+0x38>
 800a698:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a69c:	3301      	adds	r3, #1
 800a69e:	d003      	beq.n	800a6a8 <_fwalk_sglue+0x38>
 800a6a0:	4629      	mov	r1, r5
 800a6a2:	4638      	mov	r0, r7
 800a6a4:	47c0      	blx	r8
 800a6a6:	4306      	orrs	r6, r0
 800a6a8:	3568      	adds	r5, #104	@ 0x68
 800a6aa:	e7e9      	b.n	800a680 <_fwalk_sglue+0x10>

0800a6ac <iprintf>:
 800a6ac:	b40f      	push	{r0, r1, r2, r3}
 800a6ae:	b507      	push	{r0, r1, r2, lr}
 800a6b0:	4906      	ldr	r1, [pc, #24]	@ (800a6cc <iprintf+0x20>)
 800a6b2:	ab04      	add	r3, sp, #16
 800a6b4:	6808      	ldr	r0, [r1, #0]
 800a6b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ba:	6881      	ldr	r1, [r0, #8]
 800a6bc:	9301      	str	r3, [sp, #4]
 800a6be:	f000 fad7 	bl	800ac70 <_vfiprintf_r>
 800a6c2:	b003      	add	sp, #12
 800a6c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6c8:	b004      	add	sp, #16
 800a6ca:	4770      	bx	lr
 800a6cc:	2000019c 	.word	0x2000019c

0800a6d0 <_puts_r>:
 800a6d0:	6a03      	ldr	r3, [r0, #32]
 800a6d2:	b570      	push	{r4, r5, r6, lr}
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	460e      	mov	r6, r1
 800a6d8:	6884      	ldr	r4, [r0, #8]
 800a6da:	b90b      	cbnz	r3, 800a6e0 <_puts_r+0x10>
 800a6dc:	f7ff ffb0 	bl	800a640 <__sinit>
 800a6e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6e2:	07db      	lsls	r3, r3, #31
 800a6e4:	d405      	bmi.n	800a6f2 <_puts_r+0x22>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	0598      	lsls	r0, r3, #22
 800a6ea:	d402      	bmi.n	800a6f2 <_puts_r+0x22>
 800a6ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6ee:	f000 f99e 	bl	800aa2e <__retarget_lock_acquire_recursive>
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	0719      	lsls	r1, r3, #28
 800a6f6:	d502      	bpl.n	800a6fe <_puts_r+0x2e>
 800a6f8:	6923      	ldr	r3, [r4, #16]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d135      	bne.n	800a76a <_puts_r+0x9a>
 800a6fe:	4621      	mov	r1, r4
 800a700:	4628      	mov	r0, r5
 800a702:	f000 f8c5 	bl	800a890 <__swsetup_r>
 800a706:	b380      	cbz	r0, 800a76a <_puts_r+0x9a>
 800a708:	f04f 35ff 	mov.w	r5, #4294967295
 800a70c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a70e:	07da      	lsls	r2, r3, #31
 800a710:	d405      	bmi.n	800a71e <_puts_r+0x4e>
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	059b      	lsls	r3, r3, #22
 800a716:	d402      	bmi.n	800a71e <_puts_r+0x4e>
 800a718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a71a:	f000 f989 	bl	800aa30 <__retarget_lock_release_recursive>
 800a71e:	4628      	mov	r0, r5
 800a720:	bd70      	pop	{r4, r5, r6, pc}
 800a722:	2b00      	cmp	r3, #0
 800a724:	da04      	bge.n	800a730 <_puts_r+0x60>
 800a726:	69a2      	ldr	r2, [r4, #24]
 800a728:	429a      	cmp	r2, r3
 800a72a:	dc17      	bgt.n	800a75c <_puts_r+0x8c>
 800a72c:	290a      	cmp	r1, #10
 800a72e:	d015      	beq.n	800a75c <_puts_r+0x8c>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	1c5a      	adds	r2, r3, #1
 800a734:	6022      	str	r2, [r4, #0]
 800a736:	7019      	strb	r1, [r3, #0]
 800a738:	68a3      	ldr	r3, [r4, #8]
 800a73a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a73e:	3b01      	subs	r3, #1
 800a740:	60a3      	str	r3, [r4, #8]
 800a742:	2900      	cmp	r1, #0
 800a744:	d1ed      	bne.n	800a722 <_puts_r+0x52>
 800a746:	2b00      	cmp	r3, #0
 800a748:	da11      	bge.n	800a76e <_puts_r+0x9e>
 800a74a:	4622      	mov	r2, r4
 800a74c:	210a      	movs	r1, #10
 800a74e:	4628      	mov	r0, r5
 800a750:	f000 f85f 	bl	800a812 <__swbuf_r>
 800a754:	3001      	adds	r0, #1
 800a756:	d0d7      	beq.n	800a708 <_puts_r+0x38>
 800a758:	250a      	movs	r5, #10
 800a75a:	e7d7      	b.n	800a70c <_puts_r+0x3c>
 800a75c:	4622      	mov	r2, r4
 800a75e:	4628      	mov	r0, r5
 800a760:	f000 f857 	bl	800a812 <__swbuf_r>
 800a764:	3001      	adds	r0, #1
 800a766:	d1e7      	bne.n	800a738 <_puts_r+0x68>
 800a768:	e7ce      	b.n	800a708 <_puts_r+0x38>
 800a76a:	3e01      	subs	r6, #1
 800a76c:	e7e4      	b.n	800a738 <_puts_r+0x68>
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	1c5a      	adds	r2, r3, #1
 800a772:	6022      	str	r2, [r4, #0]
 800a774:	220a      	movs	r2, #10
 800a776:	701a      	strb	r2, [r3, #0]
 800a778:	e7ee      	b.n	800a758 <_puts_r+0x88>
	...

0800a77c <puts>:
 800a77c:	4b02      	ldr	r3, [pc, #8]	@ (800a788 <puts+0xc>)
 800a77e:	4601      	mov	r1, r0
 800a780:	6818      	ldr	r0, [r3, #0]
 800a782:	f7ff bfa5 	b.w	800a6d0 <_puts_r>
 800a786:	bf00      	nop
 800a788:	2000019c 	.word	0x2000019c

0800a78c <__sread>:
 800a78c:	b510      	push	{r4, lr}
 800a78e:	460c      	mov	r4, r1
 800a790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a794:	f000 f8fc 	bl	800a990 <_read_r>
 800a798:	2800      	cmp	r0, #0
 800a79a:	bfab      	itete	ge
 800a79c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a79e:	89a3      	ldrhlt	r3, [r4, #12]
 800a7a0:	181b      	addge	r3, r3, r0
 800a7a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a7a6:	bfac      	ite	ge
 800a7a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a7aa:	81a3      	strhlt	r3, [r4, #12]
 800a7ac:	bd10      	pop	{r4, pc}

0800a7ae <__swrite>:
 800a7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b2:	461f      	mov	r7, r3
 800a7b4:	898b      	ldrh	r3, [r1, #12]
 800a7b6:	4605      	mov	r5, r0
 800a7b8:	05db      	lsls	r3, r3, #23
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	4616      	mov	r6, r2
 800a7be:	d505      	bpl.n	800a7cc <__swrite+0x1e>
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c8:	f000 f8d0 	bl	800a96c <_lseek_r>
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	4632      	mov	r2, r6
 800a7d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a7d4:	81a3      	strh	r3, [r4, #12]
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	463b      	mov	r3, r7
 800a7da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e2:	f000 b8e7 	b.w	800a9b4 <_write_r>

0800a7e6 <__sseek>:
 800a7e6:	b510      	push	{r4, lr}
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ee:	f000 f8bd 	bl	800a96c <_lseek_r>
 800a7f2:	1c43      	adds	r3, r0, #1
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	bf15      	itete	ne
 800a7f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a7fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a7fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a802:	81a3      	strheq	r3, [r4, #12]
 800a804:	bf18      	it	ne
 800a806:	81a3      	strhne	r3, [r4, #12]
 800a808:	bd10      	pop	{r4, pc}

0800a80a <__sclose>:
 800a80a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a80e:	f000 b89d 	b.w	800a94c <_close_r>

0800a812 <__swbuf_r>:
 800a812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a814:	460e      	mov	r6, r1
 800a816:	4614      	mov	r4, r2
 800a818:	4605      	mov	r5, r0
 800a81a:	b118      	cbz	r0, 800a824 <__swbuf_r+0x12>
 800a81c:	6a03      	ldr	r3, [r0, #32]
 800a81e:	b90b      	cbnz	r3, 800a824 <__swbuf_r+0x12>
 800a820:	f7ff ff0e 	bl	800a640 <__sinit>
 800a824:	69a3      	ldr	r3, [r4, #24]
 800a826:	60a3      	str	r3, [r4, #8]
 800a828:	89a3      	ldrh	r3, [r4, #12]
 800a82a:	071a      	lsls	r2, r3, #28
 800a82c:	d501      	bpl.n	800a832 <__swbuf_r+0x20>
 800a82e:	6923      	ldr	r3, [r4, #16]
 800a830:	b943      	cbnz	r3, 800a844 <__swbuf_r+0x32>
 800a832:	4621      	mov	r1, r4
 800a834:	4628      	mov	r0, r5
 800a836:	f000 f82b 	bl	800a890 <__swsetup_r>
 800a83a:	b118      	cbz	r0, 800a844 <__swbuf_r+0x32>
 800a83c:	f04f 37ff 	mov.w	r7, #4294967295
 800a840:	4638      	mov	r0, r7
 800a842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a844:	6823      	ldr	r3, [r4, #0]
 800a846:	6922      	ldr	r2, [r4, #16]
 800a848:	b2f6      	uxtb	r6, r6
 800a84a:	1a98      	subs	r0, r3, r2
 800a84c:	6963      	ldr	r3, [r4, #20]
 800a84e:	4637      	mov	r7, r6
 800a850:	4283      	cmp	r3, r0
 800a852:	dc05      	bgt.n	800a860 <__swbuf_r+0x4e>
 800a854:	4621      	mov	r1, r4
 800a856:	4628      	mov	r0, r5
 800a858:	f000 fd32 	bl	800b2c0 <_fflush_r>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d1ed      	bne.n	800a83c <__swbuf_r+0x2a>
 800a860:	68a3      	ldr	r3, [r4, #8]
 800a862:	3b01      	subs	r3, #1
 800a864:	60a3      	str	r3, [r4, #8]
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	1c5a      	adds	r2, r3, #1
 800a86a:	6022      	str	r2, [r4, #0]
 800a86c:	701e      	strb	r6, [r3, #0]
 800a86e:	6962      	ldr	r2, [r4, #20]
 800a870:	1c43      	adds	r3, r0, #1
 800a872:	429a      	cmp	r2, r3
 800a874:	d004      	beq.n	800a880 <__swbuf_r+0x6e>
 800a876:	89a3      	ldrh	r3, [r4, #12]
 800a878:	07db      	lsls	r3, r3, #31
 800a87a:	d5e1      	bpl.n	800a840 <__swbuf_r+0x2e>
 800a87c:	2e0a      	cmp	r6, #10
 800a87e:	d1df      	bne.n	800a840 <__swbuf_r+0x2e>
 800a880:	4621      	mov	r1, r4
 800a882:	4628      	mov	r0, r5
 800a884:	f000 fd1c 	bl	800b2c0 <_fflush_r>
 800a888:	2800      	cmp	r0, #0
 800a88a:	d0d9      	beq.n	800a840 <__swbuf_r+0x2e>
 800a88c:	e7d6      	b.n	800a83c <__swbuf_r+0x2a>
	...

0800a890 <__swsetup_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4b29      	ldr	r3, [pc, #164]	@ (800a938 <__swsetup_r+0xa8>)
 800a894:	4605      	mov	r5, r0
 800a896:	6818      	ldr	r0, [r3, #0]
 800a898:	460c      	mov	r4, r1
 800a89a:	b118      	cbz	r0, 800a8a4 <__swsetup_r+0x14>
 800a89c:	6a03      	ldr	r3, [r0, #32]
 800a89e:	b90b      	cbnz	r3, 800a8a4 <__swsetup_r+0x14>
 800a8a0:	f7ff fece 	bl	800a640 <__sinit>
 800a8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8a8:	0719      	lsls	r1, r3, #28
 800a8aa:	d422      	bmi.n	800a8f2 <__swsetup_r+0x62>
 800a8ac:	06da      	lsls	r2, r3, #27
 800a8ae:	d407      	bmi.n	800a8c0 <__swsetup_r+0x30>
 800a8b0:	2209      	movs	r2, #9
 800a8b2:	602a      	str	r2, [r5, #0]
 800a8b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8bc:	81a3      	strh	r3, [r4, #12]
 800a8be:	e033      	b.n	800a928 <__swsetup_r+0x98>
 800a8c0:	0758      	lsls	r0, r3, #29
 800a8c2:	d512      	bpl.n	800a8ea <__swsetup_r+0x5a>
 800a8c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8c6:	b141      	cbz	r1, 800a8da <__swsetup_r+0x4a>
 800a8c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8cc:	4299      	cmp	r1, r3
 800a8ce:	d002      	beq.n	800a8d6 <__swsetup_r+0x46>
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	f000 f8af 	bl	800aa34 <_free_r>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8da:	89a3      	ldrh	r3, [r4, #12]
 800a8dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a8e0:	81a3      	strh	r3, [r4, #12]
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	6063      	str	r3, [r4, #4]
 800a8e6:	6923      	ldr	r3, [r4, #16]
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	f043 0308 	orr.w	r3, r3, #8
 800a8f0:	81a3      	strh	r3, [r4, #12]
 800a8f2:	6923      	ldr	r3, [r4, #16]
 800a8f4:	b94b      	cbnz	r3, 800a90a <__swsetup_r+0x7a>
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a8fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a900:	d003      	beq.n	800a90a <__swsetup_r+0x7a>
 800a902:	4621      	mov	r1, r4
 800a904:	4628      	mov	r0, r5
 800a906:	f000 fd28 	bl	800b35a <__smakebuf_r>
 800a90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a90e:	f013 0201 	ands.w	r2, r3, #1
 800a912:	d00a      	beq.n	800a92a <__swsetup_r+0x9a>
 800a914:	2200      	movs	r2, #0
 800a916:	60a2      	str	r2, [r4, #8]
 800a918:	6962      	ldr	r2, [r4, #20]
 800a91a:	4252      	negs	r2, r2
 800a91c:	61a2      	str	r2, [r4, #24]
 800a91e:	6922      	ldr	r2, [r4, #16]
 800a920:	b942      	cbnz	r2, 800a934 <__swsetup_r+0xa4>
 800a922:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a926:	d1c5      	bne.n	800a8b4 <__swsetup_r+0x24>
 800a928:	bd38      	pop	{r3, r4, r5, pc}
 800a92a:	0799      	lsls	r1, r3, #30
 800a92c:	bf58      	it	pl
 800a92e:	6962      	ldrpl	r2, [r4, #20]
 800a930:	60a2      	str	r2, [r4, #8]
 800a932:	e7f4      	b.n	800a91e <__swsetup_r+0x8e>
 800a934:	2000      	movs	r0, #0
 800a936:	e7f7      	b.n	800a928 <__swsetup_r+0x98>
 800a938:	2000019c 	.word	0x2000019c

0800a93c <memset>:
 800a93c:	4603      	mov	r3, r0
 800a93e:	4402      	add	r2, r0
 800a940:	4293      	cmp	r3, r2
 800a942:	d100      	bne.n	800a946 <memset+0xa>
 800a944:	4770      	bx	lr
 800a946:	f803 1b01 	strb.w	r1, [r3], #1
 800a94a:	e7f9      	b.n	800a940 <memset+0x4>

0800a94c <_close_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	2300      	movs	r3, #0
 800a950:	4d05      	ldr	r5, [pc, #20]	@ (800a968 <_close_r+0x1c>)
 800a952:	4604      	mov	r4, r0
 800a954:	4608      	mov	r0, r1
 800a956:	602b      	str	r3, [r5, #0]
 800a958:	f7f5 fdf9 	bl	800054e <_close>
 800a95c:	1c43      	adds	r3, r0, #1
 800a95e:	d102      	bne.n	800a966 <_close_r+0x1a>
 800a960:	682b      	ldr	r3, [r5, #0]
 800a962:	b103      	cbz	r3, 800a966 <_close_r+0x1a>
 800a964:	6023      	str	r3, [r4, #0]
 800a966:	bd38      	pop	{r3, r4, r5, pc}
 800a968:	20001708 	.word	0x20001708

0800a96c <_lseek_r>:
 800a96c:	b538      	push	{r3, r4, r5, lr}
 800a96e:	4604      	mov	r4, r0
 800a970:	4608      	mov	r0, r1
 800a972:	4611      	mov	r1, r2
 800a974:	2200      	movs	r2, #0
 800a976:	4d05      	ldr	r5, [pc, #20]	@ (800a98c <_lseek_r+0x20>)
 800a978:	602a      	str	r2, [r5, #0]
 800a97a:	461a      	mov	r2, r3
 800a97c:	f7f5 fe0b 	bl	8000596 <_lseek>
 800a980:	1c43      	adds	r3, r0, #1
 800a982:	d102      	bne.n	800a98a <_lseek_r+0x1e>
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	b103      	cbz	r3, 800a98a <_lseek_r+0x1e>
 800a988:	6023      	str	r3, [r4, #0]
 800a98a:	bd38      	pop	{r3, r4, r5, pc}
 800a98c:	20001708 	.word	0x20001708

0800a990 <_read_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4604      	mov	r4, r0
 800a994:	4608      	mov	r0, r1
 800a996:	4611      	mov	r1, r2
 800a998:	2200      	movs	r2, #0
 800a99a:	4d05      	ldr	r5, [pc, #20]	@ (800a9b0 <_read_r+0x20>)
 800a99c:	602a      	str	r2, [r5, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	f7f5 fd9c 	bl	80004dc <_read>
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	d102      	bne.n	800a9ae <_read_r+0x1e>
 800a9a8:	682b      	ldr	r3, [r5, #0]
 800a9aa:	b103      	cbz	r3, 800a9ae <_read_r+0x1e>
 800a9ac:	6023      	str	r3, [r4, #0]
 800a9ae:	bd38      	pop	{r3, r4, r5, pc}
 800a9b0:	20001708 	.word	0x20001708

0800a9b4 <_write_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4d05      	ldr	r5, [pc, #20]	@ (800a9d4 <_write_r+0x20>)
 800a9c0:	602a      	str	r2, [r5, #0]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	f7f5 fda7 	bl	8000516 <_write>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d102      	bne.n	800a9d2 <_write_r+0x1e>
 800a9cc:	682b      	ldr	r3, [r5, #0]
 800a9ce:	b103      	cbz	r3, 800a9d2 <_write_r+0x1e>
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	bd38      	pop	{r3, r4, r5, pc}
 800a9d4:	20001708 	.word	0x20001708

0800a9d8 <__errno>:
 800a9d8:	4b01      	ldr	r3, [pc, #4]	@ (800a9e0 <__errno+0x8>)
 800a9da:	6818      	ldr	r0, [r3, #0]
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	2000019c 	.word	0x2000019c

0800a9e4 <__libc_init_array>:
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	2600      	movs	r6, #0
 800a9e8:	4d0c      	ldr	r5, [pc, #48]	@ (800aa1c <__libc_init_array+0x38>)
 800a9ea:	4c0d      	ldr	r4, [pc, #52]	@ (800aa20 <__libc_init_array+0x3c>)
 800a9ec:	1b64      	subs	r4, r4, r5
 800a9ee:	10a4      	asrs	r4, r4, #2
 800a9f0:	42a6      	cmp	r6, r4
 800a9f2:	d109      	bne.n	800aa08 <__libc_init_array+0x24>
 800a9f4:	f000 fd2e 	bl	800b454 <_init>
 800a9f8:	2600      	movs	r6, #0
 800a9fa:	4d0a      	ldr	r5, [pc, #40]	@ (800aa24 <__libc_init_array+0x40>)
 800a9fc:	4c0a      	ldr	r4, [pc, #40]	@ (800aa28 <__libc_init_array+0x44>)
 800a9fe:	1b64      	subs	r4, r4, r5
 800aa00:	10a4      	asrs	r4, r4, #2
 800aa02:	42a6      	cmp	r6, r4
 800aa04:	d105      	bne.n	800aa12 <__libc_init_array+0x2e>
 800aa06:	bd70      	pop	{r4, r5, r6, pc}
 800aa08:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa0c:	4798      	blx	r3
 800aa0e:	3601      	adds	r6, #1
 800aa10:	e7ee      	b.n	800a9f0 <__libc_init_array+0xc>
 800aa12:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa16:	4798      	blx	r3
 800aa18:	3601      	adds	r6, #1
 800aa1a:	e7f2      	b.n	800aa02 <__libc_init_array+0x1e>
 800aa1c:	0800b588 	.word	0x0800b588
 800aa20:	0800b588 	.word	0x0800b588
 800aa24:	0800b588 	.word	0x0800b588
 800aa28:	0800b58c 	.word	0x0800b58c

0800aa2c <__retarget_lock_init_recursive>:
 800aa2c:	4770      	bx	lr

0800aa2e <__retarget_lock_acquire_recursive>:
 800aa2e:	4770      	bx	lr

0800aa30 <__retarget_lock_release_recursive>:
 800aa30:	4770      	bx	lr
	...

0800aa34 <_free_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4605      	mov	r5, r0
 800aa38:	2900      	cmp	r1, #0
 800aa3a:	d040      	beq.n	800aabe <_free_r+0x8a>
 800aa3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa40:	1f0c      	subs	r4, r1, #4
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	bfb8      	it	lt
 800aa46:	18e4      	addlt	r4, r4, r3
 800aa48:	f000 f8de 	bl	800ac08 <__malloc_lock>
 800aa4c:	4a1c      	ldr	r2, [pc, #112]	@ (800aac0 <_free_r+0x8c>)
 800aa4e:	6813      	ldr	r3, [r2, #0]
 800aa50:	b933      	cbnz	r3, 800aa60 <_free_r+0x2c>
 800aa52:	6063      	str	r3, [r4, #4]
 800aa54:	6014      	str	r4, [r2, #0]
 800aa56:	4628      	mov	r0, r5
 800aa58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa5c:	f000 b8da 	b.w	800ac14 <__malloc_unlock>
 800aa60:	42a3      	cmp	r3, r4
 800aa62:	d908      	bls.n	800aa76 <_free_r+0x42>
 800aa64:	6820      	ldr	r0, [r4, #0]
 800aa66:	1821      	adds	r1, r4, r0
 800aa68:	428b      	cmp	r3, r1
 800aa6a:	bf01      	itttt	eq
 800aa6c:	6819      	ldreq	r1, [r3, #0]
 800aa6e:	685b      	ldreq	r3, [r3, #4]
 800aa70:	1809      	addeq	r1, r1, r0
 800aa72:	6021      	streq	r1, [r4, #0]
 800aa74:	e7ed      	b.n	800aa52 <_free_r+0x1e>
 800aa76:	461a      	mov	r2, r3
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	b10b      	cbz	r3, 800aa80 <_free_r+0x4c>
 800aa7c:	42a3      	cmp	r3, r4
 800aa7e:	d9fa      	bls.n	800aa76 <_free_r+0x42>
 800aa80:	6811      	ldr	r1, [r2, #0]
 800aa82:	1850      	adds	r0, r2, r1
 800aa84:	42a0      	cmp	r0, r4
 800aa86:	d10b      	bne.n	800aaa0 <_free_r+0x6c>
 800aa88:	6820      	ldr	r0, [r4, #0]
 800aa8a:	4401      	add	r1, r0
 800aa8c:	1850      	adds	r0, r2, r1
 800aa8e:	4283      	cmp	r3, r0
 800aa90:	6011      	str	r1, [r2, #0]
 800aa92:	d1e0      	bne.n	800aa56 <_free_r+0x22>
 800aa94:	6818      	ldr	r0, [r3, #0]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	4408      	add	r0, r1
 800aa9a:	6010      	str	r0, [r2, #0]
 800aa9c:	6053      	str	r3, [r2, #4]
 800aa9e:	e7da      	b.n	800aa56 <_free_r+0x22>
 800aaa0:	d902      	bls.n	800aaa8 <_free_r+0x74>
 800aaa2:	230c      	movs	r3, #12
 800aaa4:	602b      	str	r3, [r5, #0]
 800aaa6:	e7d6      	b.n	800aa56 <_free_r+0x22>
 800aaa8:	6820      	ldr	r0, [r4, #0]
 800aaaa:	1821      	adds	r1, r4, r0
 800aaac:	428b      	cmp	r3, r1
 800aaae:	bf01      	itttt	eq
 800aab0:	6819      	ldreq	r1, [r3, #0]
 800aab2:	685b      	ldreq	r3, [r3, #4]
 800aab4:	1809      	addeq	r1, r1, r0
 800aab6:	6021      	streq	r1, [r4, #0]
 800aab8:	6063      	str	r3, [r4, #4]
 800aaba:	6054      	str	r4, [r2, #4]
 800aabc:	e7cb      	b.n	800aa56 <_free_r+0x22>
 800aabe:	bd38      	pop	{r3, r4, r5, pc}
 800aac0:	20001714 	.word	0x20001714

0800aac4 <sbrk_aligned>:
 800aac4:	b570      	push	{r4, r5, r6, lr}
 800aac6:	4e0f      	ldr	r6, [pc, #60]	@ (800ab04 <sbrk_aligned+0x40>)
 800aac8:	460c      	mov	r4, r1
 800aaca:	6831      	ldr	r1, [r6, #0]
 800aacc:	4605      	mov	r5, r0
 800aace:	b911      	cbnz	r1, 800aad6 <sbrk_aligned+0x12>
 800aad0:	f000 fca2 	bl	800b418 <_sbrk_r>
 800aad4:	6030      	str	r0, [r6, #0]
 800aad6:	4621      	mov	r1, r4
 800aad8:	4628      	mov	r0, r5
 800aada:	f000 fc9d 	bl	800b418 <_sbrk_r>
 800aade:	1c43      	adds	r3, r0, #1
 800aae0:	d103      	bne.n	800aaea <sbrk_aligned+0x26>
 800aae2:	f04f 34ff 	mov.w	r4, #4294967295
 800aae6:	4620      	mov	r0, r4
 800aae8:	bd70      	pop	{r4, r5, r6, pc}
 800aaea:	1cc4      	adds	r4, r0, #3
 800aaec:	f024 0403 	bic.w	r4, r4, #3
 800aaf0:	42a0      	cmp	r0, r4
 800aaf2:	d0f8      	beq.n	800aae6 <sbrk_aligned+0x22>
 800aaf4:	1a21      	subs	r1, r4, r0
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	f000 fc8e 	bl	800b418 <_sbrk_r>
 800aafc:	3001      	adds	r0, #1
 800aafe:	d1f2      	bne.n	800aae6 <sbrk_aligned+0x22>
 800ab00:	e7ef      	b.n	800aae2 <sbrk_aligned+0x1e>
 800ab02:	bf00      	nop
 800ab04:	20001710 	.word	0x20001710

0800ab08 <_malloc_r>:
 800ab08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab0c:	1ccd      	adds	r5, r1, #3
 800ab0e:	f025 0503 	bic.w	r5, r5, #3
 800ab12:	3508      	adds	r5, #8
 800ab14:	2d0c      	cmp	r5, #12
 800ab16:	bf38      	it	cc
 800ab18:	250c      	movcc	r5, #12
 800ab1a:	2d00      	cmp	r5, #0
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	db01      	blt.n	800ab24 <_malloc_r+0x1c>
 800ab20:	42a9      	cmp	r1, r5
 800ab22:	d904      	bls.n	800ab2e <_malloc_r+0x26>
 800ab24:	230c      	movs	r3, #12
 800ab26:	6033      	str	r3, [r6, #0]
 800ab28:	2000      	movs	r0, #0
 800ab2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac04 <_malloc_r+0xfc>
 800ab32:	f000 f869 	bl	800ac08 <__malloc_lock>
 800ab36:	f8d8 3000 	ldr.w	r3, [r8]
 800ab3a:	461c      	mov	r4, r3
 800ab3c:	bb44      	cbnz	r4, 800ab90 <_malloc_r+0x88>
 800ab3e:	4629      	mov	r1, r5
 800ab40:	4630      	mov	r0, r6
 800ab42:	f7ff ffbf 	bl	800aac4 <sbrk_aligned>
 800ab46:	1c43      	adds	r3, r0, #1
 800ab48:	4604      	mov	r4, r0
 800ab4a:	d158      	bne.n	800abfe <_malloc_r+0xf6>
 800ab4c:	f8d8 4000 	ldr.w	r4, [r8]
 800ab50:	4627      	mov	r7, r4
 800ab52:	2f00      	cmp	r7, #0
 800ab54:	d143      	bne.n	800abde <_malloc_r+0xd6>
 800ab56:	2c00      	cmp	r4, #0
 800ab58:	d04b      	beq.n	800abf2 <_malloc_r+0xea>
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	4630      	mov	r0, r6
 800ab60:	eb04 0903 	add.w	r9, r4, r3
 800ab64:	f000 fc58 	bl	800b418 <_sbrk_r>
 800ab68:	4581      	cmp	r9, r0
 800ab6a:	d142      	bne.n	800abf2 <_malloc_r+0xea>
 800ab6c:	6821      	ldr	r1, [r4, #0]
 800ab6e:	4630      	mov	r0, r6
 800ab70:	1a6d      	subs	r5, r5, r1
 800ab72:	4629      	mov	r1, r5
 800ab74:	f7ff ffa6 	bl	800aac4 <sbrk_aligned>
 800ab78:	3001      	adds	r0, #1
 800ab7a:	d03a      	beq.n	800abf2 <_malloc_r+0xea>
 800ab7c:	6823      	ldr	r3, [r4, #0]
 800ab7e:	442b      	add	r3, r5
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	f8d8 3000 	ldr.w	r3, [r8]
 800ab86:	685a      	ldr	r2, [r3, #4]
 800ab88:	bb62      	cbnz	r2, 800abe4 <_malloc_r+0xdc>
 800ab8a:	f8c8 7000 	str.w	r7, [r8]
 800ab8e:	e00f      	b.n	800abb0 <_malloc_r+0xa8>
 800ab90:	6822      	ldr	r2, [r4, #0]
 800ab92:	1b52      	subs	r2, r2, r5
 800ab94:	d420      	bmi.n	800abd8 <_malloc_r+0xd0>
 800ab96:	2a0b      	cmp	r2, #11
 800ab98:	d917      	bls.n	800abca <_malloc_r+0xc2>
 800ab9a:	1961      	adds	r1, r4, r5
 800ab9c:	42a3      	cmp	r3, r4
 800ab9e:	6025      	str	r5, [r4, #0]
 800aba0:	bf18      	it	ne
 800aba2:	6059      	strne	r1, [r3, #4]
 800aba4:	6863      	ldr	r3, [r4, #4]
 800aba6:	bf08      	it	eq
 800aba8:	f8c8 1000 	streq.w	r1, [r8]
 800abac:	5162      	str	r2, [r4, r5]
 800abae:	604b      	str	r3, [r1, #4]
 800abb0:	4630      	mov	r0, r6
 800abb2:	f000 f82f 	bl	800ac14 <__malloc_unlock>
 800abb6:	f104 000b 	add.w	r0, r4, #11
 800abba:	1d23      	adds	r3, r4, #4
 800abbc:	f020 0007 	bic.w	r0, r0, #7
 800abc0:	1ac2      	subs	r2, r0, r3
 800abc2:	bf1c      	itt	ne
 800abc4:	1a1b      	subne	r3, r3, r0
 800abc6:	50a3      	strne	r3, [r4, r2]
 800abc8:	e7af      	b.n	800ab2a <_malloc_r+0x22>
 800abca:	6862      	ldr	r2, [r4, #4]
 800abcc:	42a3      	cmp	r3, r4
 800abce:	bf0c      	ite	eq
 800abd0:	f8c8 2000 	streq.w	r2, [r8]
 800abd4:	605a      	strne	r2, [r3, #4]
 800abd6:	e7eb      	b.n	800abb0 <_malloc_r+0xa8>
 800abd8:	4623      	mov	r3, r4
 800abda:	6864      	ldr	r4, [r4, #4]
 800abdc:	e7ae      	b.n	800ab3c <_malloc_r+0x34>
 800abde:	463c      	mov	r4, r7
 800abe0:	687f      	ldr	r7, [r7, #4]
 800abe2:	e7b6      	b.n	800ab52 <_malloc_r+0x4a>
 800abe4:	461a      	mov	r2, r3
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	42a3      	cmp	r3, r4
 800abea:	d1fb      	bne.n	800abe4 <_malloc_r+0xdc>
 800abec:	2300      	movs	r3, #0
 800abee:	6053      	str	r3, [r2, #4]
 800abf0:	e7de      	b.n	800abb0 <_malloc_r+0xa8>
 800abf2:	230c      	movs	r3, #12
 800abf4:	4630      	mov	r0, r6
 800abf6:	6033      	str	r3, [r6, #0]
 800abf8:	f000 f80c 	bl	800ac14 <__malloc_unlock>
 800abfc:	e794      	b.n	800ab28 <_malloc_r+0x20>
 800abfe:	6005      	str	r5, [r0, #0]
 800ac00:	e7d6      	b.n	800abb0 <_malloc_r+0xa8>
 800ac02:	bf00      	nop
 800ac04:	20001714 	.word	0x20001714

0800ac08 <__malloc_lock>:
 800ac08:	4801      	ldr	r0, [pc, #4]	@ (800ac10 <__malloc_lock+0x8>)
 800ac0a:	f7ff bf10 	b.w	800aa2e <__retarget_lock_acquire_recursive>
 800ac0e:	bf00      	nop
 800ac10:	2000170c 	.word	0x2000170c

0800ac14 <__malloc_unlock>:
 800ac14:	4801      	ldr	r0, [pc, #4]	@ (800ac1c <__malloc_unlock+0x8>)
 800ac16:	f7ff bf0b 	b.w	800aa30 <__retarget_lock_release_recursive>
 800ac1a:	bf00      	nop
 800ac1c:	2000170c 	.word	0x2000170c

0800ac20 <__sfputc_r>:
 800ac20:	6893      	ldr	r3, [r2, #8]
 800ac22:	b410      	push	{r4}
 800ac24:	3b01      	subs	r3, #1
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	6093      	str	r3, [r2, #8]
 800ac2a:	da07      	bge.n	800ac3c <__sfputc_r+0x1c>
 800ac2c:	6994      	ldr	r4, [r2, #24]
 800ac2e:	42a3      	cmp	r3, r4
 800ac30:	db01      	blt.n	800ac36 <__sfputc_r+0x16>
 800ac32:	290a      	cmp	r1, #10
 800ac34:	d102      	bne.n	800ac3c <__sfputc_r+0x1c>
 800ac36:	bc10      	pop	{r4}
 800ac38:	f7ff bdeb 	b.w	800a812 <__swbuf_r>
 800ac3c:	6813      	ldr	r3, [r2, #0]
 800ac3e:	1c58      	adds	r0, r3, #1
 800ac40:	6010      	str	r0, [r2, #0]
 800ac42:	7019      	strb	r1, [r3, #0]
 800ac44:	4608      	mov	r0, r1
 800ac46:	bc10      	pop	{r4}
 800ac48:	4770      	bx	lr

0800ac4a <__sfputs_r>:
 800ac4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4c:	4606      	mov	r6, r0
 800ac4e:	460f      	mov	r7, r1
 800ac50:	4614      	mov	r4, r2
 800ac52:	18d5      	adds	r5, r2, r3
 800ac54:	42ac      	cmp	r4, r5
 800ac56:	d101      	bne.n	800ac5c <__sfputs_r+0x12>
 800ac58:	2000      	movs	r0, #0
 800ac5a:	e007      	b.n	800ac6c <__sfputs_r+0x22>
 800ac5c:	463a      	mov	r2, r7
 800ac5e:	4630      	mov	r0, r6
 800ac60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac64:	f7ff ffdc 	bl	800ac20 <__sfputc_r>
 800ac68:	1c43      	adds	r3, r0, #1
 800ac6a:	d1f3      	bne.n	800ac54 <__sfputs_r+0xa>
 800ac6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac70 <_vfiprintf_r>:
 800ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	460d      	mov	r5, r1
 800ac76:	4614      	mov	r4, r2
 800ac78:	4698      	mov	r8, r3
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	b09d      	sub	sp, #116	@ 0x74
 800ac7e:	b118      	cbz	r0, 800ac88 <_vfiprintf_r+0x18>
 800ac80:	6a03      	ldr	r3, [r0, #32]
 800ac82:	b90b      	cbnz	r3, 800ac88 <_vfiprintf_r+0x18>
 800ac84:	f7ff fcdc 	bl	800a640 <__sinit>
 800ac88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac8a:	07d9      	lsls	r1, r3, #31
 800ac8c:	d405      	bmi.n	800ac9a <_vfiprintf_r+0x2a>
 800ac8e:	89ab      	ldrh	r3, [r5, #12]
 800ac90:	059a      	lsls	r2, r3, #22
 800ac92:	d402      	bmi.n	800ac9a <_vfiprintf_r+0x2a>
 800ac94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac96:	f7ff feca 	bl	800aa2e <__retarget_lock_acquire_recursive>
 800ac9a:	89ab      	ldrh	r3, [r5, #12]
 800ac9c:	071b      	lsls	r3, r3, #28
 800ac9e:	d501      	bpl.n	800aca4 <_vfiprintf_r+0x34>
 800aca0:	692b      	ldr	r3, [r5, #16]
 800aca2:	b99b      	cbnz	r3, 800accc <_vfiprintf_r+0x5c>
 800aca4:	4629      	mov	r1, r5
 800aca6:	4630      	mov	r0, r6
 800aca8:	f7ff fdf2 	bl	800a890 <__swsetup_r>
 800acac:	b170      	cbz	r0, 800accc <_vfiprintf_r+0x5c>
 800acae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acb0:	07dc      	lsls	r4, r3, #31
 800acb2:	d504      	bpl.n	800acbe <_vfiprintf_r+0x4e>
 800acb4:	f04f 30ff 	mov.w	r0, #4294967295
 800acb8:	b01d      	add	sp, #116	@ 0x74
 800acba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acbe:	89ab      	ldrh	r3, [r5, #12]
 800acc0:	0598      	lsls	r0, r3, #22
 800acc2:	d4f7      	bmi.n	800acb4 <_vfiprintf_r+0x44>
 800acc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acc6:	f7ff feb3 	bl	800aa30 <__retarget_lock_release_recursive>
 800acca:	e7f3      	b.n	800acb4 <_vfiprintf_r+0x44>
 800accc:	2300      	movs	r3, #0
 800acce:	9309      	str	r3, [sp, #36]	@ 0x24
 800acd0:	2320      	movs	r3, #32
 800acd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800acd6:	2330      	movs	r3, #48	@ 0x30
 800acd8:	f04f 0901 	mov.w	r9, #1
 800acdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ace0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ae8c <_vfiprintf_r+0x21c>
 800ace4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ace8:	4623      	mov	r3, r4
 800acea:	469a      	mov	sl, r3
 800acec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acf0:	b10a      	cbz	r2, 800acf6 <_vfiprintf_r+0x86>
 800acf2:	2a25      	cmp	r2, #37	@ 0x25
 800acf4:	d1f9      	bne.n	800acea <_vfiprintf_r+0x7a>
 800acf6:	ebba 0b04 	subs.w	fp, sl, r4
 800acfa:	d00b      	beq.n	800ad14 <_vfiprintf_r+0xa4>
 800acfc:	465b      	mov	r3, fp
 800acfe:	4622      	mov	r2, r4
 800ad00:	4629      	mov	r1, r5
 800ad02:	4630      	mov	r0, r6
 800ad04:	f7ff ffa1 	bl	800ac4a <__sfputs_r>
 800ad08:	3001      	adds	r0, #1
 800ad0a:	f000 80a7 	beq.w	800ae5c <_vfiprintf_r+0x1ec>
 800ad0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad10:	445a      	add	r2, fp
 800ad12:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad14:	f89a 3000 	ldrb.w	r3, [sl]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f000 809f 	beq.w	800ae5c <_vfiprintf_r+0x1ec>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f04f 32ff 	mov.w	r2, #4294967295
 800ad24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad28:	f10a 0a01 	add.w	sl, sl, #1
 800ad2c:	9304      	str	r3, [sp, #16]
 800ad2e:	9307      	str	r3, [sp, #28]
 800ad30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad34:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad36:	4654      	mov	r4, sl
 800ad38:	2205      	movs	r2, #5
 800ad3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad3e:	4853      	ldr	r0, [pc, #332]	@ (800ae8c <_vfiprintf_r+0x21c>)
 800ad40:	f000 fb7a 	bl	800b438 <memchr>
 800ad44:	9a04      	ldr	r2, [sp, #16]
 800ad46:	b9d8      	cbnz	r0, 800ad80 <_vfiprintf_r+0x110>
 800ad48:	06d1      	lsls	r1, r2, #27
 800ad4a:	bf44      	itt	mi
 800ad4c:	2320      	movmi	r3, #32
 800ad4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad52:	0713      	lsls	r3, r2, #28
 800ad54:	bf44      	itt	mi
 800ad56:	232b      	movmi	r3, #43	@ 0x2b
 800ad58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad60:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad62:	d015      	beq.n	800ad90 <_vfiprintf_r+0x120>
 800ad64:	4654      	mov	r4, sl
 800ad66:	2000      	movs	r0, #0
 800ad68:	f04f 0c0a 	mov.w	ip, #10
 800ad6c:	9a07      	ldr	r2, [sp, #28]
 800ad6e:	4621      	mov	r1, r4
 800ad70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad74:	3b30      	subs	r3, #48	@ 0x30
 800ad76:	2b09      	cmp	r3, #9
 800ad78:	d94b      	bls.n	800ae12 <_vfiprintf_r+0x1a2>
 800ad7a:	b1b0      	cbz	r0, 800adaa <_vfiprintf_r+0x13a>
 800ad7c:	9207      	str	r2, [sp, #28]
 800ad7e:	e014      	b.n	800adaa <_vfiprintf_r+0x13a>
 800ad80:	eba0 0308 	sub.w	r3, r0, r8
 800ad84:	fa09 f303 	lsl.w	r3, r9, r3
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	46a2      	mov	sl, r4
 800ad8c:	9304      	str	r3, [sp, #16]
 800ad8e:	e7d2      	b.n	800ad36 <_vfiprintf_r+0xc6>
 800ad90:	9b03      	ldr	r3, [sp, #12]
 800ad92:	1d19      	adds	r1, r3, #4
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	9103      	str	r1, [sp, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	bfbb      	ittet	lt
 800ad9c:	425b      	neglt	r3, r3
 800ad9e:	f042 0202 	orrlt.w	r2, r2, #2
 800ada2:	9307      	strge	r3, [sp, #28]
 800ada4:	9307      	strlt	r3, [sp, #28]
 800ada6:	bfb8      	it	lt
 800ada8:	9204      	strlt	r2, [sp, #16]
 800adaa:	7823      	ldrb	r3, [r4, #0]
 800adac:	2b2e      	cmp	r3, #46	@ 0x2e
 800adae:	d10a      	bne.n	800adc6 <_vfiprintf_r+0x156>
 800adb0:	7863      	ldrb	r3, [r4, #1]
 800adb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800adb4:	d132      	bne.n	800ae1c <_vfiprintf_r+0x1ac>
 800adb6:	9b03      	ldr	r3, [sp, #12]
 800adb8:	3402      	adds	r4, #2
 800adba:	1d1a      	adds	r2, r3, #4
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	9203      	str	r2, [sp, #12]
 800adc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800adc4:	9305      	str	r3, [sp, #20]
 800adc6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ae90 <_vfiprintf_r+0x220>
 800adca:	2203      	movs	r2, #3
 800adcc:	4650      	mov	r0, sl
 800adce:	7821      	ldrb	r1, [r4, #0]
 800add0:	f000 fb32 	bl	800b438 <memchr>
 800add4:	b138      	cbz	r0, 800ade6 <_vfiprintf_r+0x176>
 800add6:	2240      	movs	r2, #64	@ 0x40
 800add8:	9b04      	ldr	r3, [sp, #16]
 800adda:	eba0 000a 	sub.w	r0, r0, sl
 800adde:	4082      	lsls	r2, r0
 800ade0:	4313      	orrs	r3, r2
 800ade2:	3401      	adds	r4, #1
 800ade4:	9304      	str	r3, [sp, #16]
 800ade6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adea:	2206      	movs	r2, #6
 800adec:	4829      	ldr	r0, [pc, #164]	@ (800ae94 <_vfiprintf_r+0x224>)
 800adee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800adf2:	f000 fb21 	bl	800b438 <memchr>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d03f      	beq.n	800ae7a <_vfiprintf_r+0x20a>
 800adfa:	4b27      	ldr	r3, [pc, #156]	@ (800ae98 <_vfiprintf_r+0x228>)
 800adfc:	bb1b      	cbnz	r3, 800ae46 <_vfiprintf_r+0x1d6>
 800adfe:	9b03      	ldr	r3, [sp, #12]
 800ae00:	3307      	adds	r3, #7
 800ae02:	f023 0307 	bic.w	r3, r3, #7
 800ae06:	3308      	adds	r3, #8
 800ae08:	9303      	str	r3, [sp, #12]
 800ae0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae0c:	443b      	add	r3, r7
 800ae0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae10:	e76a      	b.n	800ace8 <_vfiprintf_r+0x78>
 800ae12:	460c      	mov	r4, r1
 800ae14:	2001      	movs	r0, #1
 800ae16:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae1a:	e7a8      	b.n	800ad6e <_vfiprintf_r+0xfe>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	f04f 0c0a 	mov.w	ip, #10
 800ae22:	4619      	mov	r1, r3
 800ae24:	3401      	adds	r4, #1
 800ae26:	9305      	str	r3, [sp, #20]
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae2e:	3a30      	subs	r2, #48	@ 0x30
 800ae30:	2a09      	cmp	r2, #9
 800ae32:	d903      	bls.n	800ae3c <_vfiprintf_r+0x1cc>
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d0c6      	beq.n	800adc6 <_vfiprintf_r+0x156>
 800ae38:	9105      	str	r1, [sp, #20]
 800ae3a:	e7c4      	b.n	800adc6 <_vfiprintf_r+0x156>
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	2301      	movs	r3, #1
 800ae40:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae44:	e7f0      	b.n	800ae28 <_vfiprintf_r+0x1b8>
 800ae46:	ab03      	add	r3, sp, #12
 800ae48:	9300      	str	r3, [sp, #0]
 800ae4a:	462a      	mov	r2, r5
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	4b13      	ldr	r3, [pc, #76]	@ (800ae9c <_vfiprintf_r+0x22c>)
 800ae50:	a904      	add	r1, sp, #16
 800ae52:	f3af 8000 	nop.w
 800ae56:	4607      	mov	r7, r0
 800ae58:	1c78      	adds	r0, r7, #1
 800ae5a:	d1d6      	bne.n	800ae0a <_vfiprintf_r+0x19a>
 800ae5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae5e:	07d9      	lsls	r1, r3, #31
 800ae60:	d405      	bmi.n	800ae6e <_vfiprintf_r+0x1fe>
 800ae62:	89ab      	ldrh	r3, [r5, #12]
 800ae64:	059a      	lsls	r2, r3, #22
 800ae66:	d402      	bmi.n	800ae6e <_vfiprintf_r+0x1fe>
 800ae68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae6a:	f7ff fde1 	bl	800aa30 <__retarget_lock_release_recursive>
 800ae6e:	89ab      	ldrh	r3, [r5, #12]
 800ae70:	065b      	lsls	r3, r3, #25
 800ae72:	f53f af1f 	bmi.w	800acb4 <_vfiprintf_r+0x44>
 800ae76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae78:	e71e      	b.n	800acb8 <_vfiprintf_r+0x48>
 800ae7a:	ab03      	add	r3, sp, #12
 800ae7c:	9300      	str	r3, [sp, #0]
 800ae7e:	462a      	mov	r2, r5
 800ae80:	4630      	mov	r0, r6
 800ae82:	4b06      	ldr	r3, [pc, #24]	@ (800ae9c <_vfiprintf_r+0x22c>)
 800ae84:	a904      	add	r1, sp, #16
 800ae86:	f000 f87d 	bl	800af84 <_printf_i>
 800ae8a:	e7e4      	b.n	800ae56 <_vfiprintf_r+0x1e6>
 800ae8c:	0800b552 	.word	0x0800b552
 800ae90:	0800b558 	.word	0x0800b558
 800ae94:	0800b55c 	.word	0x0800b55c
 800ae98:	00000000 	.word	0x00000000
 800ae9c:	0800ac4b 	.word	0x0800ac4b

0800aea0 <_printf_common>:
 800aea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aea4:	4616      	mov	r6, r2
 800aea6:	4698      	mov	r8, r3
 800aea8:	688a      	ldr	r2, [r1, #8]
 800aeaa:	690b      	ldr	r3, [r1, #16]
 800aeac:	4607      	mov	r7, r0
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	bfb8      	it	lt
 800aeb2:	4613      	movlt	r3, r2
 800aeb4:	6033      	str	r3, [r6, #0]
 800aeb6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aeba:	460c      	mov	r4, r1
 800aebc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aec0:	b10a      	cbz	r2, 800aec6 <_printf_common+0x26>
 800aec2:	3301      	adds	r3, #1
 800aec4:	6033      	str	r3, [r6, #0]
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	0699      	lsls	r1, r3, #26
 800aeca:	bf42      	ittt	mi
 800aecc:	6833      	ldrmi	r3, [r6, #0]
 800aece:	3302      	addmi	r3, #2
 800aed0:	6033      	strmi	r3, [r6, #0]
 800aed2:	6825      	ldr	r5, [r4, #0]
 800aed4:	f015 0506 	ands.w	r5, r5, #6
 800aed8:	d106      	bne.n	800aee8 <_printf_common+0x48>
 800aeda:	f104 0a19 	add.w	sl, r4, #25
 800aede:	68e3      	ldr	r3, [r4, #12]
 800aee0:	6832      	ldr	r2, [r6, #0]
 800aee2:	1a9b      	subs	r3, r3, r2
 800aee4:	42ab      	cmp	r3, r5
 800aee6:	dc2b      	bgt.n	800af40 <_printf_common+0xa0>
 800aee8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aeec:	6822      	ldr	r2, [r4, #0]
 800aeee:	3b00      	subs	r3, #0
 800aef0:	bf18      	it	ne
 800aef2:	2301      	movne	r3, #1
 800aef4:	0692      	lsls	r2, r2, #26
 800aef6:	d430      	bmi.n	800af5a <_printf_common+0xba>
 800aef8:	4641      	mov	r1, r8
 800aefa:	4638      	mov	r0, r7
 800aefc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af00:	47c8      	blx	r9
 800af02:	3001      	adds	r0, #1
 800af04:	d023      	beq.n	800af4e <_printf_common+0xae>
 800af06:	6823      	ldr	r3, [r4, #0]
 800af08:	6922      	ldr	r2, [r4, #16]
 800af0a:	f003 0306 	and.w	r3, r3, #6
 800af0e:	2b04      	cmp	r3, #4
 800af10:	bf14      	ite	ne
 800af12:	2500      	movne	r5, #0
 800af14:	6833      	ldreq	r3, [r6, #0]
 800af16:	f04f 0600 	mov.w	r6, #0
 800af1a:	bf08      	it	eq
 800af1c:	68e5      	ldreq	r5, [r4, #12]
 800af1e:	f104 041a 	add.w	r4, r4, #26
 800af22:	bf08      	it	eq
 800af24:	1aed      	subeq	r5, r5, r3
 800af26:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800af2a:	bf08      	it	eq
 800af2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af30:	4293      	cmp	r3, r2
 800af32:	bfc4      	itt	gt
 800af34:	1a9b      	subgt	r3, r3, r2
 800af36:	18ed      	addgt	r5, r5, r3
 800af38:	42b5      	cmp	r5, r6
 800af3a:	d11a      	bne.n	800af72 <_printf_common+0xd2>
 800af3c:	2000      	movs	r0, #0
 800af3e:	e008      	b.n	800af52 <_printf_common+0xb2>
 800af40:	2301      	movs	r3, #1
 800af42:	4652      	mov	r2, sl
 800af44:	4641      	mov	r1, r8
 800af46:	4638      	mov	r0, r7
 800af48:	47c8      	blx	r9
 800af4a:	3001      	adds	r0, #1
 800af4c:	d103      	bne.n	800af56 <_printf_common+0xb6>
 800af4e:	f04f 30ff 	mov.w	r0, #4294967295
 800af52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af56:	3501      	adds	r5, #1
 800af58:	e7c1      	b.n	800aede <_printf_common+0x3e>
 800af5a:	2030      	movs	r0, #48	@ 0x30
 800af5c:	18e1      	adds	r1, r4, r3
 800af5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af62:	1c5a      	adds	r2, r3, #1
 800af64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af68:	4422      	add	r2, r4
 800af6a:	3302      	adds	r3, #2
 800af6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af70:	e7c2      	b.n	800aef8 <_printf_common+0x58>
 800af72:	2301      	movs	r3, #1
 800af74:	4622      	mov	r2, r4
 800af76:	4641      	mov	r1, r8
 800af78:	4638      	mov	r0, r7
 800af7a:	47c8      	blx	r9
 800af7c:	3001      	adds	r0, #1
 800af7e:	d0e6      	beq.n	800af4e <_printf_common+0xae>
 800af80:	3601      	adds	r6, #1
 800af82:	e7d9      	b.n	800af38 <_printf_common+0x98>

0800af84 <_printf_i>:
 800af84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af88:	7e0f      	ldrb	r7, [r1, #24]
 800af8a:	4691      	mov	r9, r2
 800af8c:	2f78      	cmp	r7, #120	@ 0x78
 800af8e:	4680      	mov	r8, r0
 800af90:	460c      	mov	r4, r1
 800af92:	469a      	mov	sl, r3
 800af94:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af9a:	d807      	bhi.n	800afac <_printf_i+0x28>
 800af9c:	2f62      	cmp	r7, #98	@ 0x62
 800af9e:	d80a      	bhi.n	800afb6 <_printf_i+0x32>
 800afa0:	2f00      	cmp	r7, #0
 800afa2:	f000 80d1 	beq.w	800b148 <_printf_i+0x1c4>
 800afa6:	2f58      	cmp	r7, #88	@ 0x58
 800afa8:	f000 80b8 	beq.w	800b11c <_printf_i+0x198>
 800afac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800afb4:	e03a      	b.n	800b02c <_printf_i+0xa8>
 800afb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800afba:	2b15      	cmp	r3, #21
 800afbc:	d8f6      	bhi.n	800afac <_printf_i+0x28>
 800afbe:	a101      	add	r1, pc, #4	@ (adr r1, 800afc4 <_printf_i+0x40>)
 800afc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afc4:	0800b01d 	.word	0x0800b01d
 800afc8:	0800b031 	.word	0x0800b031
 800afcc:	0800afad 	.word	0x0800afad
 800afd0:	0800afad 	.word	0x0800afad
 800afd4:	0800afad 	.word	0x0800afad
 800afd8:	0800afad 	.word	0x0800afad
 800afdc:	0800b031 	.word	0x0800b031
 800afe0:	0800afad 	.word	0x0800afad
 800afe4:	0800afad 	.word	0x0800afad
 800afe8:	0800afad 	.word	0x0800afad
 800afec:	0800afad 	.word	0x0800afad
 800aff0:	0800b12f 	.word	0x0800b12f
 800aff4:	0800b05b 	.word	0x0800b05b
 800aff8:	0800b0e9 	.word	0x0800b0e9
 800affc:	0800afad 	.word	0x0800afad
 800b000:	0800afad 	.word	0x0800afad
 800b004:	0800b151 	.word	0x0800b151
 800b008:	0800afad 	.word	0x0800afad
 800b00c:	0800b05b 	.word	0x0800b05b
 800b010:	0800afad 	.word	0x0800afad
 800b014:	0800afad 	.word	0x0800afad
 800b018:	0800b0f1 	.word	0x0800b0f1
 800b01c:	6833      	ldr	r3, [r6, #0]
 800b01e:	1d1a      	adds	r2, r3, #4
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	6032      	str	r2, [r6, #0]
 800b024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b028:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b02c:	2301      	movs	r3, #1
 800b02e:	e09c      	b.n	800b16a <_printf_i+0x1e6>
 800b030:	6833      	ldr	r3, [r6, #0]
 800b032:	6820      	ldr	r0, [r4, #0]
 800b034:	1d19      	adds	r1, r3, #4
 800b036:	6031      	str	r1, [r6, #0]
 800b038:	0606      	lsls	r6, r0, #24
 800b03a:	d501      	bpl.n	800b040 <_printf_i+0xbc>
 800b03c:	681d      	ldr	r5, [r3, #0]
 800b03e:	e003      	b.n	800b048 <_printf_i+0xc4>
 800b040:	0645      	lsls	r5, r0, #25
 800b042:	d5fb      	bpl.n	800b03c <_printf_i+0xb8>
 800b044:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b048:	2d00      	cmp	r5, #0
 800b04a:	da03      	bge.n	800b054 <_printf_i+0xd0>
 800b04c:	232d      	movs	r3, #45	@ 0x2d
 800b04e:	426d      	negs	r5, r5
 800b050:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b054:	230a      	movs	r3, #10
 800b056:	4858      	ldr	r0, [pc, #352]	@ (800b1b8 <_printf_i+0x234>)
 800b058:	e011      	b.n	800b07e <_printf_i+0xfa>
 800b05a:	6821      	ldr	r1, [r4, #0]
 800b05c:	6833      	ldr	r3, [r6, #0]
 800b05e:	0608      	lsls	r0, r1, #24
 800b060:	f853 5b04 	ldr.w	r5, [r3], #4
 800b064:	d402      	bmi.n	800b06c <_printf_i+0xe8>
 800b066:	0649      	lsls	r1, r1, #25
 800b068:	bf48      	it	mi
 800b06a:	b2ad      	uxthmi	r5, r5
 800b06c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b06e:	6033      	str	r3, [r6, #0]
 800b070:	bf14      	ite	ne
 800b072:	230a      	movne	r3, #10
 800b074:	2308      	moveq	r3, #8
 800b076:	4850      	ldr	r0, [pc, #320]	@ (800b1b8 <_printf_i+0x234>)
 800b078:	2100      	movs	r1, #0
 800b07a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b07e:	6866      	ldr	r6, [r4, #4]
 800b080:	2e00      	cmp	r6, #0
 800b082:	60a6      	str	r6, [r4, #8]
 800b084:	db05      	blt.n	800b092 <_printf_i+0x10e>
 800b086:	6821      	ldr	r1, [r4, #0]
 800b088:	432e      	orrs	r6, r5
 800b08a:	f021 0104 	bic.w	r1, r1, #4
 800b08e:	6021      	str	r1, [r4, #0]
 800b090:	d04b      	beq.n	800b12a <_printf_i+0x1a6>
 800b092:	4616      	mov	r6, r2
 800b094:	fbb5 f1f3 	udiv	r1, r5, r3
 800b098:	fb03 5711 	mls	r7, r3, r1, r5
 800b09c:	5dc7      	ldrb	r7, [r0, r7]
 800b09e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b0a2:	462f      	mov	r7, r5
 800b0a4:	42bb      	cmp	r3, r7
 800b0a6:	460d      	mov	r5, r1
 800b0a8:	d9f4      	bls.n	800b094 <_printf_i+0x110>
 800b0aa:	2b08      	cmp	r3, #8
 800b0ac:	d10b      	bne.n	800b0c6 <_printf_i+0x142>
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	07df      	lsls	r7, r3, #31
 800b0b2:	d508      	bpl.n	800b0c6 <_printf_i+0x142>
 800b0b4:	6923      	ldr	r3, [r4, #16]
 800b0b6:	6861      	ldr	r1, [r4, #4]
 800b0b8:	4299      	cmp	r1, r3
 800b0ba:	bfde      	ittt	le
 800b0bc:	2330      	movle	r3, #48	@ 0x30
 800b0be:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b0c6:	1b92      	subs	r2, r2, r6
 800b0c8:	6122      	str	r2, [r4, #16]
 800b0ca:	464b      	mov	r3, r9
 800b0cc:	4621      	mov	r1, r4
 800b0ce:	4640      	mov	r0, r8
 800b0d0:	f8cd a000 	str.w	sl, [sp]
 800b0d4:	aa03      	add	r2, sp, #12
 800b0d6:	f7ff fee3 	bl	800aea0 <_printf_common>
 800b0da:	3001      	adds	r0, #1
 800b0dc:	d14a      	bne.n	800b174 <_printf_i+0x1f0>
 800b0de:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e2:	b004      	add	sp, #16
 800b0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e8:	6823      	ldr	r3, [r4, #0]
 800b0ea:	f043 0320 	orr.w	r3, r3, #32
 800b0ee:	6023      	str	r3, [r4, #0]
 800b0f0:	2778      	movs	r7, #120	@ 0x78
 800b0f2:	4832      	ldr	r0, [pc, #200]	@ (800b1bc <_printf_i+0x238>)
 800b0f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0f8:	6823      	ldr	r3, [r4, #0]
 800b0fa:	6831      	ldr	r1, [r6, #0]
 800b0fc:	061f      	lsls	r7, r3, #24
 800b0fe:	f851 5b04 	ldr.w	r5, [r1], #4
 800b102:	d402      	bmi.n	800b10a <_printf_i+0x186>
 800b104:	065f      	lsls	r7, r3, #25
 800b106:	bf48      	it	mi
 800b108:	b2ad      	uxthmi	r5, r5
 800b10a:	6031      	str	r1, [r6, #0]
 800b10c:	07d9      	lsls	r1, r3, #31
 800b10e:	bf44      	itt	mi
 800b110:	f043 0320 	orrmi.w	r3, r3, #32
 800b114:	6023      	strmi	r3, [r4, #0]
 800b116:	b11d      	cbz	r5, 800b120 <_printf_i+0x19c>
 800b118:	2310      	movs	r3, #16
 800b11a:	e7ad      	b.n	800b078 <_printf_i+0xf4>
 800b11c:	4826      	ldr	r0, [pc, #152]	@ (800b1b8 <_printf_i+0x234>)
 800b11e:	e7e9      	b.n	800b0f4 <_printf_i+0x170>
 800b120:	6823      	ldr	r3, [r4, #0]
 800b122:	f023 0320 	bic.w	r3, r3, #32
 800b126:	6023      	str	r3, [r4, #0]
 800b128:	e7f6      	b.n	800b118 <_printf_i+0x194>
 800b12a:	4616      	mov	r6, r2
 800b12c:	e7bd      	b.n	800b0aa <_printf_i+0x126>
 800b12e:	6833      	ldr	r3, [r6, #0]
 800b130:	6825      	ldr	r5, [r4, #0]
 800b132:	1d18      	adds	r0, r3, #4
 800b134:	6961      	ldr	r1, [r4, #20]
 800b136:	6030      	str	r0, [r6, #0]
 800b138:	062e      	lsls	r6, r5, #24
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	d501      	bpl.n	800b142 <_printf_i+0x1be>
 800b13e:	6019      	str	r1, [r3, #0]
 800b140:	e002      	b.n	800b148 <_printf_i+0x1c4>
 800b142:	0668      	lsls	r0, r5, #25
 800b144:	d5fb      	bpl.n	800b13e <_printf_i+0x1ba>
 800b146:	8019      	strh	r1, [r3, #0]
 800b148:	2300      	movs	r3, #0
 800b14a:	4616      	mov	r6, r2
 800b14c:	6123      	str	r3, [r4, #16]
 800b14e:	e7bc      	b.n	800b0ca <_printf_i+0x146>
 800b150:	6833      	ldr	r3, [r6, #0]
 800b152:	2100      	movs	r1, #0
 800b154:	1d1a      	adds	r2, r3, #4
 800b156:	6032      	str	r2, [r6, #0]
 800b158:	681e      	ldr	r6, [r3, #0]
 800b15a:	6862      	ldr	r2, [r4, #4]
 800b15c:	4630      	mov	r0, r6
 800b15e:	f000 f96b 	bl	800b438 <memchr>
 800b162:	b108      	cbz	r0, 800b168 <_printf_i+0x1e4>
 800b164:	1b80      	subs	r0, r0, r6
 800b166:	6060      	str	r0, [r4, #4]
 800b168:	6863      	ldr	r3, [r4, #4]
 800b16a:	6123      	str	r3, [r4, #16]
 800b16c:	2300      	movs	r3, #0
 800b16e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b172:	e7aa      	b.n	800b0ca <_printf_i+0x146>
 800b174:	4632      	mov	r2, r6
 800b176:	4649      	mov	r1, r9
 800b178:	4640      	mov	r0, r8
 800b17a:	6923      	ldr	r3, [r4, #16]
 800b17c:	47d0      	blx	sl
 800b17e:	3001      	adds	r0, #1
 800b180:	d0ad      	beq.n	800b0de <_printf_i+0x15a>
 800b182:	6823      	ldr	r3, [r4, #0]
 800b184:	079b      	lsls	r3, r3, #30
 800b186:	d413      	bmi.n	800b1b0 <_printf_i+0x22c>
 800b188:	68e0      	ldr	r0, [r4, #12]
 800b18a:	9b03      	ldr	r3, [sp, #12]
 800b18c:	4298      	cmp	r0, r3
 800b18e:	bfb8      	it	lt
 800b190:	4618      	movlt	r0, r3
 800b192:	e7a6      	b.n	800b0e2 <_printf_i+0x15e>
 800b194:	2301      	movs	r3, #1
 800b196:	4632      	mov	r2, r6
 800b198:	4649      	mov	r1, r9
 800b19a:	4640      	mov	r0, r8
 800b19c:	47d0      	blx	sl
 800b19e:	3001      	adds	r0, #1
 800b1a0:	d09d      	beq.n	800b0de <_printf_i+0x15a>
 800b1a2:	3501      	adds	r5, #1
 800b1a4:	68e3      	ldr	r3, [r4, #12]
 800b1a6:	9903      	ldr	r1, [sp, #12]
 800b1a8:	1a5b      	subs	r3, r3, r1
 800b1aa:	42ab      	cmp	r3, r5
 800b1ac:	dcf2      	bgt.n	800b194 <_printf_i+0x210>
 800b1ae:	e7eb      	b.n	800b188 <_printf_i+0x204>
 800b1b0:	2500      	movs	r5, #0
 800b1b2:	f104 0619 	add.w	r6, r4, #25
 800b1b6:	e7f5      	b.n	800b1a4 <_printf_i+0x220>
 800b1b8:	0800b563 	.word	0x0800b563
 800b1bc:	0800b574 	.word	0x0800b574

0800b1c0 <__sflush_r>:
 800b1c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c6:	0716      	lsls	r6, r2, #28
 800b1c8:	4605      	mov	r5, r0
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	d454      	bmi.n	800b278 <__sflush_r+0xb8>
 800b1ce:	684b      	ldr	r3, [r1, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	dc02      	bgt.n	800b1da <__sflush_r+0x1a>
 800b1d4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	dd48      	ble.n	800b26c <__sflush_r+0xac>
 800b1da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1dc:	2e00      	cmp	r6, #0
 800b1de:	d045      	beq.n	800b26c <__sflush_r+0xac>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b1e6:	682f      	ldr	r7, [r5, #0]
 800b1e8:	6a21      	ldr	r1, [r4, #32]
 800b1ea:	602b      	str	r3, [r5, #0]
 800b1ec:	d030      	beq.n	800b250 <__sflush_r+0x90>
 800b1ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	0759      	lsls	r1, r3, #29
 800b1f4:	d505      	bpl.n	800b202 <__sflush_r+0x42>
 800b1f6:	6863      	ldr	r3, [r4, #4]
 800b1f8:	1ad2      	subs	r2, r2, r3
 800b1fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b1fc:	b10b      	cbz	r3, 800b202 <__sflush_r+0x42>
 800b1fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b200:	1ad2      	subs	r2, r2, r3
 800b202:	2300      	movs	r3, #0
 800b204:	4628      	mov	r0, r5
 800b206:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b208:	6a21      	ldr	r1, [r4, #32]
 800b20a:	47b0      	blx	r6
 800b20c:	1c43      	adds	r3, r0, #1
 800b20e:	89a3      	ldrh	r3, [r4, #12]
 800b210:	d106      	bne.n	800b220 <__sflush_r+0x60>
 800b212:	6829      	ldr	r1, [r5, #0]
 800b214:	291d      	cmp	r1, #29
 800b216:	d82b      	bhi.n	800b270 <__sflush_r+0xb0>
 800b218:	4a28      	ldr	r2, [pc, #160]	@ (800b2bc <__sflush_r+0xfc>)
 800b21a:	40ca      	lsrs	r2, r1
 800b21c:	07d6      	lsls	r6, r2, #31
 800b21e:	d527      	bpl.n	800b270 <__sflush_r+0xb0>
 800b220:	2200      	movs	r2, #0
 800b222:	6062      	str	r2, [r4, #4]
 800b224:	6922      	ldr	r2, [r4, #16]
 800b226:	04d9      	lsls	r1, r3, #19
 800b228:	6022      	str	r2, [r4, #0]
 800b22a:	d504      	bpl.n	800b236 <__sflush_r+0x76>
 800b22c:	1c42      	adds	r2, r0, #1
 800b22e:	d101      	bne.n	800b234 <__sflush_r+0x74>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	b903      	cbnz	r3, 800b236 <__sflush_r+0x76>
 800b234:	6560      	str	r0, [r4, #84]	@ 0x54
 800b236:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b238:	602f      	str	r7, [r5, #0]
 800b23a:	b1b9      	cbz	r1, 800b26c <__sflush_r+0xac>
 800b23c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b240:	4299      	cmp	r1, r3
 800b242:	d002      	beq.n	800b24a <__sflush_r+0x8a>
 800b244:	4628      	mov	r0, r5
 800b246:	f7ff fbf5 	bl	800aa34 <_free_r>
 800b24a:	2300      	movs	r3, #0
 800b24c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b24e:	e00d      	b.n	800b26c <__sflush_r+0xac>
 800b250:	2301      	movs	r3, #1
 800b252:	4628      	mov	r0, r5
 800b254:	47b0      	blx	r6
 800b256:	4602      	mov	r2, r0
 800b258:	1c50      	adds	r0, r2, #1
 800b25a:	d1c9      	bne.n	800b1f0 <__sflush_r+0x30>
 800b25c:	682b      	ldr	r3, [r5, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d0c6      	beq.n	800b1f0 <__sflush_r+0x30>
 800b262:	2b1d      	cmp	r3, #29
 800b264:	d001      	beq.n	800b26a <__sflush_r+0xaa>
 800b266:	2b16      	cmp	r3, #22
 800b268:	d11d      	bne.n	800b2a6 <__sflush_r+0xe6>
 800b26a:	602f      	str	r7, [r5, #0]
 800b26c:	2000      	movs	r0, #0
 800b26e:	e021      	b.n	800b2b4 <__sflush_r+0xf4>
 800b270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b274:	b21b      	sxth	r3, r3
 800b276:	e01a      	b.n	800b2ae <__sflush_r+0xee>
 800b278:	690f      	ldr	r7, [r1, #16]
 800b27a:	2f00      	cmp	r7, #0
 800b27c:	d0f6      	beq.n	800b26c <__sflush_r+0xac>
 800b27e:	0793      	lsls	r3, r2, #30
 800b280:	bf18      	it	ne
 800b282:	2300      	movne	r3, #0
 800b284:	680e      	ldr	r6, [r1, #0]
 800b286:	bf08      	it	eq
 800b288:	694b      	ldreq	r3, [r1, #20]
 800b28a:	1bf6      	subs	r6, r6, r7
 800b28c:	600f      	str	r7, [r1, #0]
 800b28e:	608b      	str	r3, [r1, #8]
 800b290:	2e00      	cmp	r6, #0
 800b292:	ddeb      	ble.n	800b26c <__sflush_r+0xac>
 800b294:	4633      	mov	r3, r6
 800b296:	463a      	mov	r2, r7
 800b298:	4628      	mov	r0, r5
 800b29a:	6a21      	ldr	r1, [r4, #32]
 800b29c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b2a0:	47e0      	blx	ip
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	dc07      	bgt.n	800b2b6 <__sflush_r+0xf6>
 800b2a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b2:	81a3      	strh	r3, [r4, #12]
 800b2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2b6:	4407      	add	r7, r0
 800b2b8:	1a36      	subs	r6, r6, r0
 800b2ba:	e7e9      	b.n	800b290 <__sflush_r+0xd0>
 800b2bc:	20400001 	.word	0x20400001

0800b2c0 <_fflush_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	690b      	ldr	r3, [r1, #16]
 800b2c4:	4605      	mov	r5, r0
 800b2c6:	460c      	mov	r4, r1
 800b2c8:	b913      	cbnz	r3, 800b2d0 <_fflush_r+0x10>
 800b2ca:	2500      	movs	r5, #0
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	bd38      	pop	{r3, r4, r5, pc}
 800b2d0:	b118      	cbz	r0, 800b2da <_fflush_r+0x1a>
 800b2d2:	6a03      	ldr	r3, [r0, #32]
 800b2d4:	b90b      	cbnz	r3, 800b2da <_fflush_r+0x1a>
 800b2d6:	f7ff f9b3 	bl	800a640 <__sinit>
 800b2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d0f3      	beq.n	800b2ca <_fflush_r+0xa>
 800b2e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b2e4:	07d0      	lsls	r0, r2, #31
 800b2e6:	d404      	bmi.n	800b2f2 <_fflush_r+0x32>
 800b2e8:	0599      	lsls	r1, r3, #22
 800b2ea:	d402      	bmi.n	800b2f2 <_fflush_r+0x32>
 800b2ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2ee:	f7ff fb9e 	bl	800aa2e <__retarget_lock_acquire_recursive>
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	f7ff ff63 	bl	800b1c0 <__sflush_r>
 800b2fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	07da      	lsls	r2, r3, #31
 800b300:	d4e4      	bmi.n	800b2cc <_fflush_r+0xc>
 800b302:	89a3      	ldrh	r3, [r4, #12]
 800b304:	059b      	lsls	r3, r3, #22
 800b306:	d4e1      	bmi.n	800b2cc <_fflush_r+0xc>
 800b308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b30a:	f7ff fb91 	bl	800aa30 <__retarget_lock_release_recursive>
 800b30e:	e7dd      	b.n	800b2cc <_fflush_r+0xc>

0800b310 <__swhatbuf_r>:
 800b310:	b570      	push	{r4, r5, r6, lr}
 800b312:	460c      	mov	r4, r1
 800b314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b318:	4615      	mov	r5, r2
 800b31a:	2900      	cmp	r1, #0
 800b31c:	461e      	mov	r6, r3
 800b31e:	b096      	sub	sp, #88	@ 0x58
 800b320:	da0c      	bge.n	800b33c <__swhatbuf_r+0x2c>
 800b322:	89a3      	ldrh	r3, [r4, #12]
 800b324:	2100      	movs	r1, #0
 800b326:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b32a:	bf14      	ite	ne
 800b32c:	2340      	movne	r3, #64	@ 0x40
 800b32e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b332:	2000      	movs	r0, #0
 800b334:	6031      	str	r1, [r6, #0]
 800b336:	602b      	str	r3, [r5, #0]
 800b338:	b016      	add	sp, #88	@ 0x58
 800b33a:	bd70      	pop	{r4, r5, r6, pc}
 800b33c:	466a      	mov	r2, sp
 800b33e:	f000 f849 	bl	800b3d4 <_fstat_r>
 800b342:	2800      	cmp	r0, #0
 800b344:	dbed      	blt.n	800b322 <__swhatbuf_r+0x12>
 800b346:	9901      	ldr	r1, [sp, #4]
 800b348:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b34c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b350:	4259      	negs	r1, r3
 800b352:	4159      	adcs	r1, r3
 800b354:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b358:	e7eb      	b.n	800b332 <__swhatbuf_r+0x22>

0800b35a <__smakebuf_r>:
 800b35a:	898b      	ldrh	r3, [r1, #12]
 800b35c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b35e:	079d      	lsls	r5, r3, #30
 800b360:	4606      	mov	r6, r0
 800b362:	460c      	mov	r4, r1
 800b364:	d507      	bpl.n	800b376 <__smakebuf_r+0x1c>
 800b366:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b36a:	6023      	str	r3, [r4, #0]
 800b36c:	6123      	str	r3, [r4, #16]
 800b36e:	2301      	movs	r3, #1
 800b370:	6163      	str	r3, [r4, #20]
 800b372:	b003      	add	sp, #12
 800b374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b376:	466a      	mov	r2, sp
 800b378:	ab01      	add	r3, sp, #4
 800b37a:	f7ff ffc9 	bl	800b310 <__swhatbuf_r>
 800b37e:	9f00      	ldr	r7, [sp, #0]
 800b380:	4605      	mov	r5, r0
 800b382:	4639      	mov	r1, r7
 800b384:	4630      	mov	r0, r6
 800b386:	f7ff fbbf 	bl	800ab08 <_malloc_r>
 800b38a:	b948      	cbnz	r0, 800b3a0 <__smakebuf_r+0x46>
 800b38c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b390:	059a      	lsls	r2, r3, #22
 800b392:	d4ee      	bmi.n	800b372 <__smakebuf_r+0x18>
 800b394:	f023 0303 	bic.w	r3, r3, #3
 800b398:	f043 0302 	orr.w	r3, r3, #2
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	e7e2      	b.n	800b366 <__smakebuf_r+0xc>
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b3a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3aa:	81a3      	strh	r3, [r4, #12]
 800b3ac:	9b01      	ldr	r3, [sp, #4]
 800b3ae:	6020      	str	r0, [r4, #0]
 800b3b0:	b15b      	cbz	r3, 800b3ca <__smakebuf_r+0x70>
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3b8:	f000 f81e 	bl	800b3f8 <_isatty_r>
 800b3bc:	b128      	cbz	r0, 800b3ca <__smakebuf_r+0x70>
 800b3be:	89a3      	ldrh	r3, [r4, #12]
 800b3c0:	f023 0303 	bic.w	r3, r3, #3
 800b3c4:	f043 0301 	orr.w	r3, r3, #1
 800b3c8:	81a3      	strh	r3, [r4, #12]
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	431d      	orrs	r5, r3
 800b3ce:	81a5      	strh	r5, [r4, #12]
 800b3d0:	e7cf      	b.n	800b372 <__smakebuf_r+0x18>
	...

0800b3d4 <_fstat_r>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	4d06      	ldr	r5, [pc, #24]	@ (800b3f4 <_fstat_r+0x20>)
 800b3da:	4604      	mov	r4, r0
 800b3dc:	4608      	mov	r0, r1
 800b3de:	4611      	mov	r1, r2
 800b3e0:	602b      	str	r3, [r5, #0]
 800b3e2:	f7f5 f8bf 	bl	8000564 <_fstat>
 800b3e6:	1c43      	adds	r3, r0, #1
 800b3e8:	d102      	bne.n	800b3f0 <_fstat_r+0x1c>
 800b3ea:	682b      	ldr	r3, [r5, #0]
 800b3ec:	b103      	cbz	r3, 800b3f0 <_fstat_r+0x1c>
 800b3ee:	6023      	str	r3, [r4, #0]
 800b3f0:	bd38      	pop	{r3, r4, r5, pc}
 800b3f2:	bf00      	nop
 800b3f4:	20001708 	.word	0x20001708

0800b3f8 <_isatty_r>:
 800b3f8:	b538      	push	{r3, r4, r5, lr}
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	4d05      	ldr	r5, [pc, #20]	@ (800b414 <_isatty_r+0x1c>)
 800b3fe:	4604      	mov	r4, r0
 800b400:	4608      	mov	r0, r1
 800b402:	602b      	str	r3, [r5, #0]
 800b404:	f7f5 f8bd 	bl	8000582 <_isatty>
 800b408:	1c43      	adds	r3, r0, #1
 800b40a:	d102      	bne.n	800b412 <_isatty_r+0x1a>
 800b40c:	682b      	ldr	r3, [r5, #0]
 800b40e:	b103      	cbz	r3, 800b412 <_isatty_r+0x1a>
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	bd38      	pop	{r3, r4, r5, pc}
 800b414:	20001708 	.word	0x20001708

0800b418 <_sbrk_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	2300      	movs	r3, #0
 800b41c:	4d05      	ldr	r5, [pc, #20]	@ (800b434 <_sbrk_r+0x1c>)
 800b41e:	4604      	mov	r4, r0
 800b420:	4608      	mov	r0, r1
 800b422:	602b      	str	r3, [r5, #0]
 800b424:	f7f5 f8c4 	bl	80005b0 <_sbrk>
 800b428:	1c43      	adds	r3, r0, #1
 800b42a:	d102      	bne.n	800b432 <_sbrk_r+0x1a>
 800b42c:	682b      	ldr	r3, [r5, #0]
 800b42e:	b103      	cbz	r3, 800b432 <_sbrk_r+0x1a>
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	bd38      	pop	{r3, r4, r5, pc}
 800b434:	20001708 	.word	0x20001708

0800b438 <memchr>:
 800b438:	4603      	mov	r3, r0
 800b43a:	b510      	push	{r4, lr}
 800b43c:	b2c9      	uxtb	r1, r1
 800b43e:	4402      	add	r2, r0
 800b440:	4293      	cmp	r3, r2
 800b442:	4618      	mov	r0, r3
 800b444:	d101      	bne.n	800b44a <memchr+0x12>
 800b446:	2000      	movs	r0, #0
 800b448:	e003      	b.n	800b452 <memchr+0x1a>
 800b44a:	7804      	ldrb	r4, [r0, #0]
 800b44c:	3301      	adds	r3, #1
 800b44e:	428c      	cmp	r4, r1
 800b450:	d1f6      	bne.n	800b440 <memchr+0x8>
 800b452:	bd10      	pop	{r4, pc}

0800b454 <_init>:
 800b454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b456:	bf00      	nop
 800b458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b45a:	bc08      	pop	{r3}
 800b45c:	469e      	mov	lr, r3
 800b45e:	4770      	bx	lr

0800b460 <_fini>:
 800b460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b462:	bf00      	nop
 800b464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b466:	bc08      	pop	{r3}
 800b468:	469e      	mov	lr, r3
 800b46a:	4770      	bx	lr
