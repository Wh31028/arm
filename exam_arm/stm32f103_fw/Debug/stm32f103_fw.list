
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080032f0  080032f0  000042f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800335c  0800335c  00005184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800335c  0800335c  0000435c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003364  08003364  00005184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003364  08003364  00004364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003368  08003368  00004368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800336c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de0  20000184  080034f0  00005184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f64  080034f0  00005f64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee5b  00000000  00000000  000051ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003604  00000000  00000000  00014008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  00017610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c1f  00000000  00000000  00018060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019feb  00000000  00000000  00018c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e83  00000000  00000000  00032c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000849f5  00000000  00000000  00047aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc4e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000167c  00000000  00000000  000cc528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00005605  00000000  00000000  000cdba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  000d31a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	080032d8 	.word	0x080032d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	080032d8 	.word	0x080032d8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <apInit>:


void apInit(void)
{

}
 800015c:	4770      	bx	lr
	...

08000160 <apMain>:

void apMain(void)
{
 8000160:	b508      	push	{r3, lr}
	{
		ledToggle(_DEF_LED1);
		delay(500);


		CDC_Transmit_FS("test\n", 6);
 8000162:	4c06      	ldr	r4, [pc, #24]	@ (800017c <apMain+0x1c>)
		ledToggle(_DEF_LED1);
 8000164:	2000      	movs	r0, #0
 8000166:	f000 f91d 	bl	80003a4 <ledToggle>
		delay(500);
 800016a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800016e:	f000 f807 	bl	8000180 <delay>
		CDC_Transmit_FS("test\n", 6);
 8000172:	2106      	movs	r1, #6
 8000174:	4620      	mov	r0, r4
 8000176:	f002 fedd 	bl	8002f34 <CDC_Transmit_FS>
	while(1)
 800017a:	e7f3      	b.n	8000164 <apMain+0x4>
 800017c:	080032f0 	.word	0x080032f0

08000180 <delay>:

}

void delay(uint32_t ms)
{
	HAL_Delay(ms);
 8000180:	f000 b96a 	b.w	8000458 <HAL_Delay>

08000184 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 8000184:	b530      	push	{r4, r5, lr}
 8000186:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000188:	2214      	movs	r2, #20
 800018a:	2100      	movs	r1, #0
 800018c:	a80c      	add	r0, sp, #48	@ 0x30
 800018e:	f003 f876 	bl	800327e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000194:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000196:	2100      	movs	r1, #0
 8000198:	eb0d 0002 	add.w	r0, sp, r2
 800019c:	f003 f86f 	bl	800327e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a0:	462a      	mov	r2, r5
 80001a2:	2100      	movs	r1, #0
 80001a4:	a801      	add	r0, sp, #4
 80001a6:	f003 f86a 	bl	800327e <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001aa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001b0:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b2:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ba:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001be:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c0:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f001 f944 	bl	8001450 <HAL_RCC_OscConfig>
 80001c8:	b108      	cbz	r0, 80001ce <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001ca:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001cc:	e7fe      	b.n	80001cc <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d0:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d8:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001da:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001de:	4621      	mov	r1, r4
 80001e0:	a805      	add	r0, sp, #20
 80001e2:	f001 faf7 	bl	80017d4 <HAL_RCC_ClockConfig>
 80001e6:	b108      	cbz	r0, 80001ec <SystemClock_Config+0x68>
 80001e8:	b672      	cpsid	i
  while (1)
 80001ea:	e7fe      	b.n	80001ea <SystemClock_Config+0x66>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001ec:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001ee:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001f0:	9501      	str	r5, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001f2:	f001 fb8b 	bl	800190c <HAL_RCCEx_PeriphCLKConfig>
 80001f6:	b108      	cbz	r0, 80001fc <SystemClock_Config+0x78>
 80001f8:	b672      	cpsid	i
  while (1)
 80001fa:	e7fe      	b.n	80001fa <SystemClock_Config+0x76>
}
 80001fc:	b015      	add	sp, #84	@ 0x54
 80001fe:	bd30      	pop	{r4, r5, pc}

08000200 <bspInit>:
{
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	b086      	sub	sp, #24
  HAL_Init();
 8000204:	f000 f904 	bl	8000410 <HAL_Init>
  SystemClock_Config();
 8000208:	f7ff ffbc 	bl	8000184 <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800020c:	4b1b      	ldr	r3, [pc, #108]	@ (800027c <bspInit+0x7c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800020e:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000212:	699a      	ldr	r2, [r3, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000214:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000216:	f042 0220 	orr.w	r2, r2, #32
 800021a:	619a      	str	r2, [r3, #24]
 800021c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021e:	4c18      	ldr	r4, [pc, #96]	@ (8000280 <bspInit+0x80>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000220:	f002 0220 	and.w	r2, r2, #32
 8000224:	9200      	str	r2, [sp, #0]
 8000226:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000228:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800022a:	4620      	mov	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022c:	f042 0204 	orr.w	r2, r2, #4
 8000230:	619a      	str	r2, [r3, #24]
 8000232:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000234:	a902      	add	r1, sp, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	f003 0304 	and.w	r3, r3, #4
 800023a:	9301      	str	r3, [sp, #4]
 800023c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800023e:	2311      	movs	r3, #17
 8000240:	e9cd 6302 	strd	r6, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000244:	2302      	movs	r3, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000248:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800024a:	f000 f97b 	bl	8000544 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 800024e:	462a      	mov	r2, r5
 8000250:	4631      	mov	r1, r6
 8000252:	4620      	mov	r0, r4
 8000254:	f000 fa4a 	bl	80006ec <HAL_GPIO_WritePin>
	HAL_Delay(ms);
 8000258:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800025c:	f000 f8fc 	bl	8000458 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 8000260:	2201      	movs	r2, #1
 8000262:	4631      	mov	r1, r6
 8000264:	4620      	mov	r0, r4
 8000266:	f000 fa41 	bl	80006ec <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800026a:	4620      	mov	r0, r4
 800026c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800026e:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000270:	f000 f968 	bl	8000544 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000274:	f002 fe10 	bl	8002e98 <MX_USB_DEVICE_Init>
}
 8000278:	b006      	add	sp, #24
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	40021000 	.word	0x40021000
 8000280:	40010800 	.word	0x40010800

08000284 <Error_Handler>:
 8000284:	b672      	cpsid	i
  while (1)
 8000286:	e7fe      	b.n	8000286 <Error_Handler+0x2>

08000288 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000288:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <HAL_MspInit+0x3c>)
{
 800028a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800028c:	699a      	ldr	r2, [r3, #24]
 800028e:	f042 0201 	orr.w	r2, r2, #1
 8000292:	619a      	str	r2, [r3, #24]
 8000294:	699a      	ldr	r2, [r3, #24]
 8000296:	f002 0201 	and.w	r2, r2, #1
 800029a:	9200      	str	r2, [sp, #0]
 800029c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800029e:	69da      	ldr	r2, [r3, #28]
 80002a0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80002a4:	61da      	str	r2, [r3, #28]
 80002a6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002a8:	4a07      	ldr	r2, [pc, #28]	@ (80002c8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80002aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002ae:	9301      	str	r3, [sp, #4]
 80002b0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002b2:	6853      	ldr	r3, [r2, #4]
 80002b4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80002b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002be:	b002      	add	sp, #8
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010000 	.word	0x40010000

080002cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002cc:	e7fe      	b.n	80002cc <NMI_Handler>

080002ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ce:	e7fe      	b.n	80002ce <HardFault_Handler>

080002d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <MemManage_Handler>

080002d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <BusFault_Handler>

080002d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <UsageFault_Handler>

080002d6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002d6:	4770      	bx	lr

080002d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80002d8:	4770      	bx	lr

080002da <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002dc:	f000 b8aa 	b.w	8000434 <HAL_IncTick>

080002e0 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80002e0:	4801      	ldr	r0, [pc, #4]	@ (80002e8 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80002e2:	f000 baa1 	b.w	8000828 <HAL_PCD_IRQHandler>
 80002e6:	bf00      	nop
 80002e8:	20000c8c 	.word	0x20000c8c

080002ec <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002ec:	4770      	bx	lr
	...

080002f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002f0:	f7ff fffc 	bl	80002ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f4:	480b      	ldr	r0, [pc, #44]	@ (8000324 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80002f6:	490c      	ldr	r1, [pc, #48]	@ (8000328 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80002f8:	4a0c      	ldr	r2, [pc, #48]	@ (800032c <LoopFillZerobss+0x16>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002fc:	e002      	b.n	8000304 <LoopCopyDataInit>

080002fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000302:	3304      	adds	r3, #4

08000304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000308:	d3f9      	bcc.n	80002fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030a:	4a09      	ldr	r2, [pc, #36]	@ (8000330 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800030c:	4c09      	ldr	r4, [pc, #36]	@ (8000334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000310:	e001      	b.n	8000316 <LoopFillZerobss>

08000312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000314:	3204      	adds	r2, #4

08000316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000318:	d3fb      	bcc.n	8000312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800031a:	f002 ffb9 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031e:	f002 ffa5 	bl	800326c <main>
  bx lr
 8000322:	4770      	bx	lr
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800032c:	0800336c 	.word	0x0800336c
  ldr r2, =_sbss
 8000330:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000334:	20000f64 	.word	0x20000f64

08000338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC1_2_IRQHandler>
	...

0800033c <ledOff.part.0>:
}
void ledOff(uint8_t ch)
{
	if(ch>=LED_MAX_CH) return;

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800033c:	4b02      	ldr	r3, [pc, #8]	@ (8000348 <ledOff.part.0+0xc>)
 800033e:	79da      	ldrb	r2, [r3, #7]
 8000340:	8899      	ldrh	r1, [r3, #4]
 8000342:	6818      	ldr	r0, [r3, #0]
 8000344:	f000 b9d2 	b.w	80006ec <HAL_GPIO_WritePin>
 8000348:	20000004 	.word	0x20000004

0800034c <ledInit>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034c:	2300      	movs	r3, #0
{
 800034e:	b510      	push	{r4, lr}
 8000350:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	9304      	str	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000354:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000358:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800035c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	2401      	movs	r4, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000360:	f042 0220 	orr.w	r2, r2, #32
 8000364:	619a      	str	r2, [r3, #24]
 8000366:	699a      	ldr	r2, [r3, #24]
  	HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000368:	a902      	add	r1, sp, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800036a:	f002 0220 	and.w	r2, r2, #32
 800036e:	9200      	str	r2, [sp, #0]
 8000370:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	699a      	ldr	r2, [r3, #24]
 8000374:	f042 0204 	orr.w	r2, r2, #4
 8000378:	619a      	str	r2, [r3, #24]
 800037a:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037c:	9403      	str	r4, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037e:	f003 0304 	and.w	r3, r3, #4
 8000382:	9301      	str	r3, [sp, #4]
 8000384:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000386:	2302      	movs	r3, #2
 8000388:	9305      	str	r3, [sp, #20]
  	GPIO_InitStruct.Pin = led_tbl[i].pin;
 800038a:	4b05      	ldr	r3, [pc, #20]	@ (80003a0 <ledInit+0x54>)
 800038c:	889a      	ldrh	r2, [r3, #4]
  	HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800038e:	6818      	ldr	r0, [r3, #0]
  	GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000390:	9202      	str	r2, [sp, #8]
  	HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000392:	f000 f8d7 	bl	8000544 <HAL_GPIO_Init>
	if(ch>=LED_MAX_CH) return;
 8000396:	f7ff ffd1 	bl	800033c <ledOff.part.0>
}
 800039a:	4620      	mov	r0, r4
 800039c:	b006      	add	sp, #24
 800039e:	bd10      	pop	{r4, pc}
 80003a0:	20000004 	.word	0x20000004

080003a4 <ledToggle>:
}
void ledToggle(uint8_t ch)
{
	if(ch>=LED_MAX_CH) return;
 80003a4:	b920      	cbnz	r0, 80003b0 <ledToggle+0xc>

	HAL_GPIO_TogglePin(led_tbl[ch].port,led_tbl[ch].pin);
 80003a6:	4b03      	ldr	r3, [pc, #12]	@ (80003b4 <ledToggle+0x10>)
 80003a8:	8899      	ldrh	r1, [r3, #4]
 80003aa:	6818      	ldr	r0, [r3, #0]
 80003ac:	f000 b9a3 	b.w	80006f6 <HAL_GPIO_TogglePin>
}
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	20000004 	.word	0x20000004

080003b8 <hwInit>:




void hwInit(void)
{
 80003b8:	b508      	push	{r3, lr}
	bspInit();
 80003ba:	f7ff ff21 	bl	8000200 <bspInit>

	ledInit();

}
 80003be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ledInit();
 80003c2:	f7ff bfc3 	b.w	800034c <ledInit>
	...

080003c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <HAL_InitTick+0x3c>)
{
 80003cc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003ce:	781a      	ldrb	r2, [r3, #0]
 80003d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80003d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000408 <HAL_InitTick+0x40>)
 80003da:	6810      	ldr	r0, [r2, #0]
 80003dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80003e0:	f000 f89c 	bl	800051c <HAL_SYSTICK_Config>
 80003e4:	4604      	mov	r4, r0
 80003e6:	b958      	cbnz	r0, 8000400 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003e8:	2d0f      	cmp	r5, #15
 80003ea:	d809      	bhi.n	8000400 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003ec:	4602      	mov	r2, r0
 80003ee:	4629      	mov	r1, r5
 80003f0:	f04f 30ff 	mov.w	r0, #4294967295
 80003f4:	f000 f854 	bl	80004a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003f8:	4620      	mov	r0, r4
 80003fa:	4b04      	ldr	r3, [pc, #16]	@ (800040c <HAL_InitTick+0x44>)
 80003fc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80003fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000400:	2001      	movs	r0, #1
 8000402:	e7fc      	b.n	80003fe <HAL_InitTick+0x36>
 8000404:	2000000c 	.word	0x2000000c
 8000408:	20000000 	.word	0x20000000
 800040c:	20000010 	.word	0x20000010

08000410 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000410:	4a07      	ldr	r2, [pc, #28]	@ (8000430 <HAL_Init+0x20>)
{
 8000412:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000414:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000416:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000418:	f043 0310 	orr.w	r3, r3, #16
 800041c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800041e:	f000 f82d 	bl	800047c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000422:	200f      	movs	r0, #15
 8000424:	f7ff ffd0 	bl	80003c8 <HAL_InitTick>
  HAL_MspInit();
 8000428:	f7ff ff2e 	bl	8000288 <HAL_MspInit>
}
 800042c:	2000      	movs	r0, #0
 800042e:	bd08      	pop	{r3, pc}
 8000430:	40022000 	.word	0x40022000

08000434 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000434:	4a03      	ldr	r2, [pc, #12]	@ (8000444 <HAL_IncTick+0x10>)
 8000436:	4b04      	ldr	r3, [pc, #16]	@ (8000448 <HAL_IncTick+0x14>)
 8000438:	6811      	ldr	r1, [r2, #0]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	440b      	add	r3, r1
 800043e:	6013      	str	r3, [r2, #0]
}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	200001a0 	.word	0x200001a0
 8000448:	2000000c 	.word	0x2000000c

0800044c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800044c:	4b01      	ldr	r3, [pc, #4]	@ (8000454 <HAL_GetTick+0x8>)
 800044e:	6818      	ldr	r0, [r3, #0]
}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	200001a0 	.word	0x200001a0

08000458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000458:	b538      	push	{r3, r4, r5, lr}
 800045a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800045c:	f7ff fff6 	bl	800044c <HAL_GetTick>
 8000460:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000462:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000464:	bf1e      	ittt	ne
 8000466:	4b04      	ldrne	r3, [pc, #16]	@ (8000478 <HAL_Delay+0x20>)
 8000468:	781b      	ldrbne	r3, [r3, #0]
 800046a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800046c:	f7ff ffee 	bl	800044c <HAL_GetTick>
 8000470:	1b43      	subs	r3, r0, r5
 8000472:	42a3      	cmp	r3, r4
 8000474:	d3fa      	bcc.n	800046c <HAL_Delay+0x14>
  {
  }
}
 8000476:	bd38      	pop	{r3, r4, r5, pc}
 8000478:	2000000c 	.word	0x2000000c

0800047c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800047c:	4907      	ldr	r1, [pc, #28]	@ (800049c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800047e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000480:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000482:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000486:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800048a:	0412      	lsls	r2, r2, #16
 800048c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800048e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000490:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000498:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800049a:	4770      	bx	lr
 800049c:	e000ed00 	.word	0xe000ed00

080004a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004a0:	4b15      	ldr	r3, [pc, #84]	@ (80004f8 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	68dc      	ldr	r4, [r3, #12]
 80004a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	bf28      	it	cs
 80004b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004b8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004bc:	bf94      	ite	ls
 80004be:	2400      	movls	r4, #0
 80004c0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004c2:	fa05 f303 	lsl.w	r3, r5, r3
 80004c6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004ca:	40a5      	lsls	r5, r4
 80004cc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004d0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80004d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004d4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d8:	bfac      	ite	ge
 80004da:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004de:	4a07      	ldrlt	r2, [pc, #28]	@ (80004fc <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	bfab      	itete	ge
 80004e8:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ec:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f0:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80004f6:	bd30      	pop	{r4, r5, pc}
 80004f8:	e000ed00 	.word	0xe000ed00
 80004fc:	e000ed14 	.word	0xe000ed14

08000500 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000500:	2800      	cmp	r0, #0
 8000502:	db07      	blt.n	8000514 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000504:	2301      	movs	r3, #1
 8000506:	0941      	lsrs	r1, r0, #5
 8000508:	4a03      	ldr	r2, [pc, #12]	@ (8000518 <HAL_NVIC_EnableIRQ+0x18>)
 800050a:	f000 001f 	and.w	r0, r0, #31
 800050e:	4083      	lsls	r3, r0
 8000510:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	e000e100 	.word	0xe000e100

0800051c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800051c:	3801      	subs	r0, #1
 800051e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000522:	d20b      	bcs.n	800053c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000524:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000528:	21f0      	movs	r1, #240	@ 0xf0
 800052a:	4a05      	ldr	r2, [pc, #20]	@ (8000540 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800052c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000532:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000534:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000536:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000538:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800053a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800053c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800053e:	4770      	bx	lr
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000548:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800054a:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 800054e:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000550:	f8df c184 	ldr.w	ip, [pc, #388]	@ 80006d8 <HAL_GPIO_Init+0x194>
 8000554:	4b61      	ldr	r3, [pc, #388]	@ (80006dc <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000556:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800055a:	680a      	ldr	r2, [r1, #0]
 800055c:	fa32 f506 	lsrs.w	r5, r2, r6
 8000560:	d102      	bne.n	8000568 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8000562:	b003      	add	sp, #12
 8000564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000568:	2501      	movs	r5, #1
 800056a:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800056e:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8000572:	ea37 0202 	bics.w	r2, r7, r2
 8000576:	d176      	bne.n	8000666 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8000578:	684a      	ldr	r2, [r1, #4]
 800057a:	2a03      	cmp	r2, #3
 800057c:	d807      	bhi.n	800058e <HAL_GPIO_Init+0x4a>
 800057e:	3a01      	subs	r2, #1
 8000580:	2a02      	cmp	r2, #2
 8000582:	f200 8083 	bhi.w	800068c <HAL_GPIO_Init+0x148>
 8000586:	e8df f002 	tbb	[pc, r2]
 800058a:	9691      	.short	0x9691
 800058c:	9c          	.byte	0x9c
 800058d:	00          	.byte	0x00
 800058e:	2a12      	cmp	r2, #18
 8000590:	f000 8094 	beq.w	80006bc <HAL_GPIO_Init+0x178>
 8000594:	d869      	bhi.n	800066a <HAL_GPIO_Init+0x126>
 8000596:	2a11      	cmp	r2, #17
 8000598:	f000 808a 	beq.w	80006b0 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800059c:	2dff      	cmp	r5, #255	@ 0xff
 800059e:	bf94      	ite	ls
 80005a0:	4681      	movls	r9, r0
 80005a2:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80005a4:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005a8:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80005ac:	bf88      	it	hi
 80005ae:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005b0:	fa0e fa02 	lsl.w	sl, lr, r2
 80005b4:	ea27 070a 	bic.w	r7, r7, sl
 80005b8:	fa04 f202 	lsl.w	r2, r4, r2
 80005bc:	4317      	orrs	r7, r2
 80005be:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005c2:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80005c6:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 80005ca:	d04c      	beq.n	8000666 <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005cc:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80005d0:	f026 0703 	bic.w	r7, r6, #3
 80005d4:	f042 0201 	orr.w	r2, r2, #1
 80005d8:	f8cc 2018 	str.w	r2, [ip, #24]
 80005dc:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80005e0:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80005e4:	f002 0201 	and.w	r2, r2, #1
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005ee:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005f2:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005f4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80005f8:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005fa:	fa0e fb0a 	lsl.w	fp, lr, sl
 80005fe:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000602:	4a37      	ldr	r2, [pc, #220]	@ (80006e0 <HAL_GPIO_Init+0x19c>)
 8000604:	4290      	cmp	r0, r2
 8000606:	d060      	beq.n	80006ca <HAL_GPIO_Init+0x186>
 8000608:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800060c:	4290      	cmp	r0, r2
 800060e:	d05e      	beq.n	80006ce <HAL_GPIO_Init+0x18a>
 8000610:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000614:	4290      	cmp	r0, r2
 8000616:	d05c      	beq.n	80006d2 <HAL_GPIO_Init+0x18e>
 8000618:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800061c:	4290      	cmp	r0, r2
 800061e:	bf14      	ite	ne
 8000620:	2204      	movne	r2, #4
 8000622:	2203      	moveq	r2, #3
 8000624:	fa02 f20a 	lsl.w	r2, r2, sl
 8000628:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 800062c:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800062e:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000630:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000634:	bf14      	ite	ne
 8000636:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000638:	43aa      	biceq	r2, r5
 800063a:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800063c:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800063e:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000642:	bf14      	ite	ne
 8000644:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000646:	43aa      	biceq	r2, r5
 8000648:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800064a:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800064c:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000650:	bf14      	ite	ne
 8000652:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000654:	43aa      	biceq	r2, r5
 8000656:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8000658:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800065a:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800065e:	bf14      	ite	ne
 8000660:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000662:	43aa      	biceq	r2, r5
 8000664:	601a      	str	r2, [r3, #0]
	position++;
 8000666:	3601      	adds	r6, #1
 8000668:	e777      	b.n	800055a <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 800066a:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 80006e4 <HAL_GPIO_Init+0x1a0>
 800066e:	454a      	cmp	r2, r9
 8000670:	d00c      	beq.n	800068c <HAL_GPIO_Init+0x148>
 8000672:	d814      	bhi.n	800069e <HAL_GPIO_Init+0x15a>
 8000674:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8000678:	454a      	cmp	r2, r9
 800067a:	d007      	beq.n	800068c <HAL_GPIO_Init+0x148>
 800067c:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 8000680:	454a      	cmp	r2, r9
 8000682:	d003      	beq.n	800068c <HAL_GPIO_Init+0x148>
 8000684:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8000688:	454a      	cmp	r2, r9
 800068a:	d187      	bne.n	800059c <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800068c:	688a      	ldr	r2, [r1, #8]
 800068e:	b1d2      	cbz	r2, 80006c6 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000690:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000692:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8000696:	bf0c      	ite	eq
 8000698:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 800069a:	6147      	strne	r7, [r0, #20]
 800069c:	e77e      	b.n	800059c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800069e:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 80006e8 <HAL_GPIO_Init+0x1a4>
 80006a2:	454a      	cmp	r2, r9
 80006a4:	d0f2      	beq.n	800068c <HAL_GPIO_Init+0x148>
 80006a6:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 80006aa:	e7ed      	b.n	8000688 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80006ac:	68cc      	ldr	r4, [r1, #12]
          break;
 80006ae:	e775      	b.n	800059c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80006b0:	68cc      	ldr	r4, [r1, #12]
 80006b2:	3404      	adds	r4, #4
          break;
 80006b4:	e772      	b.n	800059c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006b6:	68cc      	ldr	r4, [r1, #12]
 80006b8:	3408      	adds	r4, #8
          break;
 80006ba:	e76f      	b.n	800059c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006bc:	68cc      	ldr	r4, [r1, #12]
 80006be:	340c      	adds	r4, #12
          break;
 80006c0:	e76c      	b.n	800059c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80006c2:	2400      	movs	r4, #0
 80006c4:	e76a      	b.n	800059c <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006c6:	2404      	movs	r4, #4
 80006c8:	e768      	b.n	800059c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80006ca:	2200      	movs	r2, #0
 80006cc:	e7aa      	b.n	8000624 <HAL_GPIO_Init+0xe0>
 80006ce:	2201      	movs	r2, #1
 80006d0:	e7a8      	b.n	8000624 <HAL_GPIO_Init+0xe0>
 80006d2:	2202      	movs	r2, #2
 80006d4:	e7a6      	b.n	8000624 <HAL_GPIO_Init+0xe0>
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010400 	.word	0x40010400
 80006e0:	40010800 	.word	0x40010800
 80006e4:	10220000 	.word	0x10220000
 80006e8:	10310000 	.word	0x10310000

080006ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006ec:	b10a      	cbz	r2, 80006f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ee:	6101      	str	r1, [r0, #16]
  }
}
 80006f0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006f2:	0409      	lsls	r1, r1, #16
 80006f4:	e7fb      	b.n	80006ee <HAL_GPIO_WritePin+0x2>

080006f6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80006f6:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80006f8:	ea01 0203 	and.w	r2, r1, r3
 80006fc:	ea21 0103 	bic.w	r1, r1, r3
 8000700:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000704:	6101      	str	r1, [r0, #16]
}
 8000706:	4770      	bx	lr

08000708 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800070a:	4604      	mov	r4, r0
 800070c:	b1e0      	cbz	r0, 8000748 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800070e:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8000712:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000716:	b91b      	cbnz	r3, 8000720 <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000718:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800071c:	f002 fc9e 	bl	800305c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000720:	2303      	movs	r3, #3
 8000722:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000726:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000728:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 800072a:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 800072c:	f855 0b04 	ldr.w	r0, [r5], #4
 8000730:	f001 f976 	bl	8001a20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000734:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000738:	6820      	ldr	r0, [r4, #0]
 800073a:	f001 f961 	bl	8001a00 <USB_CoreInit>
 800073e:	4601      	mov	r1, r0
 8000740:	b128      	cbz	r0, 800074e <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000742:	2302      	movs	r3, #2
 8000744:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8000748:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800074a:	4628      	mov	r0, r5
 800074c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800074e:	6820      	ldr	r0, [r4, #0]
 8000750:	f001 f970 	bl	8001a34 <USB_SetCurrentMode>
 8000754:	2800      	cmp	r0, #0
 8000756:	d1f4      	bne.n	8000742 <HAL_PCD_Init+0x3a>
 8000758:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 800075a:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800075c:	7926      	ldrb	r6, [r4, #4]
 800075e:	f104 0310 	add.w	r3, r4, #16
 8000762:	b2c1      	uxtb	r1, r0
 8000764:	428e      	cmp	r6, r1
 8000766:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800076a:	d818      	bhi.n	800079e <HAL_PCD_Init+0x96>
 800076c:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 800076e:	460a      	mov	r2, r1
 8000770:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 8000774:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000776:	4286      	cmp	r6, r0
 8000778:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800077c:	d81b      	bhi.n	80007b6 <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800077e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000782:	6820      	ldr	r0, [r4, #0]
 8000784:	f001 f958 	bl	8001a38 <USB_DevInit>
 8000788:	4605      	mov	r5, r0
 800078a:	2800      	cmp	r0, #0
 800078c:	d1d9      	bne.n	8000742 <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 800078e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000790:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 8000792:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8000794:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8000798:	f001 fc04 	bl	8001fa4 <USB_DevDisconnect>
  return HAL_OK;
 800079c:	e7d5      	b.n	800074a <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 800079e:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 80007a2:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 80007a6:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80007aa:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 80007ae:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007b2:	3001      	adds	r0, #1
 80007b4:	e7d5      	b.n	8000762 <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80007b6:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 80007ba:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 80007be:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007c2:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80007c6:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007ca:	3101      	adds	r1, #1
 80007cc:	e7d2      	b.n	8000774 <HAL_PCD_Init+0x6c>

080007ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80007ce:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80007d0:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 80007d4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d010      	beq.n	80007fc <HAL_PCD_Start+0x2e>
 80007da:	2501      	movs	r5, #1
 80007dc:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80007e0:	6800      	ldr	r0, [r0, #0]
 80007e2:	f001 f914 	bl	8001a0e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80007e6:	4629      	mov	r1, r5
 80007e8:	4620      	mov	r0, r4
 80007ea:	f002 fd3e 	bl	800326a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80007ee:	6820      	ldr	r0, [r4, #0]
 80007f0:	f001 fbd6 	bl	8001fa0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80007f4:	2000      	movs	r0, #0
 80007f6:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 80007fa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80007fc:	2002      	movs	r0, #2
 80007fe:	e7fc      	b.n	80007fa <HAL_PCD_Start+0x2c>

08000800 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000800:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000802:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 8000806:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000808:	2a01      	cmp	r2, #1
 800080a:	d00a      	beq.n	8000822 <HAL_PCD_SetAddress+0x22>
 800080c:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800080e:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 8000810:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000814:	6800      	ldr	r0, [r0, #0]
 8000816:	f001 fbbd 	bl	8001f94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800081a:	2000      	movs	r0, #0
 800081c:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8000820:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000822:	2002      	movs	r0, #2
 8000824:	e7fc      	b.n	8000820 <HAL_PCD_SetAddress+0x20>
	...

08000828 <HAL_PCD_IRQHandler>:
{
 8000828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800082c:	4604      	mov	r4, r0
 800082e:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000830:	6800      	ldr	r0, [r0, #0]
 8000832:	f001 fbb9 	bl	8001fa8 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000836:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 800083a:	f000 844f 	beq.w	80010dc <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 800083e:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000840:	4ec6      	ldr	r6, [pc, #792]	@ (8000b5c <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000842:	6820      	ldr	r0, [r4, #0]
 8000844:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8000848:	041f      	lsls	r7, r3, #16
 800084a:	d402      	bmi.n	8000852 <HAL_PCD_IRQHandler+0x2a>
}
 800084c:	b005      	add	sp, #20
 800084e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8000852:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8000856:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 800085a:	b299      	uxth	r1, r3
    if (epindex == 0U)
 800085c:	f040 80c0 	bne.w	80009e0 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000860:	f011 0110 	ands.w	r1, r1, #16
 8000864:	d126      	bne.n	80008b4 <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000866:	8803      	ldrh	r3, [r0, #0]
 8000868:	b29b      	uxth	r3, r3
 800086a:	4033      	ands	r3, r6
 800086c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000870:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000872:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000876:	7c22      	ldrb	r2, [r4, #16]
 8000878:	b29b      	uxth	r3, r3
 800087a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800087e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000882:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8000886:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000888:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 800088c:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800088e:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000890:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8000892:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000894:	f002 fc11 	bl	80030ba <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000898:	7b63      	ldrb	r3, [r4, #13]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0d1      	beq.n	8000842 <HAL_PCD_IRQHandler+0x1a>
 800089e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80008a0:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80008a2:	2a00      	cmp	r2, #0
 80008a4:	d1cd      	bne.n	8000842 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80008a6:	7b63      	ldrb	r3, [r4, #13]
 80008a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ac:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80008b0:	7362      	strb	r2, [r4, #13]
 80008b2:	e7c6      	b.n	8000842 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80008b4:	8807      	ldrh	r7, [r0, #0]
 80008b6:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80008b8:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 80008bc:	d021      	beq.n	8000902 <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008be:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80008c2:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80008d0:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80008d4:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 80008d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008dc:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80008e0:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 80008e4:	f001 fdab 	bl	800243e <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008e8:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80008ea:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008ec:	8813      	ldrh	r3, [r2, #0]
 80008ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80008f2:	051b      	lsls	r3, r3, #20
 80008f4:	0d1b      	lsrs	r3, r3, #20
 80008f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008fa:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80008fc:	f002 fbce 	bl	800309c <HAL_PCD_SetupStageCallback>
 8000900:	e79f      	b.n	8000842 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000902:	0419      	lsls	r1, r3, #16
 8000904:	d59d      	bpl.n	8000842 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000906:	8803      	ldrh	r3, [r0, #0]
 8000908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800090c:	051b      	lsls	r3, r3, #20
 800090e:	0d1b      	lsrs	r3, r3, #20
 8000910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000914:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000916:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800091a:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 800091e:	b29b      	uxth	r3, r3
 8000920:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000924:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000928:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 800092c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000930:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000934:	b18b      	cbz	r3, 800095a <HAL_PCD_IRQHandler+0x132>
 8000936:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 800093a:	b171      	cbz	r1, 800095a <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800093c:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8000940:	f001 fd7d 	bl	800243e <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000944:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8000948:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800094c:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 800094e:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000950:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8000952:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000956:	f002 fba7 	bl	80030a8 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800095a:	6821      	ldr	r1, [r4, #0]
 800095c:	880a      	ldrh	r2, [r1, #0]
 800095e:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8000960:	0512      	lsls	r2, r2, #20
 8000962:	f53f af6e 	bmi.w	8000842 <HAL_PCD_IRQHandler+0x1a>
 8000966:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800096a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800096e:	f43f af68 	beq.w	8000842 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000972:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8000976:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 800097a:	b292      	uxth	r2, r2
 800097c:	5a83      	ldrh	r3, [r0, r2]
 800097e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000982:	5283      	strh	r3, [r0, r2]
 8000984:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 8000988:	2b3e      	cmp	r3, #62	@ 0x3e
 800098a:	d91d      	bls.n	80009c8 <HAL_PCD_IRQHandler+0x1a0>
 800098c:	095f      	lsrs	r7, r3, #5
 800098e:	06db      	lsls	r3, r3, #27
 8000990:	5a83      	ldrh	r3, [r0, r2]
 8000992:	bf08      	it	eq
 8000994:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8000998:	b29b      	uxth	r3, r3
 800099a:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 800099e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80009a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80009aa:	880b      	ldrh	r3, [r1, #0]
 80009ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80009b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80009b4:	041b      	lsls	r3, r3, #16
 80009b6:	0c1b      	lsrs	r3, r3, #16
 80009b8:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80009bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c4:	800b      	strh	r3, [r1, #0]
 80009c6:	e73c      	b.n	8000842 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80009c8:	b90b      	cbnz	r3, 80009ce <HAL_PCD_IRQHandler+0x1a6>
 80009ca:	5a83      	ldrh	r3, [r0, r2]
 80009cc:	e7e7      	b.n	800099e <HAL_PCD_IRQHandler+0x176>
 80009ce:	085f      	lsrs	r7, r3, #1
 80009d0:	07db      	lsls	r3, r3, #31
 80009d2:	5a83      	ldrh	r3, [r0, r2]
 80009d4:	bf48      	it	mi
 80009d6:	3701      	addmi	r7, #1
 80009d8:	b29b      	uxth	r3, r3
 80009da:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 80009de:	e7e2      	b.n	80009a6 <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80009e0:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80009e4:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80009e6:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80009ea:	f140 80f6 	bpl.w	8000bda <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009ee:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 80009f2:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80009fa:	051b      	lsls	r3, r3, #20
 80009fc:	0d1b      	lsrs	r3, r3, #20
 80009fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a02:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a06:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8000a0a:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 8000a0e:	b9bb      	cbnz	r3, 8000a40 <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a10:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000a14:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	3306      	adds	r3, #6
 8000a1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a20:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8000a24:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8000a28:	f1b9 0f00 	cmp.w	r9, #0
 8000a2c:	f000 80ba 	beq.w	8000ba4 <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000a30:	464b      	mov	r3, r9
 8000a32:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000a36:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8000a3a:	f001 fd00 	bl	800243e <USB_ReadPMA>
 8000a3e:	e0b1      	b.n	8000ba4 <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 8000a40:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000a44:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	f040 8089 	bne.w	8000b60 <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000a4e:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 8000a52:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8000a56:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000a5a:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 8000a5e:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000a62:	44d9      	add	r9, fp
 8000a64:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000a68:	d03c      	beq.n	8000ae4 <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000a6a:	f109 0902 	add.w	r9, r9, #2
 8000a6e:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8000a72:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 8000a76:	4599      	cmp	r9, r3
 8000a78:	d913      	bls.n	8000aa2 <HAL_PCD_IRQHandler+0x27a>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000a80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000a84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000a8c:	041b      	lsls	r3, r3, #16
 8000a8e:	0c1b      	lsrs	r3, r3, #16
 8000a90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000a94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a9c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8000aa0:	e005      	b.n	8000aae <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 8000aa2:	eba3 0309 	sub.w	r3, r3, r9
 8000aa6:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0e8      	beq.n	8000a80 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000aae:	f1bc 0f00 	cmp.w	ip, #0
 8000ab2:	d00d      	beq.n	8000ad0 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000ab4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000ab8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000abc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000ac0:	041b      	lsls	r3, r3, #16
 8000ac2:	0c1b      	lsrs	r3, r3, #16
 8000ac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ac8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000acc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8000ad0:	f1b9 0f00 	cmp.w	r9, #0
 8000ad4:	d066      	beq.n	8000ba4 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000ad6:	2128      	movs	r1, #40	@ 0x28
 8000ad8:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000adc:	464b      	mov	r3, r9
 8000ade:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8000ae2:	e7a8      	b.n	8000a36 <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000ae4:	f109 0906 	add.w	r9, r9, #6
 8000ae8:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8000aec:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 8000af0:	4599      	cmp	r9, r3
 8000af2:	d912      	bls.n	8000b1a <HAL_PCD_IRQHandler+0x2f2>
 8000af4:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000af8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000afc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000b00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000b04:	041b      	lsls	r3, r3, #16
 8000b06:	0c1b      	lsrs	r3, r3, #16
 8000b08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000b0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8000b18:	e005      	b.n	8000b26 <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 8000b1a:	eba3 0309 	sub.w	r3, r3, r9
 8000b1e:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0e8      	beq.n	8000af8 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8000b26:	f1bc 0f00 	cmp.w	ip, #0
 8000b2a:	d10d      	bne.n	8000b48 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000b2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000b30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000b38:	041b      	lsls	r3, r3, #16
 8000b3a:	0c1b      	lsrs	r3, r3, #16
 8000b3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b40:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000b44:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8000b48:	f1b9 0f00 	cmp.w	r9, #0
 8000b4c:	d02a      	beq.n	8000ba4 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b4e:	2128      	movs	r1, #40	@ 0x28
 8000b50:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b54:	464b      	mov	r3, r9
 8000b56:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8000b5a:	e76c      	b.n	8000a36 <HAL_PCD_IRQHandler+0x20e>
 8000b5c:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000b60:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000b64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000b6c:	041b      	lsls	r3, r3, #16
 8000b6e:	0c1b      	lsrs	r3, r3, #16
 8000b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000b78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000b7c:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 8000b80:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b8a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000b8e:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000b90:	d054      	beq.n	8000c3c <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b92:	3202      	adds	r2, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8000b9a:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8000b9e:	f1b9 0f00 	cmp.w	r9, #0
 8000ba2:	d19b      	bne.n	8000adc <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 8000ba4:	fb05 f107 	mul.w	r1, r5, r7
 8000ba8:	1863      	adds	r3, r4, r1
 8000baa:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8000bae:	444a      	add	r2, r9
 8000bb0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8000bb4:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8000bb8:	444a      	add	r2, r9
 8000bba:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000bbe:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8000bc2:	b11a      	cbz	r2, 8000bcc <HAL_PCD_IRQHandler+0x3a4>
 8000bc4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8000bc8:	4599      	cmp	r9, r3
 8000bca:	d241      	bcs.n	8000c50 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000bcc:	fb05 4307 	mla	r3, r5, r7, r4
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8000bd6:	f002 fa67 	bl	80030a8 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000bda:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000bde:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000be0:	f43f ae2f 	beq.w	8000842 <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000be4:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8000be8:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	4033      	ands	r3, r6
 8000bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bf4:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8000bf8:	eb04 030c 	add.w	r3, r4, ip
 8000bfc:	7cda      	ldrb	r2, [r3, #19]
 8000bfe:	2a01      	cmp	r2, #1
 8000c00:	d156      	bne.n	8000cb0 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8000c02:	2100      	movs	r1, #0
 8000c04:	fb07 5205 	mla	r2, r7, r5, r5
 8000c08:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 8000c0a:	7f1a      	ldrb	r2, [r3, #28]
 8000c0c:	b392      	cbz	r2, 8000c74 <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000c0e:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000c12:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000c14:	d036      	beq.n	8000c84 <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000c16:	bb12      	cbnz	r2, 8000c5e <HAL_PCD_IRQHandler+0x436>
 8000c18:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000c1c:	7c1b      	ldrb	r3, [r3, #16]
 8000c1e:	b292      	uxth	r2, r2
 8000c20:	011b      	lsls	r3, r3, #4
 8000c22:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000c26:	4410      	add	r0, r2
 8000c28:	5a1a      	ldrh	r2, [r3, r0]
 8000c2a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000c2e:	521a      	strh	r2, [r3, r0]
 8000c30:	5a1a      	ldrh	r2, [r3, r0]
 8000c32:	b292      	uxth	r2, r2
 8000c34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000c38:	521a      	strh	r2, [r3, r0]
 8000c3a:	e01b      	b.n	8000c74 <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000c3c:	3206      	adds	r2, #6
 8000c3e:	4413      	add	r3, r2
 8000c40:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8000c44:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8000c48:	f1b9 0f00 	cmp.w	r9, #0
 8000c4c:	d0aa      	beq.n	8000ba4 <HAL_PCD_IRQHandler+0x37c>
 8000c4e:	e781      	b.n	8000b54 <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 8000c50:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000c54:	6820      	ldr	r0, [r4, #0]
 8000c56:	4421      	add	r1, r4
 8000c58:	f001 f9bc 	bl	8001fd4 <USB_EPStartXfer>
 8000c5c:	e7bd      	b.n	8000bda <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000c5e:	2a01      	cmp	r2, #1
 8000c60:	d108      	bne.n	8000c74 <HAL_PCD_IRQHandler+0x44c>
 8000c62:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000c66:	7c1b      	ldrb	r3, [r3, #16]
 8000c68:	b292      	uxth	r2, r2
 8000c6a:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	4410      	add	r0, r2
 8000c72:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000c74:	2328      	movs	r3, #40	@ 0x28
 8000c76:	fb03 4307 	mla	r3, r3, r7, r4
 8000c7a:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	f002 fa1c 	bl	80030ba <HAL_PCD_DataInStageCallback>
 8000c82:	e5de      	b.n	8000842 <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000c84:	b93a      	cbnz	r2, 8000c96 <HAL_PCD_IRQHandler+0x46e>
 8000c86:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000c8a:	7c1b      	ldrb	r3, [r3, #16]
 8000c8c:	b292      	uxth	r2, r2
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8000c94:	e7c7      	b.n	8000c26 <HAL_PCD_IRQHandler+0x3fe>
 8000c96:	2a01      	cmp	r2, #1
 8000c98:	d1ec      	bne.n	8000c74 <HAL_PCD_IRQHandler+0x44c>
 8000c9a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000c9e:	7c1b      	ldrb	r3, [r3, #16]
 8000ca0:	b292      	uxth	r2, r2
 8000ca2:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	4410      	add	r0, r2
 8000caa:	f823 8000 	strh.w	r8, [r3, r0]
 8000cae:	e7e1      	b.n	8000c74 <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cb0:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8000cb2:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 8000cb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cb8:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8000cbc:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8000cc0:	d11b      	bne.n	8000cfa <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cc2:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 8000cc6:	b2bf      	uxth	r7, r7
 8000cc8:	4457      	add	r7, sl
 8000cca:	3702      	adds	r7, #2
 8000ccc:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8000cd0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8000cd4:	4297      	cmp	r7, r2
 8000cd6:	d302      	bcc.n	8000cde <HAL_PCD_IRQHandler+0x4b6>
 8000cd8:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 8000cdc:	e7ce      	b.n	8000c7c <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 8000cde:	1bd2      	subs	r2, r2, r7
 8000ce0:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 8000ce2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8000ce4:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8000ce8:	443a      	add	r2, r7
 8000cea:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8000cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000cee:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 8000cf0:	443a      	add	r2, r7
 8000cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000cf4:	f001 f96e 	bl	8001fd4 <USB_EPStartXfer>
 8000cf8:	e5a3      	b.n	8000842 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000cfa:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000cfe:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d02:	fa1f fc8c 	uxth.w	ip, ip
 8000d06:	44d4      	add	ip, sl
 8000d08:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000d0c:	f000 80f4 	beq.w	8000ef8 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d10:	f10c 0c02 	add.w	ip, ip, #2
 8000d14:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8000d18:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 8000d1c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8000d20:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8000d22:	bf2c      	ite	cs
 8000d24:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 8000d26:	eba2 020c 	subcc.w	r2, r2, ip
 8000d2a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	d15b      	bne.n	8000de8 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000d30:	2328      	movs	r3, #40	@ 0x28
 8000d32:	fb03 4307 	mla	r3, r3, r7, r4
 8000d36:	7c5b      	ldrb	r3, [r3, #17]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d141      	bne.n	8000dc0 <HAL_PCD_IRQHandler+0x598>
 8000d3c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000d40:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8000d44:	b292      	uxth	r2, r2
 8000d46:	010b      	lsls	r3, r1, #4
 8000d48:	4494      	add	ip, r2
 8000d4a:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8000d4e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000d52:	f82c 2003 	strh.w	r2, [ip, r3]
 8000d56:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8000d5a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8000d5e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000d62:	b292      	uxth	r2, r2
 8000d64:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000d68:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000d6c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8000d70:	b292      	uxth	r2, r2
 8000d72:	4410      	add	r0, r2
 8000d74:	5ac2      	ldrh	r2, [r0, r3]
 8000d76:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000d7a:	52c2      	strh	r2, [r0, r3]
 8000d7c:	5ac2      	ldrh	r2, [r0, r3]
 8000d7e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8000d82:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000d86:	b292      	uxth	r2, r2
 8000d88:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f002 f995 	bl	80030ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000d90:	f1b8 0f00 	cmp.w	r8, #0
 8000d94:	f000 80f4 	beq.w	8000f80 <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8000d98:	2328      	movs	r3, #40	@ 0x28
 8000d9a:	fb03 4307 	mla	r3, r3, r7, r4
 8000d9e:	6822      	ldr	r2, [r4, #0]
 8000da0:	7c19      	ldrb	r1, [r3, #16]
 8000da2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000dae:	041b      	lsls	r3, r3, #16
 8000db0:	0c1b      	lsrs	r3, r3, #16
 8000db2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dba:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000dbe:	e0df      	b.n	8000f80 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d1e2      	bne.n	8000d8a <HAL_PCD_IRQHandler+0x562>
 8000dc4:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8000dc8:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8000dcc:	fa1f fe8e 	uxth.w	lr, lr
 8000dd0:	44f4      	add	ip, lr
 8000dd2:	010b      	lsls	r3, r1, #4
 8000dd4:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000dd8:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8000ddc:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8000de0:	fa1f fc8c 	uxth.w	ip, ip
 8000de4:	4460      	add	r0, ip
 8000de6:	e7cf      	b.n	8000d88 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000de8:	f1b8 0f00 	cmp.w	r8, #0
 8000dec:	d00d      	beq.n	8000e0a <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8000dee:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8000df2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8000df6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000dfa:	0412      	lsls	r2, r2, #16
 8000dfc:	0c12      	lsrs	r2, r2, #16
 8000dfe:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000e02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e06:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8000e0a:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8000e0e:	fb08 4807 	mla	r8, r8, r7, r4
 8000e12:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8000e16:	2a01      	cmp	r2, #1
 8000e18:	f040 80b2 	bne.w	8000f80 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8000e1c:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8000e20:	eb02 0e0c 	add.w	lr, r2, ip
 8000e24:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8000e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e2a:	4462      	add	r2, ip
 8000e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8000e2e:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8000e32:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d335      	bcc.n	8000ea6 <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 8000e3a:	1a9b      	subs	r3, r3, r2
 8000e3c:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000e40:	2328      	movs	r3, #40	@ 0x28
 8000e42:	fb03 4307 	mla	r3, r3, r7, r4
 8000e46:	f893 c011 	ldrb.w	ip, [r3, #17]
 8000e4a:	b293      	uxth	r3, r2
 8000e4c:	f1bc 0f00 	cmp.w	ip, #0
 8000e50:	d145      	bne.n	8000ede <HAL_PCD_IRQHandler+0x6b6>
 8000e52:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8000e56:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8000e5a:	fa1f f888 	uxth.w	r8, r8
 8000e5e:	44c4      	add	ip, r8
 8000e60:	0109      	lsls	r1, r1, #4
 8000e62:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8000e66:	2a3e      	cmp	r2, #62	@ 0x3e
 8000e68:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8000e6c:	f82c 8001 	strh.w	r8, [ip, r1]
 8000e70:	d925      	bls.n	8000ebe <HAL_PCD_IRQHandler+0x696>
 8000e72:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8000e76:	06d2      	lsls	r2, r2, #27
 8000e78:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8000e7c:	bf08      	it	eq
 8000e7e:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8000e82:	b292      	uxth	r2, r2
 8000e84:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8000e88:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8000e8c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000e90:	b292      	uxth	r2, r2
 8000e92:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8000e96:	2228      	movs	r2, #40	@ 0x28
 8000e98:	fb02 4207 	mla	r2, r2, r7, r4
 8000e9c:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8000e9e:	4671      	mov	r1, lr
 8000ea0:	f001 f888 	bl	8001fb4 <USB_WritePMA>
 8000ea4:	e06c      	b.n	8000f80 <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 8000ea6:	b91b      	cbnz	r3, 8000eb0 <HAL_PCD_IRQHandler+0x688>
          len = TxPctSize;
 8000ea8:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8000eaa:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8000eae:	e7c7      	b.n	8000e40 <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 8000eb6:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          len = ep->xfer_len_db;
 8000eba:	461a      	mov	r2, r3
 8000ebc:	e7c0      	b.n	8000e40 <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000ebe:	b912      	cbnz	r2, 8000ec6 <HAL_PCD_IRQHandler+0x69e>
 8000ec0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8000ec4:	e7e0      	b.n	8000e88 <HAL_PCD_IRQHandler+0x660>
 8000ec6:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8000eca:	07d2      	lsls	r2, r2, #31
 8000ecc:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8000ed0:	bf48      	it	mi
 8000ed2:	f108 0801 	addmi.w	r8, r8, #1
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8000edc:	e7d8      	b.n	8000e90 <HAL_PCD_IRQHandler+0x668>
 8000ede:	f1bc 0f01 	cmp.w	ip, #1
 8000ee2:	d1d8      	bne.n	8000e96 <HAL_PCD_IRQHandler+0x66e>
 8000ee4:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8000ee8:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8000eec:	fa1f fc8c 	uxth.w	ip, ip
 8000ef0:	4462      	add	r2, ip
 8000ef2:	0109      	lsls	r1, r1, #4
 8000ef4:	5253      	strh	r3, [r2, r1]
 8000ef6:	e7ce      	b.n	8000e96 <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000ef8:	f10c 0c06 	add.w	ip, ip, #6
 8000efc:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8000f00:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 8000f04:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8000f08:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 8000f0a:	bf8c      	ite	hi
 8000f0c:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 8000f0e:	eba2 020c 	subls.w	r2, r2, ip
 8000f12:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	d15d      	bne.n	8000fd4 <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000f18:	2328      	movs	r3, #40	@ 0x28
 8000f1a:	fb03 4307 	mla	r3, r3, r7, r4
 8000f1e:	7c5b      	ldrb	r3, [r3, #17]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d143      	bne.n	8000fac <HAL_PCD_IRQHandler+0x784>
 8000f24:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000f28:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8000f2c:	b292      	uxth	r2, r2
 8000f2e:	010b      	lsls	r3, r1, #4
 8000f30:	4494      	add	ip, r2
 8000f32:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8000f36:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000f3a:	f82c 2003 	strh.w	r2, [ip, r3]
 8000f3e:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8000f42:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8000f46:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000f4a:	b292      	uxth	r2, r2
 8000f4c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000f50:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8000f54:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8000f58:	b292      	uxth	r2, r2
 8000f5a:	4410      	add	r0, r2
 8000f5c:	5ac2      	ldrh	r2, [r0, r3]
 8000f5e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000f62:	52c2      	strh	r2, [r0, r3]
 8000f64:	5ac2      	ldrh	r2, [r0, r3]
 8000f66:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8000f6a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000f72:	4620      	mov	r0, r4
 8000f74:	f002 f8a1 	bl	80030ba <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8000f78:	f1b8 0f00 	cmp.w	r8, #0
 8000f7c:	f43f af0c 	beq.w	8000d98 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8000f80:	2328      	movs	r3, #40	@ 0x28
 8000f82:	fb03 4307 	mla	r3, r3, r7, r4
 8000f86:	6822      	ldr	r2, [r4, #0]
 8000f88:	7c19      	ldrb	r1, [r3, #16]
 8000f8a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000f92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f96:	041b      	lsls	r3, r3, #16
 8000f98:	0c1b      	lsrs	r3, r3, #16
 8000f9a:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8000f9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fa6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8000faa:	e44a      	b.n	8000842 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d1e0      	bne.n	8000f72 <HAL_PCD_IRQHandler+0x74a>
 8000fb0:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8000fb4:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8000fb8:	fa1f fe8e 	uxth.w	lr, lr
 8000fbc:	44f4      	add	ip, lr
 8000fbe:	010b      	lsls	r3, r1, #4
 8000fc0:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000fc4:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8000fc8:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8000fcc:	fa1f fc8c 	uxth.w	ip, ip
 8000fd0:	4460      	add	r0, ip
 8000fd2:	e7cd      	b.n	8000f70 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8000fd4:	f1b8 0f00 	cmp.w	r8, #0
 8000fd8:	d10d      	bne.n	8000ff6 <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8000fda:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8000fde:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8000fe2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000fe6:	0412      	lsls	r2, r2, #16
 8000fe8:	0c12      	lsrs	r2, r2, #16
 8000fea:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000fee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ff2:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8000ff6:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8000ffa:	fb08 4807 	mla	r8, r8, r7, r4
 8000ffe:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8001002:	2a01      	cmp	r2, #1
 8001004:	d1bc      	bne.n	8000f80 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8001006:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 800100a:	eb02 0e0c 	add.w	lr, r2, ip
 800100e:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8001012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001014:	4462      	add	r2, ip
 8001016:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001018:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800101c:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8001020:	4293      	cmp	r3, r2
 8001022:	d332      	bcc.n	800108a <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800102a:	2328      	movs	r3, #40	@ 0x28
 800102c:	fb03 4307 	mla	r3, r3, r7, r4
 8001030:	f893 c011 	ldrb.w	ip, [r3, #17]
 8001034:	b293      	uxth	r3, r2
 8001036:	f1bc 0f00 	cmp.w	ip, #0
 800103a:	d142      	bne.n	80010c2 <HAL_PCD_IRQHandler+0x89a>
 800103c:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8001040:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8001044:	fa1f f888 	uxth.w	r8, r8
 8001048:	44c4      	add	ip, r8
 800104a:	0109      	lsls	r1, r1, #4
 800104c:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8001050:	2a3e      	cmp	r2, #62	@ 0x3e
 8001052:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8001056:	f82c 8001 	strh.w	r8, [ip, r1]
 800105a:	d922      	bls.n	80010a2 <HAL_PCD_IRQHandler+0x87a>
 800105c:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8001060:	06d2      	lsls	r2, r2, #27
 8001062:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8001066:	bf08      	it	eq
 8001068:	f108 38ff 	addeq.w	r8, r8, #4294967295
 800106c:	b292      	uxth	r2, r2
 800106e:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8001072:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001076:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800107a:	b292      	uxth	r2, r2
 800107c:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001080:	2228      	movs	r2, #40	@ 0x28
 8001082:	fb02 4207 	mla	r2, r2, r7, r4
 8001086:	8b52      	ldrh	r2, [r2, #26]
 8001088:	e709      	b.n	8000e9e <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 800108a:	b91b      	cbnz	r3, 8001094 <HAL_PCD_IRQHandler+0x86c>
          len = TxPctSize;
 800108c:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 800108e:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8001092:	e7ca      	b.n	800102a <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 8001094:	2200      	movs	r2, #0
 8001096:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 800109a:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          len = ep->xfer_len_db;
 800109e:	461a      	mov	r2, r3
 80010a0:	e7c3      	b.n	800102a <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80010a2:	b912      	cbnz	r2, 80010aa <HAL_PCD_IRQHandler+0x882>
 80010a4:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80010a8:	e7e3      	b.n	8001072 <HAL_PCD_IRQHandler+0x84a>
 80010aa:	ea4f 0852 	mov.w	r8, r2, lsr #1
 80010ae:	07d2      	lsls	r2, r2, #31
 80010b0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80010b4:	bf48      	it	mi
 80010b6:	f108 0801 	addmi.w	r8, r8, #1
 80010ba:	b292      	uxth	r2, r2
 80010bc:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80010c0:	e7db      	b.n	800107a <HAL_PCD_IRQHandler+0x852>
 80010c2:	f1bc 0f01 	cmp.w	ip, #1
 80010c6:	d1db      	bne.n	8001080 <HAL_PCD_IRQHandler+0x858>
 80010c8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80010cc:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 80010d0:	b292      	uxth	r2, r2
 80010d2:	4494      	add	ip, r2
 80010d4:	010a      	lsls	r2, r1, #4
 80010d6:	f82c 3002 	strh.w	r3, [ip, r2]
 80010da:	e7d1      	b.n	8001080 <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80010dc:	0546      	lsls	r6, r0, #21
 80010de:	d512      	bpl.n	8001106 <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010e0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80010e2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010e4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80010e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80010ec:	041b      	lsls	r3, r3, #16
 80010ee:	0c1b      	lsrs	r3, r3, #16
 80010f0:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 80010f4:	f001 ffed 	bl	80030d2 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80010f8:	4629      	mov	r1, r5
 80010fa:	4620      	mov	r0, r4
}
 80010fc:	b005      	add	sp, #20
 80010fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001102:	f7ff bb7d 	b.w	8000800 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001106:	0441      	lsls	r1, r0, #17
 8001108:	d50a      	bpl.n	8001120 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800110a:	6822      	ldr	r2, [r4, #0]
 800110c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001110:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001114:	041b      	lsls	r3, r3, #16
 8001116:	0c1b      	lsrs	r3, r3, #16
 8001118:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 800111c:	f7ff bb96 	b.w	800084c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001120:	0482      	lsls	r2, r0, #18
 8001122:	d505      	bpl.n	8001130 <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001124:	6822      	ldr	r2, [r4, #0]
 8001126:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800112a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800112e:	e7f1      	b.n	8001114 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001130:	04c3      	lsls	r3, r0, #19
 8001132:	d519      	bpl.n	8001168 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001134:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8001136:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001138:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 800113c:	f023 0304 	bic.w	r3, r3, #4
 8001140:	041b      	lsls	r3, r3, #16
 8001142:	0c1b      	lsrs	r3, r3, #16
 8001144:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001148:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 800114c:	f023 0308 	bic.w	r3, r3, #8
 8001150:	041b      	lsls	r3, r3, #16
 8001152:	0c1b      	lsrs	r3, r3, #16
 8001154:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001158:	f001 ffde 	bl	8003118 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800115c:	6822      	ldr	r2, [r4, #0]
 800115e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001166:	e7d5      	b.n	8001114 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001168:	0507      	lsls	r7, r0, #20
 800116a:	d548      	bpl.n	80011fe <HAL_PCD_IRQHandler+0x9d6>
 800116c:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	4606      	mov	r6, r0
 8001172:	4619      	mov	r1, r3
 8001174:	461a      	mov	r2, r3
 8001176:	f103 0520 	add.w	r5, r3, #32
 800117a:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 800117e:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001180:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8001184:	d1f9      	bne.n	800117a <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001186:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800118a:	b292      	uxth	r2, r2
 800118c:	f042 0201 	orr.w	r2, r2, #1
 8001190:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001194:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8001198:	f022 0201 	bic.w	r2, r2, #1
 800119c:	0412      	lsls	r2, r2, #16
 800119e:	0c12      	lsrs	r2, r2, #16
 80011a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80011a4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80011a8:	0556      	lsls	r6, r2, #21
 80011aa:	d5fb      	bpl.n	80011a4 <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011ac:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80011b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011b4:	0412      	lsls	r2, r2, #16
 80011b6:	0c12      	lsrs	r2, r2, #16
 80011b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80011bc:	f830 2b02 	ldrh.w	r2, [r0], #2
 80011c0:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 80011c4:	428d      	cmp	r5, r1
 80011c6:	d1f9      	bne.n	80011bc <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011c8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80011cc:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011ce:	b292      	uxth	r2, r2
 80011d0:	f042 0208 	orr.w	r2, r2, #8
 80011d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011d8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80011dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011e0:	0412      	lsls	r2, r2, #16
 80011e2:	0c12      	lsrs	r2, r2, #16
 80011e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80011e8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80011ec:	b292      	uxth	r2, r2
 80011ee:	f042 0204 	orr.w	r2, r2, #4
 80011f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80011f6:	f001 ff7f 	bl	80030f8 <HAL_PCD_SuspendCallback>
    return;
 80011fa:	f7ff bb27 	b.w	800084c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80011fe:	0582      	lsls	r2, r0, #22
 8001200:	d50d      	bpl.n	800121e <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001202:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001204:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001206:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800120a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800120e:	041b      	lsls	r3, r3, #16
 8001210:	0c1b      	lsrs	r3, r3, #16
 8001212:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001216:	f001 ff58 	bl	80030ca <HAL_PCD_SOFCallback>
    return;
 800121a:	f7ff bb17 	b.w	800084c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800121e:	05c3      	lsls	r3, r0, #23
 8001220:	f57f ab14 	bpl.w	800084c <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001224:	6822      	ldr	r2, [r4, #0]
 8001226:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800122a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800122e:	e771      	b.n	8001114 <HAL_PCD_IRQHandler+0x8ec>

08001230 <HAL_PCD_EP_Open>:
{
 8001230:	b570      	push	{r4, r5, r6, lr}
 8001232:	2428      	movs	r4, #40	@ 0x28
 8001234:	4605      	mov	r5, r0
 8001236:	f001 0007 	and.w	r0, r1, #7
 800123a:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800123c:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001240:	bf14      	ite	ne
 8001242:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001246:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 800124a:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 800124e:	bf15      	itete	ne
 8001250:	2401      	movne	r4, #1
    ep->is_in = 0U;
 8001252:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 8001254:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 8001256:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800125a:	bf14      	ite	ne
 800125c:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800125e:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 8001260:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8001262:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8001264:	bf08      	it	eq
 8001266:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001268:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 800126a:	bf08      	it	eq
 800126c:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 800126e:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8001270:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 8001274:	2b01      	cmp	r3, #1
 8001276:	d009      	beq.n	800128c <HAL_PCD_EP_Open+0x5c>
 8001278:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800127a:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 800127c:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001280:	f000 fbec 	bl	8001a5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001284:	2000      	movs	r0, #0
 8001286:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 800128a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800128c:	2002      	movs	r0, #2
 800128e:	e7fc      	b.n	800128a <HAL_PCD_EP_Open+0x5a>

08001290 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001290:	2328      	movs	r3, #40	@ 0x28
 8001292:	f001 0207 	and.w	r2, r1, #7
 8001296:	4353      	muls	r3, r2
 8001298:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 800129c:	b510      	push	{r4, lr}
 800129e:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012a0:	bf18      	it	ne
 80012a2:	f103 0110 	addne.w	r1, r3, #16
 80012a6:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012a8:	bf0b      	itete	eq
 80012aa:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 80012ae:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80012b0:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012b2:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012b4:	bf0a      	itet	eq
 80012b6:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80012b8:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 80012ba:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80012be:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80012c0:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d009      	beq.n	80012dc <HAL_PCD_EP_Close+0x4c>
 80012c8:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012ca:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80012cc:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012d0:	f000 fd24 	bl	8001d1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 80012da:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80012dc:	2002      	movs	r0, #2
 80012de:	e7fc      	b.n	80012da <HAL_PCD_EP_Close+0x4a>

080012e0 <HAL_PCD_EP_Receive>:
{
 80012e0:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 80012e2:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 80012e4:	2600      	movs	r6, #0
 80012e6:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80012ea:	434c      	muls	r4, r1
 80012ec:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 80012ee:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012f2:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012f6:	4401      	add	r1, r0
  ep->xfer_len = len;
 80012f8:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 80012fc:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 8001300:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001304:	6800      	ldr	r0, [r0, #0]
 8001306:	f000 fe65 	bl	8001fd4 <USB_EPStartXfer>
}
 800130a:	4630      	mov	r0, r6
 800130c:	bd70      	pop	{r4, r5, r6, pc}

0800130e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800130e:	2328      	movs	r3, #40	@ 0x28
 8001310:	f001 0107 	and.w	r1, r1, #7
 8001314:	fb03 0001 	mla	r0, r3, r1, r0
}
 8001318:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 800131c:	4770      	bx	lr

0800131e <HAL_PCD_EP_Transmit>:
{
 800131e:	b570      	push	{r4, r5, r6, lr}
 8001320:	2528      	movs	r5, #40	@ 0x28
 8001322:	f001 0107 	and.w	r1, r1, #7
 8001326:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 8001328:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 800132a:	2600      	movs	r6, #0
  ep->xfer_len = len;
 800132c:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8001330:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001332:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001334:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001338:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 800133a:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 800133e:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 8001340:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 8001342:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001344:	6800      	ldr	r0, [r0, #0]
 8001346:	f000 fe45 	bl	8001fd4 <USB_EPStartXfer>
}
 800134a:	4630      	mov	r0, r6
 800134c:	bd70      	pop	{r4, r5, r6, pc}

0800134e <HAL_PCD_EP_SetStall>:
{
 800134e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001350:	7903      	ldrb	r3, [r0, #4]
 8001352:	f001 0507 	and.w	r5, r1, #7
 8001356:	42ab      	cmp	r3, r5
{
 8001358:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800135a:	d32a      	bcc.n	80013b2 <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 800135c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001360:	f04f 0328 	mov.w	r3, #40	@ 0x28
 8001364:	d01c      	beq.n	80013a0 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 8001366:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001368:	436b      	muls	r3, r5
 800136a:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 800136e:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001370:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001372:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 8001374:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001376:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001378:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800137a:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 800137e:	429a      	cmp	r2, r3
 8001380:	d019      	beq.n	80013b6 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001382:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001384:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001388:	f000 fd9b 	bl	8001ec2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800138c:	b925      	cbnz	r5, 8001398 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800138e:	6820      	ldr	r0, [r4, #0]
 8001390:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8001394:	f000 fe0c 	bl	8001fb0 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001398:	2000      	movs	r0, #0
 800139a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800139e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80013a0:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80013a2:	434b      	muls	r3, r1
 80013a4:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 80013a8:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80013aa:	4401      	add	r1, r0
    ep->is_in = 0U;
 80013ac:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 80013b0:	e7e0      	b.n	8001374 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 80013b2:	2001      	movs	r0, #1
 80013b4:	e7f3      	b.n	800139e <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 80013b6:	2002      	movs	r0, #2
 80013b8:	e7f1      	b.n	800139e <HAL_PCD_EP_SetStall+0x50>

080013ba <HAL_PCD_EP_ClrStall>:
{
 80013ba:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013bc:	7902      	ldrb	r2, [r0, #4]
 80013be:	f001 030f 	and.w	r3, r1, #15
 80013c2:	429a      	cmp	r2, r3
{
 80013c4:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013c6:	d326      	bcc.n	8001416 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 80013c8:	2328      	movs	r3, #40	@ 0x28
 80013ca:	f001 0207 	and.w	r2, r1, #7
 80013ce:	4353      	muls	r3, r2
 80013d0:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013d4:	bf14      	ite	ne
 80013d6:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013da:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 80013de:	4418      	add	r0, r3
  ep->is_stall = 0U;
 80013e0:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80013e4:	bf15      	itete	ne
 80013e6:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80013e8:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ea:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013ec:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80013ee:	bf14      	ite	ne
 80013f0:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 80013f2:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 80013f6:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013f8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80013fa:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d00b      	beq.n	800141a <HAL_PCD_EP_ClrStall+0x60>
 8001402:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001404:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001406:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800140a:	f000 fd7a 	bl	8001f02 <USB_EPClearStall>
  return HAL_OK;
 800140e:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8001410:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 8001414:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001416:	2001      	movs	r0, #1
 8001418:	e7fc      	b.n	8001414 <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 800141a:	2002      	movs	r0, #2
 800141c:	e7fa      	b.n	8001414 <HAL_PCD_EP_ClrStall+0x5a>

0800141e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800141e:	b510      	push	{r4, lr}
 8001420:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001422:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001426:	bf1b      	ittet	ne
 8001428:	f001 0107 	andne.w	r1, r1, #7
 800142c:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001430:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001434:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 8001436:	bf08      	it	eq
 8001438:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800143c:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800143e:	b91a      	cbnz	r2, 8001448 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8001440:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8001442:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8001444:	2000      	movs	r0, #0
 8001446:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8001448:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800144a:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 800144c:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800144e:	e7f9      	b.n	8001444 <HAL_PCDEx_PMAConfig+0x26>

08001450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001454:	4605      	mov	r5, r0
 8001456:	b338      	cbz	r0, 80014a8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001458:	6803      	ldr	r3, [r0, #0]
 800145a:	07db      	lsls	r3, r3, #31
 800145c:	d410      	bmi.n	8001480 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145e:	682b      	ldr	r3, [r5, #0]
 8001460:	079f      	lsls	r7, r3, #30
 8001462:	d45e      	bmi.n	8001522 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001464:	682b      	ldr	r3, [r5, #0]
 8001466:	0719      	lsls	r1, r3, #28
 8001468:	f100 8095 	bmi.w	8001596 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	075a      	lsls	r2, r3, #29
 8001470:	f100 80c1 	bmi.w	80015f6 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001474:	69eb      	ldr	r3, [r5, #28]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f040 812c 	bne.w	80016d4 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800147c:	2000      	movs	r0, #0
 800147e:	e029      	b.n	80014d4 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001480:	4c90      	ldr	r4, [pc, #576]	@ (80016c4 <HAL_RCC_OscConfig+0x274>)
 8001482:	6863      	ldr	r3, [r4, #4]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b04      	cmp	r3, #4
 800148a:	d007      	beq.n	800149c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800148c:	6863      	ldr	r3, [r4, #4]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b08      	cmp	r3, #8
 8001494:	d10a      	bne.n	80014ac <HAL_RCC_OscConfig+0x5c>
 8001496:	6863      	ldr	r3, [r4, #4]
 8001498:	03de      	lsls	r6, r3, #15
 800149a:	d507      	bpl.n	80014ac <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	039c      	lsls	r4, r3, #14
 80014a0:	d5dd      	bpl.n	800145e <HAL_RCC_OscConfig+0xe>
 80014a2:	686b      	ldr	r3, [r5, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1da      	bne.n	800145e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80014a8:	2001      	movs	r0, #1
 80014aa:	e013      	b.n	80014d4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ac:	686b      	ldr	r3, [r5, #4]
 80014ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b2:	d112      	bne.n	80014da <HAL_RCC_OscConfig+0x8a>
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014bc:	f7fe ffc6 	bl	800044c <HAL_GetTick>
 80014c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	0398      	lsls	r0, r3, #14
 80014c6:	d4ca      	bmi.n	800145e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7fe ffc0 	bl	800044c <HAL_GetTick>
 80014cc:	1b80      	subs	r0, r0, r6
 80014ce:	2864      	cmp	r0, #100	@ 0x64
 80014d0:	d9f7      	bls.n	80014c2 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80014d2:	2003      	movs	r0, #3
}
 80014d4:	b002      	add	sp, #8
 80014d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014da:	b99b      	cbnz	r3, 8001504 <HAL_RCC_OscConfig+0xb4>
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014e2:	6023      	str	r3, [r4, #0]
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014ec:	f7fe ffae 	bl	800044c <HAL_GetTick>
 80014f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	0399      	lsls	r1, r3, #14
 80014f6:	d5b2      	bpl.n	800145e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7fe ffa8 	bl	800044c <HAL_GetTick>
 80014fc:	1b80      	subs	r0, r0, r6
 80014fe:	2864      	cmp	r0, #100	@ 0x64
 8001500:	d9f7      	bls.n	80014f2 <HAL_RCC_OscConfig+0xa2>
 8001502:	e7e6      	b.n	80014d2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	d103      	bne.n	8001514 <HAL_RCC_OscConfig+0xc4>
 800150c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001510:	6023      	str	r3, [r4, #0]
 8001512:	e7cf      	b.n	80014b4 <HAL_RCC_OscConfig+0x64>
 8001514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001518:	6023      	str	r3, [r4, #0]
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001520:	e7cb      	b.n	80014ba <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001522:	4c68      	ldr	r4, [pc, #416]	@ (80016c4 <HAL_RCC_OscConfig+0x274>)
 8001524:	6863      	ldr	r3, [r4, #4]
 8001526:	f013 0f0c 	tst.w	r3, #12
 800152a:	d007      	beq.n	800153c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800152c:	6863      	ldr	r3, [r4, #4]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b08      	cmp	r3, #8
 8001534:	d110      	bne.n	8001558 <HAL_RCC_OscConfig+0x108>
 8001536:	6863      	ldr	r3, [r4, #4]
 8001538:	03da      	lsls	r2, r3, #15
 800153a:	d40d      	bmi.n	8001558 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	079b      	lsls	r3, r3, #30
 8001540:	d502      	bpl.n	8001548 <HAL_RCC_OscConfig+0xf8>
 8001542:	692b      	ldr	r3, [r5, #16]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d1af      	bne.n	80014a8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	696a      	ldr	r2, [r5, #20]
 800154c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001550:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001554:	6023      	str	r3, [r4, #0]
 8001556:	e785      	b.n	8001464 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001558:	692a      	ldr	r2, [r5, #16]
 800155a:	4b5b      	ldr	r3, [pc, #364]	@ (80016c8 <HAL_RCC_OscConfig+0x278>)
 800155c:	b16a      	cbz	r2, 800157a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001562:	f7fe ff73 	bl	800044c <HAL_GetTick>
 8001566:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	079f      	lsls	r7, r3, #30
 800156c:	d4ec      	bmi.n	8001548 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156e:	f7fe ff6d 	bl	800044c <HAL_GetTick>
 8001572:	1b80      	subs	r0, r0, r6
 8001574:	2802      	cmp	r0, #2
 8001576:	d9f7      	bls.n	8001568 <HAL_RCC_OscConfig+0x118>
 8001578:	e7ab      	b.n	80014d2 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800157a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800157c:	f7fe ff66 	bl	800044c <HAL_GetTick>
 8001580:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	6823      	ldr	r3, [r4, #0]
 8001584:	0798      	lsls	r0, r3, #30
 8001586:	f57f af6d 	bpl.w	8001464 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158a:	f7fe ff5f 	bl	800044c <HAL_GetTick>
 800158e:	1b80      	subs	r0, r0, r6
 8001590:	2802      	cmp	r0, #2
 8001592:	d9f6      	bls.n	8001582 <HAL_RCC_OscConfig+0x132>
 8001594:	e79d      	b.n	80014d2 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001596:	69aa      	ldr	r2, [r5, #24]
 8001598:	4e4a      	ldr	r6, [pc, #296]	@ (80016c4 <HAL_RCC_OscConfig+0x274>)
 800159a:	4b4b      	ldr	r3, [pc, #300]	@ (80016c8 <HAL_RCC_OscConfig+0x278>)
 800159c:	b1e2      	cbz	r2, 80015d8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800159e:	2201      	movs	r2, #1
 80015a0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80015a4:	f7fe ff52 	bl	800044c <HAL_GetTick>
 80015a8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80015ac:	079b      	lsls	r3, r3, #30
 80015ae:	d50d      	bpl.n	80015cc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015b0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80015b4:	4b45      	ldr	r3, [pc, #276]	@ (80016cc <HAL_RCC_OscConfig+0x27c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80015bc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80015be:	bf00      	nop
  }
  while (Delay --);
 80015c0:	9b01      	ldr	r3, [sp, #4]
 80015c2:	1e5a      	subs	r2, r3, #1
 80015c4:	9201      	str	r2, [sp, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f9      	bne.n	80015be <HAL_RCC_OscConfig+0x16e>
 80015ca:	e74f      	b.n	800146c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015cc:	f7fe ff3e 	bl	800044c <HAL_GetTick>
 80015d0:	1b00      	subs	r0, r0, r4
 80015d2:	2802      	cmp	r0, #2
 80015d4:	d9e9      	bls.n	80015aa <HAL_RCC_OscConfig+0x15a>
 80015d6:	e77c      	b.n	80014d2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80015d8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80015dc:	f7fe ff36 	bl	800044c <HAL_GetTick>
 80015e0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e2:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80015e4:	079f      	lsls	r7, r3, #30
 80015e6:	f57f af41 	bpl.w	800146c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ea:	f7fe ff2f 	bl	800044c <HAL_GetTick>
 80015ee:	1b00      	subs	r0, r0, r4
 80015f0:	2802      	cmp	r0, #2
 80015f2:	d9f6      	bls.n	80015e2 <HAL_RCC_OscConfig+0x192>
 80015f4:	e76d      	b.n	80014d2 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4c33      	ldr	r4, [pc, #204]	@ (80016c4 <HAL_RCC_OscConfig+0x274>)
 80015f8:	69e3      	ldr	r3, [r4, #28]
 80015fa:	00d8      	lsls	r0, r3, #3
 80015fc:	d424      	bmi.n	8001648 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80015fe:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001600:	69e3      	ldr	r3, [r4, #28]
 8001602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001606:	61e3      	str	r3, [r4, #28]
 8001608:	69e3      	ldr	r3, [r4, #28]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001612:	4e2f      	ldr	r6, [pc, #188]	@ (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001614:	6833      	ldr	r3, [r6, #0]
 8001616:	05d9      	lsls	r1, r3, #23
 8001618:	d518      	bpl.n	800164c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161a:	68eb      	ldr	r3, [r5, #12]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d126      	bne.n	800166e <HAL_RCC_OscConfig+0x21e>
 8001620:	6a23      	ldr	r3, [r4, #32]
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001628:	f7fe ff10 	bl	800044c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001630:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001632:	6a23      	ldr	r3, [r4, #32]
 8001634:	079b      	lsls	r3, r3, #30
 8001636:	d53f      	bpl.n	80016b8 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001638:	2f00      	cmp	r7, #0
 800163a:	f43f af1b 	beq.w	8001474 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800163e:	69e3      	ldr	r3, [r4, #28]
 8001640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001644:	61e3      	str	r3, [r4, #28]
 8001646:	e715      	b.n	8001474 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001648:	2700      	movs	r7, #0
 800164a:	e7e2      	b.n	8001612 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164c:	6833      	ldr	r3, [r6, #0]
 800164e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001652:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001654:	f7fe fefa 	bl	800044c <HAL_GetTick>
 8001658:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165a:	6833      	ldr	r3, [r6, #0]
 800165c:	05da      	lsls	r2, r3, #23
 800165e:	d4dc      	bmi.n	800161a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001660:	f7fe fef4 	bl	800044c <HAL_GetTick>
 8001664:	eba0 0008 	sub.w	r0, r0, r8
 8001668:	2864      	cmp	r0, #100	@ 0x64
 800166a:	d9f6      	bls.n	800165a <HAL_RCC_OscConfig+0x20a>
 800166c:	e731      	b.n	80014d2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166e:	b9ab      	cbnz	r3, 800169c <HAL_RCC_OscConfig+0x24c>
 8001670:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	6223      	str	r3, [r4, #32]
 800167c:	6a23      	ldr	r3, [r4, #32]
 800167e:	f023 0304 	bic.w	r3, r3, #4
 8001682:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001684:	f7fe fee2 	bl	800044c <HAL_GetTick>
 8001688:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168a:	6a23      	ldr	r3, [r4, #32]
 800168c:	0798      	lsls	r0, r3, #30
 800168e:	d5d3      	bpl.n	8001638 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f7fe fedc 	bl	800044c <HAL_GetTick>
 8001694:	1b80      	subs	r0, r0, r6
 8001696:	4540      	cmp	r0, r8
 8001698:	d9f7      	bls.n	800168a <HAL_RCC_OscConfig+0x23a>
 800169a:	e71a      	b.n	80014d2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800169c:	2b05      	cmp	r3, #5
 800169e:	6a23      	ldr	r3, [r4, #32]
 80016a0:	d103      	bne.n	80016aa <HAL_RCC_OscConfig+0x25a>
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6223      	str	r3, [r4, #32]
 80016a8:	e7ba      	b.n	8001620 <HAL_RCC_OscConfig+0x1d0>
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6223      	str	r3, [r4, #32]
 80016b0:	6a23      	ldr	r3, [r4, #32]
 80016b2:	f023 0304 	bic.w	r3, r3, #4
 80016b6:	e7b6      	b.n	8001626 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7fe fec8 	bl	800044c <HAL_GetTick>
 80016bc:	1b80      	subs	r0, r0, r6
 80016be:	4540      	cmp	r0, r8
 80016c0:	d9b7      	bls.n	8001632 <HAL_RCC_OscConfig+0x1e2>
 80016c2:	e706      	b.n	80014d2 <HAL_RCC_OscConfig+0x82>
 80016c4:	40021000 	.word	0x40021000
 80016c8:	42420000 	.word	0x42420000
 80016cc:	20000000 	.word	0x20000000
 80016d0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d4:	4c2a      	ldr	r4, [pc, #168]	@ (8001780 <HAL_RCC_OscConfig+0x330>)
 80016d6:	6862      	ldr	r2, [r4, #4]
 80016d8:	f002 020c 	and.w	r2, r2, #12
 80016dc:	2a08      	cmp	r2, #8
 80016de:	d03e      	beq.n	800175e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e0:	2200      	movs	r2, #0
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	4b27      	ldr	r3, [pc, #156]	@ (8001784 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 80016e6:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e8:	d12c      	bne.n	8001744 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80016ea:	f7fe feaf 	bl	800044c <HAL_GetTick>
 80016ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	0199      	lsls	r1, r3, #6
 80016f4:	d420      	bmi.n	8001738 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016f6:	6a2b      	ldr	r3, [r5, #32]
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016fc:	d105      	bne.n	800170a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016fe:	6862      	ldr	r2, [r4, #4]
 8001700:	68a9      	ldr	r1, [r5, #8]
 8001702:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001706:	430a      	orrs	r2, r1
 8001708:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800170a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800170c:	6862      	ldr	r2, [r4, #4]
 800170e:	430b      	orrs	r3, r1
 8001710:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8001714:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001716:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001718:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800171a:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <HAL_RCC_OscConfig+0x334>)
 800171c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800171e:	f7fe fe95 	bl	800044c <HAL_GetTick>
 8001722:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	019a      	lsls	r2, r3, #6
 8001728:	f53f aea8 	bmi.w	800147c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172c:	f7fe fe8e 	bl	800044c <HAL_GetTick>
 8001730:	1b40      	subs	r0, r0, r5
 8001732:	2802      	cmp	r0, #2
 8001734:	d9f6      	bls.n	8001724 <HAL_RCC_OscConfig+0x2d4>
 8001736:	e6cc      	b.n	80014d2 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001738:	f7fe fe88 	bl	800044c <HAL_GetTick>
 800173c:	1b80      	subs	r0, r0, r6
 800173e:	2802      	cmp	r0, #2
 8001740:	d9d6      	bls.n	80016f0 <HAL_RCC_OscConfig+0x2a0>
 8001742:	e6c6      	b.n	80014d2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001744:	f7fe fe82 	bl	800044c <HAL_GetTick>
 8001748:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	019b      	lsls	r3, r3, #6
 800174e:	f57f ae95 	bpl.w	800147c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001752:	f7fe fe7b 	bl	800044c <HAL_GetTick>
 8001756:	1b40      	subs	r0, r0, r5
 8001758:	2802      	cmp	r0, #2
 800175a:	d9f6      	bls.n	800174a <HAL_RCC_OscConfig+0x2fa>
 800175c:	e6b9      	b.n	80014d2 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800175e:	2b01      	cmp	r3, #1
 8001760:	f43f aea2 	beq.w	80014a8 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8001764:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	6a2b      	ldr	r3, [r5, #32]
 8001768:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 800176c:	429a      	cmp	r2, r3
 800176e:	f47f ae9b 	bne.w	80014a8 <HAL_RCC_OscConfig+0x58>
 8001772:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001774:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001778:	1ac0      	subs	r0, r0, r3
 800177a:	bf18      	it	ne
 800177c:	2001      	movne	r0, #1
 800177e:	e6a9      	b.n	80014d4 <HAL_RCC_OscConfig+0x84>
 8001780:	40021000 	.word	0x40021000
 8001784:	42420000 	.word	0x42420000

08001788 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001788:	4a0d      	ldr	r2, [pc, #52]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0x38>)
 800178a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800178c:	f003 010c 	and.w	r1, r3, #12
 8001790:	2908      	cmp	r1, #8
 8001792:	d112      	bne.n	80017ba <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001794:	480b      	ldr	r0, [pc, #44]	@ (80017c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001796:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800179a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800179c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800179e:	d509      	bpl.n	80017b4 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017a0:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017a2:	4a09      	ldr	r2, [pc, #36]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017a4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017a8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017aa:	4a08      	ldr	r2, [pc, #32]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x44>)
 80017ac:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80017b2:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x48>)
 80017b6:	4358      	muls	r0, r3
 80017b8:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80017ba:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	0800334a 	.word	0x0800334a
 80017c8:	007a1200 	.word	0x007a1200
 80017cc:	08003348 	.word	0x08003348
 80017d0:	003d0900 	.word	0x003d0900

080017d4 <HAL_RCC_ClockConfig>:
{
 80017d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017d8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80017da:	4604      	mov	r4, r0
 80017dc:	b910      	cbnz	r0, 80017e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80017de:	2001      	movs	r0, #1
}
 80017e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e4:	4a44      	ldr	r2, [pc, #272]	@ (80018f8 <HAL_RCC_ClockConfig+0x124>)
 80017e6:	6813      	ldr	r3, [r2, #0]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	428b      	cmp	r3, r1
 80017ee:	d328      	bcc.n	8001842 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	6821      	ldr	r1, [r4, #0]
 80017f2:	078e      	lsls	r6, r1, #30
 80017f4:	d430      	bmi.n	8001858 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f6:	07ca      	lsls	r2, r1, #31
 80017f8:	d443      	bmi.n	8001882 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017fa:	4a3f      	ldr	r2, [pc, #252]	@ (80018f8 <HAL_RCC_ClockConfig+0x124>)
 80017fc:	6813      	ldr	r3, [r2, #0]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	42ab      	cmp	r3, r5
 8001804:	d865      	bhi.n	80018d2 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001806:	6822      	ldr	r2, [r4, #0]
 8001808:	4d3c      	ldr	r5, [pc, #240]	@ (80018fc <HAL_RCC_ClockConfig+0x128>)
 800180a:	f012 0f04 	tst.w	r2, #4
 800180e:	d16c      	bne.n	80018ea <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001810:	0713      	lsls	r3, r2, #28
 8001812:	d506      	bpl.n	8001822 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001814:	686b      	ldr	r3, [r5, #4]
 8001816:	6922      	ldr	r2, [r4, #16]
 8001818:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800181c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001820:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001822:	f7ff ffb1 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8001826:	686b      	ldr	r3, [r5, #4]
 8001828:	4a35      	ldr	r2, [pc, #212]	@ (8001900 <HAL_RCC_ClockConfig+0x12c>)
 800182a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	40d8      	lsrs	r0, r3
 8001832:	4b34      	ldr	r3, [pc, #208]	@ (8001904 <HAL_RCC_ClockConfig+0x130>)
 8001834:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001836:	4b34      	ldr	r3, [pc, #208]	@ (8001908 <HAL_RCC_ClockConfig+0x134>)
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	f7fe fdc5 	bl	80003c8 <HAL_InitTick>
  return HAL_OK;
 800183e:	2000      	movs	r0, #0
 8001840:	e7ce      	b.n	80017e0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	6813      	ldr	r3, [r2, #0]
 8001844:	f023 0307 	bic.w	r3, r3, #7
 8001848:	430b      	orrs	r3, r1
 800184a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184c:	6813      	ldr	r3, [r2, #0]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	428b      	cmp	r3, r1
 8001854:	d1c3      	bne.n	80017de <HAL_RCC_ClockConfig+0xa>
 8001856:	e7cb      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	4b28      	ldr	r3, [pc, #160]	@ (80018fc <HAL_RCC_ClockConfig+0x128>)
 800185a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800185e:	bf1e      	ittt	ne
 8001860:	685a      	ldrne	r2, [r3, #4]
 8001862:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8001866:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001868:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800186a:	bf42      	ittt	mi
 800186c:	685a      	ldrmi	r2, [r3, #4]
 800186e:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001872:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	68a0      	ldr	r0, [r4, #8]
 8001878:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800187c:	4302      	orrs	r2, r0
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	e7b9      	b.n	80017f6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001882:	6862      	ldr	r2, [r4, #4]
 8001884:	4e1d      	ldr	r6, [pc, #116]	@ (80018fc <HAL_RCC_ClockConfig+0x128>)
 8001886:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001888:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188a:	d11a      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001890:	d0a5      	beq.n	80017de <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001892:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001898:	f023 0303 	bic.w	r3, r3, #3
 800189c:	4313      	orrs	r3, r2
 800189e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80018a0:	f7fe fdd4 	bl	800044c <HAL_GetTick>
 80018a4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	6873      	ldr	r3, [r6, #4]
 80018a8:	6862      	ldr	r2, [r4, #4]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80018b2:	d0a2      	beq.n	80017fa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7fe fdca 	bl	800044c <HAL_GetTick>
 80018b8:	1bc0      	subs	r0, r0, r7
 80018ba:	4540      	cmp	r0, r8
 80018bc:	d9f3      	bls.n	80018a6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80018be:	2003      	movs	r0, #3
 80018c0:	e78e      	b.n	80017e0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c2:	2a02      	cmp	r2, #2
 80018c4:	d102      	bne.n	80018cc <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80018ca:	e7e1      	b.n	8001890 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018cc:	f013 0f02 	tst.w	r3, #2
 80018d0:	e7de      	b.n	8001890 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	6813      	ldr	r3, [r2, #0]
 80018d4:	f023 0307 	bic.w	r3, r3, #7
 80018d8:	432b      	orrs	r3, r5
 80018da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	42ab      	cmp	r3, r5
 80018e4:	f47f af7b 	bne.w	80017de <HAL_RCC_ClockConfig+0xa>
 80018e8:	e78d      	b.n	8001806 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ea:	686b      	ldr	r3, [r5, #4]
 80018ec:	68e1      	ldr	r1, [r4, #12]
 80018ee:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80018f2:	430b      	orrs	r3, r1
 80018f4:	606b      	str	r3, [r5, #4]
 80018f6:	e78b      	b.n	8001810 <HAL_RCC_ClockConfig+0x3c>
 80018f8:	40022000 	.word	0x40022000
 80018fc:	40021000 	.word	0x40021000
 8001900:	08003338 	.word	0x08003338
 8001904:	20000000 	.word	0x20000000
 8001908:	20000010 	.word	0x20000010

0800190c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800190c:	6803      	ldr	r3, [r0, #0]
{
 800190e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001912:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001914:	07d8      	lsls	r0, r3, #31
 8001916:	d521      	bpl.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001918:	4c36      	ldr	r4, [pc, #216]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800191a:	69e3      	ldr	r3, [r4, #28]
 800191c:	00d9      	lsls	r1, r3, #3
 800191e:	d42b      	bmi.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001920:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	69e3      	ldr	r3, [r4, #28]
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001928:	61e3      	str	r3, [r4, #28]
 800192a:	69e3      	ldr	r3, [r4, #28]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4f30      	ldr	r7, [pc, #192]	@ (80019f8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	05da      	lsls	r2, r3, #23
 800193a:	d51f      	bpl.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800193c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800193e:	686a      	ldr	r2, [r5, #4]
 8001940:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8001944:	d12e      	bne.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001946:	6a23      	ldr	r3, [r4, #32]
 8001948:	686a      	ldr	r2, [r5, #4]
 800194a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800194e:	4313      	orrs	r3, r2
 8001950:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001952:	b11e      	cbz	r6, 800195c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001954:	69e3      	ldr	r3, [r4, #28]
 8001956:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800195a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800195c:	682a      	ldr	r2, [r5, #0]
 800195e:	0791      	lsls	r1, r2, #30
 8001960:	d506      	bpl.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001962:	4924      	ldr	r1, [pc, #144]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001964:	68a8      	ldr	r0, [r5, #8]
 8001966:	684b      	ldr	r3, [r1, #4]
 8001968:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800196c:	4303      	orrs	r3, r0
 800196e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001970:	06d3      	lsls	r3, r2, #27
 8001972:	d436      	bmi.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001974:	2000      	movs	r0, #0
 8001976:	e012      	b.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8001978:	2600      	movs	r6, #0
 800197a:	e7db      	b.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001982:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001984:	f7fe fd62 	bl	800044c <HAL_GetTick>
 8001988:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	05db      	lsls	r3, r3, #23
 800198e:	d4d5      	bmi.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001990:	f7fe fd5c 	bl	800044c <HAL_GetTick>
 8001994:	eba0 0008 	sub.w	r0, r0, r8
 8001998:	2864      	cmp	r0, #100	@ 0x64
 800199a:	d9f6      	bls.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 800199c:	2003      	movs	r0, #3
}
 800199e:	b002      	add	sp, #8
 80019a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019a4:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d0cc      	beq.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80019ac:	2001      	movs	r0, #1
 80019ae:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019b0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80019b2:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019b6:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019b8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019bc:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019be:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 80019c2:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019c4:	d5bf      	bpl.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80019c6:	f7fe fd41 	bl	800044c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80019ce:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d0:	6a23      	ldr	r3, [r4, #32]
 80019d2:	0798      	lsls	r0, r3, #30
 80019d4:	d4b7      	bmi.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7fe fd39 	bl	800044c <HAL_GetTick>
 80019da:	1bc0      	subs	r0, r0, r7
 80019dc:	4540      	cmp	r0, r8
 80019de:	d9f7      	bls.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 80019e0:	e7dc      	b.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019e2:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80019e4:	68e9      	ldr	r1, [r5, #12]
 80019e6:	6853      	ldr	r3, [r2, #4]
 80019e8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80019ec:	430b      	orrs	r3, r1
 80019ee:	6053      	str	r3, [r2, #4]
 80019f0:	e7c0      	b.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40007000 	.word	0x40007000
 80019fc:	42420000 	.word	0x42420000

08001a00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001a00:	b084      	sub	sp, #16
 8001a02:	a804      	add	r0, sp, #16
 8001a04:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001a08:	2000      	movs	r0, #0
 8001a0a:	b004      	add	sp, #16
 8001a0c:	4770      	bx	lr

08001a0e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8001a0e:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8001a10:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 8001a14:	2000      	movs	r0, #0
 8001a16:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8001a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8001a1e:	4770      	bx	lr

08001a20 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001a20:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8001a24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001a28:	045b      	lsls	r3, r3, #17
 8001a2a:	0c5b      	lsrs	r3, r3, #17
 8001a2c:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8001a30:	2000      	movs	r0, #0
 8001a32:	4770      	bx	lr

08001a34 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001a34:	2000      	movs	r0, #0
 8001a36:	4770      	bx	lr

08001a38 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	a804      	add	r0, sp, #16
 8001a3e:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001a42:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001a44:	2301      	movs	r3, #1
 8001a46:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 8001a4a:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8001a4e:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001a52:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 8001a56:	b004      	add	sp, #16
 8001a58:	bd10      	pop	{r4, pc}
	...

08001a5c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001a5e:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8001a60:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001a62:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8001a66:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001a68:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8001a6c:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8001a70:	0424      	lsls	r4, r4, #16
 8001a72:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8001a74:	2d03      	cmp	r5, #3
 8001a76:	d803      	bhi.n	8001a80 <USB_ActivateEndpoint+0x24>
 8001a78:	e8df f005 	tbb	[pc, r5]
 8001a7c:	45474941 	.word	0x45474941
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8001a80:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8001a82:	f248 0680 	movw	r6, #32896	@ 0x8080
 8001a86:	4334      	orrs	r4, r6
 8001a88:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001a8c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001a90:	4f9f      	ldr	r7, [pc, #636]	@ (8001d10 <USB_ActivateEndpoint+0x2b4>)
 8001a92:	b2a4      	uxth	r4, r4
 8001a94:	403c      	ands	r4, r7
 8001a96:	4314      	orrs	r4, r2
 8001a98:	4334      	orrs	r4, r6
 8001a9a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8001a9e:	7b0c      	ldrb	r4, [r1, #12]
 8001aa0:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8001aa4:	2c00      	cmp	r4, #0
 8001aa6:	f040 808d 	bne.w	8001bc4 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001aaa:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8001aac:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001aae:	0864      	lsrs	r4, r4, #1
 8001ab0:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8001ab2:	b37e      	cbz	r6, 8001b14 <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001ab4:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8001ab8:	b289      	uxth	r1, r1
 8001aba:	4461      	add	r1, ip
 8001abc:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001ac0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001ac4:	0649      	lsls	r1, r1, #25
 8001ac6:	d509      	bpl.n	8001adc <USB_ActivateEndpoint+0x80>
 8001ac8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001acc:	b289      	uxth	r1, r1
 8001ace:	4039      	ands	r1, r7
 8001ad0:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8001ad4:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8001ad8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001adc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001ae0:	4c8c      	ldr	r4, [pc, #560]	@ (8001d14 <USB_ActivateEndpoint+0x2b8>)
 8001ae2:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8001ae4:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001ae6:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8001aea:	d001      	beq.n	8001af0 <USB_ActivateEndpoint+0x94>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001aec:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001af0:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8001af4:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001af8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8001afc:	e04c      	b.n	8001b98 <USB_ActivateEndpoint+0x13c>
  HAL_StatusTypeDef ret = HAL_OK;
 8001afe:	4628      	mov	r0, r5
      wEpRegVal |= USB_EP_CONTROL;
 8001b00:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
      break;
 8001b04:	e7bd      	b.n	8001a82 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8001b06:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  switch (ep->type)
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	e7b9      	b.n	8001a82 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8001b0e:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 8001b12:	e7fa      	b.n	8001b0a <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001b14:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001b18:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001b1a:	b2ad      	uxth	r5, r5
 8001b1c:	4465      	add	r5, ip
 8001b1e:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001b22:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8001b26:	293e      	cmp	r1, #62	@ 0x3e
 8001b28:	b2a4      	uxth	r4, r4
 8001b2a:	4464      	add	r4, ip
 8001b2c:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 8001b30:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8001b34:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 8001b38:	d92f      	bls.n	8001b9a <USB_ActivateEndpoint+0x13e>
 8001b3a:	094d      	lsrs	r5, r1, #5
 8001b3c:	06ce      	lsls	r6, r1, #27
 8001b3e:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8001b42:	bf08      	it	eq
 8001b44:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8001b48:	b289      	uxth	r1, r1
 8001b4a:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8001b4e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8001b52:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001b56:	b289      	uxth	r1, r1
 8001b58:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001b5c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001b60:	044f      	lsls	r7, r1, #17
 8001b62:	d50d      	bpl.n	8001b80 <USB_ActivateEndpoint+0x124>
 8001b64:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001b68:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8001b6c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8001b70:	0409      	lsls	r1, r1, #16
 8001b72:	0c09      	lsrs	r1, r1, #16
 8001b74:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8001b78:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001b7c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8001b80:	4c65      	ldr	r4, [pc, #404]	@ (8001d18 <USB_ActivateEndpoint+0x2bc>)
 8001b82:	b9c2      	cbnz	r2, 8001bb6 <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001b84:	881a      	ldrh	r2, [r3, #0]
 8001b86:	b292      	uxth	r2, r2
 8001b88:	4022      	ands	r2, r4
 8001b8a:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8001b8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b96:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8001b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001b9a:	b911      	cbnz	r1, 8001ba2 <USB_ActivateEndpoint+0x146>
 8001b9c:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8001ba0:	e7d5      	b.n	8001b4e <USB_ActivateEndpoint+0xf2>
 8001ba2:	084d      	lsrs	r5, r1, #1
 8001ba4:	07c9      	lsls	r1, r1, #31
 8001ba6:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8001baa:	bf48      	it	mi
 8001bac:	3501      	addmi	r5, #1
 8001bae:	b289      	uxth	r1, r1
 8001bb0:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8001bb4:	e7cf      	b.n	8001b56 <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8001bb6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001bba:	b289      	uxth	r1, r1
 8001bbc:	4021      	ands	r1, r4
 8001bbe:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 8001bc2:	e795      	b.n	8001af0 <USB_ActivateEndpoint+0x94>
    if (ep->type == EP_TYPE_BULK)
 8001bc4:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8001bc6:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8001bca:	d15b      	bne.n	8001c84 <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8001bcc:	b2a4      	uxth	r4, r4
 8001bce:	403c      	ands	r4, r7
 8001bd0:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 8001bd4:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8001bd8:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8001bdc:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8001be0:	890e      	ldrh	r6, [r1, #8]
 8001be2:	b2a4      	uxth	r4, r4
 8001be4:	0876      	lsrs	r6, r6, #1
 8001be6:	4464      	add	r4, ip
 8001be8:	0076      	lsls	r6, r6, #1
 8001bea:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 8001bee:	894e      	ldrh	r6, [r1, #10]
 8001bf0:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8001bf4:	0876      	lsrs	r6, r6, #1
 8001bf6:	b2a4      	uxth	r4, r4
 8001bf8:	4464      	add	r4, ip
 8001bfa:	0076      	lsls	r6, r6, #1
 8001bfc:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 8001c00:	7849      	ldrb	r1, [r1, #1]
 8001c02:	2900      	cmp	r1, #0
 8001c04:	d148      	bne.n	8001c98 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001c06:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001c0a:	044e      	lsls	r6, r1, #17
 8001c0c:	d50d      	bpl.n	8001c2a <USB_ActivateEndpoint+0x1ce>
 8001c0e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001c12:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8001c16:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8001c1a:	0409      	lsls	r1, r1, #16
 8001c1c:	0c09      	lsrs	r1, r1, #16
 8001c1e:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8001c22:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001c26:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001c2a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001c2e:	064d      	lsls	r5, r1, #25
 8001c30:	d50d      	bpl.n	8001c4e <USB_ActivateEndpoint+0x1f2>
 8001c32:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001c36:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8001c3a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8001c3e:	0409      	lsls	r1, r1, #16
 8001c40:	0c09      	lsrs	r1, r1, #16
 8001c42:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8001c46:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8001c4a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001c4e:	f248 0480 	movw	r4, #32896	@ 0x8080
 8001c52:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001c56:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8001c5a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8001c5e:	0409      	lsls	r1, r1, #16
 8001c60:	0c09      	lsrs	r1, r1, #16
 8001c62:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8001c66:	4321      	orrs	r1, r4
 8001c68:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001c6c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001c70:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8001c74:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8001c78:	0409      	lsls	r1, r1, #16
 8001c7a:	0c09      	lsrs	r1, r1, #16
 8001c7c:	430c      	orrs	r4, r1
 8001c7e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8001c82:	e789      	b.n	8001b98 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8001c84:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8001c88:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8001c8c:	0424      	lsls	r4, r4, #16
 8001c8e:	0c24      	lsrs	r4, r4, #16
 8001c90:	4326      	orrs	r6, r4
 8001c92:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8001c96:	e7a1      	b.n	8001bdc <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001c98:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001c9c:	044c      	lsls	r4, r1, #17
 8001c9e:	d50d      	bpl.n	8001cbc <USB_ActivateEndpoint+0x260>
 8001ca0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001ca4:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8001ca8:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8001cac:	0409      	lsls	r1, r1, #16
 8001cae:	0c09      	lsrs	r1, r1, #16
 8001cb0:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8001cb4:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001cb8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001cbc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001cc0:	0649      	lsls	r1, r1, #25
 8001cc2:	d50d      	bpl.n	8001ce0 <USB_ActivateEndpoint+0x284>
 8001cc4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001cc8:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8001ccc:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8001cd0:	0409      	lsls	r1, r1, #16
 8001cd2:	0c09      	lsrs	r1, r1, #16
 8001cd4:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8001cd8:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8001cdc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001ce0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001ce4:	4c0b      	ldr	r4, [pc, #44]	@ (8001d14 <USB_ActivateEndpoint+0x2b8>)
 8001ce6:	b289      	uxth	r1, r1
 8001ce8:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8001cea:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001cec:	bf18      	it	ne
 8001cee:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001cf2:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8001cf6:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001cfa:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001cfe:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001d02:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8001d06:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8001d0a:	0409      	lsls	r1, r1, #16
 8001d0c:	0c09      	lsrs	r1, r1, #16
 8001d0e:	e6ef      	b.n	8001af0 <USB_ActivateEndpoint+0x94>
 8001d10:	ffff8f8f 	.word	0xffff8f8f
 8001d14:	ffff8fbf 	.word	0xffff8fbf
 8001d18:	ffffbf8f 	.word	0xffffbf8f

08001d1c <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8001d1c:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001d1e:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8001d20:	7b09      	ldrb	r1, [r1, #12]
 8001d22:	bbd9      	cbnz	r1, 8001d9c <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8001d24:	b30a      	cbz	r2, 8001d6a <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001d26:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d2a:	0651      	lsls	r1, r2, #25
 8001d2c:	d50d      	bpl.n	8001d4a <USB_DeactivateEndpoint+0x2e>
 8001d2e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d32:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001d36:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d3a:	0412      	lsls	r2, r2, #16
 8001d3c:	0c12      	lsrs	r2, r2, #16
 8001d3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d42:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8001d46:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001d4a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d4e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001d52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001d56:	0412      	lsls	r2, r2, #16
 8001d58:	0c12      	lsrs	r2, r2, #16
 8001d5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d62:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8001d66:	2000      	movs	r0, #0
 8001d68:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001d6a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d6e:	0452      	lsls	r2, r2, #17
 8001d70:	d50d      	bpl.n	8001d8e <USB_DeactivateEndpoint+0x72>
 8001d72:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d76:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001d7a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d7e:	0412      	lsls	r2, r2, #16
 8001d80:	0c12      	lsrs	r2, r2, #16
 8001d82:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001d86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d8a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001d8e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001d96:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d9a:	e7dc      	b.n	8001d56 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8001d9c:	2a00      	cmp	r2, #0
 8001d9e:	d14a      	bne.n	8001e36 <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001da0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001da4:	0451      	lsls	r1, r2, #17
 8001da6:	d50d      	bpl.n	8001dc4 <USB_DeactivateEndpoint+0xa8>
 8001da8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001dac:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001db0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001db4:	0412      	lsls	r2, r2, #16
 8001db6:	0c12      	lsrs	r2, r2, #16
 8001db8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001dbc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dc0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001dc4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001dc8:	0652      	lsls	r2, r2, #25
 8001dca:	d50d      	bpl.n	8001de8 <USB_DeactivateEndpoint+0xcc>
 8001dcc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001dd0:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001dd4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001dd8:	0412      	lsls	r2, r2, #16
 8001dda:	0c12      	lsrs	r2, r2, #16
 8001ddc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001de0:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8001de4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001de8:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8001dec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001df0:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001df4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001df8:	0412      	lsls	r2, r2, #16
 8001dfa:	0c12      	lsrs	r2, r2, #16
 8001dfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e00:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8001e04:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001e08:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001e0c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001e10:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e14:	0412      	lsls	r2, r2, #16
 8001e16:	0c12      	lsrs	r2, r2, #16
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001e1e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001e22:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001e26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001e2a:	0412      	lsls	r2, r2, #16
 8001e2c:	0c12      	lsrs	r2, r2, #16
 8001e2e:	4311      	orrs	r1, r2
 8001e30:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8001e34:	e797      	b.n	8001d66 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001e36:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001e3a:	0451      	lsls	r1, r2, #17
 8001e3c:	d50d      	bpl.n	8001e5a <USB_DeactivateEndpoint+0x13e>
 8001e3e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001e42:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001e46:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e4a:	0412      	lsls	r2, r2, #16
 8001e4c:	0c12      	lsrs	r2, r2, #16
 8001e4e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001e52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e56:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001e5a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001e5e:	0652      	lsls	r2, r2, #25
 8001e60:	d50d      	bpl.n	8001e7e <USB_DeactivateEndpoint+0x162>
 8001e62:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001e66:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001e6a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e6e:	0412      	lsls	r2, r2, #16
 8001e70:	0c12      	lsrs	r2, r2, #16
 8001e72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e76:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8001e7a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001e7e:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8001e82:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001e86:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001e8a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e8e:	0412      	lsls	r2, r2, #16
 8001e90:	0c12      	lsrs	r2, r2, #16
 8001e92:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001e96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e9a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001e9e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ea2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001ea6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001eaa:	0412      	lsls	r2, r2, #16
 8001eac:	0c12      	lsrs	r2, r2, #16
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001eb4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001eb8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001ebc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ec0:	e7b3      	b.n	8001e2a <USB_DeactivateEndpoint+0x10e>

08001ec2 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8001ec2:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8001ec4:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8001ec6:	b18b      	cbz	r3, 8001eec <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8001ec8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ecc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ed4:	041b      	lsls	r3, r3, #16
 8001ed6:	0c1b      	lsrs	r3, r3, #16
 8001ed8:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8001edc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ee4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8001ee8:	2000      	movs	r0, #0
 8001eea:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8001eec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ef0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ef8:	041b      	lsls	r3, r3, #16
 8001efa:	0c1b      	lsrs	r3, r3, #16
 8001efc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001f00:	e7ec      	b.n	8001edc <USB_EPSetStall+0x1a>

08001f02 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8001f02:	7b0b      	ldrb	r3, [r1, #12]
 8001f04:	bb3b      	cbnz	r3, 8001f56 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8001f06:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001f08:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8001f0a:	b333      	cbz	r3, 8001f5a <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001f0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f10:	065b      	lsls	r3, r3, #25
 8001f12:	d50d      	bpl.n	8001f30 <USB_EPClearStall+0x2e>
 8001f14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f20:	041b      	lsls	r3, r3, #16
 8001f22:	0c1b      	lsrs	r3, r3, #16
 8001f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001f2c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8001f30:	78cb      	ldrb	r3, [r1, #3]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d00f      	beq.n	8001f56 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001f36:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f42:	041b      	lsls	r3, r3, #16
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8001f56:	2000      	movs	r0, #0
 8001f58:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001f5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f5e:	045b      	lsls	r3, r3, #17
 8001f60:	d50d      	bpl.n	8001f7e <USB_EPClearStall+0x7c>
 8001f62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f6e:	041b      	lsls	r3, r3, #16
 8001f70:	0c1b      	lsrs	r3, r3, #16
 8001f72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f7a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001f7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f8a:	041b      	lsls	r3, r3, #16
 8001f8c:	0c1b      	lsrs	r3, r3, #16
 8001f8e:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8001f92:	e7da      	b.n	8001f4a <USB_EPClearStall+0x48>

08001f94 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8001f94:	b911      	cbnz	r1, 8001f9c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8001f96:	2380      	movs	r3, #128	@ 0x80
 8001f98:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	4770      	bx	lr

08001fa0 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	4770      	bx	lr

08001fa4 <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	4770      	bx	lr

08001fa8 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8001fa8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8001fac:	b280      	uxth	r0, r0
 8001fae:	4770      	bx	lr

08001fb0 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	4770      	bx	lr

08001fb4 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001fb4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8001fb8:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001fba:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 8001fc4:	4283      	cmp	r3, r0
 8001fc6:	d100      	bne.n	8001fca <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8001fc8:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8001fca:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8001fce:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 8001fd2:	e7f7      	b.n	8001fc4 <USB_WritePMA+0x10>

08001fd4 <USB_EPStartXfer>:
{
 8001fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8001fd8:	784b      	ldrb	r3, [r1, #1]
{
 8001fda:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8001fdc:	2b01      	cmp	r3, #1
{
 8001fde:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 8001fe0:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 8001fe2:	f040 8118 	bne.w	8002216 <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 8001fe6:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8001fea:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8001fec:	6949      	ldr	r1, [r1, #20]
    if (ep->xfer_len > ep->maxpacket)
 8001fee:	454f      	cmp	r7, r9
 8001ff0:	bf28      	it	cs
 8001ff2:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 8001ff4:	bb0a      	cbnz	r2, 800203a <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8001ff6:	b2bf      	uxth	r7, r7
 8001ff8:	88ea      	ldrh	r2, [r5, #6]
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	f7ff ffda 	bl	8001fb4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002000:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8002004:	7829      	ldrb	r1, [r5, #0]
 8002006:	b280      	uxth	r0, r0
 8002008:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 800200c:	0109      	lsls	r1, r1, #4
 800200e:	4402      	add	r2, r0
 8002010:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002012:	782a      	ldrb	r2, [r5, #0]
 8002014:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002018:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800201c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002020:	041b      	lsls	r3, r3, #16
 8002022:	0c1b      	lsrs	r3, r3, #16
 8002024:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 8002028:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800202a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800202e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002032:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8002036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 800203a:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800203c:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 8002040:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8002042:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002044:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8002048:	f040 80d0 	bne.w	80021ec <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 800204c:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800204e:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8002052:	f080 80b4 	bcs.w	80021be <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002056:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800205a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800205e:	0412      	lsls	r2, r2, #16
 8002060:	0c12      	lsrs	r2, r2, #16
 8002062:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8002066:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800206a:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800206e:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002072:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8002076:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002078:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 800207c:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 800207e:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002082:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002084:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002088:	d04e      	beq.n	8002128 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800208a:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 800208e:	4472      	add	r2, lr
 8002090:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002094:	896a      	ldrh	r2, [r5, #10]
 8002096:	f7ff ff8d 	bl	8001fb4 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800209a:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 800209c:	bf36      	itet	cc
 800209e:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 80020a0:	2300      	movcs	r3, #0
 80020a2:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80020a4:	786a      	ldrb	r2, [r5, #1]
 80020a6:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 80020a8:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80020ac:	b2b3      	uxth	r3, r6
 80020ae:	bb7a      	cbnz	r2, 8002110 <USB_EPStartXfer+0x13c>
 80020b0:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 80020b4:	7828      	ldrb	r0, [r5, #0]
 80020b6:	b292      	uxth	r2, r2
 80020b8:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 80020bc:	0100      	lsls	r0, r0, #4
 80020be:	4411      	add	r1, r2
 80020c0:	5a42      	ldrh	r2, [r0, r1]
 80020c2:	2e3e      	cmp	r6, #62	@ 0x3e
 80020c4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80020c8:	5242      	strh	r2, [r0, r1]
 80020ca:	d914      	bls.n	80020f6 <USB_EPStartXfer+0x122>
 80020cc:	5a42      	ldrh	r2, [r0, r1]
 80020ce:	0977      	lsrs	r7, r6, #5
 80020d0:	06f6      	lsls	r6, r6, #27
 80020d2:	bf08      	it	eq
 80020d4:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80020d8:	b292      	uxth	r2, r2
 80020da:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80020de:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80020e2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80020e6:	b292      	uxth	r2, r2
 80020e8:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80020ea:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80020ec:	4651      	mov	r1, sl
 80020ee:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80020f0:	f7ff ff60 	bl	8001fb4 <USB_WritePMA>
 80020f4:	e78d      	b.n	8002012 <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80020f6:	b90e      	cbnz	r6, 80020fc <USB_EPStartXfer+0x128>
 80020f8:	5a42      	ldrh	r2, [r0, r1]
 80020fa:	e7f0      	b.n	80020de <USB_EPStartXfer+0x10a>
 80020fc:	07f2      	lsls	r2, r6, #31
 80020fe:	5a42      	ldrh	r2, [r0, r1]
 8002100:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8002104:	bf48      	it	mi
 8002106:	3701      	addmi	r7, #1
 8002108:	b292      	uxth	r2, r2
 800210a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800210e:	e7ea      	b.n	80020e6 <USB_EPStartXfer+0x112>
 8002110:	2a01      	cmp	r2, #1
 8002112:	d1ea      	bne.n	80020ea <USB_EPStartXfer+0x116>
 8002114:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8002118:	7829      	ldrb	r1, [r5, #0]
 800211a:	b280      	uxth	r0, r0
 800211c:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8002120:	0109      	lsls	r1, r1, #4
 8002122:	4402      	add	r2, r0
 8002124:	528b      	strh	r3, [r1, r2]
 8002126:	e7e0      	b.n	80020ea <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002128:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800212c:	4472      	add	r2, lr
 800212e:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002132:	892a      	ldrh	r2, [r5, #8]
 8002134:	f7ff ff3e 	bl	8001fb4 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8002138:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 800213a:	bf36      	itet	cc
 800213c:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 800213e:	4643      	movcs	r3, r8
 8002140:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002142:	786a      	ldrb	r2, [r5, #1]
 8002144:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8002146:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800214a:	b2b3      	uxth	r3, r6
 800214c:	bb5a      	cbnz	r2, 80021a6 <USB_EPStartXfer+0x1d2>
 800214e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8002152:	7828      	ldrb	r0, [r5, #0]
 8002154:	b292      	uxth	r2, r2
 8002156:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 800215a:	0100      	lsls	r0, r0, #4
 800215c:	4411      	add	r1, r2
 800215e:	5a42      	ldrh	r2, [r0, r1]
 8002160:	2e3e      	cmp	r6, #62	@ 0x3e
 8002162:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002166:	5242      	strh	r2, [r0, r1]
 8002168:	d910      	bls.n	800218c <USB_EPStartXfer+0x1b8>
 800216a:	5a42      	ldrh	r2, [r0, r1]
 800216c:	0977      	lsrs	r7, r6, #5
 800216e:	06f6      	lsls	r6, r6, #27
 8002170:	bf08      	it	eq
 8002172:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002176:	b292      	uxth	r2, r2
 8002178:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800217c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002180:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002184:	b292      	uxth	r2, r2
 8002186:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002188:	896a      	ldrh	r2, [r5, #10]
 800218a:	e7af      	b.n	80020ec <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800218c:	b90e      	cbnz	r6, 8002192 <USB_EPStartXfer+0x1be>
 800218e:	5a42      	ldrh	r2, [r0, r1]
 8002190:	e7f4      	b.n	800217c <USB_EPStartXfer+0x1a8>
 8002192:	07f2      	lsls	r2, r6, #31
 8002194:	5a42      	ldrh	r2, [r0, r1]
 8002196:	ea4f 0756 	mov.w	r7, r6, lsr #1
 800219a:	bf48      	it	mi
 800219c:	3701      	addmi	r7, #1
 800219e:	b292      	uxth	r2, r2
 80021a0:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80021a4:	e7ee      	b.n	8002184 <USB_EPStartXfer+0x1b0>
 80021a6:	2a01      	cmp	r2, #1
 80021a8:	d1ee      	bne.n	8002188 <USB_EPStartXfer+0x1b4>
 80021aa:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80021ae:	7829      	ldrb	r1, [r5, #0]
 80021b0:	b280      	uxth	r0, r0
 80021b2:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 80021b6:	0109      	lsls	r1, r1, #4
 80021b8:	4402      	add	r2, r0
 80021ba:	528b      	strh	r3, [r1, r2]
 80021bc:	e7e4      	b.n	8002188 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80021be:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 80021c2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80021c6:	0412      	lsls	r2, r2, #16
 80021c8:	0c12      	lsrs	r2, r2, #16
 80021ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021d2:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80021d6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80021da:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80021de:	b29b      	uxth	r3, r3
 80021e0:	441a      	add	r2, r3
 80021e2:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80021e4:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80021e8:	892a      	ldrh	r2, [r5, #8]
 80021ea:	e781      	b.n	80020f0 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 80021ec:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80021ee:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 80021f2:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80021f4:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80021f8:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80021fa:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80021fc:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80021fe:	d506      	bpl.n	800220e <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002200:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 8002204:	4432      	add	r2, r6
 8002206:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800220a:	896a      	ldrh	r2, [r5, #10]
 800220c:	e770      	b.n	80020f0 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800220e:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8002212:	4432      	add	r2, r6
 8002214:	e7e6      	b.n	80021e4 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 8002216:	2a00      	cmp	r2, #0
 8002218:	d13b      	bne.n	8002292 <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 800221a:	698b      	ldr	r3, [r1, #24]
 800221c:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800221e:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 8002222:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8002224:	bf84      	itt	hi
 8002226:	1a5a      	subhi	r2, r3, r1
        len = ep->maxpacket;
 8002228:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800222a:	7829      	ldrb	r1, [r5, #0]
 800222c:	61aa      	str	r2, [r5, #24]
 800222e:	b280      	uxth	r0, r0
 8002230:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 8002234:	0109      	lsls	r1, r1, #4
 8002236:	4402      	add	r2, r0
 8002238:	5a88      	ldrh	r0, [r1, r2]
 800223a:	2b3e      	cmp	r3, #62	@ 0x3e
 800223c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002240:	5288      	strh	r0, [r1, r2]
 8002242:	d91a      	bls.n	800227a <USB_EPStartXfer+0x2a6>
 8002244:	0958      	lsrs	r0, r3, #5
 8002246:	06de      	lsls	r6, r3, #27
 8002248:	5a8b      	ldrh	r3, [r1, r2]
 800224a:	bf08      	it	eq
 800224c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002250:	b29b      	uxth	r3, r3
 8002252:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8002256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800225a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800225e:	b29b      	uxth	r3, r3
 8002260:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002262:	782a      	ldrb	r2, [r5, #0]
 8002264:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002268:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800226c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002270:	041b      	lsls	r3, r3, #16
 8002272:	0c1b      	lsrs	r3, r3, #16
 8002274:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8002278:	e6d6      	b.n	8002028 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800227a:	b90b      	cbnz	r3, 8002280 <USB_EPStartXfer+0x2ac>
 800227c:	5a8b      	ldrh	r3, [r1, r2]
 800227e:	e7ea      	b.n	8002256 <USB_EPStartXfer+0x282>
 8002280:	0858      	lsrs	r0, r3, #1
 8002282:	07db      	lsls	r3, r3, #31
 8002284:	5a8b      	ldrh	r3, [r1, r2]
 8002286:	bf48      	it	mi
 8002288:	3001      	addmi	r0, #1
 800228a:	b29b      	uxth	r3, r3
 800228c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8002290:	e7e5      	b.n	800225e <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 8002292:	78ca      	ldrb	r2, [r1, #3]
 8002294:	2a02      	cmp	r2, #2
 8002296:	d170      	bne.n	800237a <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002298:	2b00      	cmp	r3, #0
 800229a:	d138      	bne.n	800230e <USB_EPStartXfer+0x33a>
 800229c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80022a0:	780b      	ldrb	r3, [r1, #0]
 80022a2:	b292      	uxth	r2, r2
 80022a4:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	4410      	add	r0, r2
 80022ac:	5ac2      	ldrh	r2, [r0, r3]
 80022ae:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80022b2:	52c2      	strh	r2, [r0, r3]
 80022b4:	690a      	ldr	r2, [r1, #16]
 80022b6:	2a3e      	cmp	r2, #62	@ 0x3e
 80022b8:	d946      	bls.n	8002348 <USB_EPStartXfer+0x374>
 80022ba:	5ac1      	ldrh	r1, [r0, r3]
 80022bc:	0956      	lsrs	r6, r2, #5
 80022be:	06d7      	lsls	r7, r2, #27
 80022c0:	bf08      	it	eq
 80022c2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80022c6:	b289      	uxth	r1, r1
 80022c8:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80022cc:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80022d0:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80022d4:	b289      	uxth	r1, r1
 80022d6:	52c1      	strh	r1, [r0, r3]
 80022d8:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80022dc:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80022e0:	b280      	uxth	r0, r0
 80022e2:	4401      	add	r1, r0
 80022e4:	5ac8      	ldrh	r0, [r1, r3]
 80022e6:	2a3e      	cmp	r2, #62	@ 0x3e
 80022e8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80022ec:	52c8      	strh	r0, [r1, r3]
 80022ee:	d938      	bls.n	8002362 <USB_EPStartXfer+0x38e>
 80022f0:	0950      	lsrs	r0, r2, #5
 80022f2:	06d7      	lsls	r7, r2, #27
 80022f4:	5aca      	ldrh	r2, [r1, r3]
 80022f6:	bf08      	it	eq
 80022f8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80022fc:	b292      	uxth	r2, r2
 80022fe:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002302:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002306:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800230a:	b292      	uxth	r2, r2
 800230c:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 800230e:	69eb      	ldr	r3, [r5, #28]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0a6      	beq.n	8002262 <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8002314:	f244 0340 	movw	r3, #16448	@ 0x4040
 8002318:	782a      	ldrb	r2, [r5, #0]
 800231a:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800231e:	ea03 0001 	and.w	r0, r3, r1
 8002322:	438b      	bics	r3, r1
 8002324:	d001      	beq.n	800232a <USB_EPStartXfer+0x356>
 8002326:	2800      	cmp	r0, #0
 8002328:	d19b      	bne.n	8002262 <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800232a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800232e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002336:	041b      	lsls	r3, r3, #16
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800233e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002342:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8002346:	e78c      	b.n	8002262 <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002348:	b90a      	cbnz	r2, 800234e <USB_EPStartXfer+0x37a>
 800234a:	5ac1      	ldrh	r1, [r0, r3]
 800234c:	e7be      	b.n	80022cc <USB_EPStartXfer+0x2f8>
 800234e:	07d1      	lsls	r1, r2, #31
 8002350:	5ac1      	ldrh	r1, [r0, r3]
 8002352:	ea4f 0652 	mov.w	r6, r2, lsr #1
 8002356:	bf48      	it	mi
 8002358:	3601      	addmi	r6, #1
 800235a:	b289      	uxth	r1, r1
 800235c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002360:	e7b8      	b.n	80022d4 <USB_EPStartXfer+0x300>
 8002362:	b90a      	cbnz	r2, 8002368 <USB_EPStartXfer+0x394>
 8002364:	5aca      	ldrh	r2, [r1, r3]
 8002366:	e7cc      	b.n	8002302 <USB_EPStartXfer+0x32e>
 8002368:	0850      	lsrs	r0, r2, #1
 800236a:	07d6      	lsls	r6, r2, #31
 800236c:	5aca      	ldrh	r2, [r1, r3]
 800236e:	bf48      	it	mi
 8002370:	3001      	addmi	r0, #1
 8002372:	b292      	uxth	r2, r2
 8002374:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002378:	e7c7      	b.n	800230a <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 800237a:	2a01      	cmp	r2, #1
 800237c:	d15d      	bne.n	800243a <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 800237e:	698a      	ldr	r2, [r1, #24]
 8002380:	6909      	ldr	r1, [r1, #16]
 8002382:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 8002384:	bf94      	ite	ls
 8002386:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8002388:	1a50      	subhi	r0, r2, r1
 800238a:	61a8      	str	r0, [r5, #24]
          len = ep->maxpacket;
 800238c:	bf88      	it	hi
 800238e:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002390:	2b00      	cmp	r3, #0
 8002392:	f47f af66 	bne.w	8002262 <USB_EPStartXfer+0x28e>
 8002396:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 800239a:	782b      	ldrb	r3, [r5, #0]
 800239c:	b289      	uxth	r1, r1
 800239e:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	4408      	add	r0, r1
 80023a6:	5ac1      	ldrh	r1, [r0, r3]
 80023a8:	2a3e      	cmp	r2, #62	@ 0x3e
 80023aa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80023ae:	52c1      	strh	r1, [r0, r3]
 80023b0:	d92b      	bls.n	800240a <USB_EPStartXfer+0x436>
 80023b2:	06d1      	lsls	r1, r2, #27
 80023b4:	5ac1      	ldrh	r1, [r0, r3]
 80023b6:	ea4f 1652 	mov.w	r6, r2, lsr #5
 80023ba:	bf08      	it	eq
 80023bc:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80023c0:	b289      	uxth	r1, r1
 80023c2:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80023c6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80023ca:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80023ce:	b289      	uxth	r1, r1
 80023d0:	52c1      	strh	r1, [r0, r3]
 80023d2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80023d6:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80023da:	b280      	uxth	r0, r0
 80023dc:	4401      	add	r1, r0
 80023de:	5ac8      	ldrh	r0, [r1, r3]
 80023e0:	2a3e      	cmp	r2, #62	@ 0x3e
 80023e2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80023e6:	52c8      	strh	r0, [r1, r3]
 80023e8:	d91b      	bls.n	8002422 <USB_EPStartXfer+0x44e>
 80023ea:	0950      	lsrs	r0, r2, #5
 80023ec:	06d6      	lsls	r6, r2, #27
 80023ee:	5aca      	ldrh	r2, [r1, r3]
 80023f0:	bf08      	it	eq
 80023f2:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80023f6:	b292      	uxth	r2, r2
 80023f8:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80023fc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002400:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002404:	b292      	uxth	r2, r2
 8002406:	52ca      	strh	r2, [r1, r3]
 8002408:	e72b      	b.n	8002262 <USB_EPStartXfer+0x28e>
 800240a:	b90a      	cbnz	r2, 8002410 <USB_EPStartXfer+0x43c>
 800240c:	5ac1      	ldrh	r1, [r0, r3]
 800240e:	e7da      	b.n	80023c6 <USB_EPStartXfer+0x3f2>
 8002410:	5ac1      	ldrh	r1, [r0, r3]
 8002412:	0856      	lsrs	r6, r2, #1
 8002414:	07d7      	lsls	r7, r2, #31
 8002416:	bf48      	it	mi
 8002418:	3601      	addmi	r6, #1
 800241a:	b289      	uxth	r1, r1
 800241c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002420:	e7d5      	b.n	80023ce <USB_EPStartXfer+0x3fa>
 8002422:	b90a      	cbnz	r2, 8002428 <USB_EPStartXfer+0x454>
 8002424:	5aca      	ldrh	r2, [r1, r3]
 8002426:	e7e9      	b.n	80023fc <USB_EPStartXfer+0x428>
 8002428:	0850      	lsrs	r0, r2, #1
 800242a:	07d2      	lsls	r2, r2, #31
 800242c:	5aca      	ldrh	r2, [r1, r3]
 800242e:	bf48      	it	mi
 8002430:	3001      	addmi	r0, #1
 8002432:	b292      	uxth	r2, r2
 8002434:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002438:	e7e4      	b.n	8002404 <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 800243a:	2001      	movs	r0, #1
 800243c:	e5fb      	b.n	8002036 <USB_EPStartXfer+0x62>

0800243e <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800243e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 8002442:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002444:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002448:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 800244a:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800244c:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 800244e:	462e      	mov	r6, r5
 8002450:	3402      	adds	r4, #2
 8002452:	b936      	cbnz	r6, 8002462 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8002454:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8002456:	bf44      	itt	mi
 8002458:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800245c:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8002460:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8002462:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 8002466:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8002468:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800246a:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800246e:	0a12      	lsrs	r2, r2, #8
 8002470:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8002474:	e7ec      	b.n	8002450 <USB_ReadPMA+0x12>

08002476 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002476:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 800247a:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800247c:	b16b      	cbz	r3, 800249a <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800247e:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002482:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8002486:	28ff      	cmp	r0, #255	@ 0xff
 8002488:	d007      	beq.n	800249a <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4621      	mov	r1, r4
 800248e:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8002492:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8002494:	23ff      	movs	r3, #255	@ 0xff
 8002496:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 800249a:	2000      	movs	r0, #0
 800249c:	bd10      	pop	{r4, pc}
	...

080024a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80024a0:	2343      	movs	r3, #67	@ 0x43
 80024a2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80024a4:	4800      	ldr	r0, [pc, #0]	@ (80024a8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80024a6:	4770      	bx	lr
 80024a8:	20000058 	.word	0x20000058

080024ac <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80024ac:	2343      	movs	r3, #67	@ 0x43
 80024ae:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80024b0:	4800      	ldr	r0, [pc, #0]	@ (80024b4 <USBD_CDC_GetHSCfgDesc+0x8>)
 80024b2:	4770      	bx	lr
 80024b4:	2000009c 	.word	0x2000009c

080024b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80024b8:	2343      	movs	r3, #67	@ 0x43
 80024ba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80024bc:	4800      	ldr	r0, [pc, #0]	@ (80024c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80024be:	4770      	bx	lr
 80024c0:	20000014 	.word	0x20000014

080024c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80024c4:	230a      	movs	r3, #10
 80024c6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80024c8:	4800      	ldr	r0, [pc, #0]	@ (80024cc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80024ca:	4770      	bx	lr
 80024cc:	20000118 	.word	0x20000118

080024d0 <USBD_CDC_DataOut>:
{
 80024d0:	b538      	push	{r3, r4, r5, lr}
 80024d2:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80024d4:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80024d8:	f000 febe 	bl	8003258 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80024dc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80024e0:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 80024e4:	b14b      	cbz	r3, 80024fa <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80024e6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80024ea:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 80024f4:	4798      	blx	r3
    return USBD_OK;
 80024f6:	2000      	movs	r0, #0
}
 80024f8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80024fa:	2002      	movs	r0, #2
 80024fc:	e7fc      	b.n	80024f8 <USBD_CDC_DataOut+0x28>

080024fe <USBD_CDC_DataIn>:
{
 80024fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002500:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 8002504:	b1ce      	cbz	r6, 800253a <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002506:	2214      	movs	r2, #20
 8002508:	fb02 0201 	mla	r2, r2, r1, r0
 800250c:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800250e:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002512:	b173      	cbz	r3, 8002532 <USBD_CDC_DataIn+0x34>
 8002514:	2728      	movs	r7, #40	@ 0x28
 8002516:	fb07 5401 	mla	r4, r7, r1, r5
 800251a:	6a24      	ldr	r4, [r4, #32]
 800251c:	fbb3 f5f4 	udiv	r5, r3, r4
 8002520:	fb04 3315 	mls	r3, r4, r5, r3
 8002524:	b92b      	cbnz	r3, 8002532 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8002526:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002528:	461a      	mov	r2, r3
 800252a:	f000 fe83 	bl	8003234 <USBD_LL_Transmit>
    return USBD_OK;
 800252e:	2000      	movs	r0, #0
}
 8002530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 8002538:	e7f9      	b.n	800252e <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 800253a:	2002      	movs	r0, #2
 800253c:	e7f8      	b.n	8002530 <USBD_CDC_DataIn+0x32>

0800253e <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 800253e:	2300      	movs	r3, #0
{
 8002540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002542:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 8002544:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8002548:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800254c:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 8002550:	4604      	mov	r4, r0
 8002552:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002554:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002558:	d022      	beq.n	80025a0 <USBD_CDC_Setup+0x62>
 800255a:	2b20      	cmp	r3, #32
 800255c:	d13a      	bne.n	80025d4 <USBD_CDC_Setup+0x96>
      if (req->wLength)
 800255e:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002560:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8002562:	b1ba      	cbz	r2, 8002594 <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 8002564:	0639      	lsls	r1, r7, #24
 8002566:	d50b      	bpl.n	8002580 <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002568:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 800256c:	4618      	mov	r0, r3
 800256e:	688f      	ldr	r7, [r1, #8]
 8002570:	4631      	mov	r1, r6
 8002572:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002574:	4631      	mov	r1, r6
 8002576:	4620      	mov	r0, r4
 8002578:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800257a:	f000 fc4d 	bl	8002e18 <USBD_CtlSendData>
 800257e:	e006      	b.n	800258e <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002580:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 8002582:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8002586:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800258a:	f000 fc5a 	bl	8002e42 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800258e:	2000      	movs	r0, #0
}
 8002590:	b003      	add	sp, #12
 8002592:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002594:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 8002598:	6884      	ldr	r4, [r0, #8]
 800259a:	4618      	mov	r0, r3
 800259c:	47a0      	blx	r4
 800259e:	e7f6      	b.n	800258e <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 80025a0:	784b      	ldrb	r3, [r1, #1]
 80025a2:	2b0a      	cmp	r3, #10
 80025a4:	d00a      	beq.n	80025bc <USBD_CDC_Setup+0x7e>
 80025a6:	2b0b      	cmp	r3, #11
 80025a8:	d010      	beq.n	80025cc <USBD_CDC_Setup+0x8e>
 80025aa:	b99b      	cbnz	r3, 80025d4 <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80025ac:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d10f      	bne.n	80025d4 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80025b4:	2202      	movs	r2, #2
 80025b6:	f10d 0106 	add.w	r1, sp, #6
 80025ba:	e7de      	b.n	800257a <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80025bc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d107      	bne.n	80025d4 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80025c4:	2201      	movs	r2, #1
 80025c6:	f10d 0105 	add.w	r1, sp, #5
 80025ca:	e7d6      	b.n	800257a <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80025cc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d0dc      	beq.n	800258e <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 80025d4:	4620      	mov	r0, r4
 80025d6:	4629      	mov	r1, r5
 80025d8:	f000 fbf7 	bl	8002dca <USBD_CtlError>
            ret = USBD_FAIL;
 80025dc:	2002      	movs	r0, #2
 80025de:	e7d7      	b.n	8002590 <USBD_CDC_Setup+0x52>

080025e0 <USBD_CDC_DeInit>:
{
 80025e0:	b538      	push	{r3, r4, r5, lr}
 80025e2:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80025e4:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80025e6:	2181      	movs	r1, #129	@ 0x81
 80025e8:	f000 fdef 	bl	80031ca <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80025ec:	2101      	movs	r1, #1
 80025ee:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80025f0:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80025f2:	f000 fdea 	bl	80031ca <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80025f6:	2182      	movs	r1, #130	@ 0x82
 80025f8:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80025fa:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80025fe:	f000 fde4 	bl	80031ca <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8002602:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002606:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8002608:	b14b      	cbz	r3, 800261e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800260a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002612:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8002616:	f000 fe27 	bl	8003268 <USBD_static_free>
    pdev->pClassData = NULL;
 800261a:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 800261e:	2000      	movs	r0, #0
 8002620:	bd38      	pop	{r3, r4, r5, pc}

08002622 <USBD_CDC_Init>:
{
 8002622:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002624:	7c03      	ldrb	r3, [r0, #16]
{
 8002626:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002628:	bba3      	cbnz	r3, 8002694 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800262a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800262e:	2181      	movs	r1, #129	@ 0x81
 8002630:	2202      	movs	r2, #2
 8002632:	f000 fdbe 	bl	80031b2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002636:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002638:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800263c:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800263e:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002640:	2202      	movs	r2, #2
 8002642:	4620      	mov	r0, r4
 8002644:	f000 fdb5 	bl	80031b2 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002648:	2308      	movs	r3, #8
 800264a:	2203      	movs	r2, #3
 800264c:	2182      	movs	r1, #130	@ 0x82
 800264e:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002650:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002654:	f000 fdad 	bl	80031b2 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002658:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800265c:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800265e:	f000 fdff 	bl	8003260 <USBD_static_malloc>
 8002662:	4606      	mov	r6, r0
 8002664:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8002668:	b1f8      	cbz	r0, 80026aa <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800266a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4798      	blx	r3
    hcdc->TxState = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 8002678:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800267c:	7c23      	ldrb	r3, [r4, #16]
 800267e:	b993      	cbnz	r3, 80026a6 <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002680:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002684:	4629      	mov	r1, r5
 8002686:	4620      	mov	r0, r4
 8002688:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 800268c:	f000 fddb 	bl	8003246 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002690:	2000      	movs	r0, #0
}
 8002692:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002694:	2340      	movs	r3, #64	@ 0x40
 8002696:	2181      	movs	r1, #129	@ 0x81
 8002698:	2202      	movs	r2, #2
 800269a:	f000 fd8a 	bl	80031b2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800269e:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80026a0:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80026a2:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80026a4:	e7cb      	b.n	800263e <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80026a6:	2340      	movs	r3, #64	@ 0x40
 80026a8:	e7ec      	b.n	8002684 <USBD_CDC_Init+0x62>
    ret = 1U;
 80026aa:	4628      	mov	r0, r5
 80026ac:	e7f1      	b.n	8002692 <USBD_CDC_Init+0x70>

080026ae <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80026ae:	b119      	cbz	r1, 80026b8 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80026b0:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 80026b4:	2000      	movs	r0, #0
 80026b6:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80026b8:	2002      	movs	r0, #2
  }

  return ret;
}
 80026ba:	4770      	bx	lr

080026bc <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80026bc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80026c0:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80026c2:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80026c6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 80026ca:	4770      	bx	lr

080026cc <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80026cc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 80026d0:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80026d2:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 80026d6:	4770      	bx	lr

080026d8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80026d8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 80026dc:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 80026de:	b182      	cbz	r2, 8002702 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 80026e0:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 80026e4:	2301      	movs	r3, #1
 80026e6:	b974      	cbnz	r4, 8002706 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80026e8:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80026ec:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80026f0:	2181      	movs	r1, #129	@ 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80026f2:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80026f4:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	f000 fd9b 	bl	8003234 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80026fe:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8002700:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8002702:	2002      	movs	r0, #2
 8002704:	e7fc      	b.n	8002700 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8002706:	4618      	mov	r0, r3
 8002708:	e7fa      	b.n	8002700 <USBD_CDC_TransmitPacket+0x28>

0800270a <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800270a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 800270e:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8002710:	b162      	cbz	r2, 800272c <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002712:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002714:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002718:	b933      	cbnz	r3, 8002728 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 800271a:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800271e:	2101      	movs	r1, #1
 8002720:	f000 fd91 	bl	8003246 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002724:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8002726:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8002728:	2340      	movs	r3, #64	@ 0x40
 800272a:	e7f8      	b.n	800271e <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 800272c:	2002      	movs	r0, #2
 800272e:	e7fa      	b.n	8002726 <USBD_CDC_ReceivePacket+0x1c>

08002730 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002730:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002732:	b180      	cbz	r0, 8002756 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8002734:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002738:	b113      	cbz	r3, 8002740 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800273a:	2300      	movs	r3, #0
 800273c:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002740:	b109      	cbz	r1, 8002746 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002742:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002746:	2301      	movs	r3, #1
  pdev->id = id;
 8002748:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800274a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800274e:	f000 fce7 	bl	8003120 <USBD_LL_Init>

  return USBD_OK;
 8002752:	2000      	movs	r0, #0
}
 8002754:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002756:	2002      	movs	r0, #2
 8002758:	e7fc      	b.n	8002754 <USBD_Init+0x24>

0800275a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800275a:	b119      	cbz	r1, 8002764 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800275c:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8002760:	2000      	movs	r0, #0
 8002762:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002764:	2002      	movs	r0, #2
  }

  return status;
}
 8002766:	4770      	bx	lr

08002768 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8002768:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800276a:	f000 fd19 	bl	80031a0 <USBD_LL_Start>

  return USBD_OK;
}
 800276e:	2000      	movs	r0, #0
 8002770:	bd08      	pop	{r3, pc}

08002772 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002772:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002774:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002778:	b133      	cbz	r3, 8002788 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4798      	blx	r3
 800277e:	3800      	subs	r0, #0
 8002780:	bf18      	it	ne
 8002782:	2001      	movne	r0, #1
 8002784:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002786:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002788:	2002      	movs	r0, #2
 800278a:	e7fc      	b.n	8002786 <USBD_SetClassConfig+0x14>

0800278c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800278c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800278e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4798      	blx	r3

  return USBD_OK;
}
 8002796:	2000      	movs	r0, #0
 8002798:	bd08      	pop	{r3, pc}

0800279a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800279a:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800279c:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 80027a0:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80027a2:	4628      	mov	r0, r5
 80027a4:	f000 fb06 	bl	8002db4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80027a8:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80027aa:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80027ae:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80027b2:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 80027b6:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80027ba:	f001 031f 	and.w	r3, r1, #31
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d008      	beq.n	80027d4 <USBD_LL_SetupStage+0x3a>
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d00b      	beq.n	80027de <USBD_LL_SetupStage+0x44>
 80027c6:	b97b      	cbnz	r3, 80027e8 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80027c8:	4629      	mov	r1, r5
 80027ca:	4620      	mov	r0, r4
 80027cc:	f000 f8fa 	bl	80029c4 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80027d0:	2000      	movs	r0, #0
 80027d2:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80027d4:	4629      	mov	r1, r5
 80027d6:	4620      	mov	r0, r4
 80027d8:	f000 fa3c 	bl	8002c54 <USBD_StdItfReq>
      break;
 80027dc:	e7f8      	b.n	80027d0 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 80027de:	4629      	mov	r1, r5
 80027e0:	4620      	mov	r0, r4
 80027e2:	f000 fa5b 	bl	8002c9c <USBD_StdEPReq>
      break;
 80027e6:	e7f3      	b.n	80027d0 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80027e8:	4620      	mov	r0, r4
 80027ea:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80027ee:	f000 fcf5 	bl	80031dc <USBD_LL_StallEP>
      break;
 80027f2:	e7ed      	b.n	80027d0 <USBD_LL_SetupStage+0x36>

080027f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80027f4:	b570      	push	{r4, r5, r6, lr}
 80027f6:	4604      	mov	r4, r0
 80027f8:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80027fa:	bb39      	cbnz	r1, 800284c <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80027fc:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8002800:	2a03      	cmp	r2, #3
 8002802:	d11c      	bne.n	800283e <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 8002804:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 8002808:	4295      	cmp	r5, r2
 800280a:	d90b      	bls.n	8002824 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 800280c:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 800280e:	42aa      	cmp	r2, r5
 8002810:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 8002812:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8002816:	bf8c      	ite	hi
 8002818:	b2aa      	uxthhi	r2, r5
 800281a:	b292      	uxthls	r2, r2
 800281c:	f000 fb1e 	bl	8002e5c <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002820:	2000      	movs	r0, #0
}
 8002822:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8002824:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	b123      	cbz	r3, 8002836 <USBD_LL_DataOutStage+0x42>
 800282c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002830:	2a03      	cmp	r2, #3
 8002832:	d100      	bne.n	8002836 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 8002834:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002836:	4620      	mov	r0, r4
 8002838:	f000 fb18 	bl	8002e6c <USBD_CtlSendStatus>
 800283c:	e7f0      	b.n	8002820 <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800283e:	2a05      	cmp	r2, #5
 8002840:	d1ee      	bne.n	8002820 <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 8002842:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8002846:	f000 fcc9 	bl	80031dc <USBD_LL_StallEP>
 800284a:	e7e9      	b.n	8002820 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 800284c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	b12b      	cbz	r3, 8002860 <USBD_LL_DataOutStage+0x6c>
 8002854:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002858:	2a03      	cmp	r2, #3
 800285a:	d101      	bne.n	8002860 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 800285c:	4798      	blx	r3
 800285e:	e7df      	b.n	8002820 <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 8002860:	2002      	movs	r0, #2
 8002862:	e7de      	b.n	8002822 <USBD_LL_DataOutStage+0x2e>

08002864 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002866:	4604      	mov	r4, r0
 8002868:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800286a:	460f      	mov	r7, r1
 800286c:	2900      	cmp	r1, #0
 800286e:	d149      	bne.n	8002904 <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002870:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8002874:	2a02      	cmp	r2, #2
 8002876:	d13a      	bne.n	80028ee <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 8002878:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 800287c:	42b5      	cmp	r5, r6
 800287e:	d911      	bls.n	80028a4 <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 8002880:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002882:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 8002884:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002886:	b2aa      	uxth	r2, r5
 8002888:	f000 fad3 	bl	8002e32 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800288c:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800288e:	461a      	mov	r2, r3
 8002890:	4619      	mov	r1, r3
 8002892:	4620      	mov	r0, r4
 8002894:	f000 fcd7 	bl	8003246 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002898:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800289c:	2b01      	cmp	r3, #1
 800289e:	d02d      	beq.n	80028fc <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80028a0:	2000      	movs	r0, #0
}
 80028a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80028a4:	69c3      	ldr	r3, [r0, #28]
 80028a6:	fbb3 f5f6 	udiv	r5, r3, r6
 80028aa:	fb06 3515 	mls	r5, r6, r5, r3
 80028ae:	b965      	cbnz	r5, 80028ca <USBD_LL_DataInStage+0x66>
 80028b0:	429e      	cmp	r6, r3
 80028b2:	d80a      	bhi.n	80028ca <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 80028b4:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d206      	bcs.n	80028ca <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80028bc:	462a      	mov	r2, r5
 80028be:	f000 fab8 	bl	8002e32 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80028c2:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 80028c4:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80028c8:	e7e1      	b.n	800288e <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80028ca:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	b12b      	cbz	r3, 80028de <USBD_LL_DataInStage+0x7a>
 80028d2:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 80028d6:	2a03      	cmp	r2, #3
 80028d8:	d101      	bne.n	80028de <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 80028da:	4620      	mov	r0, r4
 80028dc:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80028de:	2180      	movs	r1, #128	@ 0x80
 80028e0:	4620      	mov	r0, r4
 80028e2:	f000 fc7b 	bl	80031dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80028e6:	4620      	mov	r0, r4
 80028e8:	f000 facb 	bl	8002e82 <USBD_CtlReceiveStatus>
 80028ec:	e7d4      	b.n	8002898 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80028ee:	f032 0304 	bics.w	r3, r2, #4
 80028f2:	d1d1      	bne.n	8002898 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80028f4:	2180      	movs	r1, #128	@ 0x80
 80028f6:	f000 fc71 	bl	80031dc <USBD_LL_StallEP>
 80028fa:	e7cd      	b.n	8002898 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 8002902:	e7cd      	b.n	80028a0 <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 8002904:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	b12b      	cbz	r3, 8002918 <USBD_LL_DataInStage+0xb4>
 800290c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002910:	2a03      	cmp	r2, #3
 8002912:	d101      	bne.n	8002918 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 8002914:	4798      	blx	r3
 8002916:	e7c3      	b.n	80028a0 <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 8002918:	2002      	movs	r0, #2
 800291a:	e7c2      	b.n	80028a2 <USBD_LL_DataInStage+0x3e>

0800291c <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800291c:	2200      	movs	r2, #0
{
 800291e:	b570      	push	{r4, r5, r6, lr}
 8002920:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002922:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002924:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002926:	4611      	mov	r1, r2
 8002928:	2340      	movs	r3, #64	@ 0x40
 800292a:	f000 fc42 	bl	80031b2 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800292e:	4633      	mov	r3, r6
 8002930:	2180      	movs	r1, #128	@ 0x80
 8002932:	2200      	movs	r2, #0
 8002934:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002936:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800293a:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800293e:	f000 fc38 	bl	80031b2 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8002942:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002944:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002948:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800294a:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800294c:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8002950:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 8002954:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002956:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 800295a:	b123      	cbz	r3, 8002966 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800295c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8002960:	4620      	mov	r0, r4
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002966:	2000      	movs	r0, #0
 8002968:	bd70      	pop	{r4, r5, r6, pc}

0800296a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800296a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800296c:	2000      	movs	r0, #0
 800296e:	4770      	bx	lr

08002970 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002970:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002974:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002978:	2304      	movs	r3, #4
 800297a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800297e:	2000      	movs	r0, #0
 8002980:	4770      	bx	lr

08002982 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8002982:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002986:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8002988:	bf04      	itt	eq
 800298a:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 800298e:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8002992:	2000      	movs	r0, #0
 8002994:	4770      	bx	lr

08002996 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8002996:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002998:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800299c:	2a03      	cmp	r2, #3
 800299e:	d104      	bne.n	80029aa <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80029a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	b103      	cbz	r3, 80029aa <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80029a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80029aa:	2000      	movs	r0, #0
 80029ac:	bd08      	pop	{r3, pc}

080029ae <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80029ae:	b510      	push	{r4, lr}
 80029b0:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80029b2:	2180      	movs	r1, #128	@ 0x80
 80029b4:	f000 fc12 	bl	80031dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80029b8:	4620      	mov	r0, r4
}
 80029ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80029be:	2100      	movs	r1, #0
 80029c0:	f000 bc0c 	b.w	80031dc <USBD_LL_StallEP>

080029c4 <USBD_StdDevReq>:
{
 80029c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029c6:	780b      	ldrb	r3, [r1, #0]
 80029c8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80029ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80029ce:	2b20      	cmp	r3, #32
{
 80029d0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80029d2:	d006      	beq.n	80029e2 <USBD_StdDevReq+0x1e>
 80029d4:	2b40      	cmp	r3, #64	@ 0x40
 80029d6:	d004      	beq.n	80029e2 <USBD_StdDevReq+0x1e>
 80029d8:	b163      	cbz	r3, 80029f4 <USBD_StdDevReq+0x30>
        USBD_CtlError(pdev, req);
 80029da:	4620      	mov	r0, r4
 80029dc:	f7ff ffe7 	bl	80029ae <USBD_CtlError.constprop.0>
        break;
 80029e0:	e005      	b.n	80029ee <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 80029e2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80029e6:	4629      	mov	r1, r5
 80029e8:	4620      	mov	r0, r4
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4798      	blx	r3
}
 80029ee:	2000      	movs	r0, #0
 80029f0:	b003      	add	sp, #12
 80029f2:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 80029f4:	784b      	ldrb	r3, [r1, #1]
 80029f6:	2b09      	cmp	r3, #9
 80029f8:	d8ef      	bhi.n	80029da <USBD_StdDevReq+0x16>
 80029fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002a00 <USBD_StdDevReq+0x3c>)
 80029fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a00:	08002c03 	.word	0x08002c03
 8002a04:	08002c39 	.word	0x08002c39
 8002a08:	080029db 	.word	0x080029db
 8002a0c:	08002c2b 	.word	0x08002c2b
 8002a10:	080029db 	.word	0x080029db
 8002a14:	08002b29 	.word	0x08002b29
 8002a18:	08002a29 	.word	0x08002a29
 8002a1c:	080029db 	.word	0x080029db
 8002a20:	08002bd3 	.word	0x08002bd3
 8002a24:	08002b6b 	.word	0x08002b6b
  uint16_t len = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8002a2e:	884b      	ldrh	r3, [r1, #2]
 8002a30:	0a1a      	lsrs	r2, r3, #8
 8002a32:	3a01      	subs	r2, #1
 8002a34:	2a06      	cmp	r2, #6
 8002a36:	d8d0      	bhi.n	80029da <USBD_StdDevReq+0x16>
 8002a38:	a101      	add	r1, pc, #4	@ (adr r1, 8002a40 <USBD_StdDevReq+0x7c>)
 8002a3a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002a3e:	bf00      	nop
 8002a40:	08002a5d 	.word	0x08002a5d
 8002a44:	08002a81 	.word	0x08002a81
 8002a48:	08002a9b 	.word	0x08002a9b
 8002a4c:	080029db 	.word	0x080029db
 8002a50:	080029db 	.word	0x080029db
 8002a54:	08002adf 	.word	0x08002adf
 8002a58:	08002af5 	.word	0x08002af5
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002a5c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8002a60:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002a62:	7c20      	ldrb	r0, [r4, #16]
 8002a64:	f10d 0106 	add.w	r1, sp, #6
 8002a68:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8002a6a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002a6e:	88eb      	ldrh	r3, [r5, #6]
 8002a70:	2a00      	cmp	r2, #0
 8002a72:	d054      	beq.n	8002b1e <USBD_StdDevReq+0x15a>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d149      	bne.n	8002b0c <USBD_StdDevReq+0x148>
        USBD_CtlSendStatus(pdev);
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f000 f9f7 	bl	8002e6c <USBD_CtlSendStatus>
 8002a7e:	e7b6      	b.n	80029ee <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002a80:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8002a82:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002a86:	b932      	cbnz	r2, 8002a96 <USBD_StdDevReq+0xd2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8002a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002a8a:	f10d 0006 	add.w	r0, sp, #6
 8002a8e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002a90:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002a92:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8002a94:	e7e9      	b.n	8002a6a <USBD_StdDevReq+0xa6>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a98:	e7f7      	b.n	8002a8a <USBD_StdDevReq+0xc6>
      switch ((uint8_t)(req->wValue))
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	d89c      	bhi.n	80029da <USBD_StdDevReq+0x16>
 8002aa0:	e8df f003 	tbb	[pc, r3]
 8002aa4:	110d0903 	.word	0x110d0903
 8002aa8:	1915      	.short	0x1915
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8002aaa:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8002aae:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1d6      	bne.n	8002a62 <USBD_StdDevReq+0x9e>
 8002ab4:	e791      	b.n	80029da <USBD_StdDevReq+0x16>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8002ab6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	e7f8      	b.n	8002ab0 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8002abe:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	e7f4      	b.n	8002ab0 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8002ac6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	e7f0      	b.n	8002ab0 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8002ace:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	e7ec      	b.n	8002ab0 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002ad6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	e7e8      	b.n	8002ab0 <USBD_StdDevReq+0xec>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002ade:	7c03      	ldrb	r3, [r0, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f47f af7a 	bne.w	80029da <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002ae6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002aea:	f10d 0006 	add.w	r0, sp, #6
 8002aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af0:	4798      	blx	r3
  if (err != 0U)
 8002af2:	e7ba      	b.n	8002a6a <USBD_StdDevReq+0xa6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002af4:	7c03      	ldrb	r3, [r0, #16]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f47f af6f 	bne.w	80029da <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002afc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002b00:	f10d 0006 	add.w	r0, sp, #6
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002b08:	2307      	movs	r3, #7
 8002b0a:	e7c2      	b.n	8002a92 <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	bf28      	it	cs
 8002b10:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002b12:	4601      	mov	r1, r0
 8002b14:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8002b16:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002b1a:	f000 f97d 	bl	8002e18 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8002b1e:	88eb      	ldrh	r3, [r5, #6]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f47f af64 	bne.w	80029ee <USBD_StdDevReq+0x2a>
 8002b26:	e7a7      	b.n	8002a78 <USBD_StdDevReq+0xb4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002b28:	888b      	ldrh	r3, [r1, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f47f af55 	bne.w	80029da <USBD_StdDevReq+0x16>
 8002b30:	88cb      	ldrh	r3, [r1, #6]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f47f af51 	bne.w	80029da <USBD_StdDevReq+0x16>
 8002b38:	884d      	ldrh	r5, [r1, #2]
 8002b3a:	2d7f      	cmp	r5, #127	@ 0x7f
 8002b3c:	f63f af4d 	bhi.w	80029da <USBD_StdDevReq+0x16>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002b40:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	f43f af48 	beq.w	80029da <USBD_StdDevReq+0x16>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002b4a:	b2ed      	uxtb	r5, r5
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002b4c:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 8002b4e:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002b52:	f000 fb66 	bl	8003222 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8002b56:	4620      	mov	r0, r4
 8002b58:	f000 f988 	bl	8002e6c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8002b5c:	b11d      	cbz	r5, 8002b66 <USBD_StdDevReq+0x1a2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002b5e:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002b60:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8002b64:	e743      	b.n	80029ee <USBD_StdDevReq+0x2a>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e7fa      	b.n	8002b60 <USBD_StdDevReq+0x19c>
  cfgidx = (uint8_t)(req->wValue);
 8002b6a:	7889      	ldrb	r1, [r1, #2]
 8002b6c:	4d38      	ldr	r5, [pc, #224]	@ (8002c50 <USBD_StdDevReq+0x28c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002b6e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8002b70:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002b72:	f63f af32 	bhi.w	80029da <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8002b76:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d008      	beq.n	8002b90 <USBD_StdDevReq+0x1cc>
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d015      	beq.n	8002bae <USBD_StdDevReq+0x1ea>
        USBD_CtlError(pdev, req);
 8002b82:	f7ff ff14 	bl	80029ae <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8002b86:	4620      	mov	r0, r4
 8002b88:	7829      	ldrb	r1, [r5, #0]
 8002b8a:	f7ff fdff 	bl	800278c <USBD_ClrClassConfig>
        break;
 8002b8e:	e72e      	b.n	80029ee <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8002b90:	2900      	cmp	r1, #0
 8002b92:	f43f af71 	beq.w	8002a78 <USBD_StdDevReq+0xb4>
          pdev->dev_config = cfgidx;
 8002b96:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002b98:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8002b9a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002b9c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f7ff fde6 	bl	8002772 <USBD_SetClassConfig>
 8002ba6:	2802      	cmp	r0, #2
 8002ba8:	f47f af66 	bne.w	8002a78 <USBD_StdDevReq+0xb4>
 8002bac:	e715      	b.n	80029da <USBD_StdDevReq+0x16>
        if (cfgidx == 0U)
 8002bae:	b931      	cbnz	r1, 8002bbe <USBD_StdDevReq+0x1fa>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8002bb0:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8002bb2:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8002bb4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8002bb8:	f7ff fde8 	bl	800278c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8002bbc:	e75c      	b.n	8002a78 <USBD_StdDevReq+0xb4>
        else if (cfgidx != pdev->dev_config)
 8002bbe:	6841      	ldr	r1, [r0, #4]
 8002bc0:	2901      	cmp	r1, #1
 8002bc2:	f43f af59 	beq.w	8002a78 <USBD_StdDevReq+0xb4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002bc6:	b2c9      	uxtb	r1, r1
 8002bc8:	f7ff fde0 	bl	800278c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8002bcc:	7829      	ldrb	r1, [r5, #0]
 8002bce:	6061      	str	r1, [r4, #4]
 8002bd0:	e7e6      	b.n	8002ba0 <USBD_StdDevReq+0x1dc>
  if (req->wLength != 1U)
 8002bd2:	88ca      	ldrh	r2, [r1, #6]
 8002bd4:	2a01      	cmp	r2, #1
 8002bd6:	f47f af00 	bne.w	80029da <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8002bda:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d80a      	bhi.n	8002bf8 <USBD_StdDevReq+0x234>
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f43f aef9 	beq.w	80029da <USBD_StdDevReq+0x16>
        pdev->dev_default_config = 0U;
 8002be8:	4601      	mov	r1, r0
 8002bea:	2300      	movs	r3, #0
 8002bec:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f000 f911 	bl	8002e18 <USBD_CtlSendData>
      break;
 8002bf6:	e6fa      	b.n	80029ee <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	f47f aeee 	bne.w	80029da <USBD_StdDevReq+0x16>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8002bfe:	1d01      	adds	r1, r0, #4
 8002c00:	e7f6      	b.n	8002bf0 <USBD_StdDevReq+0x22c>
  switch (pdev->dev_state)
 8002c02:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002c06:	3b01      	subs	r3, #1
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	f63f aee6 	bhi.w	80029da <USBD_StdDevReq+0x16>
      if (req->wLength != 0x2U)
 8002c0e:	88ca      	ldrh	r2, [r1, #6]
 8002c10:	2a02      	cmp	r2, #2
 8002c12:	f47f aee2 	bne.w	80029da <USBD_StdDevReq+0x16>
      if (pdev->dev_remote_wakeup)
 8002c16:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8002c1a:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2303      	movne	r3, #3
 8002c24:	f841 3f0c 	str.w	r3, [r1, #12]!
 8002c28:	e7e2      	b.n	8002bf0 <USBD_StdDevReq+0x22c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002c2a:	884b      	ldrh	r3, [r1, #2]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f47f aede 	bne.w	80029ee <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8002c32:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 8002c36:	e71f      	b.n	8002a78 <USBD_StdDevReq+0xb4>
  switch (pdev->dev_state)
 8002c38:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	f63f aecb 	bhi.w	80029da <USBD_StdDevReq+0x16>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002c44:	884b      	ldrh	r3, [r1, #2]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	f47f aed1 	bne.w	80029ee <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e7f0      	b.n	8002c32 <USBD_StdDevReq+0x26e>
 8002c50:	200001a4 	.word	0x200001a4

08002c54 <USBD_StdItfReq>:
{
 8002c54:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c56:	780b      	ldrb	r3, [r1, #0]
{
 8002c58:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c5a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002c5e:	065b      	lsls	r3, r3, #25
{
 8002c60:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c62:	d501      	bpl.n	8002c68 <USBD_StdItfReq+0x14>
 8002c64:	2a40      	cmp	r2, #64	@ 0x40
 8002c66:	d115      	bne.n	8002c94 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8002c68:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d810      	bhi.n	8002c94 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8002c72:	792b      	ldrb	r3, [r5, #4]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d80d      	bhi.n	8002c94 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8002c78:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4620      	mov	r0, r4
 8002c82:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8002c84:	88eb      	ldrh	r3, [r5, #6]
 8002c86:	b91b      	cbnz	r3, 8002c90 <USBD_StdItfReq+0x3c>
 8002c88:	b910      	cbnz	r0, 8002c90 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f000 f8ee 	bl	8002e6c <USBD_CtlSendStatus>
}
 8002c90:	2000      	movs	r0, #0
 8002c92:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8002c94:	4620      	mov	r0, r4
 8002c96:	f7ff fe8a 	bl	80029ae <USBD_CtlError.constprop.0>
          break;
 8002c9a:	e7f9      	b.n	8002c90 <USBD_StdItfReq+0x3c>

08002c9c <USBD_StdEPReq>:
{
 8002c9c:	b538      	push	{r3, r4, r5, lr}
 8002c9e:	780a      	ldrb	r2, [r1, #0]
 8002ca0:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8002ca2:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002ca6:	2a20      	cmp	r2, #32
{
 8002ca8:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8002caa:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002cac:	d006      	beq.n	8002cbc <USBD_StdEPReq+0x20>
 8002cae:	2a40      	cmp	r2, #64	@ 0x40
 8002cb0:	d004      	beq.n	8002cbc <USBD_StdEPReq+0x20>
 8002cb2:	b15a      	cbz	r2, 8002ccc <USBD_StdEPReq+0x30>
              USBD_CtlError(pdev, req);
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f7ff fe7a 	bl	80029ae <USBD_CtlError.constprop.0>
              break;
 8002cba:	e005      	b.n	8002cc8 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 8002cbc:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	6892      	ldr	r2, [r2, #8]
 8002cc6:	4790      	blx	r2
}
 8002cc8:	2000      	movs	r0, #0
 8002cca:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8002ccc:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8002cce:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8002cd0:	2a01      	cmp	r2, #1
 8002cd2:	d035      	beq.n	8002d40 <USBD_StdEPReq+0xa4>
 8002cd4:	2a03      	cmp	r2, #3
 8002cd6:	d021      	beq.n	8002d1c <USBD_StdEPReq+0x80>
 8002cd8:	2a00      	cmp	r2, #0
 8002cda:	d1eb      	bne.n	8002cb4 <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 8002cdc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d044      	beq.n	8002d6e <USBD_StdEPReq+0xd2>
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d1e5      	bne.n	8002cb4 <USBD_StdEPReq+0x18>
              if ((ep_addr & 0x80U) == 0x80U)
 8002ce8:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002cea:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8002cee:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002cf2:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8002cf6:	d04b      	beq.n	8002d90 <USBD_StdEPReq+0xf4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0da      	beq.n	8002cb4 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002cfe:	2514      	movs	r5, #20
 8002d00:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8002d04:	fb03 5505 	mla	r5, r3, r5, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8002d08:	2980      	cmp	r1, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002d0a:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8002d0c:	d04b      	beq.n	8002da6 <USBD_StdEPReq+0x10a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f000 fa76 	bl	8003200 <USBD_LL_IsStallEP>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	d04b      	beq.n	8002db0 <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e045      	b.n	8002da8 <USBD_StdEPReq+0x10c>
          switch (pdev->dev_state)
 8002d1c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002d20:	2a02      	cmp	r2, #2
 8002d22:	d01b      	beq.n	8002d5c <USBD_StdEPReq+0xc0>
 8002d24:	2a03      	cmp	r2, #3
 8002d26:	d1c5      	bne.n	8002cb4 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002d28:	885a      	ldrh	r2, [r3, #2]
 8002d2a:	b92a      	cbnz	r2, 8002d38 <USBD_StdEPReq+0x9c>
                if ((ep_addr != 0x00U) &&
 8002d2c:	064a      	lsls	r2, r1, #25
 8002d2e:	d003      	beq.n	8002d38 <USBD_StdEPReq+0x9c>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8002d30:	88db      	ldrh	r3, [r3, #6]
 8002d32:	b90b      	cbnz	r3, 8002d38 <USBD_StdEPReq+0x9c>
                  USBD_LL_StallEP(pdev, ep_addr);
 8002d34:	f000 fa52 	bl	80031dc <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f000 f897 	bl	8002e6c <USBD_CtlSendStatus>
              break;
 8002d3e:	e7c3      	b.n	8002cc8 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8002d40:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002d44:	2a02      	cmp	r2, #2
 8002d46:	d009      	beq.n	8002d5c <USBD_StdEPReq+0xc0>
 8002d48:	2a03      	cmp	r2, #3
 8002d4a:	d1b3      	bne.n	8002cb4 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002d4c:	885b      	ldrh	r3, [r3, #2]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ba      	bne.n	8002cc8 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8002d52:	064d      	lsls	r5, r1, #25
 8002d54:	d0f0      	beq.n	8002d38 <USBD_StdEPReq+0x9c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8002d56:	f000 fa4a 	bl	80031ee <USBD_LL_ClearStallEP>
 8002d5a:	e7ed      	b.n	8002d38 <USBD_StdEPReq+0x9c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002d5c:	064b      	lsls	r3, r1, #25
 8002d5e:	d0a9      	beq.n	8002cb4 <USBD_StdEPReq+0x18>
                USBD_LL_StallEP(pdev, ep_addr);
 8002d60:	f000 fa3c 	bl	80031dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8002d64:	2180      	movs	r1, #128	@ 0x80
 8002d66:	4620      	mov	r0, r4
 8002d68:	f000 fa38 	bl	80031dc <USBD_LL_StallEP>
 8002d6c:	e7ac      	b.n	8002cc8 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002d6e:	064a      	lsls	r2, r1, #25
 8002d70:	d1a0      	bne.n	8002cb4 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002d72:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8002d74:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002d78:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002d7c:	bf4c      	ite	mi
 8002d7e:	f100 0114 	addmi.w	r1, r0, #20
 8002d82:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 8002d86:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f000 f845 	bl	8002e18 <USBD_CtlSendData>
              break;
 8002d8e:	e79b      	b.n	8002cc8 <USBD_StdEPReq+0x2c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8002d90:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d08d      	beq.n	8002cb4 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002d98:	2514      	movs	r5, #20
 8002d9a:	fb05 0501 	mla	r5, r5, r1, r0
 8002d9e:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8002da2:	2900      	cmp	r1, #0
 8002da4:	d1b3      	bne.n	8002d0e <USBD_StdEPReq+0x72>
                pep->status = 0x0000U;
 8002da6:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 8002da8:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002daa:	2202      	movs	r2, #2
 8002dac:	4629      	mov	r1, r5
 8002dae:	e7eb      	b.n	8002d88 <USBD_StdEPReq+0xec>
                pep->status = 0x0000U;
 8002db0:	6028      	str	r0, [r5, #0]
 8002db2:	e7fa      	b.n	8002daa <USBD_StdEPReq+0x10e>

08002db4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8002db4:	780b      	ldrb	r3, [r1, #0]
 8002db6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8002db8:	784b      	ldrb	r3, [r1, #1]
 8002dba:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8002dbc:	884b      	ldrh	r3, [r1, #2]
 8002dbe:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8002dc0:	888b      	ldrh	r3, [r1, #4]
 8002dc2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8002dc4:	88cb      	ldrh	r3, [r1, #6]
 8002dc6:	80c3      	strh	r3, [r0, #6]
}
 8002dc8:	4770      	bx	lr

08002dca <USBD_CtlError>:
{
 8002dca:	b510      	push	{r4, lr}
 8002dcc:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8002dce:	2180      	movs	r1, #128	@ 0x80
 8002dd0:	f000 fa04 	bl	80031dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002dd4:	4620      	mov	r0, r4
}
 8002dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8002dda:	2100      	movs	r1, #0
 8002ddc:	f000 b9fe 	b.w	80031dc <USBD_LL_StallEP>

08002de0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002de0:	b570      	push	{r4, r5, r6, lr}
 8002de2:	460d      	mov	r5, r1
 8002de4:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8002de6:	4604      	mov	r4, r0
 8002de8:	b170      	cbz	r0, 8002e08 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8002dea:	f7fd f9af 	bl	800014c <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8002dee:	b2c3      	uxtb	r3, r0
 8002df0:	3301      	adds	r3, #1
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8002df6:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8002df8:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8002dfa:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8002dfc:	706b      	strb	r3, [r5, #1]
 8002dfe:	2302      	movs	r3, #2
 8002e00:	3c01      	subs	r4, #1
    while (*desc != '\0')
 8002e02:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002e06:	b901      	cbnz	r1, 8002e0a <USBD_GetString+0x2a>
}
 8002e08:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	54e9      	strb	r1, [r5, r3]
 8002e0e:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8002e10:	3302      	adds	r3, #2
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	54a8      	strb	r0, [r5, r2]
 8002e16:	e7f4      	b.n	8002e02 <USBD_GetString+0x22>

08002e18 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8002e18:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002e1a:	2202      	movs	r2, #2
{
 8002e1c:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8002e1e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002e22:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8002e26:	460a      	mov	r2, r1
 8002e28:	2100      	movs	r1, #0
 8002e2a:	f000 fa03 	bl	8003234 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002e2e:	2000      	movs	r0, #0
 8002e30:	bd10      	pop	{r4, pc}

08002e32 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8002e32:	b508      	push	{r3, lr}
 8002e34:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8002e36:	460a      	mov	r2, r1
 8002e38:	2100      	movs	r1, #0
 8002e3a:	f000 f9fb 	bl	8003234 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002e3e:	2000      	movs	r0, #0
 8002e40:	bd08      	pop	{r3, pc}

08002e42 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8002e42:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8002e44:	2203      	movs	r2, #3
{
 8002e46:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8002e48:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8002e4c:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002e50:	460a      	mov	r2, r1
 8002e52:	2100      	movs	r1, #0
 8002e54:	f000 f9f7 	bl	8003246 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002e58:	2000      	movs	r0, #0
 8002e5a:	bd10      	pop	{r4, pc}

08002e5c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8002e5c:	b508      	push	{r3, lr}
 8002e5e:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002e60:	460a      	mov	r2, r1
 8002e62:	2100      	movs	r1, #0
 8002e64:	f000 f9ef 	bl	8003246 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002e68:	2000      	movs	r0, #0
 8002e6a:	bd08      	pop	{r3, pc}

08002e6c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8002e6c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002e6e:	2304      	movs	r3, #4
 8002e70:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8002e74:	2300      	movs	r3, #0
 8002e76:	461a      	mov	r2, r3
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f000 f9db 	bl	8003234 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002e7e:	2000      	movs	r0, #0
 8002e80:	bd08      	pop	{r3, pc}

08002e82 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8002e82:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8002e84:	2305      	movs	r3, #5
 8002e86:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f000 f9d9 	bl	8003246 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002e94:	2000      	movs	r0, #0
 8002e96:	bd08      	pop	{r3, pc}

08002e98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002e98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	490e      	ldr	r1, [pc, #56]	@ (8002ed8 <MX_USB_DEVICE_Init+0x40>)
 8002e9e:	480f      	ldr	r0, [pc, #60]	@ (8002edc <MX_USB_DEVICE_Init+0x44>)
 8002ea0:	f7ff fc46 	bl	8002730 <USBD_Init>
 8002ea4:	b108      	cbz	r0, 8002eaa <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8002ea6:	f7fd f9ed 	bl	8000284 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8002eaa:	490d      	ldr	r1, [pc, #52]	@ (8002ee0 <MX_USB_DEVICE_Init+0x48>)
 8002eac:	480b      	ldr	r0, [pc, #44]	@ (8002edc <MX_USB_DEVICE_Init+0x44>)
 8002eae:	f7ff fc54 	bl	800275a <USBD_RegisterClass>
 8002eb2:	b108      	cbz	r0, 8002eb8 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8002eb4:	f7fd f9e6 	bl	8000284 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8002eb8:	490a      	ldr	r1, [pc, #40]	@ (8002ee4 <MX_USB_DEVICE_Init+0x4c>)
 8002eba:	4808      	ldr	r0, [pc, #32]	@ (8002edc <MX_USB_DEVICE_Init+0x44>)
 8002ebc:	f7ff fbf7 	bl	80026ae <USBD_CDC_RegisterInterface>
 8002ec0:	b108      	cbz	r0, 8002ec6 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8002ec2:	f7fd f9df 	bl	8000284 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8002ec6:	4805      	ldr	r0, [pc, #20]	@ (8002edc <MX_USB_DEVICE_Init+0x44>)
 8002ec8:	f7ff fc4e 	bl	8002768 <USBD_Start>
 8002ecc:	b118      	cbz	r0, 8002ed6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002ece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002ed2:	f7fd b9d7 	b.w	8000284 <Error_Handler>
}
 8002ed6:	bd08      	pop	{r3, pc}
 8002ed8:	20000168 	.word	0x20000168
 8002edc:	200001a8 	.word	0x200001a8
 8002ee0:	200000e0 	.word	0x200000e0
 8002ee4:	20000124 	.word	0x20000124

08002ee8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8002ee8:	2000      	movs	r0, #0
 8002eea:	4770      	bx	lr

08002eec <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002eec:	2000      	movs	r0, #0
 8002eee:	4770      	bx	lr

08002ef0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8002ef0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002ef2:	4c05      	ldr	r4, [pc, #20]	@ (8002f08 <CDC_Receive_FS+0x18>)
{
 8002ef4:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f7ff fbe8 	bl	80026cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8002efc:	4620      	mov	r0, r4
 8002efe:	f7ff fc04 	bl	800270a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8002f02:	2000      	movs	r0, #0
 8002f04:	bd10      	pop	{r4, pc}
 8002f06:	bf00      	nop
 8002f08:	200001a8 	.word	0x200001a8

08002f0c <CDC_Init_FS>:
{
 8002f0c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002f0e:	4c06      	ldr	r4, [pc, #24]	@ (8002f28 <CDC_Init_FS+0x1c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	4620      	mov	r0, r4
 8002f14:	4905      	ldr	r1, [pc, #20]	@ (8002f2c <CDC_Init_FS+0x20>)
 8002f16:	f7ff fbd1 	bl	80026bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	4904      	ldr	r1, [pc, #16]	@ (8002f30 <CDC_Init_FS+0x24>)
 8002f1e:	f7ff fbd5 	bl	80026cc <USBD_CDC_SetRxBuffer>
}
 8002f22:	2000      	movs	r0, #0
 8002f24:	bd10      	pop	{r4, pc}
 8002f26:	bf00      	nop
 8002f28:	200001a8 	.word	0x200001a8
 8002f2c:	2000046c 	.word	0x2000046c
 8002f30:	2000066c 	.word	0x2000066c

08002f34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8002f34:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002f36:	4c09      	ldr	r4, [pc, #36]	@ (8002f5c <CDC_Transmit_FS+0x28>)
{
 8002f38:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002f3a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 8002f3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8002f42:	b943      	cbnz	r3, 8002f56 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8002f44:	4601      	mov	r1, r0
 8002f46:	4620      	mov	r0, r4
 8002f48:	f7ff fbb8 	bl	80026bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002f4c:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8002f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002f52:	f7ff bbc1 	b.w	80026d8 <USBD_CDC_TransmitPacket>
}
 8002f56:	2001      	movs	r0, #1
 8002f58:	bd10      	pop	{r4, pc}
 8002f5a:	bf00      	nop
 8002f5c:	200001a8 	.word	0x200001a8

08002f60 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8002f60:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002f62:	4801      	ldr	r0, [pc, #4]	@ (8002f68 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002f64:	800b      	strh	r3, [r1, #0]
}
 8002f66:	4770      	bx	lr
 8002f68:	20000154 	.word	0x20000154

08002f6c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8002f6c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002f6e:	4801      	ldr	r0, [pc, #4]	@ (8002f74 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002f70:	800b      	strh	r3, [r1, #0]
}
 8002f72:	4770      	bx	lr
 8002f74:	20000150 	.word	0x20000150

08002f78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8002f78:	2300      	movs	r3, #0
 8002f7a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8002f7c:	461e      	mov	r6, r3
 8002f7e:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8002f80:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8002f82:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8002f86:	bf34      	ite	cc
 8002f88:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002f8a:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8002f8c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8002f90:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8002f94:	3301      	adds	r3, #1
 8002f96:	b2dc      	uxtb	r4, r3
 8002f98:	42a2      	cmp	r2, r4
    value = value << 4;
 8002f9a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8002f9e:	d8ef      	bhi.n	8002f80 <IntToUnicode+0x8>
  }
}
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fa4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8002fa4:	231a      	movs	r3, #26
{
 8002fa6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8002fa8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8002faa:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <USBD_FS_SerialStrDescriptor+0x30>)
 8002fac:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 8002fb0:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 8002fb4:	1880      	adds	r0, r0, r2
 8002fb6:	d00a      	beq.n	8002fce <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002fb8:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002fbc:	4906      	ldr	r1, [pc, #24]	@ (8002fd8 <USBD_FS_SerialStrDescriptor+0x34>)
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	f7ff ffda 	bl	8002f78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	3110      	adds	r1, #16
 8002fca:	f7ff ffd5 	bl	8002f78 <IntToUnicode>
}
 8002fce:	4803      	ldr	r0, [pc, #12]	@ (8002fdc <USBD_FS_SerialStrDescriptor+0x38>)
 8002fd0:	bd10      	pop	{r4, pc}
 8002fd2:	bf00      	nop
 8002fd4:	1ffff000 	.word	0x1ffff000
 8002fd8:	20000136 	.word	0x20000136
 8002fdc:	20000134 	.word	0x20000134

08002fe0 <USBD_FS_ManufacturerStrDescriptor>:
{
 8002fe0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002fe2:	4c04      	ldr	r4, [pc, #16]	@ (8002ff4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8002fe4:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002fe6:	4804      	ldr	r0, [pc, #16]	@ (8002ff8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002fe8:	4621      	mov	r1, r4
 8002fea:	f7ff fef9 	bl	8002de0 <USBD_GetString>
}
 8002fee:	4620      	mov	r0, r4
 8002ff0:	bd10      	pop	{r4, pc}
 8002ff2:	bf00      	nop
 8002ff4:	2000086c 	.word	0x2000086c
 8002ff8:	080032f6 	.word	0x080032f6

08002ffc <USBD_FS_ProductStrDescriptor>:
{
 8002ffc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002ffe:	4c04      	ldr	r4, [pc, #16]	@ (8003010 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8003000:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003002:	4804      	ldr	r0, [pc, #16]	@ (8003014 <USBD_FS_ProductStrDescriptor+0x18>)
 8003004:	4621      	mov	r1, r4
 8003006:	f7ff feeb 	bl	8002de0 <USBD_GetString>
}
 800300a:	4620      	mov	r0, r4
 800300c:	bd10      	pop	{r4, pc}
 800300e:	bf00      	nop
 8003010:	2000086c 	.word	0x2000086c
 8003014:	08003309 	.word	0x08003309

08003018 <USBD_FS_ConfigStrDescriptor>:
{
 8003018:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800301a:	4c04      	ldr	r4, [pc, #16]	@ (800302c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800301c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800301e:	4804      	ldr	r0, [pc, #16]	@ (8003030 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003020:	4621      	mov	r1, r4
 8003022:	f7ff fedd 	bl	8002de0 <USBD_GetString>
}
 8003026:	4620      	mov	r0, r4
 8003028:	bd10      	pop	{r4, pc}
 800302a:	bf00      	nop
 800302c:	2000086c 	.word	0x2000086c
 8003030:	0800331f 	.word	0x0800331f

08003034 <USBD_FS_InterfaceStrDescriptor>:
{
 8003034:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003036:	4c04      	ldr	r4, [pc, #16]	@ (8003048 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8003038:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800303a:	4804      	ldr	r0, [pc, #16]	@ (800304c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800303c:	4621      	mov	r1, r4
 800303e:	f7ff fecf 	bl	8002de0 <USBD_GetString>
}
 8003042:	4620      	mov	r0, r4
 8003044:	bd10      	pop	{r4, pc}
 8003046:	bf00      	nop
 8003048:	2000086c 	.word	0x2000086c
 800304c:	0800332a 	.word	0x0800332a

08003050 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003050:	b118      	cbz	r0, 800305a <USBD_Get_USB_Status+0xa>
 8003052:	2802      	cmp	r0, #2
 8003054:	bf0c      	ite	eq
 8003056:	2001      	moveq	r0, #1
 8003058:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800305a:	4770      	bx	lr

0800305c <HAL_PCD_MspInit>:
{
 800305c:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800305e:	4b0e      	ldr	r3, [pc, #56]	@ (8003098 <HAL_PCD_MspInit+0x3c>)
 8003060:	6802      	ldr	r2, [r0, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d115      	bne.n	8003092 <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 8003066:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 800306a:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800306c:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800306e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003072:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003074:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003076:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003078:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800307a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003082:	f7fd fa0d 	bl	80004a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003086:	2014      	movs	r0, #20
}
 8003088:	b003      	add	sp, #12
 800308a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800308e:	f7fd ba37 	b.w	8000500 <HAL_NVIC_EnableIRQ>
}
 8003092:	b003      	add	sp, #12
 8003094:	f85d fb04 	ldr.w	pc, [sp], #4
 8003098:	40005c00 	.word	0x40005c00

0800309c <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800309c:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 80030a0:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80030a4:	f7ff bb79 	b.w	800279a <USBD_LL_SetupStage>

080030a8 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80030a8:	2328      	movs	r3, #40	@ 0x28
 80030aa:	fb03 0301 	mla	r3, r3, r1, r0
 80030ae:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80030b2:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 80030b6:	f7ff bb9d 	b.w	80027f4 <USBD_LL_DataOutStage>

080030ba <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80030ba:	2328      	movs	r3, #40	@ 0x28
 80030bc:	fb03 0301 	mla	r3, r3, r1, r0
 80030c0:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80030c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030c6:	f7ff bbcd 	b.w	8002864 <USBD_LL_DataInStage>

080030ca <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80030ca:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80030ce:	f7ff bc62 	b.w	8002996 <USBD_LL_SOF>

080030d2 <HAL_PCD_ResetCallback>:
{
 80030d2:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80030d4:	7983      	ldrb	r3, [r0, #6]
{
 80030d6:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d001      	beq.n	80030e0 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80030dc:	f7fd f8d2 	bl	8000284 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80030e0:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 80030e4:	2101      	movs	r1, #1
 80030e6:	f7ff fc40 	bl	800296a <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80030ea:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 80030ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80030f2:	f7ff bc13 	b.w	800291c <USBD_LL_Reset>
	...

080030f8 <HAL_PCD_SuspendCallback>:
{
 80030f8:	b510      	push	{r4, lr}
 80030fa:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80030fc:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8003100:	f7ff fc36 	bl	8002970 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8003104:	7aa3      	ldrb	r3, [r4, #10]
 8003106:	b123      	cbz	r3, 8003112 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003108:	4a02      	ldr	r2, [pc, #8]	@ (8003114 <HAL_PCD_SuspendCallback+0x1c>)
 800310a:	6913      	ldr	r3, [r2, #16]
 800310c:	f043 0306 	orr.w	r3, r3, #6
 8003110:	6113      	str	r3, [r2, #16]
}
 8003112:	bd10      	pop	{r4, pc}
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003118:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800311c:	f7ff bc31 	b.w	8002982 <USBD_LL_Resume>

08003120 <USBD_LL_Init>:
{
 8003120:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 8003122:	4b1d      	ldr	r3, [pc, #116]	@ (8003198 <USBD_LL_Init+0x78>)
{
 8003124:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003126:	481d      	ldr	r0, [pc, #116]	@ (800319c <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8003128:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800312a:	2308      	movs	r3, #8
 800312c:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800312e:	2302      	movs	r3, #2
 8003130:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003132:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003134:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8003138:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800313c:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800313e:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003140:	f7fd fae2 	bl	8000708 <HAL_PCD_Init>
 8003144:	b108      	cbz	r0, 800314a <USBD_LL_Init+0x2a>
    Error_Handler( );
 8003146:	f7fd f89d 	bl	8000284 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800314a:	2200      	movs	r2, #0
 800314c:	2318      	movs	r3, #24
 800314e:	4611      	mov	r1, r2
 8003150:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003154:	f7fe f963 	bl	800141e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003158:	2358      	movs	r3, #88	@ 0x58
 800315a:	2200      	movs	r2, #0
 800315c:	2180      	movs	r1, #128	@ 0x80
 800315e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003162:	f7fe f95c 	bl	800141e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8003166:	23c0      	movs	r3, #192	@ 0xc0
 8003168:	2200      	movs	r2, #0
 800316a:	2181      	movs	r1, #129	@ 0x81
 800316c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003170:	f7fe f955 	bl	800141e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8003174:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003178:	2200      	movs	r2, #0
 800317a:	2101      	movs	r1, #1
 800317c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003180:	f7fe f94d 	bl	800141e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8003184:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003188:	2200      	movs	r2, #0
 800318a:	2182      	movs	r1, #130	@ 0x82
 800318c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003190:	f7fe f945 	bl	800141e <HAL_PCDEx_PMAConfig>
}
 8003194:	2000      	movs	r0, #0
 8003196:	bd10      	pop	{r4, pc}
 8003198:	40005c00 	.word	0x40005c00
 800319c:	20000c8c 	.word	0x20000c8c

080031a0 <USBD_LL_Start>:
{
 80031a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80031a2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80031a6:	f7fd fb12 	bl	80007ce <HAL_PCD_Start>
}
 80031aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80031ae:	f7ff bf4f 	b.w	8003050 <USBD_Get_USB_Status>

080031b2 <USBD_LL_OpenEP>:
{
 80031b2:	b510      	push	{r4, lr}
 80031b4:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80031b6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 80031ba:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80031bc:	4623      	mov	r3, r4
 80031be:	f7fe f837 	bl	8001230 <HAL_PCD_EP_Open>
}
 80031c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80031c6:	f7ff bf43 	b.w	8003050 <USBD_Get_USB_Status>

080031ca <USBD_LL_CloseEP>:
{
 80031ca:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80031cc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80031d0:	f7fe f85e 	bl	8001290 <HAL_PCD_EP_Close>
}
 80031d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80031d8:	f7ff bf3a 	b.w	8003050 <USBD_Get_USB_Status>

080031dc <USBD_LL_StallEP>:
{
 80031dc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80031de:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80031e2:	f7fe f8b4 	bl	800134e <HAL_PCD_EP_SetStall>
}
 80031e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80031ea:	f7ff bf31 	b.w	8003050 <USBD_Get_USB_Status>

080031ee <USBD_LL_ClearStallEP>:
{
 80031ee:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80031f0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80031f4:	f7fe f8e1 	bl	80013ba <HAL_PCD_EP_ClrStall>
}
 80031f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80031fc:	f7ff bf28 	b.w	8003050 <USBD_Get_USB_Status>

08003200 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003200:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 8003202:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003206:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800320a:	bf1b      	ittet	ne
 800320c:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 8003210:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003214:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003218:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800321a:	bf08      	it	eq
 800321c:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 8003220:	4770      	bx	lr

08003222 <USBD_LL_SetUSBAddress>:
{
 8003222:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003224:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8003228:	f7fd faea 	bl	8000800 <HAL_PCD_SetAddress>
}
 800322c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003230:	f7ff bf0e 	b.w	8003050 <USBD_Get_USB_Status>

08003234 <USBD_LL_Transmit>:
{
 8003234:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003236:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800323a:	f7fe f870 	bl	800131e <HAL_PCD_EP_Transmit>
}
 800323e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003242:	f7ff bf05 	b.w	8003050 <USBD_Get_USB_Status>

08003246 <USBD_LL_PrepareReceive>:
{
 8003246:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003248:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800324c:	f7fe f848 	bl	80012e0 <HAL_PCD_EP_Receive>
}
 8003250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003254:	f7ff befc 	b.w	8003050 <USBD_Get_USB_Status>

08003258 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003258:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800325c:	f7fe b857 	b.w	800130e <HAL_PCD_EP_GetRxCount>

08003260 <USBD_static_malloc>:
}
 8003260:	4800      	ldr	r0, [pc, #0]	@ (8003264 <USBD_static_malloc+0x4>)
 8003262:	4770      	bx	lr
 8003264:	20000a6c 	.word	0x20000a6c

08003268 <USBD_static_free>:
}
 8003268:	4770      	bx	lr

0800326a <HAL_PCDEx_SetConnectionState>:
}
 800326a:	4770      	bx	lr

0800326c <main>:


#include "main.h"

int main(void)
{
 800326c:	b508      	push	{r3, lr}
	hwInit();
 800326e:	f7fd f8a3 	bl	80003b8 <hwInit>
	apInit();
 8003272:	f7fc ff73 	bl	800015c <apInit>

	apMain();
 8003276:	f7fc ff73 	bl	8000160 <apMain>

	return 0;

}
 800327a:	2000      	movs	r0, #0
 800327c:	bd08      	pop	{r3, pc}

0800327e <memset>:
 800327e:	4603      	mov	r3, r0
 8003280:	4402      	add	r2, r0
 8003282:	4293      	cmp	r3, r2
 8003284:	d100      	bne.n	8003288 <memset+0xa>
 8003286:	4770      	bx	lr
 8003288:	f803 1b01 	strb.w	r1, [r3], #1
 800328c:	e7f9      	b.n	8003282 <memset+0x4>
	...

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	2600      	movs	r6, #0
 8003294:	4d0c      	ldr	r5, [pc, #48]	@ (80032c8 <__libc_init_array+0x38>)
 8003296:	4c0d      	ldr	r4, [pc, #52]	@ (80032cc <__libc_init_array+0x3c>)
 8003298:	1b64      	subs	r4, r4, r5
 800329a:	10a4      	asrs	r4, r4, #2
 800329c:	42a6      	cmp	r6, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	f000 f81a 	bl	80032d8 <_init>
 80032a4:	2600      	movs	r6, #0
 80032a6:	4d0a      	ldr	r5, [pc, #40]	@ (80032d0 <__libc_init_array+0x40>)
 80032a8:	4c0a      	ldr	r4, [pc, #40]	@ (80032d4 <__libc_init_array+0x44>)
 80032aa:	1b64      	subs	r4, r4, r5
 80032ac:	10a4      	asrs	r4, r4, #2
 80032ae:	42a6      	cmp	r6, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b8:	4798      	blx	r3
 80032ba:	3601      	adds	r6, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c2:	4798      	blx	r3
 80032c4:	3601      	adds	r6, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	08003364 	.word	0x08003364
 80032cc:	08003364 	.word	0x08003364
 80032d0:	08003364 	.word	0x08003364
 80032d4:	08003368 	.word	0x08003368

080032d8 <_init>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	bf00      	nop
 80032dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032de:	bc08      	pop	{r3}
 80032e0:	469e      	mov	lr, r3
 80032e2:	4770      	bx	lr

080032e4 <_fini>:
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e6:	bf00      	nop
 80032e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ea:	bc08      	pop	{r3}
 80032ec:	469e      	mov	lr, r3
 80032ee:	4770      	bx	lr
